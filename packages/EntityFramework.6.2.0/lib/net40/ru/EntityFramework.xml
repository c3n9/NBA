<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>EntityFramework</name>
  </assembly>
  <members>
    <member name="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute">
      <summary>Представляет атрибут, который помещается на свойство для указания на то, что столбец базы данных, с которым сопоставлено это свойство, имеет индекс.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.#ctor">
      <summary>Инициализирует новый экземпляр <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute" /> для индекса, который будет назван в соответствии с соглашением без указания порядкового номера столбца, кластеризации и уникальности.</summary>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute" /> для индекса с данным именем и без указания порядкового номера столбца, кластеризации и уникальности.</summary>
      <param name="name">Имя индекса.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.#ctor(System.String,System.Int32)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute" /> для индекса с данным именем и порядковым номером, но без указания кластеризации и уникальности.</summary>
      <param name="name">Имя индекса.</param>
      <param name="order">Число, которое будет использоваться для определения порядка следования столбцов для индексов, состоящих из нескольких столбцов.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.Equals(System.ComponentModel.DataAnnotations.Schema.IndexAttribute)">
      <summary>Определяет, указаны ли в этом атрибуте то же имя и конфигурация, что и в данном атрибуте.</summary>
      <returns>Если другой объект равен данному объекту, значение true; в противном случае — false.</returns>
      <param name="other">Атрибут для сравнения.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.Equals(System.Object)">
      <summary>Определяет, указаны ли в этом атрибуте то же имя и конфигурация, что и в данном атрибуте.</summary>
      <returns>Если другой объект равен данному объекту, значение true; в противном случае — false.</returns>
      <param name="obj">Атрибут для сравнения.</param>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.GetHashCode">
      <summary>Возвращает хэш-код данного экземпляра.</summary>
      <returns>Хэш-код данного экземпляра.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsClustered">
      <summary>Получает или задает значение, чтобы указать определяется ли индекс как кластерный.</summary>
      <returns>Значение true, если индекс определяется как кластерный; в противном случае — false.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsClusteredConfigured">
      <summary>Получает или задает значение, указывающее, что для <see cref="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsClustered" /> было задано значение.</summary>
      <returns>Значение true, если для <see cref="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsClustered" /> задано значение; в противном случае — false.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsUnique">
      <summary>Получает или задает значение, указывающее, является ли индекс уникальным.</summary>
      <returns>Значение true, если индекс уникальный; в против ном случае — false.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsUniqueConfigured">
      <summary>Получает или задает значение, указывающее, что для <see cref="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsUnique" /> было задано значение.</summary>
      <returns>Значение true, если для <see cref="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.IsUnique" /> задано значение; в противном случае — false.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.Name">
      <summary>Получает или задает имя схемы.</summary>
      <returns>Имя индекса.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.Order">
      <summary>Получает или задает число, определяющее порядок сортировки столбцов в многостолбцовом индексе.Это будет значение -1, если порядковый номер столбца не указан.</summary>
      <returns>Число, определяющее порядок сортировки столбцов для многостолбцовых индексов, или значение "-1", если порядок сортировки столбцов не задан.</returns>
    </member>
    <member name="M:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.ToString">
      <summary>Возвращает строковое представление этого экземпляра.</summary>
      <returns>Строковое представление этого экземпляра.</returns>
    </member>
    <member name="P:System.ComponentModel.DataAnnotations.Schema.IndexAttribute.TypeId">
      <summary>Получает или задает новый идентификатор для каждого экземпляра объекта, чтобы дескрипторы типов не пытались объединить все экземпляры IndexAttribute в один экземпляр.</summary>
      <returns>Новый идентификатор для каждого экземпляра объекта.</returns>
    </member>
    <member name="T:System.Data.Entity.CreateDatabaseIfNotExists`1">
      <summary>Реализация интерфейса IDatabaseInitializer, которая повторно создает и (необязательно) заполняет начальными значениями базу данных, если она не существует.Чтобы заполнить базу данных начальными значениями, создайте производный класс и переопределите метод Seed.</summary>
      <typeparam name="TContext"> Тип контекста. </typeparam>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.InitializeDatabase(`0)">
      <summary>     Выполняет стратегию инициализации базы данных для заданного контекста. </summary>
      <param name="context"> Контекст. </param>
    </member>
    <member name="M:System.Data.Entity.CreateDatabaseIfNotExists`1.Seed(`0)">
      <summary>Метод должен быть переопределен для фактического добавления данных в контекст для заполнения начальными значениями.Реализация по умолчанию не выполняет никаких действий.</summary>
      <param name="context"> Контекст для заполнения начальными значениями. </param>
    </member>
    <member name="T:System.Data.Entity.Database">
      <summary>Экземпляр этого класса получается из объекта <see cref="T:System.Data.Entity.DbContext" /> и может быть использован для управления фактической базой данных, поддерживающей объект DbContext или соединение.В частности, поддерживается создание, удаление и проверка наличия базы данных.Обратите внимание, что удаление и проверку существования базы данных можно выполнять с помощью одного соединения (т. е.без полного контекста) посредством статических методов этого класса.</summary>
    </member>
    <member name="M:System.Data.Entity.Database.BeginTransaction">
      <summary>Запускает транзакцию в основном подключении хранилища</summary>
      <returns>доступ размещения объекта <see cref="T:System.Data.Entity.DbContextTransaction" /> к объекту транзакции базового хранилища</returns>
    </member>
    <member name="M:System.Data.Entity.Database.BeginTransaction(System.Data.IsolationLevel)">
      <summary>Запускает транзакцию в основном подключении хранилища, используя указанный уровень изоляции</summary>
      <returns>доступ размещения объекта <see cref="T:System.Data.Entity.DbContextTransaction" /> к объекту транзакции базового хранилища</returns>
      <param name="isolationLevel">Уровень изоляции базы данных, на котором будет создана транзакция базового хранилища</param>
    </member>
    <member name="P:System.Data.Entity.Database.CommandTimeout">
      <summary>Возвращает или задает значение времени ожидания (в секундах) для всех операций контекста.Заданное по умолчанию значение NULL указывает, что будет использоваться значение по умолчанию базового поставщика.</summary>
      <returns>Время ожидания (в секундах) или значение NULL для использования поставщика по умолчанию.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.CompatibleWithModel(System.Boolean)">
      <summary>Проверяет, совместима ли база данных с текущей моделью Code First.</summary>
      <returns>Значение true, если хэш модели в контексте и базе данных совпадают. В противном случае — значение false.</returns>
      <param name="throwIfNoMetadata">Если задано значение true, то возникает исключение при отсутствии в базе данных метаданных модели.Если задано значение false, метод возвращает значение true в случае, если метаданные не обнаружены.</param>
    </member>
    <member name="P:System.Data.Entity.Database.Connection">
      <summary>Возвращает соединение, используемое данным контекстом.Это может привести к созданию соединения, если оно еще не установлено.</summary>
    </member>
    <member name="M:System.Data.Entity.Database.Create">
      <summary>Создает новую базу данных на сервере базы данных для модели, определенной в поддерживающем контексте.Учтите, что вызов этого метода до выполнения стратегии инициализации базы данных не позволит в дальнейшем выполнить эту стратегию.</summary>
    </member>
    <member name="M:System.Data.Entity.Database.CreateIfNotExists">
      <summary>Создает новую базу данных на сервере базы данных для модели, определенной в поддерживающем контексте, но только если на сервере пока не имеется базы данных с тем же именем.</summary>
      <returns>Значение true, если база данных не существовала и была создана. В противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Database.CurrentTransaction">
      <summary>Возвращает транзакцию, в которой указано основное подключение к хранилищу.Может иметь значение null.</summary>
    </member>
    <member name="P:System.Data.Entity.Database.DefaultConnectionFactory">
      <summary>Фабрика соединений, используемая при создании объекта <see cref="T:System.Data.Common.DbConnection" /> из имени базы данных или строки подключения.</summary>
    </member>
    <member name="M:System.Data.Entity.Database.Delete">
      <summary>Удаляет базу данных с сервера базы данных, если она существует. В противном случае не делает ничего.Вызов этого метода вне инициализатора помечает базу данных как неинициализированную.Это означает, что при повторной попытке использования базы данных после ее удаления любой установленный инициализатор запустится снова и, скорее всего, попытается снова автоматически создать базу данных.</summary>
      <returns>Значение true, если база данных существовала и была удалена. В противном случае — значение false.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Delete(System.Data.Common.DbConnection)">
      <summary>Удаляет базу данных с сервера базы данных, если она существует. В противном случае не делает ничего.</summary>
      <returns>Значение true, если база данных существовала и была удалена. В противном случае — значение false.</returns>
      <param name="existingConnection">Существующее соединение с базой данных.</param>
    </member>
    <member name="M:System.Data.Entity.Database.Delete(System.String)">
      <summary>Удаляет базу данных с сервера базы данных, если она существует. В противном случае не делает ничего.Соединение с базой данных создается при помощи имени базы данных или строки подключения способом, описанным в документации по классу <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>Значение true, если база данных существовала и была удалена. В противном случае — значение false.</returns>
      <param name="nameOrConnectionString">Имя базы данных или строка подключения к базе данных.</param>
    </member>
    <member name="M:System.Data.Entity.Database.Equals(System.Object)">
      <summary>Определяет, равна ли заданная база данных текущей.</summary>
      <returns>Значение true, если указанная база данных эквивалентна текущей базе данных; в противном случае значение false.</returns>
      <param name="obj">База данных для сравнения с текущим объектом.</param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior,System.String,System.Object[])">
      <summary>Выполняет указанную команду DDL/DML применительно к базе данных.Как и для любого API, принимающего SQL, важно параметризовать все пользовательские входные данные для защиты от атаки путем внедрения кода SQL.Можно включать в строку SQL-запроса местозаполнители параметров и затем предоставлять значения параметров как дополнительные аргументы.Все предоставляемые значения параметров будут автоматически преобразовываться в DbParameter.context.Database.ExecuteSqlCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); также можно создать DbParameter и предоставить его в SqlQuery.Это позволяет использовать в строке запроса SQL именованные параметры.context.Database.ExecuteSqlCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Результат, возвращаемый базой данных после выполнения команды.</returns>
      <param name="transactionalBehavior">Контролирует создание транзакции для этой команды.</param>
      <param name="sql">Строка команды.</param>
      <param name="parameters">Параметры, подставляемые в строку команды.</param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommand(System.String,System.Object[])">
      <summary>Выполняет указанную команду DDL/DML применительно к базе данных.Как и для любого API, принимающего SQL, важно параметризовать все пользовательские входные данные для защиты от атаки путем внедрения кода SQL.Можно включать в строку SQL-запроса местозаполнители параметров и затем предоставлять значения параметров как дополнительные аргументы.Все предоставляемые значения параметров будут автоматически преобразовываться в DbParameter.context.Database.ExecuteSqlCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); также можно создать DbParameter и предоставить его в SqlQuery.Это позволяет использовать в строке запроса SQL именованные параметры.context.Database.ExecuteSqlCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Результат, возвращаемый базой данных после выполнения команды.</returns>
      <param name="sql">Строка команды.</param>
      <param name="parameters">Параметры, подставляемые в строку команды.</param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommandAsync(System.Data.Entity.TransactionalBehavior,System.String,System.Object[])">
      <summary>Асинхронно выполняет указанную команду DDL/DML применительно к базе данных.Как и для любого API, принимающего SQL, важно параметризовать все пользовательские входные данные для защиты от атаки путем внедрения кода SQL.Можно включать в строку SQL-запроса местозаполнители параметров и затем предоставлять значения параметров как дополнительные аргументы.Все предоставляемые значения параметров будут автоматически преобразовываться в DbParameter.context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); также можно создать DbParameter и предоставить его в SqlQuery.Это позволяет использовать в строке запроса SQL именованные параметры.context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит результат, возвращаемый базой данных после выполнения команды.</returns>
      <param name="transactionalBehavior">Контролирует создание транзакции для этой команды.</param>
      <param name="sql">Строка команды.</param>
      <param name="parameters">Параметры, подставляемые в строку команды.</param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommandAsync(System.Data.Entity.TransactionalBehavior,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>Асинхронно выполняет указанную команду DDL/DML применительно к базе данных.Как и для любого API, принимающего SQL, важно параметризовать все пользовательские входные данные для защиты от атаки путем внедрения кода SQL.Можно включать в строку SQL-запроса местозаполнители параметров и затем предоставлять значения параметров как дополнительные аргументы.Все предоставляемые значения параметров будут автоматически преобразовываться в DbParameter.context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); также можно создать DbParameter и предоставить его в SqlQuery.Это позволяет использовать в строке запроса SQL именованные параметры.context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит результат, возвращаемый базой данных после выполнения команды.</returns>
      <param name="transactionalBehavior">Контролирует создание транзакции для этой команды.</param>
      <param name="sql">Строка команды.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <param name="parameters">Параметры, подставляемые в строку команды.</param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommandAsync(System.String,System.Object[])">
      <summary>Асинхронно выполняет указанную команду DDL/DML применительно к базе данных.Как и для любого API, принимающего SQL, важно параметризовать все пользовательские входные данные для защиты от атаки путем внедрения кода SQL.Можно включать в строку SQL-запроса местозаполнители параметров и затем предоставлять значения параметров как дополнительные аргументы.Все предоставляемые значения параметров будут автоматически преобразовываться в DbParameter.context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); также можно создать DbParameter и предоставить его в SqlQuery.Это позволяет использовать в строке запроса SQL именованные параметры.context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит результат, возвращаемый базой данных после выполнения команды.</returns>
      <param name="sql">Строка команды.</param>
      <param name="parameters">Параметры, подставляемые в строку команды.</param>
    </member>
    <member name="M:System.Data.Entity.Database.ExecuteSqlCommandAsync(System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>Асинхронно выполняет указанную команду DDL/DML применительно к базе данных.Как и для любого API, принимающего SQL, важно параметризовать все пользовательские входные данные для защиты от атаки путем внедрения кода SQL.Можно включать в строку SQL-запроса местозаполнители параметров и затем предоставлять значения параметров как дополнительные аргументы.Все предоставляемые значения параметров будут автоматически преобразовываться в DbParameter.context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); также можно создать DbParameter и предоставить его в SqlQuery.Это позволяет использовать в строке запроса SQL именованные параметры.context.Database.ExecuteSqlCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит результат, возвращаемый базой данных после выполнения команды.</returns>
      <param name="sql">Строка команды.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <param name="parameters">Параметры, подставляемые в строку команды.</param>
    </member>
    <member name="M:System.Data.Entity.Database.Exists">
      <summary>Проверяет, существует ли на сервере база данных.</summary>
      <returns>Значение true, если база данных существует. В противном случае — значение false.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Exists(System.Data.Common.DbConnection)">
      <summary>Проверяет, существует ли на сервере база данных.</summary>
      <returns>Значение true, если база данных существует. В противном случае — значение false.</returns>
      <param name="existingConnection">Существующее соединение с базой данных.</param>
    </member>
    <member name="M:System.Data.Entity.Database.Exists(System.String)">
      <summary>Проверяет, существует ли на сервере база данных.Соединение с базой данных создается при помощи имени базы данных или строки подключения способом, описанным в документации по классу <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>Значение true, если база данных существует. В противном случае — значение false.</returns>
      <param name="nameOrConnectionString">Имя базы данных или строка подключения к базе данных.</param>
    </member>
    <member name="M:System.Data.Entity.Database.GetHashCode">
      <summary>Возвращает хэш-функцию для этой базы данных.</summary>
      <returns>Хэш-функция для этой базы данных.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.GetType">
      <summary>Возвращает объект <see cref="T:System.Type" /> для текущего экземпляра.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.Initialize(System.Boolean)">
      <summary>Запускает интерфейс <see cref="T:System.Data.Entity.IDatabaseInitializer`1" />, зарегистрированный в данном контексте.Если параметр «force» имеет значение true, инициализатор запускается независимо от того, запускался ли он уже прежде.Это может оказаться полезным, если база данных была удалена во время выполнения приложения и должна быть повторно инициализирована.Если параметр «force» имеет значение false, инициализатор выполняется, только если не выполнялся ранее для этого контекста, модели и соединения в данном домене приложения.Этот метод обычно используется, если необходимо гарантировать создание базы данных и ее заполнение первоначальными данными до запуска определенной операции (при этом необходима быстрая реакция), например если операция является частью транзакции.</summary>
      <param name="force">Если этот параметр имеет значение true, инициализатор выполняется, даже если уже был выполнен.</param>
    </member>
    <member name="P:System.Data.Entity.Database.Log">
      <summary>Задайте это свойство для регистрации SQL, созданного <see cref="T:System.Data.Entity.DbContext" /> для заданного делегата.Например, чтобы войти на консоль, задайте для этого свойства значение <see cref="M:System.Console.Write(System.String)" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Database.SetInitializer``1(System.Data.Entity.IDatabaseInitializer{``0})">
      <summary>Устанавливает инициализатор базы данных для данного типа контекста.Инициализатор базы данных вызывается, когда заданный тип <see cref="T:System.Data.Entity.DbContext" /> используется для доступа к базе данных в первый раз.Стратегией по умолчанию для контекстов Code First является экземпляр <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1" />.</summary>
      <param name="strategy">Инициализатор или значение NULL используются для отключения инициализации для данного типа контекста.</param>
      <typeparam name="TContext">Тип контекста.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Database.SqlQuery``1(System.String,System.Object[])">
      <summary>Создает необработанный SQL-запрос, возвращающий элементы заданного универсального типа.Типом может быть любой тип, содержащий свойства, совпадающие с именами столбцов, возвращаемых запросом, либо простой тип-примитив.Тип не обязательно должен быть типом сущности.Результаты этого запроса никогда не отслеживаются контекстом, даже если возвращаемый объект имеет тип сущности.Используйте метод <see cref="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])" /> для возврата сущностей, отслеживаемых контекстом.Как и для любого API, принимающего SQL, важно параметризовать все пользовательские входные данные для защиты от атаки путем внедрения кода SQL.Можно включать в строку SQL-запроса местозаполнители параметров и затем предоставлять значения параметров как дополнительные аргументы.Все предоставляемые значения параметров будут автоматически преобразовываться в DbParameter.context.Database.SqlQuery&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); также можно создать DbParameter и передать его в SqlQuery.Это позволяет использовать в строке запроса SQL именованные параметры.context.Database.SqlQuery&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Infrastructure.DbRawSqlQuery`1" />, выполняющий запрос при перечислении.</returns>
      <param name="sql">Строка SQL-запроса.</param>
      <param name="parameters">Параметры, подставляемые в строку SQL-запроса.Если используются выходные параметры, их значения не будут доступны до полного прочтения результатов.Это происходит вследствие базового поведения DbDataReader, дополнительные сведения см. на сайте http://go.microsoft.com/fwlink/?LinkID=398589.</param>
      <typeparam name="TElement">Тип объекта, возвращаемого запросом.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Database.SqlQuery(System.Type,System.String,System.Object[])">
      <summary>Создает необработанный SQL-запрос, возвращающий элементы заданного типа.Типом может быть любой тип, содержащий свойства, совпадающие с именами столбцов, возвращаемых запросом, либо простой тип-примитив.Тип не обязательно должен быть типом сущности.Результаты этого запроса никогда не отслеживаются контекстом, даже если возвращаемый объект имеет тип сущности.Используйте метод <see cref="M:System.Data.Entity.DbSet.SqlQuery(System.String,System.Object[])" /> для возврата сущностей, отслеживаемых контекстом.Как и для любого API, принимающего SQL, важно параметризовать все пользовательские входные данные для защиты от атаки путем внедрения кода SQL.Можно включать в строку SQL-запроса местозаполнители параметров и затем предоставлять значения параметров как дополнительные аргументы.Все предоставляемые значения параметров будут автоматически преобразовываться в DbParameter.context.Database.SqlQuery(typeof(Post), "SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); также можно создать DbParameter и предоставить его в SqlQuery.Это позволяет использовать в строке запроса SQL именованные параметры.context.Database.SqlQuery(typeof(Post), "SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Infrastructure.DbRawSqlQuery" />, выполняющий запрос при перечислении.</returns>
      <param name="elementType">Тип объекта, возвращаемого запросом.</param>
      <param name="sql">Строка SQL-запроса.</param>
      <param name="parameters">Параметры, подставляемые в строку SQL-запроса.Если используются выходные параметры, их значения не будут доступны до полного прочтения результатов.Это происходит вследствие базового поведения DbDataReader, дополнительные сведения см. на сайте http://go.microsoft.com/fwlink/?LinkID=398589.</param>
    </member>
    <member name="M:System.Data.Entity.Database.ToString">
      <summary>Возвращает строковое представление базы данных.</summary>
      <returns>Строковое представление базы данных.</returns>
    </member>
    <member name="M:System.Data.Entity.Database.UseTransaction(System.Data.Common.DbTransaction)">
      <summary>Позволяет передавать в базу данных транзакции, созданные за пределами объекта <see cref="T:System.Data.Entity.Database" />, если необходимо выполнять команды Entity Framework в пределах этой внешней транзакции.Также можно передавать значения NULL для очистки набора знаний платформы .NET Framework этой транзакции.</summary>
      <param name="transaction">внешнюю транзакцию</param>
      <exception cref="T:System.InvalidOperationException">Создается, если транзакция уже выполнена</exception>
      <exception cref="T:System.InvalidOperationException">Возникает, если соединение, связанное с объектом <see cref="T:System.Data.Entity.Database" />, уже указано в транзакции <see cref="T:System.Transactions.TransactionScope" /></exception>
      <exception cref="T:System.InvalidOperationException">Возникает, если соединение, связанное с объектом <see cref="T:System.Data.Entity.Database" />, уже участвует в транзакции</exception>
      <exception cref="T:System.InvalidOperationException">Создается, если соединение, связанное с транзакцией, не соответствует соединению Entity Framework</exception>
    </member>
    <member name="T:System.Data.Entity.DbConfiguration">
      <summary>Класс, производный от этого класса, можно поместить в той же сборке, что и класс, производный от <see cref="T:System.Data.Entity.DbContext" />, чтобы определить конфигурацию платформы Entity Framework для приложения.Конфигурация устанавливается путем вызова защищенных методов и указания защищенных свойств данного класса в конструкторе производного типа.Используемый тип также можно зарегистрировать в файле конфигурации приложения.Дополнительные сведения о конфигурации платформы Entity Framework см. по ссылке http://go.microsoft.com/fwlink/?LinkId=260883.</summary>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.DbConfiguration" />.</summary>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.AddDefaultResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>Добавляет экземпляр <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> в цепочку обязанностей сопоставителей, которые используются для разрешения зависимостей, необходимых платформе Entity Framework.</summary>
      <param name="resolver">Добавляемый сопоставитель.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.AddDependencyResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>Добавляет экземпляр <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> в цепочку обязанностей сопоставителей, которые используются для разрешения зависимостей, необходимых платформе Entity Framework.</summary>
      <param name="resolver">Добавляемый сопоставитель.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.AddInterceptor(System.Data.Entity.Infrastructure.Interception.IDbInterceptor)">
      <summary>Регистрирует <see cref="T:System.Data.Entity.Infrastructure.Interception.IDbInterceptor" /> при запуске приложения.Обратите внимание, что перехватчики можно также добавлять и удалять в любое время с помощью метода <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterception" />.</summary>
      <param name="interceptor">Регистрируемый перехватчик.</param>
    </member>
    <member name="P:System.Data.Entity.DbConfiguration.DependencyResolver">
      <summary>Возвращает объект <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" />, который используется для разрешения зависимостей службы в Entity Framework.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" />, который используется для разрешения зависимостей службы в Entity Framework.</returns>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.Equals(System.Object)">
      <summary>Указывает, равен ли данный экземпляр конкретному объекту.</summary>
      <returns>Значение true, если этот экземпляр эквивалентен определенному объекту; в противном случае значение false.</returns>
      <param name="obj">Сравниваемый объект.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.GetHashCode">
      <summary>Получает хэш-код, связанный с этим экземпляром.</summary>
      <returns>Хэш-код, связанный с этим экземпляром.</returns>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.GetType">
      <summary>Возвращает объект <see cref="T:System.Type" /> для текущего экземпляра.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.LoadConfiguration(System.Reflection.Assembly)">
      <summary>Пытается обнаружить и загрузить <see cref="T:System.Data.Entity.DbConfiguration" /> из данной сборки.Метод позволяет приложению убедиться, что в домен приложения загружается верная конфигурация.Приложение должно использовать метод, прежде чем обращаться к свойству <see cref="P:System.Data.Entity.DbConfiguration.DependencyResolver" />.Если приложению известен используемый тип <see cref="T:System.Data.Entity.DbContext" />, следует использовать метод <see cref="M:System.Data.Entity.DbConfiguration.LoadConfiguration(System.Type)" />, поскольку он увеличивает шансы обнаружить верную конфигурацию.</summary>
      <param name="assemblyHint">Сборка <see cref="T:System.Reflection.Assembly" />, используемая для обнаружения конфигурации.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.LoadConfiguration(System.Type)">
      <summary>Пытается обнаружить и загрузить конфигурацию <see cref="T:System.Data.Entity.DbConfiguration" />, связанную с данным типом <see cref="T:System.Data.Entity.DbContext" />.Метод позволяет приложению убедиться, что в домен приложения загружается верная конфигурация.Приложение должно использовать метод, прежде чем обращаться к свойству <see cref="P:System.Data.Entity.DbConfiguration.DependencyResolver" />.</summary>
      <param name="contextType">Тип <see cref="T:System.Data.Entity.DbContext" />, который следует использовать для обнаружения конфигурации.</param>
    </member>
    <member name="E:System.Data.Entity.DbConfiguration.Loaded">
      <summary>Имеет место в процессе инициализации EF после создания класса DbConfiguration и перед блокировкой для использования. </summary>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.MemberwiseClone">
      <summary>Создает неполную копию текущего объекта <see cref="T:System.Object" />.</summary>
      <returns>Неполная копия объекта <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetConfiguration(System.Data.Entity.DbConfiguration)">
      <summary>Одноэлементный экземпляр <see cref="T:System.Data.Entity.DbConfiguration" /> для домена приложения.Может быть задан при запуске приложения до использования функций платформы Entity Framework. После создания обращение выполняется в режиме только для чтения.</summary>
      <param name="configuration">Экземпляр класса <see cref="T:System.Data.Entity.DbConfiguration" />.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetContextFactory``1(System.Func{``0})">
      <summary>Вызов этого метода из конструктора класса, производного от класса <see cref="T:System.Data.Entity.DbConfiguration" />, позволяет задать фабрику, чтобы контекст <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" /> мог создавать экземпляры контекста, у которого нет открытого конструктора без параметров.</summary>
      <param name="factory">Делегат, используемый для создания экземпляров контекста.</param>
      <typeparam name="TContext">Тип контекста, для которого следует использовать фабрику.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetContextFactory(System.Type,System.Func{System.Data.Entity.DbContext})">
      <summary>Вызов этого метода из конструктора класса, производного от класса <see cref="T:System.Data.Entity.DbConfiguration" />, позволяет задать фабрику, чтобы контекст <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" /> мог создавать экземпляры контекста, у которого нет открытого конструктора без параметров.</summary>
      <param name="contextType">Тип контекста, для которого следует использовать фабрику.</param>
      <param name="factory">Делегат, используемый для создания экземпляров контекста.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetDatabaseInitializer``1(System.Data.Entity.IDatabaseInitializer{``0})">
      <summary>Вызов этого метода из конструктора класса, производного от <see cref="T:System.Data.Entity.DbConfiguration" />, позволяет задать инициализатор базы данных для указанного типа контекста.Инициализатор базы данных вызывается, когда заданный тип <see cref="T:System.Data.Entity.DbContext" /> используется для доступа к базе данных в первый раз.Стратегией по умолчанию для контекстов Code First является экземпляр <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1" />.</summary>
      <param name="initializer">Инициализатор или значение NULL используются для отключения инициализации для данного типа контекста.</param>
      <typeparam name="TContext">Тип контекста.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetDatabaseLogFormatter(System.Func{System.Data.Entity.DbContext,System.Action{System.String},System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter})">
      <summary>Вызов этого метода из конструктора класса, производного от <see cref="T:System.Data.Entity.DbConfiguration" />, позволяет задать фабрику для типа <see cref="T:System.Data.Entity.Infrastructure.Interception.DatabaseLogFormatter" /> для использования с <see cref="P:System.Data.Entity.Database.Log" />.</summary>
      <param name="logFormatterFactory">Делегат, который создаст экземпляры модуля форматирования.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetDefaultConnectionFactory(System.Data.Entity.Infrastructure.IDbConnectionFactory)">
      <summary>Задает объект <see cref="T:System.Data.Entity.Infrastructure.IDbConnectionFactory" />, используемый для создания подключений соглашением, если строка подключения или подключение не заданы или не могут быть обнаружены контекстом <see cref="T:System.Data.Entity.DbContext" />.Обратите внимание, что фабрика соединения по умолчанию устанавливается в файле конфигурации app.config или web.config каждый раз при установке пакета EntityFramework NuGet.Как и для всех остальных параметров файла конфигурации, фабрика соединения по умолчанию, указанная в файле конфигурации, имеет более высокий приоритет, чем любые параметры, устанавливаемые этим методом.Таким образом, соответствующие параметры в файле конфигурации следует удалить, чтобы вызов метода давал результат.Вызов этого метода из конструктора класса, производного от <see cref="T:System.Data.Entity.DbConfiguration" />, позволяет изменить фабрику соединений, используемую по умолчанию.</summary>
      <param name="connectionFactory">Фабрика соединений.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetDefaultHistoryContext(System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})">
      <summary>Вызов этого метода из конструктора класса, производного от <see cref="T:System.Data.Entity.DbConfiguration" />, позволяет задать делегат <see cref="T:System.Func`3" />, который обеспечит создание контекста <see cref="T:System.Data.Entity.Migrations.History.HistoryContext" /> по умолчанию для любой конфигурации <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration" />.Эта фабрика по умолчанию будет использоваться, только если другая фабрика не задана явно в конфигурации <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration" /> и если другие фабрики не были зарегистрированы для используемого поставщика с помощью метода <see cref="M:System.Data.Entity.DbConfiguration.SetHistoryContext(System.String,System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})" />.</summary>
      <param name="factory">Фабрика для создания экземпляров <see cref="T:System.Data.Entity.Migrations.History.HistoryContext" /> для указанных объектов <see cref="T:System.Data.Common.DbConnection" /> и <see cref="T:System.String" />, представляющих схему по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetDefaultSpatialServices(System.Data.Entity.Spatial.DbSpatialServices)">
      <summary>Вызов этого метода из конструктора класса, производного от <see cref="T:System.Data.Entity.DbConfiguration" />, присваивает глобальный экземпляр <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" />, который будет использоваться в том случае, когда требуется пространственный поставщик, а заданный пространственный поставщик не обнаружен.Обычно пространственный поставщик, зависимый от поставщика, можно получить из реализации <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />, которая, в свою очередь, возвращается путем разрешения службы для <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> с передачей неизменяемого имени поставщика в качестве ключа.Но этот способ не будет работать для изолированных экземпляров <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> и <see cref="T:System.Data.Entity.Spatial.DbGeography" />, поскольку пространственный поставщик неизвестен.Таким образом, при создании изолированных экземпляров <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> и <see cref="T:System.Data.Entity.Spatial.DbGeography" /> всегда используется глобальный пространственный поставщик.</summary>
      <param name="spatialProvider">Пространственный поставщик.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetDefaultTransactionHandler(System.Func{System.Data.Entity.Infrastructure.TransactionHandler})">
      <summary>Вызов этого метода из конструктора класса, производного от <see cref="T:System.Data.Entity.DbConfiguration" />, позволяет зарегистрировать обработчик <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler" />.</summary>
      <param name="transactionHandlerFactory">Функция, которая возвращает новый экземпляр обработчика транзакции.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetExecutionStrategy(System.String,System.Func{System.Data.Entity.Infrastructure.IDbExecutionStrategy})">
      <summary>Вызов этого метода из конструктора класса, производного от <see cref="T:System.Data.Entity.DbConfiguration" />, позволяет зарегистрировать стратегию <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" /> для использования с поставщиком, представленным указанным неизменяемым именем.</summary>
      <param name="providerInvariantName">Неизменяемое имя поставщика ADO.NET, которое указывает тип соединения ADO.NET для данной стратегии выполнения.</param>
      <param name="getExecutionStrategy">Функция, которая возвращает новый экземпляр стратегии выполнения.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetExecutionStrategy(System.String,System.Func{System.Data.Entity.Infrastructure.IDbExecutionStrategy},System.String)">
      <summary>Вызов этого метода из конструктора класса, производного от <see cref="T:System.Data.Entity.DbConfiguration" />, позволяет зарегистрировать стратегию <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" /> для использования с поставщиком, представленным указанным неизменяемым именем для заданного имени сервера.</summary>
      <param name="providerInvariantName">Неизменяемое имя поставщика ADO.NET, которое указывает тип соединения ADO.NET для данной стратегии выполнения.</param>
      <param name="getExecutionStrategy">Функция, которая возвращает новый экземпляр стратегии выполнения.</param>
      <param name="serverName">Строка, которая будет сопоставлена с именем сервера в строке подключения.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetHistoryContext(System.String,System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})">
      <summary>Вызов этого метода из конструктора класса, производного от <see cref="T:System.Data.Entity.DbConfiguration" />, позволяет задать делегат <see cref="T:System.Func`3" />, который обеспечит создание пользовательского контекста <see cref="T:System.Data.Entity.Migrations.History.HistoryContext" /> для данного поставщика для любой конфигурации <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration" />, для которой нет явно указанной фабрики.</summary>
      <param name="providerInvariantName">Неизменяемое имя поставщика ADO.NET, для которого следует использовать данный генератор.</param>
      <param name="factory">Фабрика для создания экземпляров <see cref="T:System.Data.Entity.Migrations.History.HistoryContext" /> для указанных объектов <see cref="T:System.Data.Common.DbConnection" /> и <see cref="T:System.String" />, представляющих схему по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetManifestTokenResolver(System.Data.Entity.Infrastructure.IManifestTokenResolver)">
      <summary>Вызов этого метода из конструктора класса, производного от <see cref="T:System.Data.Entity.DbConfiguration" />, позволяет задать реализацию службы <see cref="T:System.Data.Entity.Infrastructure.IManifestTokenResolver" />, которая обеспечит получение токенов манифеста поставщика из соединений без необходимости открытия подключения.</summary>
      <param name="resolver">Сопоставитель токена манифеста.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetMetadataAnnotationSerializer(System.String,System.Func{System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer})">
      <summary>Вызов этого метода из конструктора класса, производного от <see cref="T:System.Data.Entity.DbConfiguration" />, позволяет задать фабрику для реализаций <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" />, которая обеспечит пользовательские заметки, представленные экземплярами <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> для сериализации в EDMX XML и обратно.</summary>
      <param name="annotationName">Имя пользовательской заметки, которую будет обрабатывать этот сериализатор.</param>
      <param name="serializerFactory">Делегат, который будет использован для создания экземпляров сериализатора.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetMigrationSqlGenerator(System.String,System.Func{System.Data.Entity.Migrations.Sql.MigrationSqlGenerator})">
      <summary>Вызов этого метода из конструктора класса, производного от <see cref="T:System.Data.Entity.DbConfiguration" />, позволяет зарегистрировать <see cref="T:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator" /> для использования с поставщиком, представленным указанным неизменяемым именем.</summary>
      <param name="providerInvariantName">Неизменяемое имя поставщика ADO.NET, для которого следует использовать данный генератор.</param>
      <param name="sqlGenerator">Делегат, который возвращает новый экземпляр генератора SQL при каждом вызове.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetModelCacheKey(System.Func{System.Data.Entity.DbContext,System.Data.Entity.Infrastructure.IDbModelCacheKey})">
      <summary>Вызов этого метода из конструктора класса, производного от <see cref="T:System.Data.Entity.DbConfiguration" />, позволяет задать <see cref="T:System.Func`2" /> в качестве фабрики ключа кэша модели, которая обеспечит ключ для кэширования модели изменяемого контекста <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <param name="keyFactory">Фабрика ключей.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetPluralizationService(System.Data.Entity.Infrastructure.Pluralization.IPluralizationService)">
      <summary>Вызов этого метода из конструктора класса, производного от <see cref="T:System.Data.Entity.DbConfiguration" />, позволяет задать службу преобразования во множественную форму.</summary>
      <param name="pluralizationService">Используемая служба преобразования во множественную форму.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetProviderFactory(System.String,System.Data.Common.DbProviderFactory)">
      <summary>Вызов этого метода из конструктора класса, производного от <see cref="T:System.Data.Entity.DbConfiguration" />, позволяет зарегистрировать поставщика ADO.NET.</summary>
      <param name="providerInvariantName">Неизменяемое имя поставщика ADO.NET, которое указывает тип соединения ADO.NET для поставщика.</param>
      <param name="providerFactory">Экземпляр поставщика.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetProviderFactoryResolver(System.Data.Entity.Infrastructure.IDbProviderFactoryResolver)">
      <summary>Вызов этого метода из конструктора класса, производного от класса <see cref="T:System.Data.Entity.DbConfiguration" />, позволяет задать реализацию <see cref="T:System.Data.Entity.Infrastructure.IDbProviderFactoryResolver" />, которая обеспечит получение <see cref="T:System.Data.Common.DbProviderFactory" /> из соединения <see cref="T:System.Data.Common.DbConnection" /> в том случае, когда реализации по умолчанию недостаточно.</summary>
      <param name="providerFactoryResolver">Служба фабрики поставщика.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetProviderServices(System.String,System.Data.Entity.Core.Common.DbProviderServices)">
      <summary>Вызов этого метода из конструктора класса, производного от <see cref="T:System.Data.Entity.DbConfiguration" />, позволяет зарегистрировать поставщика платформы Entity Framework.</summary>
      <param name="providerInvariantName">Неизменяемое имя поставщика ADO.NET, которое указывает тип соединения ADO.NET для поставщика.</param>
      <param name="provider">Экземпляр поставщика.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetSpatialServices(System.Data.Entity.Infrastructure.DbProviderInfo,System.Data.Entity.Spatial.DbSpatialServices)">
      <summary>Вызов этого метода из конструктора класса, производного от <see cref="T:System.Data.Entity.DbConfiguration" />, позволяет задать реализацию <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> и использовать ее для определенного поставщика и токена манифеста поставщика.</summary>
      <param name="key">Атрибут <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" />, указывающий тип соединения ADO.NET, для которого будет использован этот пространственный поставщик.</param>
      <param name="spatialProvider">Пространственный поставщик.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetSpatialServices(System.String,System.Data.Entity.Spatial.DbSpatialServices)">
      <summary>Вызов этого метода из конструктора класса, производного от <see cref="T:System.Data.Entity.DbConfiguration" />, позволяет задать реализацию <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> и использовать ее для определенного поставщика с любым токеном манифеста.</summary>
      <param name="providerInvariantName">Неизменяемое имя поставщика ADO.NET, указывающее тип соединения ADO.NET, для которого будет использоваться этот пространственный поставщик.</param>
      <param name="spatialProvider">Пространственный поставщик.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetTableExistenceChecker(System.String,System.Data.Entity.Infrastructure.TableExistenceChecker)">
      <summary>Вызов этого метода из конструктора класса, производного от <see cref="T:System.Data.Entity.DbConfiguration" />, позволяет зарегистрировать средство проверки существования таблиц баз данных для данного поставщика.</summary>
      <param name="providerInvariantName">Неизменяемое имя поставщика ADO.NET, которое указывает тип соединения ADO.NET для поставщика.</param>
      <param name="tableExistenceChecker">Используемое средство проверки существования таблиц.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetTransactionHandler(System.String,System.Func{System.Data.Entity.Infrastructure.TransactionHandler})">
      <summary>Вызов этого метода из конструктора класса, производного от <see cref="T:System.Data.Entity.DbConfiguration" />, позволяет зарегистрировать <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler" /> для использования с поставщиком, представленным указанным неизменяемым именем.</summary>
      <param name="providerInvariantName">Неизменяемое имя поставщика ADO.NET, указывающее тип соединения ADO.NET, для которого будет использоваться обработчик транзакций.</param>
      <param name="transactionHandlerFactory">Функция, которая возвращает новый экземпляр обработчика транзакции.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.SetTransactionHandler(System.String,System.Func{System.Data.Entity.Infrastructure.TransactionHandler},System.String)">
      <summary>Вызов этого метода из конструктора класса, производного от <see cref="T:System.Data.Entity.DbConfiguration" />, позволяет зарегистрировать <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler" /> для использования с поставщиком, представленным указанным неизменяемым именем для заданного имени сервера.</summary>
      <param name="providerInvariantName">Неизменяемое имя поставщика ADO.NET, указывающее тип соединения ADO.NET, для которого будет использоваться обработчик транзакций.</param>
      <param name="transactionHandlerFactory">Функция, которая возвращает новый экземпляр обработчика транзакции.</param>
      <param name="serverName">Строка, которая будет сопоставлена с именем сервера в строке подключения.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfiguration.ToString">
      <summary>Возвращает строковое представление этого экземпляра.</summary>
      <returns>Строковое представление этого экземпляра.</returns>
    </member>
    <member name="T:System.Data.Entity.DbConfigurationTypeAttribute">
      <summary>Этот атрибут можно поместить в подкласс <see cref="T:System.Data.Entity.DbContext" />, чтобы указать, что подкласс <see cref="T:System.Data.Entity.DbConfiguration" />, который представляет конфигурацию на основе кода для приложения, находится в другой сборке по отношению к типу контекста.</summary>
    </member>
    <member name="M:System.Data.Entity.DbConfigurationTypeAttribute.#ctor(System.String)">
      <summary>Указывает, что подкласс <see cref="T:System.Data.Entity.DbConfiguration" />, представленный полным именем указанной сборки, следует использовать для конфигурации на основе кода для этого приложения.</summary>
      <param name="configurationTypeName">Используемый тип — <see cref="T:System.Data.Entity.DbConfiguration" />.</param>
    </member>
    <member name="M:System.Data.Entity.DbConfigurationTypeAttribute.#ctor(System.Type)">
      <summary>Указывает, что подкласс <see cref="T:System.Data.Entity.DbConfiguration" /> следует использовать для конфигурации на основе кода для этого приложения.</summary>
      <param name="configurationType">Используемый тип — <see cref="T:System.Data.Entity.DbConfiguration" />.</param>
    </member>
    <member name="P:System.Data.Entity.DbConfigurationTypeAttribute.ConfigurationType">
      <summary>Возвращает указанный подкласс <see cref="T:System.Data.Entity.DbConfiguration" />, который должен использоваться для настройки на основе кода для этого приложения.</summary>
      <returns>Подкласс <see cref="T:System.Data.Entity.DbConfiguration" />, который должен использоваться для настройки на основе кода для этого приложения.</returns>
    </member>
    <member name="T:System.Data.Entity.DbContext">
      <summary>Экземпляр контекста DbContext представляет сочетание шаблонов единицы работы и репозитория, которое может быть использовано для запроса от базы данных и группирования изменений, которые можно затем записать обратно в хранилище одним блоком.DbContext концептуально схож с ObjectContext.</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor">
      <summary>Создает новый экземпляр контекста с использованием соглашений для создания имени базы данных,     с которой будет установлено соединение.Имя по соглашению представляет собой полное имя (пространство имен + имя класса) производного класса контекста.Как это используется при создании соединения, см. в примечаниях к классу.</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Common.DbConnection,System.Boolean)">
      <summary>Создает новый экземпляр контекста с использованием существующего соединения с базой данных.Соединение не будет освобождено при освобождении контекста, если <paramref name="contextOwnsConnection" /> является false.</summary>
      <param name="existingConnection">Существующее соединение, которое будет использоваться новым контекстом.</param>
      <param name="contextOwnsConnection">Если задано значение true, соединение освобождается при освобождении контекста. В противном случае за освобождение соединения отвечает вызывающая сторона.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.DbCompiledModel,System.Boolean)">
      <summary>Создает новый экземпляр контекста с использованием существующего соединения с базой данных и инициализирует его из заданной модели.Соединение не будет освобождено при освобождении контекста, если <paramref name="contextOwnsConnection" /> является false.</summary>
      <param name="existingConnection">Существующее соединение, которое будет использоваться новым контекстом.</param>
      <param name="model">Модель, которая будет поддерживать данный контекст.</param>
      <param name="contextOwnsConnection">Если задано значение true, соединение освобождается при освобождении контекста. В противном случае за освобождение соединения отвечает вызывающая сторона.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Entity.Core.Objects.ObjectContext,System.Boolean)">
      <summary>Создает новый экземпляр контекста на основе существующего объекта ObjectContext.</summary>
      <param name="objectContext">Существующий объект ObjectContext, который будет заключен в новый контекст.</param>
      <param name="dbContextOwnsObjectContext">Если задано значение true, ObjectContext освобождается при освобождении DbContext. В противном случае за освобождение соединения отвечает вызывающая сторона.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.Data.Entity.Infrastructure.DbCompiledModel)">
      <summary>Создает новый экземпляр контекста с использованием соглашений для создания имени базы данных, с которой будет установлено соединение, и инициализирует его из заданной модели.Имя по соглашению представляет собой полное имя (пространство имен + имя класса) производного класса контекста.Как это используется при создании соединения, см. в примечаниях к классу.</summary>
      <param name="model">Модель, которая будет поддерживать данный контекст.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.String)">
      <summary>Создает новый экземпляр контекста с использованием соглашений для создания имени или строки подключения базы данных, с которой будет установлено соединение.Как это используется при создании соединения, см. в примечаниях к классу.</summary>
      <param name="nameOrConnectionString">Имя базы данных или строка подключения.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.#ctor(System.String,System.Data.Entity.Infrastructure.DbCompiledModel)">
      <summary>Создает новый экземпляр контекста с использованием указанной строки в качестве имени или строки подключения с базой данных, с которой будет установлено соединение, и инициализирует его из заданной модели.Как это используется при создании соединения, см. в примечаниях к классу.</summary>
      <param name="nameOrConnectionString">Имя базы данных или строка подключения.</param>
      <param name="model">Модель, которая будет поддерживать данный контекст.</param>
    </member>
    <member name="P:System.Data.Entity.DbContext.ChangeTracker">
      <summary>Предоставляет доступ к функциям контекста, осуществляющим отслеживание изменений в сущностях.</summary>
      <returns>Объект, используемый для обращения к функциям, осуществляющим отслеживание изменений.</returns>
    </member>
    <member name="P:System.Data.Entity.DbContext.Configuration">
      <summary>Предоставляет доступ к параметрам конфигурации контекста.</summary>
      <returns>Объект, используемый для доступа к параметрам конфигурации.</returns>
    </member>
    <member name="P:System.Data.Entity.DbContext.Database">
      <summary>Создает экземпляр базы данных для этого контекста, который позволяет выполнять создание, удаление или проверку существования основной базы данных.</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.Dispose">
      <summary>Вызывает защищенный метод Dispose.</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.Dispose(System.Boolean)">
      <summary>Освобождает контекст.Базовый объект <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> также удаляется, если был создан данным контекстом либо если при создании данного контекста этот объект был передан ему во владение.Соединение с базой данных (объект <see cref="T:System.Data.Common.DbConnection" />) также освобождается, если оно было создано     данным контекстом либо если при создании данного контекста это соединение было передано ему во владение.</summary>
      <param name="disposing">Значение true задает освобождение как управляемых, так и неуправляемых ресурсов; значение false задает освобождение только неуправляемых ресурсов.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.Entry(System.Object)">
      <summary>Возвращает для заданной сущности объект <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />, предоставляющий доступ к сведениям о сущности и о возможности выполнения действий над ней.</summary>
      <returns>Запись для сущности.</returns>
      <param name="entity">Сущность.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.Entry``1(``0)">
      <summary>Возвращает для заданной сущности объект <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />, предоставляющий доступ к сведениям о сущности и о возможности выполнения действий над ней.</summary>
      <returns>Запись для сущности.</returns>
      <param name="entity">Сущность.</param>
      <typeparam name="TEntity">Тип сущности.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbContext.Equals(System.Object)">
      <summary>Определяет, равен ли заданный контекст DbContext текущему.</summary>
      <returns>Значение true, если указанный контекст равен текущему. В противном случае — значение false.</returns>
      <param name="obj">Контекст DbContext, сравниваемый с текущим контекстом.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetHashCode">
      <summary>Возвращает хэш-функцию для данного контекста DBContext.</summary>
      <returns>Хэш-функция для данного контекста DbContext.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetType">
      <summary>Возвращает тип текущего контекста DbContext.</summary>
      <returns>Тип текущего контекста DbContext.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.GetValidationErrors">
      <summary>Проверяет отслеживаемые сущности и возвращает коллекцию <see cref="T:System.Data.Entity.Validation.DbEntityValidationResult" />, содержащую результаты проверки.</summary>
      <returns>Коллекция результатов проверки для недопустимых сущностей.Эта коллекция никогда не равна значению NULL и не должна содержать значения null или результаты для допустимых сущностей.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
      <summary>Этот метод вызывается, если модель для производного контекста была инициализирована, прежде чем модель была заблокирована и использована для инициализации контекста.Реализация этого метода по умолчанию     не делает ничего, но его можно переопределить в производном классе     и выполнить в нем дальнейшую настройку модели перед ее блокировкой.</summary>
      <param name="modelBuilder">Построитель, который определяет модель для создаваемого контекста.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.SaveChanges">
      <summary>Сохраняет все изменения основной базы данных, произведенные в контексте.</summary>
      <returns>Количество объектов, записанных в основную базу данных.</returns>
      <exception cref="T:System.Data.Entity.Infrastructure.DbUpdateException">Произошла ошибка при отправке обновлений в базу данных.</exception>
      <exception cref="T:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException">Команда базы данных не повлияла на ожидаемое количество строк.Это обычно означает конфликт оптимистичного параллелизма; то есть, строка в базе данных была изменена со времени запроса.</exception>
      <exception cref="T:System.Data.Entity.Validation.DbEntityValidationException">Сохранение прервано, поскольку произошел сбой проверки значений свойства сущности.</exception>
      <exception cref="T:System.NotSupportedException">Попытка использовать неподдерживаемое поведение, такое как выполнение нескольких асинхронных команд в параллельном режиме в том же экземпляре контекста.</exception>
      <exception cref="T:System.ObjectDisposedException">Контекст или подключение освобождены.</exception>
      <exception cref="T:System.InvalidOperationException">Произошла ошибка при попытке обработки сущностей в контексте до или после отправки команд в базу данных.</exception>
    </member>
    <member name="M:System.Data.Entity.DbContext.SaveChangesAsync">
      <summary>Асинхронно сохраняет все изменения основной базы данных, произведенные в контексте.</summary>
      <returns>Задача, представляющая асинхронную операцию сохранения.Результат задач содержит количество объектов, записанных в основную базу данных.</returns>
      <exception cref="T:System.Data.Entity.Infrastructure.DbUpdateException">Произошла ошибка при отправке обновлений в базу данных.</exception>
      <exception cref="T:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException">Команда базы данных не повлияла на ожидаемое количество строк.Это обычно означает конфликт оптимистичного параллелизма; то есть, строка в базе данных была изменена со времени запроса.</exception>
      <exception cref="T:System.Data.Entity.Validation.DbEntityValidationException">Сохранение прервано, поскольку произошел сбой проверки значений свойства сущности.</exception>
      <exception cref="T:System.NotSupportedException">Попытка использовать неподдерживаемое поведение, такое как выполнение нескольких асинхронных команд в параллельном режиме в том же экземпляре контекста.</exception>
      <exception cref="T:System.ObjectDisposedException">Контекст или подключение освобождены.</exception>
      <exception cref="T:System.InvalidOperationException">Произошла ошибка при попытке обработки сущностей в контексте до или после отправки команд в базу данных.</exception>
    </member>
    <member name="M:System.Data.Entity.DbContext.SaveChangesAsync(System.Threading.CancellationToken)">
      <summary>Асинхронно сохраняет все изменения основной базы данных, произведенные в контексте.</summary>
      <returns>Задача, представляющая асинхронную операцию сохранения.Результат задач содержит количество объектов, записанных в основную базу данных.</returns>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <exception cref="T:System.InvalidOperationException">Формируется, если контекст был удален.</exception>
    </member>
    <member name="M:System.Data.Entity.DbContext.Set``1">
      <summary>Возвращает экземпляр <see cref="T:System.Data.Entity.DbSet`1" /> для доступа к сущностям заданного типа в контексте и в базовом хранилище.</summary>
      <returns>Набор для заданного типа сущности.</returns>
      <typeparam name="TEntity">Сущность-тип, для которой возвращается набор.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbContext.Set(System.Type)">
      <summary>Возвращает неуниверсальный экземпляр <see cref="T:System.Data.Entity.DbSet" /> для доступа к сущностям заданного типа в контексте и в базовом хранилище.</summary>
      <returns>Набор для заданного типа сущности.</returns>
      <param name="entityType">Тип сущности, для которой возвращается набор.</param>
    </member>
    <member name="M:System.Data.Entity.DbContext.ShouldValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry)">
      <summary>Расширение, позволяющее пользователю переопределить поведение по умолчанию, предполагающее проверку только добавленных и измененных сущностей.</summary>
      <returns>Значение true, если проверку следует продолжить. В противном случае — значение false.</returns>
      <param name="entityEntry">Проверяемый экземпляр DbEntityEntry.</param>
    </member>
    <member name="P:System.Data.Entity.DbContext.System#Data#Entity#Infrastructure#IObjectContextAdapter#ObjectContext">
      <summary>Возвращает объект Entity Framework ObjectContext, который является базовым для данного контекста.</summary>
    </member>
    <member name="M:System.Data.Entity.DbContext.ToString">
      <summary>Возвращает строковое представление контекста DbContext.</summary>
      <returns>Строковое представление контекста DbContext.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})">
      <summary>Расширение, позволяющее пользователю настраивать проверку сущности или отфильтровать результаты проверки.Вызывается методом <see cref="M:System.Data.Entity.DbContext.GetValidationErrors" />.</summary>
      <returns>Результат проверки сущности.Может содержать значение NULL при переопределении.</returns>
      <param name="entityEntry">Экземпляр DbEntityEntry, который должен быть проверен.</param>
      <param name="items">Определяемый пользователем словарь, который содержит дополнительные сведения для пользовательской проверки.Он будет передан в объект     <see cref="T:System.ComponentModel.DataAnnotations.ValidationContext" />     и предоставлен в качестве     свойства <see cref="P:System.ComponentModel.DataAnnotations.ValidationContext.Items" />.Это необязательный параметр, он может содержать значение NULL.</param>
    </member>
    <member name="T:System.Data.Entity.DbContextTransaction">
      <summary>Создает оболочку для объекта транзакции в соединении базового хранилища и обеспечивает выполнение платформой Entity Framework команд в базе данных в контексте этой транзакции.Экземпляр этого класса извлекается путем вызова метода BeginTransaction() для объекта <see cref="T:System.Data.Entity.DbContext" /><see cref="T:System.Data.Entity.Database" />.</summary>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.Commit">
      <summary>Фиксирует транзакцию базового хранилища.</summary>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.Dispose">
      <summary>Очищает объект этой транзакции и гарантирует, что платформа Entity Framework больше не использует эту транзакцию.</summary>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.Dispose(System.Boolean)">
      <summary>Освобождает ресурсы, используемые этим объектом транзакций.</summary>
      <param name="disposing">Укажите значение true, чтобы освободить управляемые и неуправляемые ресурсы, или значение false, чтобы освободить только неуправляемые ресурсы.</param>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.Equals(System.Object)">
      <summary>Определяет, равен ли данный экземпляр указанному объекту.</summary>
      <returns>Значение true, если экземпляр равен указанному объекту; в противном случае — значение false.</returns>
      <param name="obj">Объект для сравнения с данным экземпляром.</param>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.GetHashCode">
      <summary>Возвращает хэш-код текущего экземпляра.</summary>
      <returns>Хэш-код для текущего экземпляра.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.GetType">
      <summary>Получает базовый тип, связанный с этим экземпляром.</summary>
      <returns>Базовый тип, связанный с данным экземпляром.</returns>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.Rollback">
      <summary>Откатывает транзакцию базового хранилища.</summary>
    </member>
    <member name="M:System.Data.Entity.DbContextTransaction.ToString">
      <summary>Возвращает строковое представление этого экземпляра.</summary>
      <returns>Строковое представление данного экземпляра.</returns>
    </member>
    <member name="P:System.Data.Entity.DbContextTransaction.UnderlyingTransaction">
      <summary>Получает транзакцию базы данных (хранилища), которая является базовой для данной транзакции контекста.</summary>
      <returns>Транзакция базы данных (хранилища), которая является базовой для данной транзакции контекста.</returns>
    </member>
    <member name="T:System.Data.Entity.DbFunctionAttribute">
      <summary>Указывает, что данный метод является прокси-методом для функции модели EDM.</summary>
    </member>
    <member name="M:System.Data.Entity.DbFunctionAttribute.#ctor(System.String,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.DbFunctionAttribute" />.</summary>
      <param name="namespaceName">Пространство имен функции сопоставления.</param>
      <param name="functionName">Имя функции сопоставления.</param>
    </member>
    <member name="P:System.Data.Entity.DbFunctionAttribute.FunctionName">
      <summary>Имя функции сопоставления.</summary>
      <returns>Имя функции сопоставления.</returns>
    </member>
    <member name="P:System.Data.Entity.DbFunctionAttribute.NamespaceName">
      <summary>Пространство имен функции сопоставления.</summary>
      <returns>Пространство имен функции сопоставления.</returns>
    </member>
    <member name="T:System.Data.Entity.DbFunctions">
      <summary>Предоставляет методы среды CLR, которые обеспечивают доступ к каноническим функциям модели EDM, применяемым в запросах <see cref="T:System.Data.Entity.DbContext" /> или <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> LINQ to Entities.</summary>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddDays(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddDays для добавления заданного количества суток к значению даты-/времени.</summary>
      <returns>Результирующие дата-время.</returns>
      <param name="dateValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число дней.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddDays для добавления заданного количества суток к значению даты-/времени.</summary>
      <returns>Результирующие дата-время.</returns>
      <param name="dateValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число дней.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddHours(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddHours для добавления заданного количества часов к значению даты-времени.</summary>
      <returns>Результирующие дата-время.</returns>
      <param name="timeValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число часов.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddHours для добавления заданного количества часов к значению даты-времени.</summary>
      <returns>Результирующие дата-время.</returns>
      <param name="timeValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число часов.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddHours(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddHours для добавления заданного количества часов к интервалу времени.</summary>
      <returns>Результирующий интервал времени.</returns>
      <param name="timeValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число часов.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddMicroseconds для добавления заданного количества микросекунд к значению даты-времени.</summary>
      <returns>Результирующие дата-время.</returns>
      <param name="timeValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число микросекунд.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddMicroseconds для добавления заданного количества микросекунд к значению даты-времени.</summary>
      <returns>Результирующие дата-время.</returns>
      <param name="timeValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число микросекунд.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddMicroseconds для добавления заданного количества микросекунд к интервалу времени.</summary>
      <returns>Результирующий интервал времени.</returns>
      <param name="timeValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число микросекунд.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddMilliseconds для добавления заданного количества миллисекунд к значению даты-времени.</summary>
      <returns>Результирующие дата-время.</returns>
      <param name="timeValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число миллисекунд.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddMilliseconds для добавления заданного количества миллисекунд к значению даты-времени.</summary>
      <returns>Результирующие дата-время.</returns>
      <param name="timeValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число миллисекунд.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddMilliseconds для добавления заданного количества миллисекунд к интервалу времени.</summary>
      <returns>Результирующий интервал времени.</returns>
      <param name="timeValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число миллисекунд.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMinutes(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddMinutes для добавления заданного количества минут к значению даты-времени.</summary>
      <returns>Результирующие дата-время.</returns>
      <param name="timeValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число минут.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddMinutes для добавления заданного количества минут к значению даты-времени.</summary>
      <returns>Результирующие дата-время.</returns>
      <param name="timeValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число минут.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddMinutes для добавления заданного количества минут к интервалу времени.</summary>
      <returns>Результирующий интервал времени.</returns>
      <param name="timeValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число минут.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMonths(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddMonths для добавления заданного количества месяцев к значению даты-времени.</summary>
      <returns>Результирующие дата-время.</returns>
      <param name="dateValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число месяцев.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddMonths для добавления заданного количества месяцев к значению даты-времени.</summary>
      <returns>Результирующие дата-время.</returns>
      <param name="dateValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число месяцев.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddNanoseconds для добавления заданного количества наносекунд к значению даты-времени.</summary>
      <returns>Результирующие дата-время.</returns>
      <param name="timeValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число наносекунд.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddNanoseconds для добавления заданного количества наносекунд к значению даты-времени.</summary>
      <returns>Результирующие дата-время.</returns>
      <param name="timeValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число наносекунд.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddNanoseconds для добавления заданного количества наносекунд к интервалу времени.</summary>
      <returns>Результирующий интервал времени.</returns>
      <param name="timeValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число наносекунд.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddSeconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddSeconds для добавления заданного количества секунд к значению даты-времени.</summary>
      <returns>Результирующие дата-время.</returns>
      <param name="timeValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число секунд.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddSeconds для добавления заданного количества секунд к значению даты-времени.</summary>
      <returns>Результирующие дата-время.</returns>
      <param name="timeValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число секунд.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddSeconds для добавления заданного количества секунд к интервалу времени.</summary>
      <returns>Результирующий интервал времени.</returns>
      <param name="timeValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число секунд.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddYears(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddYears для добавления заданного количества лет к значению даты-времени.</summary>
      <returns>Результирующие дата-время.</returns>
      <param name="dateValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число лет.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AddYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddYears для добавления заданного количества лет к значению даты-времени.</summary>
      <returns>Результирующие дата-время.</returns>
      <param name="dateValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число лет.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AsNonUnicode(System.String)">
      <summary>При использовании в составе запроса LINQ to Entities этот метод действует в качестве оператора, который гарантирует, что входные данные рассматриваются как строка, отличная от Юникода.</summary>
      <returns>Входная строка как строка не в юникоде.</returns>
      <param name="value">Входная строка.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.AsUnicode(System.String)">
      <summary>При использовании в составе запроса LINQ to Entities этот метод действует в качестве оператора, который гарантирует, что входные данные рассматриваются как строка в Юникоде.</summary>
      <returns>Входная строка, как строка в юникоде.</returns>
      <param name="value">Входная строка.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.CreateDateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM CreateDateTime для создания нового объекта <see cref="T:System.DateTime" />.</summary>
      <returns>Новые значения даты-времени.</returns>
      <param name="year">Год.</param>
      <param name="month">Месяц (1).</param>
      <param name="day">День (1).</param>
      <param name="hour">Часы.</param>
      <param name="minute">Минуты.</param>
      <param name="second">Секунды, включая частичные доли секунды при необходимости.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.CreateDateTimeOffset(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM CreateDateTimeOffset для создания нового объекта <see cref="T:System.DateTimeOffset" />.</summary>
      <returns>Новые значения даты-времени.</returns>
      <param name="year">Год.</param>
      <param name="month">Месяц (1).</param>
      <param name="day">День (1).</param>
      <param name="hour">Часы.</param>
      <param name="minute">Минуты.</param>
      <param name="second">Секунды, включая частичные доли секунды при необходимости.</param>
      <param name="timeZoneOffset">Часть новой даты, содержащая часовой пояс.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.CreateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM CreateTime для создания нового объекта <see cref="T:System.TimeSpan" />.</summary>
      <returns>Новый интервал времени.</returns>
      <param name="hour">Часы.</param>
      <param name="minute">Минуты.</param>
      <param name="second">Секунды, включая частичные доли секунды при необходимости.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffDays(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffDays для вычисления количества дней между двумя значениями даты-времени.</summary>
      <returns>Количество дней между первым и вторым значением даты-времени.</returns>
      <param name="dateValue1">Первое значение даты-времени.</param>
      <param name="dateValue2">Второе значение даты-времени.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffDays для вычисления количества дней между двумя значениями даты-времени.</summary>
      <returns>Количество дней между первым и вторым значением даты-времени.</returns>
      <param name="dateValue1">Первое значение даты-времени.</param>
      <param name="dateValue2">Второе значение даты-времени.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffHours(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffHours для вычисления количества часов между двумя значениями даты-времени.</summary>
      <returns>Количество часов между первым и вторым значением даты-времени.</returns>
      <param name="timeValue1">Первое значение даты-времени.</param>
      <param name="timeValue2">Второе значение даты-времени.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffHours для вычисления количества часов между двумя значениями даты-времени.</summary>
      <returns>Количество часов между первым и вторым значением даты-времени.</returns>
      <param name="timeValue1">Первое значение даты-времени.</param>
      <param name="timeValue2">Второе значение даты-времени.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffHours(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffHours для вычисления количества часов между двумя интервалами времени.</summary>
      <returns>Количество часов между первым и вторым значением интервала времени.</returns>
      <param name="timeValue1">Первый интервал времени.</param>
      <param name="timeValue2">Второй интервал времени.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffMicroseconds для вычисления количества микросекунд между двумя значениями даты-времени.</summary>
      <returns>Количество микросекунд между первым и вторым значением даты-времени.</returns>
      <param name="timeValue1">Первое значение даты-времени.</param>
      <param name="timeValue2">Второе значение даты-времени.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffMicroseconds для вычисления количества микросекунд между двумя значениями даты-времени.</summary>
      <returns>Количество микросекунд между первым и вторым значением даты-времени.</returns>
      <param name="timeValue1">Первое значение даты-времени.</param>
      <param name="timeValue2">Второе значение даты-времени.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffMicroseconds для вычисления количества микросекунд между двумя интервалами времени.</summary>
      <returns>Число микросекунд между первым и вторым интервалом времени.</returns>
      <param name="timeValue1">Первый интервал времени.</param>
      <param name="timeValue2">Второй интервал времени.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffMilliseconds для вычисления количества миллисекунд между двумя значениями даты-времени.</summary>
      <returns>Количество миллисекунд между первым и вторым значением даты-времени.</returns>
      <param name="timeValue1">Первое значение даты-времени.</param>
      <param name="timeValue2">Второе значение даты-времени.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffMilliseconds для вычисления количества миллисекунд между двумя значениями даты-времени.</summary>
      <returns>Количество миллисекунд между первым и вторым значением даты-времени.</returns>
      <param name="timeValue1">Первое значение даты-времени.</param>
      <param name="timeValue2">Второе значение даты-времени.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffMilliseconds для вычисления количества миллисекунд между двумя интервалами времени.</summary>
      <returns>Число миллисекунд между первым и вторым интервалом времени.</returns>
      <param name="timeValue1">Первый интервал времени.</param>
      <param name="timeValue2">Второй интервал времени.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMinutes(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffMinutes для вычисления количества минут между двумя значениями даты-времени.</summary>
      <returns>Количество минут между первым и вторым значением даты-времени.</returns>
      <param name="timeValue1">Первое значение даты-времени.</param>
      <param name="timeValue2">Второе значение даты-времени.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffMinutes для вычисления количества минут между двумя значениями даты-времени.</summary>
      <returns>Количество минут между первым и вторым значением даты-времени.</returns>
      <param name="timeValue1">Первое значение даты-времени.</param>
      <param name="timeValue2">Второе значение даты-времени.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffMinutes для вычисления количества минут между двумя интервалами времени.</summary>
      <returns>Количество минут между первым и вторым интервалом времени.</returns>
      <param name="timeValue1">Первый интервал времени.</param>
      <param name="timeValue2">Второй интервал времени.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMonths(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffMonths для вычисления количества месяцев между двумя значениями даты-времени.</summary>
      <returns>Количество месяцев между первым и вторым значением даты-времени.</returns>
      <param name="dateValue1">Первое значение даты-времени.</param>
      <param name="dateValue2">Второе значение даты-времени.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffMonths для вычисления количества месяцев между двумя значениями даты-времени.</summary>
      <returns>Количество месяцев между первым и вторым значением даты-времени.</returns>
      <param name="dateValue1">Первое значение даты-времени.</param>
      <param name="dateValue2">Второе значение даты-времени.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffNanoseconds для вычисления количества наносекунд между двумя значениями даты-времени.</summary>
      <returns>Количество наносекунд между первым и вторым значением даты-времени.</returns>
      <param name="timeValue1">Первое значение даты-времени.</param>
      <param name="timeValue2">Второе значение даты-времени.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffNanoseconds для вычисления количества наносекунд между двумя значениями даты-времени.</summary>
      <returns>Количество наносекунд между первым и вторым значением даты-времени.</returns>
      <param name="timeValue1">Первое значение даты-времени.</param>
      <param name="timeValue2">Второе значение даты-времени.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffNanoseconds для вычисления количества наносекунд между двумя интервалами времени.</summary>
      <returns>Число наносекунд между первым и вторым интервалом времени.</returns>
      <param name="timeValue1">Первый интервал времени.</param>
      <param name="timeValue2">Второй интервал времени.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffSeconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffSeconds для вычисления количества секунд между двумя значениями даты-времени.</summary>
      <returns>Количество секунд между первым и вторым значением даты-времени.</returns>
      <param name="timeValue1">Первое значение даты-времени.</param>
      <param name="timeValue2">Второе значение даты-времени.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffSeconds для вычисления количества секунд между двумя значениями даты-времени.</summary>
      <returns>Количество секунд между первым и вторым значением даты-времени.</returns>
      <param name="timeValue1">Первое значение даты-времени.</param>
      <param name="timeValue2">Второе значение даты-времени.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffSeconds для вычисления количества секунд между двумя интервалами времени.</summary>
      <returns>Число секунд между первым и вторым интервалом времени.</returns>
      <param name="timeValue1">Первый интервал времени.</param>
      <param name="timeValue2">Второй интервал времени.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffYears(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffYears для вычисления количества лет между двумя значениями даты-времени.</summary>
      <returns>Количество лет между первым и вторым значением даты-времени.</returns>
      <param name="dateValue1">Первое значение даты-времени.</param>
      <param name="dateValue2">Второе значение даты-времени.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.DiffYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffYears для вычисления количества лет между двумя значениями даты-времени.</summary>
      <returns>Количество лет между первым и вторым значением даты-времени.</returns>
      <param name="dateValue1">Первое значение даты-времени.</param>
      <param name="dateValue2">Второе значение даты-времени.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.GetTotalOffsetMinutes(System.Nullable{System.DateTimeOffset})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM GetTotalOffsetMinutes для определения количества минут, на которое заданное значение даты-времени отстоит от времени в формате UTC.Это значение обычно находится в пределах от +780 до -780 (+13 или -13 часов).</summary>
      <returns>Смещение ввода относительно времени в формате UTC.</returns>
      <param name="dateTimeOffsetArgument">Значение даты и времени, которое должно использоваться.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Left(System.String,System.Nullable{System.Int64})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM Left для получения заданного количества крайних левых символов в строке.</summary>
      <returns>Строка, содержащая требуемое число символов слева от строки ввода.</returns>
      <param name="stringArgument">Входная строка.</param>
      <param name="length">Число возвращаемых знаков.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Reverse(System.String)">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM Reverse для получения заданной строки с обратным порядком расположения символов.</summary>
      <returns>Входная строка с обратным порядком символов.</returns>
      <param name="stringArgument">Входная строка.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Right(System.String,System.Nullable{System.Int64})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM Right для получения заданного количества крайних правых символов в строке.</summary>
      <returns>Строка, содержащая требуемое число символов справа от строки ввода.</returns>
      <param name="stringArgument">Входная строка.</param>
      <param name="length">Число возвращаемых знаков.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM StDev для вычисления стандартного отклонения коллекции.</summary>
      <returns>Стандартное отклонение.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM StDev для вычисления стандартного отклонения коллекции.</summary>
      <returns>Стандартное отклонение.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM StDev для вычисления стандартного отклонения коллекции.</summary>
      <returns>Стандартное отклонение.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM StDev для вычисления стандартного отклонения коллекции.</summary>
      <returns>Стандартное отклонение.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM StDev для вычисления стандартного отклонения коллекции.</summary>
      <returns>Стандартное отклонение.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM StDev для вычисления стандартного отклонения коллекции.</summary>
      <returns>Стандартное отклонение.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM StDev для вычисления стандартного отклонения коллекции.</summary>
      <returns>Стандартное отклонение.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM StDev для вычисления стандартного отклонения коллекции.</summary>
      <returns>Стандартное отклонение.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM StDevP для вычисления стандартного отклонения совокупности.</summary>
      <returns>Стандартное отклонение для заполнения.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM StDevP для вычисления стандартного отклонения совокупности.</summary>
      <returns>Стандартное отклонение для заполнения.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM StDevP для вычисления стандартного отклонения совокупности.</summary>
      <returns>Стандартное отклонение для заполнения.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM StDevP для вычисления стандартного отклонения совокупности.</summary>
      <returns>Стандартное отклонение для заполнения.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM StDevP для вычисления стандартного отклонения совокупности.</summary>
      <returns>Стандартное отклонение для заполнения.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM StDevP для вычисления стандартного отклонения совокупности.</summary>
      <returns>Стандартное отклонение для заполнения.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM StDevP для вычисления стандартного отклонения совокупности.</summary>
      <returns>Стандартное отклонение для заполнения.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM StDevP для вычисления стандартного отклонения совокупности.</summary>
      <returns>Стандартное отклонение для заполнения.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Truncate(System.Nullable{System.Decimal},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM Truncate для усечения заданного значения до указанного количества цифр.</summary>
      <returns>Усеченное значение.</returns>
      <param name="value">Усеченное значение.</param>
      <param name="digits">Число цифр, которое требуется сохранить.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Truncate(System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM Truncate для усечения заданного значения до указанного количества цифр.</summary>
      <returns>Усеченное значение.</returns>
      <param name="value">Усеченное значение.</param>
      <param name="digits">Число цифр, которое требуется сохранить.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.TruncateTime(System.Nullable{System.DateTime})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM TruncateTime для возврата заданной даты с очищенной частью времени.</summary>
      <returns>Входные данные без части, содержащей время.</returns>
      <param name="dateValue">Значение даты и времени, которое должно использоваться.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.TruncateTime(System.Nullable{System.DateTimeOffset})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM TruncateTime для возврата заданной даты с очищенной частью времени.</summary>
      <returns>Входные данные без части, содержащей время.</returns>
      <param name="dateValue">Значение даты и времени, которое должно использоваться.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM Var для вычисления дисперсии коллекции.</summary>
      <returns>Дисперсия.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM Var для вычисления дисперсии коллекции.</summary>
      <returns>Дисперсия.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM Var для вычисления дисперсии коллекции.</summary>
      <returns>Дисперсия.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM Var для вычисления дисперсии коллекции.</summary>
      <returns>Дисперсия.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM Var для вычисления дисперсии коллекции.</summary>
      <returns>Дисперсия.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM Var для вычисления дисперсии коллекции.</summary>
      <returns>Дисперсия.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM Var для вычисления дисперсии коллекции.</summary>
      <returns>Дисперсия.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM Var для вычисления дисперсии коллекции.</summary>
      <returns>Дисперсия.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM VarP для вычисления дисперсии совокупности.</summary>
      <returns>Дисперсия для заполнения.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM VarP для вычисления дисперсии совокупности.</summary>
      <returns>Дисперсия для заполнения.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM VarP для вычисления дисперсии совокупности.</summary>
      <returns>Дисперсия для заполнения.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM VarP для вычисления дисперсии совокупности.</summary>
      <returns>Дисперсия для заполнения.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM VarP для вычисления дисперсии совокупности.</summary>
      <returns>Дисперсия для заполнения.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM VarP для вычисления дисперсии совокупности.</summary>
      <returns>Дисперсия для заполнения.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM VarP для вычисления дисперсии совокупности.</summary>
      <returns>Дисперсия для заполнения.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.DbFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM VarP для вычисления дисперсии совокупности.</summary>
      <returns>Дисперсия для заполнения.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilder">
      <summary>DbModelBuilder служит для сопоставления классов CLR со схемой базы данных.Этот ориентированный на код подход к построению модели EDM называется Code First.</summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.DbModelBuilder" />.Процесс обнаружения исходной модели использует набор соглашений, который включен в самую последнюю версию платформы Entity Framework, установленную на компьютере.</summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.#ctor(System.Data.Entity.DbModelBuilderVersion)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.DbModelBuilder" />, который будет использовать конкретный набор соглашений для обнаружения исходной модели.</summary>
      <param name="modelBuilderVersion">Версия соглашений, которая будет использована.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Build(System.Data.Common.DbConnection)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Infrastructure.DbModel" /> на основе настроек, произведенных построителем.Подключение используется для определения используемого поставщика базы данных, так как он влияет на уровень базы данных в формируемой модели.</summary>
      <returns>Построенная модель.</returns>
      <param name="providerConnection">Подключение, используемое для определения сведений о поставщике.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Build(System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Infrastructure.DbModel" /> на основе настроек, произведенных построителем.Необходимо указать сведения о поставщике, так как они влияют на уровень базы данных в формируемой модели.Для поставщика SqlClient используется неизменяемое имя «System.Data.SqlClient» и токен манифеста, содержащий год выхода версии (например, «2005», «2008» и т. д.).</summary>
      <returns>Построенная модель.</returns>
      <param name="providerInfo">Поставщик базы данных, с которым будет использоваться модель.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.ComplexType``1">
      <summary>Регистрирует тип в качестве сложного типа модели и возвращает объект, который можно использовать для настройки этого сложного типа.Данный метод можно вызывать повторно для одного и того же типа, чтобы применить несколько строк настроек.</summary>
      <returns>Объект конфигурации для указанного сложного типа.</returns>
      <typeparam name="TComplexType">Регистрируемый или настраиваемый тип.</typeparam>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilder.Configurations">
      <summary>Возвращает результат <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar" /> для данного DbModelBuilder.Регистратор позволяет регистрировать конфигурации с производными сущностями и сложными типами при помощи построителя.</summary>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilder.Conventions">
      <summary>Предоставляет доступ к параметрам DbModelBuilder, который работает с соглашениями.</summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Entity``1">
      <summary>Регистрирует тип сущности как часть модели и возвращает объект, который можно использовать для настройки этой сущности.Данный метод можно вызывать повторно для одной и той же сущности, чтобы применить несколько строк настроек.</summary>
      <returns>Объект конфигурации для указанного типа сущности.</returns>
      <typeparam name="TEntityType">Регистрируемый или настраиваемый тип.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Equals(System.Object)">
      <summary>Определяет, равен ли объект <see cref="T:System.Data.Entity.DbModelBuilder" /> указанному объекту.</summary>
      <returns>Значение true, если <see cref="T:System.Data.Entity.DbModelBuilder" /> эквивалентно указанному объекту; в противном случае значение false.</returns>
      <param name="obj">Сравниваемый объект.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.GetHashCode">
      <summary>Возвращает хэш-код текущего экземпляра.</summary>
      <returns>Хэш-код для текущего экземпляра.</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.GetType">
      <summary>Возвращает объект <see cref="T:System.Type" /> для текущего экземпляра.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.HasDefaultSchema(System.String)">
      <summary>Настраивает имя схемы базы данных по умолчанию.Это имя схемы базы данных по умолчанию используется для всех объектов базы данных, не имеющих явно заданного имени схемы.</summary>
      <returns>Тот же экземпляр класса DbModelBuilder, чтобы соединить несколько вызовов в цепочку.</returns>
      <param name="schema">Имя схемы базы данных по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Ignore``1">
      <summary>Исключает тип из модели.Используется для удаления из модели типов, добавленных по соглашению в процессе обнаружения исходной модели.</summary>
      <returns>Тот же экземпляр класса DbModelBuilder, чтобы соединить несколько вызовов в цепочку.</returns>
      <typeparam name="T">Тип, который должен быть исключен.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Ignore(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>Исключает указанные типы из модели.Используется для удаления из модели типов, добавленных по соглашению в процессе обнаружения исходной модели.</summary>
      <returns>Тот же экземпляр класса DbModelBuilder, чтобы соединить несколько вызовов в цепочку.</returns>
      <param name="types">Типы, исключаемые из модели.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Properties">
      <summary>Начинает настройку облегченного соглашения, применяемого ко всем свойствам в модели.</summary>
      <returns>Объект конфигурации для соглашения.</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Properties``1">
      <summary>Начинает настройку облегченного соглашения, применяемого ко всем примитивным свойствам указанного типа в модели.</summary>
      <returns>Объект конфигурации для соглашения.</returns>
      <typeparam name="T">Тип свойства, к которому применяется соглашение.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.RegisterEntityType(System.Type)">
      <summary>Регистрирует тип сущности как часть модели.</summary>
      <param name="entityType">Регистрируемый тип.</param>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.ToString">
      <summary>Возвращает строковое представление объекта <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
      <returns>Строковое представление объекта <see cref="T:System.Data.Entity.DbModelBuilder" />.</returns>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Types``1">
      <summary>Начинает конфигурацию облегченного соглашения, которое применяется ко всем сущностям и комплексным типам в модели, наследующей от типа, указанного универсальным аргументом.Этот метод не регистрирует типы как составную часть модели.</summary>
      <returns>Объект конфигурации для соглашения.</returns>
      <typeparam name="T">Типы сущностей или комплексные типы, к которым применяется настоящее соглашения.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilder.Types">
      <summary>Начинает настройку облегченного соглашения, применяемого ко всем сущностям и комплексным типам в модели.</summary>
      <returns>Объект конфигурации для соглашения.</returns>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilderVersion">
      <summary>Значение из этого перечисления можно передать непосредственно в класс <see cref="T:System.Data.Entity.DbModelBuilder" /> или использовать в атрибуте <see cref="T:System.Data.Entity.DbModelBuilderVersionAttribute" />, примененном к классу, производному от класса <see cref="T:System.Data.Entity.DbContext" />.Значение, которое определяет версию соглашений DbContext и DbModelBuilder, которые должны использоваться при построении модели из кода, также называемого Code First.</summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.Latest">
      <summary>     Указывает, что следует использовать последнюю версию соглашений <see cref="T:System.Data.Entity.DbModelBuilder" /> и <see cref="T:System.Data.Entity.DbContext" />. </summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V4_1">
      <summary>     Указывает, что должна использоваться версия соглашений <see cref="T:System.Data.Entity.DbModelBuilder" /> и <see cref="T:System.Data.Entity.DbContext" />, поставляемая в составе платформы Entity Framework 4.1. </summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V5_0">
      <summary>     Указывает, что должна использоваться версия соглашений <see cref="T:System.Data.Entity.DbModelBuilder" /> и <see cref="T:System.Data.Entity.DbContext" />, поставляемая в составе платформы Entity Framework 5.0. </summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V5_0_Net4">
      <summary>Указывает, что, когда целью является платформа .Net Framework 4, следует использовать версию соглашений <see cref="T:System.Data.Entity.DbModelBuilder" /> и <see cref="T:System.Data.Entity.DbContext" />, поставляемую в составе платформы Entity Framework 5.0.</summary>
    </member>
    <member name="F:System.Data.Entity.DbModelBuilderVersion.V6_0">
      <summary>     Указывает, что должна использоваться версия соглашений <see cref="T:System.Data.Entity.DbModelBuilder" /> и <see cref="T:System.Data.Entity.DbContext" />, поставляемая в составе платформы Entity Framework 6.0. </summary>
    </member>
    <member name="T:System.Data.Entity.DbModelBuilderVersionAttribute">
      <summary>Этот атрибут может быть применен к классу, производному от класса <see cref="T:System.Data.Entity.DbContext" /> чтобы задать версию соглашений DbContext или <see cref="T:System.Data.Entity.DbModelBuilder" /> для использования при построении модели из кода, также известного как «Code First».См. описание перечисления <see cref="T:System.Data.Entity.DbModelBuilderVersion" /> для получения дополнительных сведений о версиях DbModelBuilder.</summary>
    </member>
    <member name="M:System.Data.Entity.DbModelBuilderVersionAttribute.#ctor(System.Data.Entity.DbModelBuilderVersion)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.DbModelBuilderVersionAttribute" />.</summary>
      <param name="version">Версия соглашений <see cref="T:System.Data.Entity.DbModelBuilder" />, которая будет использоваться.</param>
    </member>
    <member name="P:System.Data.Entity.DbModelBuilderVersionAttribute.Version">
      <summary>Возвращает версию соглашений <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
      <returns>Версия соглашений <see cref="T:System.Data.Entity.DbModelBuilder" />.</returns>
    </member>
    <member name="T:System.Data.Entity.DbSet">
      <summary>Неуниверсальная версия <see cref="T:System.Data.Entity.DbSet`1" />, которая может использоваться, если тип сущности во время сборки неизвестен.</summary>
    </member>
    <member name="M:System.Data.Entity.DbSet.#ctor">
      <summary>Создает экземпляр <see cref="T:System.Data.Entity.DbSet" /> при вызове из конструктора производного типа, который будет использоваться как тестовый дубль для DbSet.Методы и свойства, используемые в тестовом дубле, должны быть реализованы в нем же за исключением AsNoTracking, AsStreaming и Include, которые в реализации по умолчанию являются пустыми операциями.</summary>
    </member>
    <member name="M:System.Data.Entity.DbSet.Add(System.Object)">
      <summary>Добавляет заданную сущность к контексту, поддерживающему набор, в добавленном состоянии, в результате чего она будет вставлена в базу данных при вызове метода SaveChanges.</summary>
      <returns>Сущность.</returns>
      <param name="entity">Добавляемая сущность.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.AddRange(System.Collections.IEnumerable)">
      <summary>Добавляет заданную коллекцию сущностей к контексту, поддерживающему набор, каждая сущность которого находится в состоянии "Добавлено", в результате чего она будет вставлена в базу данных при вызове метода SaveChanges.</summary>
      <returns>Коллекция сущностей.</returns>
      <param name="entities">Коллекция сущностей для добавления.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Attach(System.Object)">
      <summary>Присоединяет заданную сущность к контексту, поддерживающему данный набор.Это означает, что сущность помещается в контекст в неизмененном состоянии, как если бы она была считана из базы данных.</summary>
      <returns>Сущность.</returns>
      <param name="entity">Присоединяемая сущность.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Cast``1">
      <summary>Возвращает эквивалентный универсальный объект <see cref="T:System.Data.Entity.DbSet`1" />.</summary>
      <returns>Универсальный объект набора.</returns>
      <typeparam name="TEntity">Тип сущности, для которой был создан набор.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbSet.Create">
      <summary>Создает новый экземпляр сущности для типа данного набора.Обратите внимание, что этот экземпляр НЕ добавляется в набор.Возвращаемый экземпляр будет учетной записью-посредником, если базовый контекст настроен для создания     посредников, а тип сущности удовлетворяет требованиям для создания учетных записей-посредников.</summary>
      <returns>Экземпляр сущности, который может быть учетной записью-посредником.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.Create(System.Type)">
      <summary>Создает новый экземпляр сущности для типа данного набора или для типа, производного от типа данного набора.Обратите внимание, что этот экземпляр НЕ добавляется в набор.Возвращаемый экземпляр будет учетной записью-посредником, если базовый контекст настроен для создания     посредников, а тип сущности удовлетворяет требованиям для создания учетных записей-посредников.</summary>
      <returns>Экземпляр сущности, который может быть учетной записью-посредником.</returns>
      <param name="derivedEntityType">Тип создаваемой сущности.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Equals(System.Object)">
      <summary>Возвращает значение, указывающее, равен ли указанный набор текущему набору.</summary>
      <returns>Значение true, если указанный объект равен текущему набору. В противном случае — значение false.</returns>
      <param name="obj">Набор, который требуется сравнить с текущим объектом.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.Find(System.Object[])">
      <summary>Обнаруживает сущность с указанными значениями первичного ключа.Если сущность с указанными значениями первичного ключа содержится в контексте, она     возвращается немедленно без выполнения запроса к хранилищу.В противном случае выполняется запрос к хранилищу в поисках сущности с указанными значениями первичного ключа. Если такая сущность обнаружена, она добавляется к контексту и возвращается вызывающей стороне.Если сущность не обнаружена в контексте или в хранилище, возвращается значение NULL.</summary>
      <returns>Обнаруженная сущность или значение NULL.</returns>
      <param name="keyValues">Значения первичного ключа для искомой сущности.</param>
      <exception cref="T:System.InvalidOperationException">Возникает, если с данными значениями первичного ключа в контексте есть несколько сущностей.</exception>
      <exception cref="T:System.InvalidOperationException">Возникает, если тип сущности не является частью модели данных для этого контекста.</exception>
      <exception cref="T:System.InvalidOperationException">Возникает, если типы значений ключа не совпадают с типами значений ключа для типа сущности, который нужно найти.</exception>
      <exception cref="T:System.InvalidOperationException">Формируется, если контекст был удален.</exception>
    </member>
    <member name="M:System.Data.Entity.DbSet.FindAsync(System.Object[])">
      <summary>Асинхронно находит сущность с указанными значениями первичного ключа.Если сущность с указанными значениями первичного ключа содержится в контексте, она     возвращается немедленно без выполнения запроса к хранилищу.В противном случае выполняется запрос к хранилищу в поисках сущности с указанными значениями первичного ключа. Если такая сущность обнаружена, она добавляется к контексту и возвращается вызывающей стороне.Если сущность не обнаружена в контексте или в хранилище, возвращается значение NULL.</summary>
      <returns>Задача, представляющая асинхронную операцию поиска.Результат задачи содержит найденную сущность или значение NULL.</returns>
      <param name="keyValues">Значения первичного ключа для искомой сущности.</param>
      <exception cref="T:System.InvalidOperationException">Возникает, если с данными значениями первичного ключа в контексте есть несколько сущностей.</exception>
      <exception cref="T:System.InvalidOperationException">Возникает, если тип сущности не является частью модели данных для этого контекста.</exception>
      <exception cref="T:System.InvalidOperationException">Возникает, если типы значений ключа не совпадают с типами значений ключа для типа сущности, который нужно найти.</exception>
      <exception cref="T:System.InvalidOperationException">Формируется, если контекст был удален.</exception>
    </member>
    <member name="M:System.Data.Entity.DbSet.FindAsync(System.Threading.CancellationToken,System.Object[])">
      <summary>Асинхронно находит сущность с указанными значениями первичного ключа.Если сущность с указанными значениями первичного ключа содержится в контексте, она     возвращается немедленно без выполнения запроса к хранилищу.В противном случае выполняется запрос к хранилищу в поисках сущности с указанными значениями первичного ключа. Если такая сущность обнаружена, она добавляется к контексту и возвращается вызывающей стороне.Если сущность не обнаружена в контексте или в хранилище, возвращается значение NULL.</summary>
      <returns>Задача, представляющая асинхронную операцию поиска.Результат задачи содержит найденную сущность или значение NULL.</returns>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <param name="keyValues">Значения первичного ключа для искомой сущности.</param>
      <exception cref="T:System.InvalidOperationException">Возникает, если с данными значениями первичного ключа в контексте есть несколько сущностей.</exception>
      <exception cref="T:System.InvalidOperationException">Возникает, если тип сущности не является частью модели данных для этого контекста.</exception>
      <exception cref="T:System.InvalidOperationException">Возникает, если типы значений ключа не совпадают с типами значений ключа для типа сущности, который нужно найти.</exception>
      <exception cref="T:System.InvalidOperationException">Формируется, если контекст был удален.</exception>
    </member>
    <member name="M:System.Data.Entity.DbSet.GetHashCode">
      <summary>Возвращает хэш-функцию для указанного набора.</summary>
      <returns>Хэш-функция для набора.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.GetType">
      <summary>Возвращает тип текущего набора.</summary>
      <returns>Тип текущего набора.</returns>
    </member>
    <member name="P:System.Data.Entity.DbSet.Local">
      <summary>Возвращает объект <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />, содержащий локальное представление всех добавленных, неизменившихся и измененных сущностей в наборе.Это локальное представление остается синхронизированным по мере добавления или удаления сущностей из контекста.Аналогичным образом добавляемые или удаляемые из этого локального представления сущности автоматически добавляются в контекст или удаляются из контекста.</summary>
      <returns>Локальное представление.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet.Remove(System.Object)">
      <summary>Помечает заданную сущность как удаленную, в результате чего она будет удалена из базы данных при вызове метода SaveChanges.Обратите внимание, что перед вызовом этого метода сущность должна существовать в контексте в каком-либо другом состоянии.</summary>
      <returns>Сущность.</returns>
      <param name="entity">Удаляемая сущность.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.RemoveRange(System.Collections.IEnumerable)">
      <summary>Удаляет заданную коллекцию сущностей из контекста, поддерживающего набор, каждая сущность которого находится в состоянии "Удалено", в результате чего она будет удалена из базы данных при вызове метода SaveChanges.</summary>
      <returns>Коллекция сущностей.</returns>
      <param name="entities">Коллекция сущностей для удаления.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet.SqlQuery(System.String,System.Object[])">
      <summary>Создает необработанный SQL-запрос, возвращающий сущности в данном наборе.По умолчанию возвращаемые сущности отслеживаются контекстом. Это поведение можно изменить, вызвав метод AsNoTracking для возвращаемого объекта <see cref="T:System.Data.Entity.Infrastructure.DbRawSqlQuery" />.Обратите внимание, что сущности всегда имеют тип, заданный для набора, и никогда не имеют производный тип.Если запрашиваемая таблица или таблицы могут содержать данные других типов сущностей, SQL-запрос должен быть написан соответствующим образом, обеспечивая возврат только сущностей нужного типа.Как и для любого API, принимающего SQL, важно параметризовать все пользовательские входные данные для защиты от атаки путем внедрения кода SQL.Можно включать в строку SQL-запроса местозаполнители параметров и затем предоставлять значения параметров как дополнительные аргументы.Все предоставляемые значения параметров будут автоматически преобразовываться в DbParameter.context.Set(typeof(Blog)).SqlQuery("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); также можно создать DbParameter и предоставить его в SqlQuery.Это позволяет использовать в строке запроса SQL именованные параметры.context.Set(typeof(Blog)).SqlQuery("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery" />, выполняющий запрос при перечислении.</returns>
      <param name="sql">Строка SQL-запроса.</param>
      <param name="parameters">Параметры, подставляемые в строку SQL-запроса.Если используются выходные параметры, их значения не будут доступны до полного прочтения результатов.Это происходит вследствие базового поведения DbDataReader, дополнительные сведения см. на сайте http://go.microsoft.com/fwlink/?LinkID=398589.</param>
    </member>
    <member name="T:System.Data.Entity.DbSet`1">
      <summary>DbSet представляет коллекцию всех сущностей указанного типа, которые содержатся в контексте или могут быть запрошены из базы данных.Объекты DbSet создаются из DbContext с помощью метода DbContext.Set.</summary>
      <typeparam name="TEntity">Тип, определяющий набор.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.#ctor">
      <summary>Создает экземпляр <see cref="T:System.Data.Entity.DbSet`1" /> при вызове из конструктора производного типа, который будет использоваться как тестовый дубль для DbSet.Методы и свойства, используемые в тестовом дубле, должны быть реализованы в нем же за исключением AsNoTracking, AsStreaming и Include, которые в реализации по умолчанию являются пустыми операциями.</summary>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Add(`0)">
      <summary>Добавляет заданную сущность к контексту, поддерживающему набор, в добавленном состоянии, в результате чего она будет вставлена в базу данных при вызове метода SaveChanges.</summary>
      <param name="entity">Добавляемая сущность.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Добавляет заданную коллекцию сущностей к контексту, поддерживающему набор, каждая сущность которого находится в состоянии "Добавлено", в результате чего она будет вставлена в базу данных при вызове метода SaveChanges.</summary>
      <returns>Коллекция сущностей.</returns>
      <param name="entities">Коллекция сущностей для добавления.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Attach(`0)">
      <summary>Присоединяет заданную сущность к контексту, поддерживающему данный набор.Это означает, что сущность помещается в контекст в неизмененном состоянии, как если бы она была считана из базы данных.</summary>
      <param name="entity">Присоединяемая сущность.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Create">
      <summary>Создает новый экземпляр сущности для типа данного набора.Обратите внимание, что этот экземпляр НЕ добавляется в набор.Возвращаемый экземпляр будет учетной записью-посредником, если базовый контекст настроен для создания     посредников, а тип сущности удовлетворяет требованиям для создания учетных записей-посредников.</summary>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Create``1">
      <summary>Создает новый экземпляр сущности для типа данного набора или для типа, производного от типа данного набора.Обратите внимание, что этот экземпляр НЕ добавляется в набор.Возвращаемый экземпляр будет учетной записью-посредником, если базовый контекст настроен для создания     посредников, а тип сущности удовлетворяет требованиям для создания учетных записей-посредников.</summary>
      <typeparam name="TDerivedEntity">Тип создаваемой сущности.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Equals(System.Object)">
      <summary>Определяет, равен ли заданный набор DbSet текущему.</summary>
      <returns>Значение true, если заданный набор DbSet равен текущему. В противном случае — значение false.</returns>
      <param name="obj">Объект, который требуется сравнить с текущим объектом DbSet.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Find(System.Object[])">
      <summary>Обнаруживает сущность с указанными значениями первичного ключа.Если сущность с указанными значениями первичного ключа содержится в контексте, она     возвращается немедленно без выполнения запроса к хранилищу.В противном случае выполняется запрос к хранилищу в поисках сущности с указанными значениями первичного ключа. Если такая сущность обнаружена, она добавляется к контексту и возвращается вызывающей стороне.Если сущность не обнаружена в контексте или в хранилище, возвращается значение NULL.</summary>
      <returns>Обнаруженная сущность или значение NULL.</returns>
      <param name="keyValues">Значения первичного ключа для искомой сущности.</param>
      <exception cref="T:System.InvalidOperationException">Возникает, если с данными значениями первичного ключа в контексте есть несколько сущностей.</exception>
      <exception cref="T:System.InvalidOperationException">Возникает, если тип сущности не является частью модели данных для этого контекста.</exception>
      <exception cref="T:System.InvalidOperationException">Возникает, если типы значений ключа не совпадают с типами значений ключа для типа сущности, который нужно найти.</exception>
      <exception cref="T:System.InvalidOperationException">Формируется, если контекст был удален.</exception>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.FindAsync(System.Object[])">
      <summary>Асинхронно находит сущность с указанными значениями первичного ключа.Если сущность с указанными значениями первичного ключа содержится в контексте, она     возвращается немедленно без выполнения запроса к хранилищу.В противном случае выполняется запрос к хранилищу в поисках сущности с указанными значениями первичного ключа. Если такая сущность обнаружена, она добавляется к контексту и возвращается вызывающей стороне.Если сущность не обнаружена в контексте или в хранилище, возвращается значение NULL.</summary>
      <returns>Задача, представляющая асинхронную операцию поиска.Результат задачи содержит найденную сущность или значение NULL.</returns>
      <param name="keyValues">Значения первичного ключа для искомой сущности.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.FindAsync(System.Threading.CancellationToken,System.Object[])">
      <summary>Асинхронно находит сущность с указанными значениями первичного ключа.Если сущность с указанными значениями первичного ключа содержится в контексте, она     возвращается немедленно без выполнения запроса к хранилищу.В противном случае выполняется запрос к хранилищу в поисках сущности с указанными значениями первичного ключа. Если такая сущность обнаружена, она добавляется к контексту и возвращается вызывающей стороне.Если сущность не обнаружена в контексте или в хранилище, возвращается значение NULL.</summary>
      <returns>Задача, представляющая асинхронную операцию поиска.Результат задачи содержит найденную сущность или значение NULL.</returns>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <param name="keyValues">Значения первичного ключа для искомой сущности.</param>
      <exception cref="T:System.InvalidOperationException">Возникает, если с данными значениями первичного ключа в контексте есть несколько сущностей.</exception>
      <exception cref="T:System.InvalidOperationException">Возникает, если тип сущности не является частью модели данных для этого контекста.</exception>
      <exception cref="T:System.InvalidOperationException">Возникает, если типы значений ключа не совпадают с типами значений ключа для типа сущности, который нужно найти.</exception>
      <exception cref="T:System.InvalidOperationException">Формируется, если контекст был удален.</exception>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.GetHashCode">
      <summary>Возвращает хэш-функцию для данного объекта DbSet.</summary>
      <returns>Хэш-функция для данного объекта DbSet.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.GetType">
      <summary>Возвращает тип текущего объекта DbSet.</summary>
      <returns>Тип текущего объекта DbSet.</returns>
    </member>
    <member name="P:System.Data.Entity.DbSet`1.Local">
      <summary>Возвращает объект <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />, содержащий локальное представление всех добавленных, неизменившихся и измененных сущностей в наборе.Это локальное представление остается синхронизированным по мере добавления или удаления сущностей из контекста.Аналогичным образом добавляемые или удаляемые из этого локального представления сущности автоматически добавляются в контекст или удаляются из контекста.</summary>
      <returns>Локальное представление.</returns>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.op_Implicit(System.Data.Entity.DbSet{`0})~System.Data.Entity.DbSet">
      <summary>Возвращает эквивалентный неуниверсальный объект <see cref="T:System.Data.Entity.DbSet" />.</summary>
      <returns>Неуниверсальный объект набора.</returns>
      <param name="entry">Универсальный объект набора.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.Remove(`0)">
      <summary>Помечает заданную сущность как удаленную, в результате чего она будет удалена из базы данных при вызове метода SaveChanges.Обратите внимание, что перед вызовом этого метода сущность должна существовать в контексте в каком-либо другом состоянии.</summary>
      <param name="entity">Удаляемая сущность.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
      <summary>Удаляет заданную коллекцию сущностей из контекста, поддерживающего набор, каждая сущность которого находится в состоянии "Удалено", в результате чего она будет удалена из базы данных при вызове метода SaveChanges.</summary>
      <returns>Коллекция сущностей.</returns>
      <param name="entities">Коллекция сущностей для удаления.</param>
    </member>
    <member name="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])">
      <summary>Создает необработанный SQL-запрос, возвращающий сущности в данном наборе.По умолчанию возвращаемые сущности отслеживаются контекстом. Это поведение можно изменить, вызвав метод AsNoTracking для возвращаемого объекта <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" />.Обратите внимание, что сущности всегда имеют тип, заданный для набора, и никогда не имеют производный тип.Если запрашиваемая таблица или таблицы могут содержать данные других типов сущностей, SQL-запрос должен быть написан соответствующим образом, обеспечивая возврат только сущностей нужного типа.Как и для любого API, принимающего SQL, важно параметризовать все пользовательские входные данные для защиты от атаки путем внедрения кода SQL.Можно включать в строку SQL-запроса местозаполнители параметров и затем предоставлять значения параметров как дополнительные аргументы.Все предоставляемые значения параметров будут автоматически преобразовываться в DbParameter.context.Blogs.SqlQuery("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); также можно создать DbParameter и предоставить его в SqlQuery.Это позволяет использовать в строке запроса SQL именованные параметры.context.Blogs.SqlQuery("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" />, выполняющий запрос при перечислении.</returns>
      <param name="sql">Строка SQL-запроса.</param>
      <param name="parameters">Параметры, подставляемые в строку SQL-запроса.Если используются выходные параметры, их значения не будут доступны до полного прочтения результатов.Это происходит вследствие базового поведения DbDataReader, дополнительные сведения см. на сайте http://go.microsoft.com/fwlink/?LinkID=398589.</param>
    </member>
    <member name="T:System.Data.Entity.DropCreateDatabaseAlways`1">
      <summary>Реализация интерфейса IDatabaseInitializer, который повторно создает и может повторно заполнить базу данных при первом использовании контекста в домене приложения.Чтобы заполнить базу данных начальными значениями, создайте производный класс и переопределите метод Seed.</summary>
      <typeparam name="TContext">Тип контекста.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.DropCreateDatabaseAlways`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.InitializeDatabase(`0)">
      <summary>Выполняет стратегию инициализации базы данных для заданного контекста.</summary>
      <param name="context">Контекст.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="context" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseAlways`1.Seed(`0)">
      <summary>Метод должен быть переопределен для фактического добавления данных в контекст для заполнения начальными значениями.Реализация по умолчанию не выполняет никаких действий.</summary>
      <param name="context">Контекст для заполнения начальными значениями.</param>
    </member>
    <member name="T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1">
      <summary>Реализация интерфейса IDatabaseInitializer которая УДАЛЯЕТ, повторно создает и при необходимости повторно заполняет начальными значениями базу данных (только в случае, если модель была изменена со времени создания базы данных).</summary>
      <typeparam name="TContext">Тип контекста.</typeparam>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.InitializeDatabase(`0)">
      <summary>Выполняет стратегию инициализации базы данных для заданного контекста.</summary>
      <param name="context">Контекст.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="context" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.DropCreateDatabaseIfModelChanges`1.Seed(`0)">
      <summary>Метод должен быть переопределен для фактического добавления данных в контекст для заполнения начальными значениями.Реализация по умолчанию не выполняет никаких действий.</summary>
      <param name="context">Контекст для заполнения начальными значениями.</param>
    </member>
    <member name="T:System.Data.Entity.EntityState">
      <summary>     Описывает состояние сущности. </summary>
    </member>
    <member name="F:System.Data.Entity.EntityState.Added">
      <summary>     Сущность отслеживается контекстом, но отсутствует в базе данных. </summary>
    </member>
    <member name="F:System.Data.Entity.EntityState.Deleted">
      <summary>     Сущность отслеживается контекстом и присутствует в базе данных, но была помечена      к удалению из базы данных при следующем вызове метода SaveChanges. </summary>
    </member>
    <member name="F:System.Data.Entity.EntityState.Detached">
      <summary>Сущность не отслеживается контекстом.Сущность в этом состоянии сразу после создания с новым оператором     или с одним из методов создания <see cref="T:System.Data.Entity.DbSet" />.</summary>
    </member>
    <member name="F:System.Data.Entity.EntityState.Modified">
      <summary>     Сущность отслеживается контекстом и присутствует в базе данных, некоторые из значений ее свойства      были изменены. </summary>
    </member>
    <member name="F:System.Data.Entity.EntityState.Unchanged">
      <summary>     Сущность отслеживается контекстом и присутствует в базе данных, значения его свойства     не изменились по сравнению со значениями в базе данных. </summary>
    </member>
    <member name="T:System.Data.Entity.IDatabaseInitializer`1">
      <summary>Реализация этого интерфейса используется для инициализации основной базы данных, когда экземпляр производного класса <see cref="T:System.Data.Entity.DbContext" /> используется впервые.Эта инициализация условно может создать базу данных или присвоить ей начальные данные.Используемая стратегия устанавливается с помощью статического свойства InitializationStrategy класса <see cref="T:System.Data.Entity.Database" />.Предусмотрены следующие реализации: <see cref="T:System.Data.Entity.DropCreateDatabaseIfModelChanges`1" />,     <see cref="T:System.Data.Entity.DropCreateDatabaseAlways`1" />, <see cref="T:System.Data.Entity.CreateDatabaseIfNotExists`1" />.</summary>
      <typeparam name="TContext">Этот параметр типа является контрвариантным. Это означает, что можно использовать либо указанный тип, либо менее производный тип. Дополнительные сведения о ковариации и контрвариации см. в разделе .</typeparam>
    </member>
    <member name="M:System.Data.Entity.IDatabaseInitializer`1.InitializeDatabase(`0)">
      <summary>     Выполняет стратегию инициализации базы данных для заданного контекста. </summary>
      <param name="context"> Контекст. </param>
    </member>
    <member name="T:System.Data.Entity.IDbSet`1">
      <summary>
        <see cref="T:System.Data.Entity.IDbSet`1" /> представляет коллекцию всех сущностей указанного типа, которые содержатся в контексте или могут быть запрошены из базы данных.<see cref="T:System.Data.Entity.DbSet`1" /> является конкретной реализацией интерфейса IDbSet.</summary>
      <typeparam name="TEntity">Тип, определяющий набор.</typeparam>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Add(`0)">
      <summary>Добавляет заданную сущность к контексту, поддерживающему набор, в добавленном состоянии, в результате чего она будет вставлена в базу данных при вызове метода SaveChanges.</summary>
      <returns>Сущность.</returns>
      <param name="entity">Добавляемая сущность.</param>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Attach(`0)">
      <summary>Присоединяет заданную сущность к контексту, поддерживающему данный набор.Это означает, что сущность помещается в контекст в неизмененном состоянии, как если бы она была считана из базы данных.</summary>
      <returns>Сущность.</returns>
      <param name="entity">Присоединяемая сущность.</param>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Create">
      <summary>Создает новый экземпляр сущности для типа данного набора.Обратите внимание, что этот экземпляр НЕ добавляется в набор.Возвращаемый экземпляр будет учетной записью-посредником, если базовый контекст настроен для создания     посредников, а тип сущности удовлетворяет требованиям для создания учетных записей-посредников.</summary>
      <returns>Экземпляр сущности, который может быть учетной записью-посредником.</returns>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Create``1">
      <summary>Создает новый экземпляр сущности для типа данного набора или для типа, производного от типа данного набора.Обратите внимание, что этот экземпляр НЕ добавляется в набор.Возвращаемый экземпляр будет учетной записью-посредником, если базовый контекст настроен для создания     посредников, а тип сущности удовлетворяет требованиям для создания учетных записей-посредников.</summary>
      <returns>Экземпляр сущности, который может быть учетной записью-посредником.</returns>
      <typeparam name="TDerivedEntity">Тип создаваемой сущности.</typeparam>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Find(System.Object[])">
      <summary>Обнаруживает сущность с указанными значениями первичного ключа.Если сущность с указанными значениями первичного ключа содержится в контексте, она     возвращается немедленно без выполнения запроса к хранилищу.В противном случае выполняется запрос к хранилищу в поисках сущности с указанными значениями первичного ключа. Если такая сущность обнаружена, она добавляется к контексту и возвращается вызывающей стороне.Если сущность не обнаружена в контексте или в хранилище, возвращается значение NULL.</summary>
      <returns>Обнаруженная сущность или значение NULL.</returns>
      <param name="keyValues">Значения первичного ключа для искомой сущности.</param>
    </member>
    <member name="P:System.Data.Entity.IDbSet`1.Local">
      <summary>Возвращает объект <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />, содержащий локальное представление всех добавленных, неизменившихся и измененных сущностей в наборе.Это локальное представление остается синхронизированным по мере добавления или удаления сущностей из контекста.Аналогичным образом добавляемые или удаляемые из этого локального представления сущности автоматически добавляются в контекст или удаляются из контекста.</summary>
      <returns>Локальное представление.</returns>
    </member>
    <member name="M:System.Data.Entity.IDbSet`1.Remove(`0)">
      <summary>Помечает заданную сущность как удаленную, в результате чего она будет удалена из базы данных при вызове метода SaveChanges.Обратите внимание, что перед вызовом этого метода сущность должна существовать в контексте в каком-либо другом состоянии.</summary>
      <returns>Сущность.</returns>
      <param name="entity">Удаляемая сущность.</param>
    </member>
    <member name="T:System.Data.Entity.MigrateDatabaseToLatestVersion`2">
      <summary>Реализация <see cref="T:System.Data.Entity.IDatabaseInitializer`1" />, которая будет использовать Code First Migrations для обновления базы данных до последней версии.</summary>
      <typeparam name="TContext">Тип контекста.</typeparam>
      <typeparam name="TMigrationsConfiguration">Тип конфигурации миграций для использования во время инициализации.</typeparam>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor">
      <summary>Инициализирует новый экземпляр класса MigrateDatabaseToLatestVersion, который будет использовать сведения о подключении из контекста, созданного с помощью конструктора по умолчанию или зарегистрированной фабрики (если применимо)</summary>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor(System.Boolean)">
      <summary>Инициализирует новый экземпляр класса MigrateDatabaseToLatestVersion, указывающего, следует ли использовать сведения о подключении из контекста, активировавшего инициализацию для выполнения миграции.</summary>
      <param name="useSuppliedContext">Если задано значение true, инициализатор запускается с помощью сведений о подключении из контекста, активировавшего инициализацию.В противном случае сведения о подключении будут забраны из контекста, созданного с помощью конструктора по умолчанию или зарегистрированной фабрики (если применимо).</param>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor(System.Boolean,`1)">
      <summary>Инициализирует новый экземпляр класса MigrateDatabaseToLatestVersion, указывающего, следует ли использовать сведения о подключении из контекста, активировавшего инициализацию для выполнения миграции.Также позволяет указать конфигурацию миграции для использования во время инициализации.</summary>
      <param name="useSuppliedContext">Если задано значение true, инициализатор запускается с помощью сведений о подключении из контекста, активировавшего инициализацию.В противном случае сведения о подключении будут забраны из контекста, созданного с помощью конструктора по умолчанию или зарегистрированной фабрики (если применимо).</param>
      <param name="configuration">Конфигурация миграции, используемая во время инициализации.</param>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса MigrateDatabaseToLatestVersion, который будет использовать определенную строку подключения из файла конфигурации для подключения к базе данных, чтобы выполнить миграцию.</summary>
      <param name="connectionStringName">Имя строки подключения, используемой для миграции.</param>
    </member>
    <member name="M:System.Data.Entity.MigrateDatabaseToLatestVersion`2.InitializeDatabase(`0)">
      <summary>Инициализирует базу данных для заданного контекста.</summary>
      <param name="context">Контекст.</param>
    </member>
    <member name="T:System.Data.Entity.NullDatabaseInitializer`1">
      <summary>Реализация <see cref="T:System.Data.Entity.IDatabaseInitializer`1" />, которая не дает результатов.Инициализатор отключает инициализацию базы данных для данного типа контекста.Передача экземпляра     для этого класса <see cref="M:System.Data.Entity.Database.SetInitializer``1(System.Data.Entity.IDatabaseInitializer{``0})" /> эквивалентна передаче значений NULL.Если <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> используется для разрешения инициализаторов, экземпляр этого класса можно использовать для отключения инициализации.</summary>
      <typeparam name="TContext">Тип контекста.</typeparam>
    </member>
    <member name="M:System.Data.Entity.NullDatabaseInitializer`1.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.NullDatabaseInitializer`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.NullDatabaseInitializer`1.InitializeDatabase(`0)">
      <summary>Выполняет стратегию инициализации базы данных для заданного контекста.</summary>
      <param name="context">Контекст.</param>
    </member>
    <member name="T:System.Data.Entity.ObservableCollectionExtensions">
      <summary>Методы расширения для <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ObservableCollectionExtensions.ToBindingList``1(System.Collections.ObjectModel.ObservableCollection{``0})">
      <summary>Возвращает реализацию <see cref="T:System.ComponentModel.BindingList`1" />, которая остается синхронизированной с заданным объектом <see cref="T:System.Collections.ObjectModel.ObservableCollection`1" />.</summary>
      <returns>Связанный список.</returns>
      <param name="source">Коллекция, с которой остается синхронизированным данный связанный список.</param>
      <typeparam name="T">Тип элемента.</typeparam>
    </member>
    <member name="T:System.Data.Entity.QueryableExtensions">
      <summary>Предоставляет полезные методы расширения, которые можно использовать в запросах Entity Framework LINQ.</summary>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AllAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Асинхронно определяет, все ли элементы последовательности удовлетворяют условию.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит значение true, если каждый элемент исходной последовательности проходит проверку в указанном предикате; в противном случае — значение false.</returns>
      <param name="source">Последовательность <see cref="T:System.Linq.IQueryable`1" />, элементы которой проверяются на соответствие условию.</param>
      <param name="predicate">Функция, предназначенная для проверки каждого элемента по условию.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> или <paramref name="predicate" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AllAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>Асинхронно определяет, все ли элементы последовательности удовлетворяют условию.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит значение true, если каждый элемент исходной последовательности проходит проверку в указанном предикате; в противном случае — значение false.</returns>
      <param name="source">Последовательность <see cref="T:System.Linq.IQueryable`1" />, элементы которой проверяются на соответствие условию.</param>
      <param name="predicate">Функция, предназначенная для проверки каждого элемента по условию.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> или <paramref name="predicate" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0})">
      <summary>Асинхронно определяет, содержит ли последовательность какие-либо элементы.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит true, если исходная последовательность содержит какие-либо элементы; в противном случае — значение false.</returns>
      <param name="source">Последовательность <see cref="T:System.Linq.IQueryable`1" />, проверяемая на наличие элементов.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Асинхронно определяет, удовлетворяет ли какой-либо элемент последовательности условию.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит true, если какие-либо элементы в исходной последовательности проходят проверку в указанном предикате; в противном случае — значение false.</returns>
      <param name="source">Последовательность <see cref="T:System.Linq.IQueryable`1" />, элементы которой проверяются на соответствие условию.</param>
      <param name="predicate">Функция, предназначенная для проверки каждого элемента по условию.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>Асинхронно определяет, удовлетворяет ли какой-либо элемент последовательности условию.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит true, если какие-либо элементы в исходной последовательности проходят проверку в указанном предикате; в противном случае — значение false.</returns>
      <param name="source">Последовательность <see cref="T:System.Linq.IQueryable`1" />, элементы которой проверяются на соответствие условию.</param>
      <param name="predicate">Функция, предназначенная для проверки каждого элемента по условию.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AnyAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>Асинхронно определяет, содержит ли последовательность какие-либо элементы.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит true, если исходная последовательность содержит какие-либо элементы; в противном случае — значение false.</returns>
      <param name="source">Последовательность <see cref="T:System.Linq.IQueryable`1" />, проверяемая на наличие элементов.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AsNoTracking(System.Linq.IQueryable)">
      <summary>Возвращает новый запрос, возвращающий сущности, которые не будут кэшироваться в контексте <see cref="T:System.Data.Entity.DbContext" /> или <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.Этот метод работает, вызывая метод AsNoTracking базового объекта запроса.Если базовый объект запроса не включает метод AsNoTracking, то при вызове этого метода не происходит ничего.</summary>
      <returns>Новый запрос с атрибутом NoTracking или исходный запрос, если атрибут NoTracking не поддерживается.</returns>
      <param name="source">Исходный запрос.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AsNoTracking``1(System.Linq.IQueryable{``0})">
      <summary>Возвращает новый запрос, возвращающий сущности, которые не будут кэшироваться в контексте <see cref="T:System.Data.Entity.DbContext" /> или <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.Этот метод работает, вызывая метод AsNoTracking базового объекта запроса.Если базовый объект запроса не включает метод AsNoTracking, то при вызове этого метода не происходит ничего.</summary>
      <returns>Новый запрос с атрибутом NoTracking или исходный запрос, если атрибут NoTracking не поддерживается.</returns>
      <param name="source">Исходный запрос.</param>
      <typeparam name="T">Тип элемента.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AsStreaming(System.Linq.IQueryable)">
      <summary>Возвращает новый запрос, который обеспечивает потоковую обработку результатов вместо буферизации.Этот метод работает, вызывая метод AsStreaming базового объекта запроса.Если базовый объект запроса не включает метод AsStreaming, то при вызове этого метода не происходит ничего.</summary>
      <returns>Новый запрос с атрибутом AsStreaming или исходный запрос, если атрибут AsStreaming не поддерживается.</returns>
      <param name="source">Последовательность <see cref="T:System.Linq.IQueryable" />, к которой необходимо применить AsStreaming.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AsStreaming``1(System.Linq.IQueryable{``0})">
      <summary>Возвращает новый запрос, который обеспечивает потоковую обработку результатов вместо буферизации.Этот метод работает, вызывая метод AsStreaming базового объекта запроса.Если базовый объект запроса не включает метод AsStreaming, то при вызове этого метода не происходит ничего.</summary>
      <returns>Новый запрос с атрибутом AsStreaming или исходный запрос, если атрибут AsStreaming не поддерживается.</returns>
      <param name="source">Последовательность <see cref="T:System.Linq.IQueryable`1" />, к которой необходимо применить AsStreaming.</param>
      <typeparam name="T">Тип элементов последовательности <paramref name="source" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Decimal})">
      <summary>Асинхронно вычисляет среднее значение для последовательности значений <see cref="T:System.Decimal" />.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит среднее значение для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Decimal" />, для которых вычисляется среднее значение.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)">
      <summary>Асинхронно вычисляет среднее значение для последовательности значений <see cref="T:System.Decimal" />.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит среднее значение для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Decimal" />, для которых вычисляется среднее значение.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Double})">
      <summary>Асинхронно вычисляет среднее значение для последовательности значений <see cref="T:System.Double" />.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит среднее значение для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Double" />, для которых вычисляется среднее значение.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)">
      <summary>Асинхронно вычисляет среднее значение для последовательности значений <see cref="T:System.Double" />.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит среднее значение для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Double" />, для которых вычисляется среднее значение.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int32})">
      <summary>Асинхронно вычисляет среднее значение для последовательности значений <see cref="T:System.Int32" />.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит среднее значение для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int32" />, для которых вычисляется среднее значение.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)">
      <summary>Асинхронно вычисляет среднее значение для последовательности значений <see cref="T:System.Int32" />.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит среднее значение для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int32" />, для которых вычисляется среднее значение.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int64})">
      <summary>Асинхронно вычисляет среднее значение для последовательности значений <see cref="T:System.Int64" />.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит среднее значение для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int64" />, для которых вычисляется среднее значение.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)">
      <summary>Асинхронно вычисляет среднее значение для последовательности значений <see cref="T:System.Int64" />.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит среднее значение для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int64" />, для которых вычисляется среднее значение.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>Асинхронно вычисляет среднее значение для последовательности значений <see cref="T:System.Decimal" />, которые могут быть равны NULL.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит среднее значение для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Decimal" />, которые могут быть равны NULL и для которых вычисляется среднее значение.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
      <summary>Асинхронно вычисляет среднее значение для последовательности значений <see cref="T:System.Decimal" />, которые могут быть равны NULL.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит среднее значение для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Decimal" />, которые могут быть равны NULL и для которых вычисляется среднее значение.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>Асинхронно вычисляет среднее значение для последовательности значений <see cref="T:System.Double" />, которые могут быть равны NULL.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит среднее значение для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Double" />, которые могут быть равны NULL и для которых вычисляется среднее значение.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)">
      <summary>Асинхронно вычисляет среднее значение для последовательности значений <see cref="T:System.Double" />, которые могут быть равны NULL.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит среднее значение для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Double" />, которые могут быть равны NULL и для которых вычисляется среднее значение.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>Асинхронно вычисляет среднее значение для последовательности значений <see cref="T:System.Int32" />, которые могут быть равны NULL.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит среднее значение для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int32" />, которые могут быть равны NULL и для которых вычисляется среднее значение.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)">
      <summary>Асинхронно вычисляет среднее значение для последовательности значений <see cref="T:System.Int32" />, которые могут быть равны NULL.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит среднее значение для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int32" />, которые могут быть равны NULL и для которых вычисляется среднее значение.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>Асинхронно вычисляет среднее значение для последовательности значений <see cref="T:System.Int64" />, которые могут быть равны NULL.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит среднее значение для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int64" />, которые могут быть равны NULL и для которых вычисляется среднее значение.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)">
      <summary>Асинхронно вычисляет среднее значение для последовательности значений <see cref="T:System.Int64" />, которые могут быть равны NULL.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит среднее значение для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int64" />, которые могут быть равны NULL и для которых вычисляется среднее значение.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>Асинхронно вычисляет среднее значение для последовательности значений <see cref="T:System.Single" />, которые могут быть равны NULL.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит среднее значение для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Single" />, которые могут быть равны NULL и для которых вычисляется среднее значение.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)">
      <summary>Асинхронно вычисляет среднее значение для последовательности значений <see cref="T:System.Single" />, которые могут быть равны NULL.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит среднее значение для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Single" />, которые могут быть равны NULL и для которых вычисляется среднее значение.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Single})">
      <summary>Асинхронно вычисляет среднее значение для последовательности значений <see cref="T:System.Single" />.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит среднее значение для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Single" />, для которых вычисляется среднее значение.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)">
      <summary>Асинхронно вычисляет среднее значение для последовательности значений <see cref="T:System.Single" />.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит среднее значение для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Single" />, для которых вычисляется среднее значение.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>Асинхронно вычисляет среднее значение для последовательности значений типа <see cref="T:System.Decimal" />, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит среднее значение для последовательности значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее значение.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)">
      <summary>Асинхронно вычисляет среднее значение для последовательности значений типа <see cref="T:System.Decimal" />, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит среднее значение для последовательности значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее значение.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>Асинхронно вычисляет среднее значение для последовательности значений типа <see cref="T:System.Double" />, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит среднее значение для последовательности значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее значение.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)">
      <summary>Асинхронно вычисляет среднее значение для последовательности значений типа <see cref="T:System.Double" />, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит среднее значение для последовательности значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее значение.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>Асинхронно вычисляет среднее значение для последовательности значений типа <see cref="T:System.Int32" />, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит среднее значение для последовательности значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее значение.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)">
      <summary>Асинхронно вычисляет среднее значение для последовательности значений типа <see cref="T:System.Int32" />, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит среднее значение для последовательности значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее значение.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>Асинхронно вычисляет среднее значение для последовательности значений типа <see cref="T:System.Int64" />, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит среднее значение для последовательности значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее значение.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)">
      <summary>Асинхронно вычисляет среднее значение для последовательности значений типа <see cref="T:System.Int64" />, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит среднее значение для последовательности значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее значение.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>Асинхронно вычисляет среднее значение для последовательности значений <see cref="T:System.Decimal" />, которые могут быть равны NULL, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит среднее значение для последовательности значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее значение.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
      <summary>Асинхронно вычисляет среднее значение для последовательности значений <see cref="T:System.Decimal" />, которые могут быть равны NULL, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит среднее значение для последовательности значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее значение.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>Асинхронно вычисляет среднее значение для последовательности значений <see cref="T:System.Double" />, которые могут быть равны NULL, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит среднее значение для последовательности значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее значение.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)">
      <summary>Асинхронно вычисляет среднее значение для последовательности значений <see cref="T:System.Double" />, которые могут быть равны NULL, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит среднее значение для последовательности значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее значение.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>Асинхронно вычисляет среднее значение для последовательности значений <see cref="T:System.Int32" />, которые могут быть равны NULL, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит среднее значение для последовательности значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее значение.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
      <summary>Асинхронно вычисляет среднее значение для последовательности значений <see cref="T:System.Int32" />, которые могут быть равны NULL, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит среднее значение для последовательности значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее значение.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>Асинхронно вычисляет среднее значение для последовательности значений <see cref="T:System.Int64" />, которые могут быть равны NULL, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит среднее значение для последовательности значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее значение.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
      <summary>Асинхронно вычисляет среднее значение для последовательности значений <see cref="T:System.Int64" />, которые могут быть равны NULL, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит среднее значение для последовательности значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее значение.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>Асинхронно вычисляет среднее значение для последовательности значений <see cref="T:System.Single" />, которые могут быть равны NULL, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит среднее значение для последовательности значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее значение.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)">
      <summary>Асинхронно вычисляет среднее значение для последовательности значений <see cref="T:System.Single" />, которые могут быть равны NULL, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит среднее значение для последовательности значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее значение.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>Асинхронно вычисляет среднее значение для последовательности значений типа <see cref="T:System.Single" />, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит среднее значение для последовательности значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее значение.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.AverageAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)">
      <summary>Асинхронно вычисляет среднее значение для последовательности значений типа <see cref="T:System.Single" />, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит среднее значение для последовательности значений.</returns>
      <param name="source">Последовательность значений, для которых вычисляется среднее значение.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">Последовательность <paramref name="source" /> не содержит элементов.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ContainsAsync``1(System.Linq.IQueryable{``0},``0)">
      <summary>Асинхронно определяет, содержит ли последовательность указанный элемент, применяя заданное по умолчанию средство сравнения на равенство.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит true, если входящая последовательность содержит указанное значение; в противном случае — значение false.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, единственный элемент которого требуется вернуть.</param>
      <param name="item">Объект, который требуется найти в последовательности.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ContainsAsync``1(System.Linq.IQueryable{``0},``0,System.Threading.CancellationToken)">
      <summary>Асинхронно определяет, содержит ли последовательность указанный элемент, применяя заданное по умолчанию средство сравнения на равенство.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит true, если входящая последовательность содержит указанное значение; в противном случае — значение false.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, единственный элемент которого требуется вернуть.</param>
      <param name="item">Объект, который требуется найти в последовательности.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0})">
      <summary>Асинхронно возвращает количество элементов в последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит количество элементов во входящей последовательности.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, содержащий элементы, которые требуется подсчитать.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Число элементов в последовательности <paramref name="source" /> больше, чем <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Асинхронно возвращает количество элементов в последовательности, удовлетворяющих условию.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит количество элементов в последовательности, которые удовлетворяют условию в предикативной функции.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, содержащий элементы, которые требуется подсчитать.</param>
      <param name="predicate">Функция, предназначенная для проверки каждого элемента по условию.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Число элементов в <paramref name="source" />, которые удовлетворяют условию в предикативной функции, больше <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>Асинхронно возвращает количество элементов в последовательности, удовлетворяющих условию.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит количество элементов в последовательности, которые удовлетворяют условию в предикативной функции.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, содержащий элементы, которые требуется подсчитать.</param>
      <param name="predicate">Функция, предназначенная для проверки каждого элемента по условию.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Число элементов в <paramref name="source" />, которые удовлетворяют условию в предикативной функции, больше <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>Асинхронно возвращает количество элементов в последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит количество элементов во входящей последовательности.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, содержащий элементы, которые требуется подсчитать.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Число элементов в последовательности <paramref name="source" /> больше, чем <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0})">
      <summary>Асинхронно возвращает первый элемент последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит первый элемент в <paramref name="source" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, первый элемент которого требуется вернуть.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">Исходная последовательность пуста.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Асинхронно возвращает первый элемент последовательности, удовлетворяющий указанному условию.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит первый элемент в <paramref name="source" />, который проходит проверку в функции <paramref name="predicate" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, первый элемент которого требуется вернуть.</param>
      <param name="predicate">Функция, предназначенная для проверки каждого элемента по условию.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">Ни один элемент не удовлетворяет условию в <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>Асинхронно возвращает первый элемент последовательности, удовлетворяющий указанному условию.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит первый элемент в <paramref name="source" />, который проходит проверку в функции <paramref name="predicate" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, первый элемент которого требуется вернуть.</param>
      <param name="predicate">Функция, предназначенная для проверки каждого элемента по условию.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">Ни один элемент не удовлетворяет условию в <paramref name="predicate" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>Асинхронно возвращает первый элемент последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит первый элемент в <paramref name="source" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, первый элемент которого требуется вернуть.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">Исходная последовательность пуста.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0})">
      <summary>Асинхронно возвращает первый элемент последовательности или значение по умолчанию, если последовательность не содержит элементов.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит значение default (<paramref name="TSource" />), если последовательность <paramref name="source" /> пуста; в противном случае — первый элемент в последовательности <paramref name="source" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, первый элемент которого требуется вернуть.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Асинхронно возвращает первый элемент последовательности, удовлетворяющий указанному условию, либо значение по умолчанию, если такой элемент не найден.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит default (<paramref name="TSource" />), если последовательность <paramref name="source" /> пуста или ни один элемент не проходит проверку, заданную в <paramref name="predicate" />; в противном случае — первый элемент в последовательности <paramref name="source" />, который проходит проверку, заданную в <paramref name="predicate" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, первый элемент которого требуется вернуть.</param>
      <param name="predicate">Функция, предназначенная для проверки каждого элемента по условию.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>Асинхронно возвращает первый элемент последовательности, удовлетворяющий указанному условию, либо значение по умолчанию, если такой элемент не найден.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит default (<paramref name="TSource" />), если последовательность <paramref name="source" /> пуста или ни один элемент не проходит проверку, заданную в <paramref name="predicate" />; в противном случае — первый элемент в последовательности <paramref name="source" />, который проходит проверку, заданную в <paramref name="predicate" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, первый элемент которого требуется вернуть.</param>
      <param name="predicate">Функция, предназначенная для проверки каждого элемента по условию.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> имеет более одного элемента.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.FirstOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>Асинхронно возвращает первый элемент последовательности или значение по умолчанию, если последовательность не содержит элементов.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит значение default (<paramref name="TSource" />), если последовательность <paramref name="source" /> пуста; в противном случае — первый элемент в последовательности <paramref name="source" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, первый элемент которого требуется вернуть.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ForEachAsync(System.Linq.IQueryable,System.Action{System.Object})">
      <summary>Перечисляет в асинхронном режиме результаты запроса и выполняет указанное действие над каждым элементом.</summary>
      <returns>Задача, представляющая асинхронную операцию.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable" /> для перечисления.</param>
      <param name="action">Действие, которое должно быть выполнено над каждым элементом.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ForEachAsync(System.Linq.IQueryable,System.Action{System.Object},System.Threading.CancellationToken)">
      <summary>Перечисляет в асинхронном режиме результаты запроса и выполняет указанное действие над каждым элементом.</summary>
      <returns>Задача, представляющая асинхронную операцию.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable" /> для перечисления.</param>
      <param name="action">Действие, которое должно быть выполнено над каждым элементом.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ForEachAsync``1(System.Linq.IQueryable{``0},System.Action{``0})">
      <summary>Перечисляет в асинхронном режиме результаты запроса и выполняет указанное действие над каждым элементом.</summary>
      <returns>Задача, представляющая асинхронную операцию.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" /> для перечисления.</param>
      <param name="action">Действие, которое должно быть выполнено над каждым элементом.</param>
      <typeparam name="T">Тип элементов последовательности <paramref name="source" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ForEachAsync``1(System.Linq.IQueryable{``0},System.Action{``0},System.Threading.CancellationToken)">
      <summary>Перечисляет в асинхронном режиме результаты запроса и выполняет указанное действие над каждым элементом.</summary>
      <returns>Задача, представляющая асинхронную операцию.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" /> для перечисления.</param>
      <param name="action">Действие, которое должно быть выполнено над каждым элементом.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="T">Тип элементов последовательности <paramref name="source" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Include(System.Linq.IQueryable,System.String)">
      <summary>Задает связанные объекты, включаемые в результаты запроса.</summary>
      <returns>Новый запрос <see cref="T:System.Linq.IQueryable" /> с определенным путем запроса.</returns>
      <param name="source">Исходная последовательность <see cref="T:System.Linq.IQueryable" />, для которой вызывается метод Include.</param>
      <param name="path">Разделенный точками список связанных объектов, включаемых в результаты запроса.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Include``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Задает связанные объекты, включаемые в результаты запроса.</summary>
      <returns>Новый интерфейс IQueryable&amp;lt;T&amp;gt; с указанным путем запроса.</returns>
      <param name="source">Исходный интерфейс IQueryable, для которого вызывается метод Include.</param>
      <param name="path">Лямбда-выражение, представляющее включаемый путь.</param>
      <typeparam name="T">Запрашиваемый тип сущности.</typeparam>
      <typeparam name="TProperty">Тип включаемого свойства навигации.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Include``1(System.Linq.IQueryable{``0},System.String)">
      <summary>Задает связанные объекты, включаемые в результаты запроса.</summary>
      <returns>Новый запрос <see cref="T:System.Linq.IQueryable`1" /> с определенным путем запроса.</returns>
      <param name="source">Исходная последовательность <see cref="T:System.Linq.IQueryable`1" />, для которой вызывается метод Include.</param>
      <param name="path">Разделенный точками список связанных объектов, включаемых в результаты запроса.</param>
      <typeparam name="T">Запрашиваемый тип сущности.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Load(System.Linq.IQueryable)">
      <summary>Перечисляет запросы, например такие запросы сервера, как <see cref="T:System.Data.Entity.DbSet`1" />, <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />, <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> и другие, для которых результаты будут загружены в связанный контекст <see cref="T:System.Data.Entity.DbContext" />, <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> или другой кэш на стороне клиента.Эквивалентен вызову метода ToList и затем отклонению списка, чтобы метод фактически не создавал список.</summary>
      <param name="source">Исходный запрос.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LoadAsync(System.Linq.IQueryable)">
      <summary>Асинхронно перечисляет запросы, например запросы сервера <see cref="T:System.Data.Entity.DbSet`1" />, <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />, <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> и другие, для которых результаты будут загружены в связанный контекст <see cref="T:System.Data.Entity.DbContext" />, <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> или другой кэш на стороне клиента.Эквивалентен вызову метода ToList и затем отклонению списка, чтобы метод фактически не создавал список.</summary>
      <returns>Задача, представляющая асинхронную операцию.</returns>
      <param name="source">Исходный запрос.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LoadAsync(System.Linq.IQueryable,System.Threading.CancellationToken)">
      <summary>Асинхронно перечисляет запросы, например запросы сервера <see cref="T:System.Data.Entity.DbSet`1" />, <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />, <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> и другие, для которых результаты будут загружены в связанный контекст <see cref="T:System.Data.Entity.DbContext" />, <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> или другой кэш на стороне клиента.Эквивалентен вызову метода ToList и затем отклонению списка, чтобы метод фактически не создавал список.</summary>
      <returns>Задача, представляющая асинхронную операцию.</returns>
      <param name="source">Исходный запрос.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0})">
      <summary>Асинхронно возвращает значение <see cref="T:System.Int64" />, которое представляет общее количество элементов в последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит количество элементов во входящей последовательности.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, содержащий элементы, которые требуется подсчитать.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Число элементов в последовательности <paramref name="source" /> больше, чем <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Асинхронно возвращает значение <see cref="T:System.Int64" />, которое представляет количество элементов в последовательности, удовлетворяющих условию.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит количество элементов в последовательности, которые удовлетворяют условию в предикативной функции.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, содержащий элементы, которые требуется подсчитать.</param>
      <param name="predicate">Функция, предназначенная для проверки каждого элемента по условию.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Число элементов в <paramref name="source" />, которые удовлетворяют условию в предикативной функции, больше <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>Асинхронно возвращает значение <see cref="T:System.Int64" />, которое представляет количество элементов в последовательности, удовлетворяющих условию.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит количество элементов в последовательности, которые удовлетворяют условию в предикативной функции.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, содержащий элементы, которые требуется подсчитать.</param>
      <param name="predicate">Функция, предназначенная для проверки каждого элемента по условию.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Число элементов в <paramref name="source" />, которые удовлетворяют условию в предикативной функции, больше <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.LongCountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>Асинхронно возвращает значение <see cref="T:System.Int64" />, которое представляет общее количество элементов в последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит количество элементов во входящей последовательности.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, содержащий элементы, которые требуется подсчитать.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Число элементов в последовательности <paramref name="source" /> больше, чем <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MaxAsync``1(System.Linq.IQueryable{``0})">
      <summary>Асинхронно возвращает максимальное значение последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит максимальное значение в результате последовательности.</returns>
      <param name="source">Последовательность <see cref="T:System.Linq.IQueryable`1" />, содержащая элементы, из которых необходимо выделить максимальное значение.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MaxAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Асинхронно вызывает функцию проекции для каждого элемента последовательности и возвращает максимальное результирующее значение.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит максимальное значение в результате последовательности.</returns>
      <param name="source">Последовательность <see cref="T:System.Linq.IQueryable`1" />, содержащая элементы, из которых необходимо выделить максимальное значение.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Тип значения, возвращаемого функцией, заданной параметром <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MaxAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
      <summary>Асинхронно вызывает функцию проекции для каждого элемента последовательности и возвращает максимальное результирующее значение.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит максимальное значение в результате последовательности.</returns>
      <param name="source">Последовательность <see cref="T:System.Linq.IQueryable`1" />, содержащая элементы, из которых необходимо выделить максимальное значение.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Тип значения, возвращаемого функцией, заданной параметром <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MaxAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>Асинхронно возвращает максимальное значение последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит максимальное значение в результате последовательности.</returns>
      <param name="source">Последовательность <see cref="T:System.Linq.IQueryable`1" />, содержащая элементы, из которых необходимо выделить максимальное значение.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MinAsync``1(System.Linq.IQueryable{``0})">
      <summary>Асинхронно возвращает минимальное значение последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит минимальное значение в последовательности.</returns>
      <param name="source">Последовательность <see cref="T:System.Linq.IQueryable`1" />, содержащая элементы, из которых необходимо выделить минимальное значение.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MinAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Асинхронно вызывает функцию проекции для каждого элемента последовательности и возвращает минимальное результирующее значение.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит минимальное значение в последовательности.</returns>
      <param name="source">Последовательность <see cref="T:System.Linq.IQueryable`1" />, содержащая элементы, из которых необходимо выделить минимальное значение.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Тип значения, возвращаемого функцией, заданной параметром <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MinAsync``2(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Threading.CancellationToken)">
      <summary>Асинхронно вызывает функцию проекции для каждого элемента последовательности и возвращает минимальное результирующее значение.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит минимальное значение в последовательности.</returns>
      <param name="source">Последовательность <see cref="T:System.Linq.IQueryable`1" />, содержащая элементы, из которых необходимо выделить минимальное значение.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TResult">Тип значения, возвращаемого функцией, заданной параметром <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.MinAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>Асинхронно возвращает минимальное значение последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит минимальное значение в последовательности.</returns>
      <param name="source">Последовательность <see cref="T:System.Linq.IQueryable`1" />, содержащая элементы, из которых необходимо выделить минимальное значение.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0})">
      <summary>Асинхронно возвращает единственный элемент последовательности и вызывает исключение, если количество элементов в последовательности не равно точно одному.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит единственный элемент во входящей последовательности.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, единственный элемент которого требуется вернуть.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">Исходная последовательность пуста.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Асинхронно возвращает единственный элемент последовательности, удовлетворяющий заданному условию, и вызывает исключение, если существуют несколько таких элементов.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит единственный элемент во входящей последовательности, который удовлетворяет условию в <paramref name="predicate" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, единственный элемент которого требуется вернуть.</param>
      <param name="predicate">Функция для проверки элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">Ни один элемент не удовлетворяет условию в <paramref name="predicate" />.</exception>
      <exception cref="T:System.InvalidOperationException">Условию в <paramref name="predicate" /> удовлетворяют больше одного элемента.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>Асинхронно возвращает единственный элемент последовательности, удовлетворяющий заданному условию, и вызывает исключение, если существуют несколько таких элементов.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит единственный элемент во входящей последовательности, который удовлетворяет условию в <paramref name="predicate" />.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, единственный элемент которого требуется вернуть.</param>
      <param name="predicate">Функция для проверки элемента на соответствие условию.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">Ни один элемент не удовлетворяет условию в <paramref name="predicate" />.</exception>
      <exception cref="T:System.InvalidOperationException">Условию в <paramref name="predicate" /> удовлетворяют больше одного элемента.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>Асинхронно возвращает единственный элемент последовательности и вызывает исключение, если количество элементов в последовательности не равно точно одному.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит единственный элемент во входящей последовательности.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, единственный элемент которого требуется вернуть.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> имеет более одного элемента.</exception>
      <exception cref="T:System.InvalidOperationException">Исходная последовательность пуста.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0})">
      <summary>Возвращает в асинхронном режиме единственный элемент последовательности или значение по умолчанию, если последовательность пуста; этот метод вызывает исключение, если количество элементов в последовательности больше одного.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит единственный элемент во входящей последовательности или default (<paramref name="TSource" />), если последовательность не содержит элементов.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, единственный элемент которого требуется вернуть.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> имеет более одного элемента.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
      <summary>Асинхронно возвращает единственный элемент последовательности, удовлетворяющий заданному условию, или значение по умолчанию, если такой элемент не существует; этот метод вызывает исключение, если условию удовлетворяют больше одного элемента.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит единственный элемент во входящей последовательности, который удовлетворяет условию в <paramref name="predicate" /> или default (<paramref name="TSource" />), если такой элемент не найден.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, единственный элемент которого требуется вернуть.</param>
      <param name="predicate">Функция для проверки элемента на соответствие условию.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}},System.Threading.CancellationToken)">
      <summary>Асинхронно возвращает единственный элемент последовательности, удовлетворяющий заданному условию, или значение по умолчанию, если такой элемент не существует; этот метод вызывает исключение, если условию удовлетворяют больше одного элемента.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит единственный элемент во входящей последовательности, который удовлетворяет условию в <paramref name="predicate" /> или default (<paramref name="TSource" />), если такой элемент не найден.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, единственный элемент которого требуется вернуть.</param>
      <param name="predicate">Функция для проверки элемента на соответствие условию.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="predicate" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SingleOrDefaultAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>Возвращает в асинхронном режиме единственный элемент последовательности или значение по умолчанию, если последовательность пуста; этот метод вызывает исключение, если количество элементов в последовательности больше одного.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит единственный элемент во входящей последовательности или default (<paramref name="TSource" />), если последовательность не содержит элементов.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, единственный элемент которого требуется вернуть.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> имеет более одного элемента.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Skip``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}})">
      <summary>Пропускает заданное число элементов в последовательности и возвращает остальные элементы.</summary>
      <returns>Последовательность, содержащая элементы из входной последовательности, начиная с указанного индекса.</returns>
      <param name="source">Последовательность, из которой требуется возвратить элементы.</param>
      <param name="countAccessor">Выражение, указывающее, сколько элементов нужно пропустить.</param>
      <typeparam name="TSource">Тип элементов исходной последовательности.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Decimal})">
      <summary>Асинхронно вычисляет сумму для последовательности значений <see cref="T:System.Decimal" />.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит сумму для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Decimal" />, сумму которых требуется вычислить.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Decimal},System.Threading.CancellationToken)">
      <summary>Асинхронно вычисляет сумму для последовательности значений <see cref="T:System.Decimal" />.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит сумму для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Decimal" />, сумму которых требуется вычислить.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Double})">
      <summary>Асинхронно вычисляет сумму для последовательности значений <see cref="T:System.Double" />.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит сумму для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Double" />, сумму которых требуется вычислить.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Double},System.Threading.CancellationToken)">
      <summary>Асинхронно вычисляет сумму для последовательности значений <see cref="T:System.Double" />.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит сумму для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Double" />, сумму которых требуется вычислить.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int32})">
      <summary>Асинхронно вычисляет сумму для последовательности значений <see cref="T:System.Int32" />.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит сумму для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int32" />, сумму которых требуется вычислить.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Число элементов в последовательности <paramref name="source" /> больше, чем <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int32},System.Threading.CancellationToken)">
      <summary>Асинхронно вычисляет сумму для последовательности значений <see cref="T:System.Int32" />.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит сумму для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int32" />, сумму которых требуется вычислить.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Число элементов в последовательности <paramref name="source" /> больше, чем <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int64})">
      <summary>Асинхронно вычисляет сумму для последовательности значений <see cref="T:System.Int64" />.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит сумму для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int64" />, сумму которых требуется вычислить.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Число элементов в последовательности <paramref name="source" /> больше, чем <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Int64},System.Threading.CancellationToken)">
      <summary>Асинхронно вычисляет сумму для последовательности значений <see cref="T:System.Int64" />.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит сумму для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int64" />, сумму которых требуется вычислить.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Число элементов в последовательности <paramref name="source" /> больше, чем <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}})">
      <summary>Асинхронно вычисляет сумму для последовательности значений <see cref="T:System.Decimal" />, которые могут быть равны NULL.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит сумму для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Decimal" />, которые могут быть равны NULL и сумму которых требуется вычислить.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Decimal}},System.Threading.CancellationToken)">
      <summary>Асинхронно вычисляет сумму для последовательности значений <see cref="T:System.Decimal" />, которые могут быть равны NULL.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит сумму для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Decimal" />, которые могут быть равны NULL и сумму которых требуется вычислить.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Число элементов в последовательности <paramref name="source" /> больше, чем <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Double}})">
      <summary>Асинхронно вычисляет сумму для последовательности значений <see cref="T:System.Double" />, которые могут быть равны NULL.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит сумму для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Double" />, которые могут быть равны NULL и сумму которых требуется вычислить.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Double}},System.Threading.CancellationToken)">
      <summary>Асинхронно вычисляет сумму для последовательности значений <see cref="T:System.Double" />, которые могут быть равны NULL.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит сумму для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Double" />, которые могут быть равны NULL и сумму которых требуется вычислить.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int32}})">
      <summary>Асинхронно вычисляет сумму для последовательности значений <see cref="T:System.Int32" />, которые могут быть равны NULL.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит сумму для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int32" />, которые могут быть равны NULL и сумму которых требуется вычислить.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Число элементов в последовательности <paramref name="source" /> больше, чем <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int32}},System.Threading.CancellationToken)">
      <summary>Асинхронно вычисляет сумму для последовательности значений <see cref="T:System.Int32" />, которые могут быть равны NULL.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит сумму для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int32" />, которые могут быть равны NULL и сумму которых требуется вычислить.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Число элементов в последовательности <paramref name="source" /> больше, чем <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int64}})">
      <summary>Асинхронно вычисляет сумму для последовательности значений <see cref="T:System.Int64" />, которые могут быть равны NULL.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит сумму для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int64" />, которые могут быть равны NULL и сумму которых требуется вычислить.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Число элементов в последовательности <paramref name="source" /> больше, чем <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Int64}},System.Threading.CancellationToken)">
      <summary>Асинхронно вычисляет сумму для последовательности значений <see cref="T:System.Int64" />, которые могут быть равны NULL.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит сумму для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Int64" />, которые могут быть равны NULL и сумму которых требуется вычислить.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Число элементов в последовательности <paramref name="source" /> больше, чем <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Single}})">
      <summary>Асинхронно вычисляет сумму для последовательности значений <see cref="T:System.Single" />, которые могут быть равны NULL.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит сумму для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Single" />, которые могут быть равны NULL и сумму которых требуется вычислить.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Nullable{System.Single}},System.Threading.CancellationToken)">
      <summary>Асинхронно вычисляет сумму для последовательности значений <see cref="T:System.Single" />, которые могут быть равны NULL.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит сумму для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Single" />, которые могут быть равны NULL и сумму которых требуется вычислить.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Single})">
      <summary>Асинхронно вычисляет сумму для последовательности значений <see cref="T:System.Single" />.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит сумму для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Single" />, сумму которых требуется вычислить.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync(System.Linq.IQueryable{System.Single},System.Threading.CancellationToken)">
      <summary>Асинхронно вычисляет сумму для последовательности значений <see cref="T:System.Single" />.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит сумму для последовательности значений.</returns>
      <param name="source">Последовательность значений <see cref="T:System.Single" />, сумму которых требуется вычислить.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}})">
      <summary>Асинхронно вычисляет сумму для последовательности значений типа <see cref="T:System.Decimal" />, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит сумму для значений из проекции.</returns>
      <param name="source">Последовательность значений типа <paramref name="TSource" />.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Число элементов в последовательности <paramref name="source" /> больше, чем <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Decimal}},System.Threading.CancellationToken)">
      <summary>Асинхронно вычисляет сумму для последовательности значений типа <see cref="T:System.Decimal" />, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит сумму для значений из проекции.</returns>
      <param name="source">Последовательность значений типа <paramref name="TSource" />.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Число элементов в последовательности <paramref name="source" /> больше, чем <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}})">
      <summary>Асинхронно вычисляет сумму для последовательности значений типа <see cref="T:System.Double" />, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит сумму для значений из проекции.</returns>
      <param name="source">Последовательность значений типа <paramref name="TSource" />.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Double}},System.Threading.CancellationToken)">
      <summary>Асинхронно вычисляет сумму для последовательности значений типа <see cref="T:System.Double" />, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит сумму для значений из проекции.</returns>
      <param name="source">Последовательность значений типа <paramref name="TSource" />.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}})">
      <summary>Асинхронно вычисляет сумму для последовательности значений типа <see cref="T:System.Int32" />, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит сумму для значений из проекции.</returns>
      <param name="source">Последовательность значений типа <paramref name="TSource" />.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Число элементов в последовательности <paramref name="source" /> больше, чем <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int32}},System.Threading.CancellationToken)">
      <summary>Асинхронно вычисляет сумму для последовательности значений типа <see cref="T:System.Int32" />, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит сумму для значений из проекции.</returns>
      <param name="source">Последовательность значений типа <paramref name="TSource" />.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Число элементов в последовательности <paramref name="source" /> больше, чем <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}})">
      <summary>Асинхронно вычисляет сумму для последовательности значений типа <see cref="T:System.Int64" />, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит сумму для значений из проекции.</returns>
      <param name="source">Последовательность значений типа <paramref name="TSource" />.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Число элементов в последовательности <paramref name="source" /> больше, чем <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Int64}},System.Threading.CancellationToken)">
      <summary>Асинхронно вычисляет сумму для последовательности значений типа <see cref="T:System.Int64" />, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит сумму для значений из проекции.</returns>
      <param name="source">Последовательность значений типа <paramref name="TSource" />.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Число элементов в последовательности <paramref name="source" /> больше, чем <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}})">
      <summary>Асинхронно вычисляет сумму для последовательности значений <see cref="T:System.Decimal" />, которые могут быть равны NULL, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит сумму для значений из проекции.</returns>
      <param name="source">Последовательность значений типа <paramref name="TSource" />.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Число элементов в последовательности <paramref name="source" /> больше, чем <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Decimal}}},System.Threading.CancellationToken)">
      <summary>Асинхронно вычисляет сумму для последовательности значений <see cref="T:System.Decimal" />, которые могут быть равны NULL, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит сумму для значений из проекции.</returns>
      <param name="source">Последовательность значений типа <paramref name="TSource" />.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Число элементов в последовательности <paramref name="source" /> больше, чем <see cref="F:System.Decimal.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}})">
      <summary>Асинхронно вычисляет сумму для последовательности значений <see cref="T:System.Double" />, которые могут быть равны NULL, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит сумму для значений из проекции.</returns>
      <param name="source">Последовательность значений типа <paramref name="TSource" />.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Double}}},System.Threading.CancellationToken)">
      <summary>Асинхронно вычисляет сумму для последовательности значений <see cref="T:System.Double" />, которые могут быть равны NULL, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит сумму для значений из проекции.</returns>
      <param name="source">Последовательность значений типа <paramref name="TSource" />.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}})">
      <summary>Асинхронно вычисляет сумму для последовательности значений <see cref="T:System.Int32" />, которые могут быть равны NULL, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит сумму для значений из проекции.</returns>
      <param name="source">Последовательность значений типа <paramref name="TSource" />.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Число элементов в последовательности <paramref name="source" /> больше, чем <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int32}}},System.Threading.CancellationToken)">
      <summary>Асинхронно вычисляет сумму для последовательности значений <see cref="T:System.Int32" />, которые могут быть равны NULL, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит сумму для значений из проекции.</returns>
      <param name="source">Последовательность значений типа <paramref name="TSource" />.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Число элементов в последовательности <paramref name="source" /> больше, чем <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}})">
      <summary>Асинхронно вычисляет сумму для последовательности значений <see cref="T:System.Int64" />, которые могут быть равны NULL, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит сумму для значений из проекции.</returns>
      <param name="source">Последовательность значений типа <paramref name="TSource" />.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Число элементов в последовательности <paramref name="source" /> больше, чем <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Int64}}},System.Threading.CancellationToken)">
      <summary>Асинхронно вычисляет сумму для последовательности значений <see cref="T:System.Int64" />, которые могут быть равны NULL, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит сумму для значений из проекции.</returns>
      <param name="source">Последовательность значений типа <paramref name="TSource" />.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
      <exception cref="T:System.OverflowException">Число элементов в последовательности <paramref name="source" /> больше, чем <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}})">
      <summary>Асинхронно вычисляет сумму для последовательности значений <see cref="T:System.Single" />, которые могут быть равны NULL, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит сумму для значений из проекции.</returns>
      <param name="source">Последовательность значений типа <paramref name="TSource" />.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Nullable{System.Single}}},System.Threading.CancellationToken)">
      <summary>Асинхронно вычисляет сумму для последовательности значений <see cref="T:System.Single" />, которые могут быть равны NULL, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит сумму для значений из проекции.</returns>
      <param name="source">Последовательность значений типа <paramref name="TSource" />.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}})">
      <summary>Асинхронно вычисляет сумму для последовательности значений типа <see cref="T:System.Single" />, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит сумму для значений из проекции.</returns>
      <param name="source">Последовательность значений типа <paramref name="TSource" />.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.SumAsync``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Single}},System.Threading.CancellationToken)">
      <summary>Асинхронно вычисляет сумму для последовательности значений типа <see cref="T:System.Single" />, получаемой в результате применения функции проекции к каждому элементу входной последовательности.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит сумму для значений из проекции.</returns>
      <param name="source">Последовательность значений типа <paramref name="TSource" />.</param>
      <param name="selector">Функция проекции, применяемая к каждому элементу.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <paramref name="source" /> не реализует <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider" />.</exception>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.Take``1(System.Linq.IQueryable{``0},System.Linq.Expressions.Expression{System.Func{System.Int32}})">
      <summary>Возвращает указанное число последовательных элементов от начала последовательности.</summary>
      <returns>Последовательность, содержащая заданное число элементов с начала входной последовательности.</returns>
      <param name="source">Последовательность, из которой требуется возвратить элементы.</param>
      <param name="countAccessor">Выражение, указывающее, сколько элементов нужно вернуть.</param>
      <typeparam name="TSource">Тип элементов исходной последовательности.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToArrayAsync``1(System.Linq.IQueryable{``0})">
      <summary>Создает массив из последовательности <see cref="T:System.Linq.IQueryable`1" /> путем асинхронного перечисления.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит массив, содержащий элементы из входной последовательности.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, на основе которого создается массив.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToArrayAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>Создает массив из последовательности <see cref="T:System.Linq.IQueryable`1" /> путем асинхронного перечисления.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит массив, содержащий элементы из входной последовательности.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, на основе которого создается массив.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1})">
      <summary>Создает выражение <see cref="T:System.Collections.Generic.Dictionary`2" /> из последовательности <see cref="T:System.Linq.IQueryable`1" /> путем его асинхронного перечисления согласно заданной функции выбора ключа.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит словарь <see cref="T:System.Collections.Generic.Dictionary`2" />, который содержит выбранные ключи и значения.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, на основе которого создается словарь <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Функция, предназначенная для извлечения ключа из каждого элемента.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращенного средством выбора <paramref name="keySelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Создает выражение <see cref="T:System.Collections.Generic.Dictionary`2" /> из последовательности <see cref="T:System.Linq.IQueryable`1" /> путем его асинхронного перечисления согласно заданной функции выбора ключа и средства сравнения.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит словарь <see cref="T:System.Collections.Generic.Dictionary`2" />, который содержит выбранные ключи и значения.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, на основе которого создается словарь <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Функция, предназначенная для извлечения ключа из каждого элемента.</param>
      <param name="comparer">Значение <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращенного средством выбора <paramref name="keySelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
      <summary>Создает выражение <see cref="T:System.Collections.Generic.Dictionary`2" /> из последовательности <see cref="T:System.Linq.IQueryable`1" /> путем его асинхронного перечисления согласно заданной функции выбора ключа и средства сравнения.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит словарь <see cref="T:System.Collections.Generic.Dictionary`2" />, который содержит выбранные ключи и значения.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, на основе которого создается словарь <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Функция, предназначенная для извлечения ключа из каждого элемента.</param>
      <param name="comparer">Значение <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> для сравнения ключей.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращенного средством выбора <paramref name="keySelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2})">
      <summary>Создает выражение <see cref="T:System.Collections.Generic.Dictionary`2" /> из коллекции <see cref="T:System.Linq.IQueryable`1" /> путем его асинхронного перечисления согласно заданной функции выбора ключа и выбора элемента.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит словарь <see cref="T:System.Collections.Generic.Dictionary`2" />, который содержит значения типа <paramref name="TElement" />, выбранные из входной последовательности.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, на основе которого создается словарь <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Функция, предназначенная для извлечения ключа из каждого элемента.</param>
      <param name="elementSelector">Функция преобразования, предназначенная для формирования значения элемента результата из каждого элемента.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращенного средством выбора <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Тип значения, возвращенного <paramref name="elementSelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
      <summary>Создает выражение <see cref="T:System.Collections.Generic.Dictionary`2" /> из последовательности <see cref="T:System.Linq.IQueryable`1" /> путем его асинхронного перечисления согласно заданной функции выбора ключа, средства сравнения и функции выбора элемента.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит словарь <see cref="T:System.Collections.Generic.Dictionary`2" />, который содержит значения типа <paramref name="TElement" />, выбранные из входной последовательности.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, на основе которого создается словарь <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Функция, предназначенная для извлечения ключа из каждого элемента.</param>
      <param name="elementSelector">Функция преобразования, предназначенная для формирования значения элемента результата из каждого элемента.</param>
      <param name="comparer">Значение <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> для сравнения ключей.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращенного средством выбора <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Тип значения, возвращенного <paramref name="elementSelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1},System.Threading.CancellationToken)">
      <summary>Создает выражение <see cref="T:System.Collections.Generic.Dictionary`2" /> из последовательности <see cref="T:System.Linq.IQueryable`1" /> путем его асинхронного перечисления согласно заданной функции выбора ключа, средства сравнения и функции выбора элемента.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит словарь <see cref="T:System.Collections.Generic.Dictionary`2" />, который содержит значения типа <paramref name="TElement" />, выбранные из входной последовательности.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, на основе которого создается словарь <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Функция, предназначенная для извлечения ключа из каждого элемента.</param>
      <param name="elementSelector">Функция преобразования, предназначенная для формирования значения элемента результата из каждого элемента.</param>
      <param name="comparer">Значение <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> для сравнения ключей.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращенного средством выбора <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Тип значения, возвращенного <paramref name="elementSelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``3(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Threading.CancellationToken)">
      <summary>Создает выражение <see cref="T:System.Collections.Generic.Dictionary`2" /> из коллекции <see cref="T:System.Linq.IQueryable`1" /> путем его асинхронного перечисления согласно заданной функции выбора ключа и выбора элемента.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит словарь <see cref="T:System.Collections.Generic.Dictionary`2" />, который содержит значения типа <paramref name="TElement" />, выбранные из входной последовательности.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, на основе которого создается словарь <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Функция, предназначенная для извлечения ключа из каждого элемента.</param>
      <param name="elementSelector">Функция преобразования, предназначенная для формирования значения элемента результата из каждого элемента.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращенного средством выбора <paramref name="keySelector" />.</typeparam>
      <typeparam name="TElement">Тип значения, возвращенного <paramref name="elementSelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToDictionaryAsync``2(System.Linq.IQueryable{``0},System.Func{``0,``1},System.Threading.CancellationToken)">
      <summary>Создает выражение <see cref="T:System.Collections.Generic.Dictionary`2" /> из последовательности <see cref="T:System.Linq.IQueryable`1" /> путем его асинхронного перечисления согласно заданной функции выбора ключа.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит словарь <see cref="T:System.Collections.Generic.Dictionary`2" />, который содержит выбранные ключи и значения.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, на основе которого создается словарь <see cref="T:System.Collections.Generic.Dictionary`2" />.</param>
      <param name="keySelector">Функция, предназначенная для извлечения ключа из каждого элемента.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
      <typeparam name="TKey">Тип ключа, возвращенного средством выбора <paramref name="keySelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToListAsync(System.Linq.IQueryable)">
      <summary>Создает массив <see cref="T:System.Collections.Generic.List`1" /> из последовательности <see cref="T:System.Linq.IQueryable" /> путем асинхронного перечисления.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит значение <see cref="T:System.Collections.Generic.List`1" />, которое содержит элементы из входной последовательности.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable" />, на основе которого создается словарь <see cref="T:System.Collections.Generic.List`1" />.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToListAsync(System.Linq.IQueryable,System.Threading.CancellationToken)">
      <summary>Создает массив <see cref="T:System.Collections.Generic.List`1" /> из последовательности <see cref="T:System.Linq.IQueryable" /> путем асинхронного перечисления.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит значение <see cref="T:System.Collections.Generic.List`1" />, которое содержит элементы из входной последовательности.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable" />, на основе которого создается словарь <see cref="T:System.Collections.Generic.List`1" />.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToListAsync``1(System.Linq.IQueryable{``0})">
      <summary>Создает массив <see cref="T:System.Collections.Generic.List`1" /> из последовательности <see cref="T:System.Linq.IQueryable`1" /> путем асинхронного перечисления.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит значение <see cref="T:System.Collections.Generic.List`1" />, которое содержит элементы из входной последовательности.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, на основе которого создается словарь <see cref="T:System.Collections.Generic.List`1" />.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.QueryableExtensions.ToListAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)">
      <summary>Создает массив <see cref="T:System.Collections.Generic.List`1" /> из последовательности <see cref="T:System.Linq.IQueryable`1" /> путем асинхронного перечисления.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит значение <see cref="T:System.Collections.Generic.List`1" />, которое содержит элементы из входной последовательности.</returns>
      <param name="source">Объект <see cref="T:System.Linq.IQueryable`1" />, на основе которого создается список.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TSource">Тип элементов последовательности <paramref name="source" />.</typeparam>
    </member>
    <member name="T:System.Data.Entity.TransactionalBehavior">
      <summary>Управляет поведением создания транзакции во время выполнения команды базы данных или запроса.</summary>
    </member>
    <member name="F:System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction">
      <summary>Если присутствует существующая транзакция, используйте ее; в противном случае выполните команду или запрос без транзакции.</summary>
    </member>
    <member name="F:System.Data.Entity.TransactionalBehavior.EnsureTransaction">
      <summary>Если транзакции отсутствуют, для операции будет использоваться новая транзакция.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.EntityCommandCompilationException">
      <summary>Представляет ошибку при попытке подготовки или выполнения CommandCompilation.Это исключение предназначено для предоставления общего исключения, перехватывая которое можно удерживать исключения поставщиков (SqlException, OracleException) при использовании EntityCommand для выполнения инструкций.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandCompilationException.#ctor">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.Entity.Core.EntityCommandCompilationException" /> без сообщения и внутреннего исключения.Вероятно, не должен существовать, но обеспечивает нормальную работу FxCop.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandCompilationException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.Entity.Core.EntityCommandCompilationException" /> с сообщением, но без внутреннего исключения.Вероятно, не должен существовать, но обеспечивает нормальную работу FxCop.</summary>
      <param name="message">Сообщение.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandCompilationException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.Entity.Core.EntityCommandCompilationException" /> с сообщением и экземпляром внутреннего исключения.</summary>
      <param name="message">Сообщение.</param>
      <param name="innerException">Внутреннее исключение.</param>
    </member>
    <member name="T:System.Data.Entity.Core.EntityCommandExecutionException">
      <summary>Представляет ошибку при попытке подготовки или выполнения CommandExecution.Это исключение предназначено для предоставления общего исключения, перехватывая которое можно удерживать исключения поставщиков (SqlException, OracleException) при использовании EntityCommand для выполнения инструкций.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandExecutionException.#ctor">
      <summary>Инициализирует новый экземпляр EntityCommandExecutionException без сообщения и внутреннего исключения.Вероятно, не должен существовать, но обеспечивает нормальную работу FxCop.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandExecutionException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр EntityCommandExecutionException с сообщением, но без внутреннего исключения.Вероятно, не должен существовать, но обеспечивает нормальную работу FxCop.</summary>
      <param name="message">Сообщение, описывающее ошибку.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityCommandExecutionException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр EntityCommandExecutionException с сообщением и экземпляром внутреннего исключения.</summary>
      <param name="message">Сообщение, описывающее ошибку.</param>
      <param name="innerException">Внутреннее исключение, вызвавшее это текущее исключение.</param>
    </member>
    <member name="T:System.Data.Entity.Core.EntityException">
      <summary>Предоставляет исключение, используемое клиентом сущности.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityException.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.EntityException" /> со значениями по умолчанию.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.EntityException" />.</summary>
      <param name="info">Данные сериализации.</param>
      <param name="context">Контекст потоковой передачи.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.EntityException" />, который принимает предварительно форматированное сообщение.</summary>
      <param name="message">Локализованное сообщение об ошибке.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.EntityException" />, принимающий предварительно форматированное сообщение и внутреннее исключение.</summary>
      <param name="message">Локализованное сообщение об ошибке.</param>
      <param name="innerException">Внутреннее исключение.</param>
    </member>
    <member name="T:System.Data.Entity.Core.EntityKey">
      <summary>Представляет идентификатор сущности.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.EntityKey" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.EntityKey" /> с заданными значениями ключей.</summary>
      <param name="qualifiedEntitySetName">Имя EntitySet сущности, уточняемое именем контейнера EntityContainer.</param>
      <param name="entityKeyValues">Пара «ключ-значение», которая определяет сущность.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.EntityKeyMember})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.EntityKey" /> с заданными значениями ключей.</summary>
      <param name="qualifiedEntitySetName">Имя EntitySet сущности, уточняемое именем контейнера EntityContainer.</param>
      <param name="entityKeyValues">Пара «ключ-значение», которая определяет сущность.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.#ctor(System.String,System.String,System.Object)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.EntityKey" /> с заданными именем и значением единственного ключа.</summary>
      <param name="qualifiedEntitySetName">Имя EntitySet сущности, уточняемое именем контейнера EntityContainer.</param>
      <param name="keyName">Имя ключа, которое идентифицирует сущность.</param>
      <param name="keyValue">Значение ключа, которое идентифицирует сущность.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.EntityContainerName">
      <summary>Возвращает или задает имя элемента EntityContainer, которое определяет контейнер, содержащий сущность.</summary>
      <returns>Имя элемента EntityContainer, которое определяет контейнер, содержащий сущность.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.EntityKeyValues">
      <summary>Возвращает или задает значения ключей, которые определяют сущность.</summary>
      <returns>Значения ключей, которые определяют сущность.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.EntityNotValidKey">
      <summary>Получает одноэлементное значение <see cref="T:System.Data.Entity.Core.EntityKey" />, определяющее сущность, полученную в результате неуспешного выполнения TREAT.</summary>
      <returns>Одноэлементное значение <see cref="T:System.Data.Entity.Core.EntityKey" />, определяющее сущность, полученную в результате неуспешного выполнения TREAT.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.EntitySetName">
      <summary>Возвращает или задает имя EntitySet, определяющее набор сущностей, который содержит данную сущность.</summary>
      <returns>Имя EntitySet, определяющее набор сущностей, который содержит данную сущность.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.Equals(System.Data.Entity.Core.EntityKey)">
      <summary>Указывает значение — равен ли этот экземпляр заданному ключу.</summary>
      <returns>Значение true, если экземпляр равен данному ключу; в противном случае — значение false.</returns>
      <param name="other">Ключ для сравнения с этим экземпляром.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.Equals(System.Object)">
      <summary>Указывает значение — равен ли этот экземпляр заданному ключу.</summary>
      <returns>Значение true, если экземпляр равен данному ключу; в противном случае — значение false.</returns>
      <param name="obj">Ключ для сравнения с этим экземпляром.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.GetEntitySet(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace)">
      <summary>Возвращает набор сущностей для данного ключа сущности из заданной рабочей области метаданных по имени контейнера сущностей и имени набора сущностей.</summary>
      <returns>Набор сущностей из указанной рабочей области для этого ключа сущности.</returns>
      <param name="metadataWorkspace">Рабочая область, в которой следует выполнить поиск набора сущностей.</param>
      <exception cref="T:System.ArgumentException">Не удалось найти набор сущностей в рабочей области.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.GetHashCode">
      <summary>Возвращает хэш-код, основанный на значении, чтобы EntityKey можно было использовать в хэш-таблицах.</summary>
      <returns>Хэш-значение этого ключа <see cref="T:System.Data.Entity.Core.EntityKey" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.IsTemporary">
      <summary>Возвращает значение, указывающее, является ли данный ключ временным.</summary>
      <returns>Значение true, если этот ключ является временным ключом; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKey.NoEntitySetKey">
      <summary>Возвращает одноэлементное значение <see cref="T:System.Data.Entity.Core.EntityKey" />, по которому определяется сущность, доступная только для чтения.</summary>
      <returns>Одноэлементное значение <see cref="T:System.Data.Entity.Core.EntityKey" />, по которому определяется сущность, доступная только для чтения.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>Вызывается после того, как выполнена десериализация этого ключа <see cref="T:System.Data.Entity.Core.EntityKey" />.</summary>
      <param name="context">Контекст сериализации.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.OnDeserializing(System.Runtime.Serialization.StreamingContext)">
      <summary>Вызывается после того, как выполнена десериализация этого ключа <see cref="T:System.Data.Entity.Core.EntityKey" />.</summary>
      <param name="context">Контекст сериализации.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.op_Equality(System.Data.Entity.Core.EntityKey,System.Data.Entity.Core.EntityKey)">
      <summary>Значение указывает, равны ли два ключа.</summary>
      <returns>Значение true, если два ключа равны, в противном случае — значение false.</returns>
      <param name="key1">Сравниваемый ключ.</param>
      <param name="key2">Сравниваемый ключ.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKey.op_Inequality(System.Data.Entity.Core.EntityKey,System.Data.Entity.Core.EntityKey)">
      <summary>Указывает значение — являются ли два ключа неравными.</summary>
      <returns>Значение true, если два ключа не равны, в противном случае — значение false.</returns>
      <param name="key1">Сравниваемый ключ.</param>
      <param name="key2">Сравниваемый ключ.</param>
    </member>
    <member name="T:System.Data.Entity.Core.EntityKeyMember">
      <summary>Сведения о ключе, являющемся частью EntityKey.Элемент ключа содержит имя и значение ключа.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKeyMember.#ctor">
      <summary>Создает пустой EntityKeyMember.Этот конструктор используется при сериализации.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKeyMember.#ctor(System.String,System.Object)">
      <summary>     Создает новый элемент EntityKeyMember с указанным именем и значением ключа. </summary>
      <param name="keyName"> Имя ключа </param>
      <param name="keyValue"> Значение ключа </param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKeyMember.Key">
      <summary>     Имя ключа </summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityKeyMember.ToString">
      <summary>     Возвращает строковое представление EntityKeyMember </summary>
      <returns> Строковое представление EntityKeyMember </returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityKeyMember.Value">
      <summary>     Значение ключа </summary>
    </member>
    <member name="T:System.Data.Entity.Core.EntitySqlException">
      <summary>Представляет исключение компиляции запроса eSQL. Основные условия, которые могут вызвать данное исключение:     1) Синтаксические ошибки: возникают во время синтаксического анализа текста запроса и когда заданный запрос не соответствует формальной грамматике eSQL;     2) Семантические ошибки: возникают, когда семантические правила языка eSQL не выполняются, например если метаданные или данные схемы не точны или отсутствуют, когда возникают ошибки проверки типов, нарушаются правила области действия, используются неопределенные переменные и т. д.Дополнительные сведения см. в спецификации языка eSQL.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntitySqlException.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.EntitySqlException" /> с универсальным сообщением об ошибке.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntitySqlException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.EntitySqlException" /> с указанным сообщением об ошибке.</summary>
      <param name="message">Сообщение об ошибке.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntitySqlException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.EntitySqlException" /> с заданным сообщением и экземпляром innerException.</summary>
      <param name="message">Сообщение об ошибке.</param>
      <param name="innerException">Внутреннее исключение.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntitySqlException.Column">
      <summary>Возвращает приблизительный номер столбца, в котором возникла ошибка.</summary>
      <returns>Приблизительный номер столбца, в котором возникла ошибка.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntitySqlException.ErrorContext">
      <summary>По возможности возвращает приблизительный контекст, в котором возникла ошибка.</summary>
      <returns>Приблизительный контекст, в котором возникла ошибка, если он доступен.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntitySqlException.ErrorDescription">
      <summary>Возвращает описание ошибки, в котором объясняется, почему запрос не был принят, или пустой объект String.Empty </summary>
      <returns>Описание ошибки, в котором объясняется, почему запрос не был принят, или пустой объект String.Empty.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntitySqlException.Line">
      <summary>Возвращает приблизительный номер строки, в которой возникла ошибка. </summary>
      <returns>Приблизительный номер строки, в которой возникла ошибка.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.IExtendedDataRecord">
      <summary>Предоставляет интерфейс DataRecord, поддерживающий структурированные типы и подробные метаданные.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.IExtendedDataRecord.DataRecordInfo">
      <summary>Возвращает свойство DataRecordInfo, описывающее содержимое записи.</summary>
      <returns>Свойство DataRecordInfo, описывающее содержимое записи.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.IExtendedDataRecord.GetDataReader(System.Int32)">
      <summary>Возвращает вложенные объекты чтения в виде объектов DbDataReader.</summary>
      <returns>Вложенные объекты чтения в виде объектов DbDataReader.</returns>
      <param name="i">Порядковый номер столбца.</param>
    </member>
    <member name="M:System.Data.Entity.Core.IExtendedDataRecord.GetDataRecord(System.Int32)">
      <summary>Получает объект DbDataRecord с заданным индексом.</summary>
      <returns>Объект DbDataRecord.</returns>
      <param name="i">Индекс строки.</param>
    </member>
    <member name="T:System.Data.Entity.Core.InvalidCommandTreeException">
      <summary>     Вызывается для указания того, что дерево команд недопустимо. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.InvalidCommandTreeException.#ctor">
      <summary>     Создает новое исключение InvalidCommandTreeException с сообщением по умолчанию. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.InvalidCommandTreeException.#ctor(System.String)">
      <summary>     Создает новое исключение InvalidCommandTreeException с указанным сообщением. </summary>
      <param name="message"> Сообщение об исключении </param>
    </member>
    <member name="M:System.Data.Entity.Core.InvalidCommandTreeException.#ctor(System.String,System.Exception)">
      <summary>     Создает новое исключение InvalidCommandTreeException с указанным сообщением и внутренним исключением. </summary>
      <param name="message"> Сообщение об исключении. </param>
      <param name="innerException"> Исключение, являющееся причиной InvalidCommandTreeException. </param>
    </member>
    <member name="T:System.Data.Entity.Core.MappingException">
      <summary>Класс исключения сопоставления.Обратите внимание, что этот класс имеет состояние, поэтому даже при изменении его внутренних компонентов это изменение может стать критическим</summary>
    </member>
    <member name="M:System.Data.Entity.Core.MappingException.#ctor">
      <summary>     конструктор с сообщением по умолчанию </summary>
    </member>
    <member name="M:System.Data.Entity.Core.MappingException.#ctor(System.String)">
      <summary>     конструктор по умолчанию </summary>
      <param name="message"> локализованное сообщение об ошибке </param>
    </member>
    <member name="M:System.Data.Entity.Core.MappingException.#ctor(System.String,System.Exception)">
      <summary>     конструктор </summary>
      <param name="message"> локализованное сообщение об ошибке </param>
      <param name="innerException"> внутреннее исключение </param>
    </member>
    <member name="T:System.Data.Entity.Core.MetadataException">
      <summary>     класс исключения метаданных </summary>
    </member>
    <member name="M:System.Data.Entity.Core.MetadataException.#ctor">
      <summary>     конструктор с сообщением по умолчанию </summary>
    </member>
    <member name="M:System.Data.Entity.Core.MetadataException.#ctor(System.String)">
      <summary>     конструктор по умолчанию </summary>
      <param name="message"> локализованное сообщение об ошибке </param>
    </member>
    <member name="M:System.Data.Entity.Core.MetadataException.#ctor(System.String,System.Exception)">
      <summary>     конструктор </summary>
      <param name="message"> локализованное сообщение об ошибке </param>
      <param name="innerException"> внутреннее исключение </param>
    </member>
    <member name="T:System.Data.Entity.Core.ObjectNotFoundException">
      <summary>Это исключение вызывается в том случае, если не удалось найти запрошенный объект в хранилище.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.ObjectNotFoundException.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.ObjectNotFoundException" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.ObjectNotFoundException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.ObjectNotFoundException" />.</summary>
      <param name="message">Локализованное сообщение об ошибке.</param>
    </member>
    <member name="M:System.Data.Entity.Core.ObjectNotFoundException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.Entity.Core.ObjectNotFoundException" /> и конструктор, принимающий сообщение и внутреннее исключение.</summary>
      <param name="message">Локализованное сообщение об ошибке.</param>
      <param name="innerException">Внутреннее исключение.</param>
    </member>
    <member name="T:System.Data.Entity.Core.OptimisticConcurrencyException">
      <summary>Это исключение возникает при нарушении ограничения параллелизма во время выполнения операции обновления.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.OptimisticConcurrencyException.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.OptimisticConcurrencyException" />, используя значения по умолчанию.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.OptimisticConcurrencyException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.OptimisticConcurrencyException" /> с указанным сообщением.</summary>
      <param name="message">Сообщение, связанное с исключением.</param>
    </member>
    <member name="M:System.Data.Entity.Core.OptimisticConcurrencyException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.Entity.Core.OptimisticConcurrencyException" /> с указанными сообщением и внутренним исключением.</summary>
      <param name="message">Сообщение, связанное с исключением.</param>
      <param name="innerException">Ошибка, вызвавшая исключение.</param>
    </member>
    <member name="M:System.Data.Entity.Core.OptimisticConcurrencyException.#ctor(System.String,System.Exception,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Objects.ObjectStateEntry})">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.Entity.Core.OptimisticConcurrencyException" /> с указанными сообщением и внутренним исключением.</summary>
      <param name="message">Сообщение.</param>
      <param name="innerException">Ошибка, вызвавшая исключение.</param>
      <param name="stateEntries">Записи состояния.</param>
    </member>
    <member name="T:System.Data.Entity.Core.PropertyConstraintException">
      <summary>Представляет класс исключения ограничений свойства.Обратите внимание, что этот класс имеет состояние, поэтому даже при изменении его внутренних компонентов это изменение может стать критическим.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.PropertyConstraintException.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.PropertyConstraintException" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.PropertyConstraintException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.PropertyConstraintException" />.</summary>
      <param name="message">Локализованное сообщение об ошибке.</param>
    </member>
    <member name="M:System.Data.Entity.Core.PropertyConstraintException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.Entity.Core.PropertyConstraintException" /> с указанным сообщением и внутренним исключением. </summary>
      <param name="message">Локализованное сообщение об ошибке.</param>
      <param name="innerException">Внутреннее исключение.</param>
    </member>
    <member name="M:System.Data.Entity.Core.PropertyConstraintException.#ctor(System.String,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.PropertyConstraintException" />.</summary>
      <param name="message">Локализованное сообщение об ошибке.</param>
      <param name="propertyName">Имя свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Core.PropertyConstraintException.#ctor(System.String,System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.PropertyConstraintException" />.</summary>
      <param name="message">Локализованное сообщение об ошибке.</param>
      <param name="propertyName">Имя свойства.</param>
      <param name="innerException">Внутреннее исключение.</param>
    </member>
    <member name="P:System.Data.Entity.Core.PropertyConstraintException.PropertyName">
      <summary>Возвращает имя свойства, нарушившего ограничение.</summary>
      <returns>Имя свойства, нарушившего ограничение.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.ProviderIncompatibleException">
      <summary>Исключение, возникающее, когда поставщик хранилища выполняет операции, несовместимые с поставщиком клиента сущности.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.ProviderIncompatibleException.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.ProviderIncompatibleException" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.ProviderIncompatibleException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.ProviderIncompatibleException" /> с указанным сообщением об ошибке.</summary>
      <param name="message">Сообщение об ошибке, описывающее исключение.</param>
    </member>
    <member name="M:System.Data.Entity.Core.ProviderIncompatibleException.#ctor(System.String,System.Exception)">
      <summary>Выполняет инициализацию нового экземпляра класса <see cref="T:System.Data.Entity.Core.ProviderIncompatibleException" /> с указанным сообщением об ошибке и внутренним исключением.</summary>
      <param name="message">Сообщение об ошибке, описывающее исключение.</param>
      <param name="innerException">Внутреннее исключение, которое является причиной текущего исключения.</param>
    </member>
    <member name="T:System.Data.Entity.Core.UpdateException">
      <summary>Исключение, которое возникает при сохранении в хранилище изменений, которые не удалось обновить.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.UpdateException.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.UpdateException" /> со значениями по умолчанию.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.UpdateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.UpdateException" /> с сериализованными данными.</summary>
      <param name="info">Объект, содержащий сериализированную информацию об исключении.</param>
      <param name="context">Контекстные сведения об источнике или назначении.</param>
    </member>
    <member name="M:System.Data.Entity.Core.UpdateException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.UpdateException" /> с сообщением об ошибке.</summary>
      <param name="message">Сообщение об ошибке, описывающее исключение.</param>
    </member>
    <member name="M:System.Data.Entity.Core.UpdateException.#ctor(System.String,System.Exception)">
      <summary>Выполняет инициализацию нового экземпляра класса <see cref="T:System.Data.Entity.Core.UpdateException" /> с сообщением об ошибке и внутренним исключением. </summary>
      <param name="message">Сообщение об ошибке, описывающее исключение.</param>
      <param name="innerException">Внутреннее исключение, которое является причиной текущего исключения.</param>
    </member>
    <member name="M:System.Data.Entity.Core.UpdateException.#ctor(System.String,System.Exception,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Objects.ObjectStateEntry})">
      <summary>Выполняет инициализацию нового экземпляра класса <see cref="T:System.Data.Entity.Core.UpdateException" /> с сообщением об ошибке, внутренним исключением и записями состояния.</summary>
      <param name="message">Сообщение об ошибке, описывающее исключение.</param>
      <param name="innerException">Внутреннее исключение, которое является причиной текущего исключения.</param>
      <param name="stateEntries">Записи состояния, связанные с ошибкой.</param>
    </member>
    <member name="P:System.Data.Entity.Core.UpdateException.StateEntries">
      <summary>Получает записи состояния, связанные с ошибкой. </summary>
      <returns>Записи состояния, связанные с ошибкой.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.DataRecordInfo">
      <summary>Класс DataRecordInfo, предоставляющий удобный способ доступа к сведениям о типах и о столбцах.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DataRecordInfo.#ctor(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember})">
      <summary>Инициализирует новый объект <see cref="T:System.Data.Common.DbDataRecord" /> для конкретного типа с перечислимой коллекцией полей данных.</summary>
      <param name="metadata">Метаданные для типа, представленного этим объектом, заданные <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.</param>
      <param name="memberInfo">Перечислимая коллекция объектов <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmMember" />, представляющих сведения о столбцах.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DataRecordInfo.FieldMetadata">
      <summary>Возвращает <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" /> для этого объекта <see cref="P:System.Data.Entity.Core.IExtendedDataRecord.DataRecordInfo" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DataRecordInfo.RecordType">
      <summary>Получает сведения о типе для этого объекта в виде объекта <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.</summary>
      <returns>Значение <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.DbCommandDefinition">
      <summary>Представляет подготовленное определение команды. Может быть кэшировано и повторно использовано, чтобы избежать повторной подготовки команды.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbCommandDefinition.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Common.DbCommandDefinition" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbCommandDefinition.#ctor(System.Data.Common.DbCommand,System.Func{System.Data.Common.DbCommand,System.Data.Common.DbCommand})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Common.DbCommandDefinition" />, используя указанное <see cref="T:System.Data.Common.DbCommand" />.</summary>
      <param name="prototype">Указанный метод <see cref="T:System.Data.Common.DbCommand" />.</param>
      <param name="cloneMethod">, используемый для клонирования <see cref="T:System.Data.Common.DbCommand" /></param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbCommandDefinition.CreateCommand">
      <summary>Создает и возвращает выполняемый объект DbCommand.</summary>
      <returns>Команда для базы данных.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.DbProviderManifest">
      <summary>Интерфейс метаданных для всех типов CLR</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Common.DbProviderManifest" />.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.CollationFacetName">
      <summary>Имя аспекта параметров сортировки</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.ConceptualSchemaDefinition">
      <summary>Значение, передаваемое методу GetInformation для получения определения ConceptualSchemaDefinition</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.ConceptualSchemaDefinitionVersion3">
      <summary>Значение, передаваемое методу GetInformation для получения определения ConceptualSchemaDefinitionVersion3</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.DefaultValueFacetName">
      <summary>Имя аспекта DefaultValue</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.EscapeLikeArgument(System.String)">
      <summary>Модули записи поставщиков должны переопределять этот метод для возвращения аргумента со знаками подстановки и преобразованным escape-символом.Этот метод используется, только если свойство SupportsEscapingLikeArgument возвращает значение true.</summary>
      <returns>Аргумент с подстановочными знаками и преобразованным escape-символом.</returns>
      <param name="argument">Аргумент, подвергаемый escape-преобразованию.</param>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.FixedLengthFacetName">
      <summary>Имя аспекта FixedLength</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetDbInformation(System.String)">
      <summary>При переопределении в производном классе этот метод возвращает сведения, касающиеся конкретного поставщика.</summary>
      <returns>Объект XmlReader, представляющий сопоставление с базовым каталогом хранилища данных.</returns>
      <param name="informationType">Тип возвращаемых сведений.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetEdmType(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>При переопределении в производном классе этот метод сопоставляет указанный тип хранилища и набор аспектов этого типа с типом модели EDM.</summary>
      <returns>Экземпляр класса <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />, описывающего тип модели EDM и набор аспектов для этого типа.</returns>
      <param name="storeType">Экземпляр TypeUsage, описывающий тип хранилища и набор аспектов этого типа, которые должны быть сопоставлены с типом модели EDM.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetFacetDescriptions(System.Data.Entity.Core.Metadata.Edm.EdmType)">
      <summary>Возвращает объекты FacetDescription для определенного типа.</summary>
      <returns>Объекты FacetDescription для заданного типа модели EDM.</returns>
      <param name="edmType">Тип модели EDM, для которого требуется получить описание аспектов.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetInformation(System.String)">
      <summary>Возвращает сведения о поставщике.</summary>
      <returns>Сведения о поставщике.</returns>
      <param name="informationType">Тип возвращаемых сведений.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetStoreFunctions">
      <summary>При переопределении в производном классе возвращает коллекцию функций модели EDM, поддерживаемых манифестом поставщика.</summary>
      <returns>Коллекция функций модели EDM.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetStoreType(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>При переопределении в производном классе этот метод сопоставляет указанный тип модели EDM и набор аспектов этого типа с типом модели хранилища.</summary>
      <returns>Экземпляр класса TypeUsage, описывающего тип хранилища и набор аспектов для этого типа.</returns>
      <param name="edmType">Экземпляр TypeUsage, описывающий тип модели EDM и набор аспектов этого типа, которые должны быть сопоставлены с типом модели хранилища.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.GetStoreTypes">
      <summary>При переопределении в производном классе возвращает набор типов-примитивов, поддерживаемых источником данных.</summary>
      <returns>Набор типов, поддерживаемых источником данных.</returns>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.IsStrictFacetName">
      <summary>Имя аспекта IsStrict</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.MaxLengthFacetName">
      <summary>Возвращает аспекта MaxLength</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DbProviderManifest.NamespaceName">
      <summary>Возвращает пространство имен, используемое манифестом этого поставщика.</summary>
      <returns>Пространство имен, используемое манифестом этого поставщика.</returns>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.NullableFacetName">
      <summary>Имя аспекта, поддерживающего значения NULL</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.PrecisionFacetName">
      <summary>Имя аспекта Precision</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.ScaleFacetName">
      <summary>Имя аспекта Scale</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.SridFacetName">
      <summary>Имя аспекта SRID</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.StoreSchemaDefinition">
      <summary>Значение, передаваемое методу GetInformation для получения определения StoreSchemaDefinition</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.StoreSchemaDefinitionVersion3">
      <summary>Значение, передаваемое методу GetInformation для получения определения StoreSchemaDefinitionVersion3</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.StoreSchemaMapping">
      <summary>Значение, передаваемое методу GetInformation для получения определения StoreSchemaMapping</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.StoreSchemaMappingVersion3">
      <summary>Значение, передаваемое методу GetInformation для получения определения StoreSchemaMappingVersion3</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.SupportsEscapingLikeArgument(System.Char@)">
      <summary>Указывает, поддерживает ли поставщик escape-преобразование строк, используемых как шаблоны в выражении LIKE.</summary>
      <returns>Значение true, если данный поставщик поддерживает escape-преобразование строк, используемых в качестве шаблонов в выражении LIKE; в противном случае — значение false.</returns>
      <param name="escapeCharacter">Если поставщик поддерживает escape-преобразование, данный символ используется как escape-символ.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderManifest.SupportsInExpression">
      <summary>Возвращает логическое значение, указывающее, может ли поставщик обрабатывать деревья выражений, содержащие экземпляры DbInExpression.Реализация по умолчанию возвращает значение false для обратной совместимости.Производные классы могут переопределять этот метод.</summary>
      <returns>false</returns>
    </member>
    <member name="F:System.Data.Entity.Core.Common.DbProviderManifest.UnicodeFacetName">
      <summary>Имя аспекта Юникода</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.DbProviderServices">
      <summary>Фабрика для сборки определений команд. Используйте тип этого объекта в качестве аргумента для метода IServiceProvider.GetService в фабрике поставщика.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.AddDependencyResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>Добавляет <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" />, который будет использоваться для разрешения служб дополнительного поставщика по умолчанию в случае, если производный тип зарегистрирован в качестве поставщика EF с использованием записи в файле конфигурации приложения или посредством регистрации на основе кода в <see cref="T:System.Data.Entity.DbConfiguration" />.</summary>
      <param name="resolver">Добавляемый сопоставитель.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CloneDbCommand(System.Data.Common.DbCommand)">
      <summary>См. вопрос 2390 — клонирование свойства DesignTimeVisible в DbCommand может вызвать взаимоблокировку.Поэтому здесь следует разрешить переопределение подклассов.</summary>
      <returns>клон <see cref="T:System.Data.Common.DbCommand" /></returns>
      <param name="fromDbCommand">объект <see cref="T:System.Data.Common.DbCommand" /> для клонирования</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateCommandDefinition(System.Data.Common.DbCommand)">
      <summary>Создает объект DbCommandDefinition, основанный на команде прототипа. Этот метод предназначен для модулей записи поставщика и используется для сборки определения команды по умолчанию на основе команды.Примечание. Прототип будет клонирован</summary>
      <returns>объект определения исполняемой команды.</returns>
      <param name="prototype">команда прототипа</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateCommandDefinition(System.Data.Entity.Core.Common.CommandTrees.DbCommandTree)">
      <summary>Создайте объект определения команды с использованием дерева команд.</summary>
      <returns>объект определения исполняемой команды.</returns>
      <param name="commandTree">дерево команд для инструкции</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateCommandDefinition(System.Data.Entity.Core.Common.DbProviderManifest,System.Data.Entity.Core.Common.CommandTrees.DbCommandTree)">
      <summary>Создает определение команды из указанного манифеста и дерева команд.</summary>
      <returns>Созданное определение команды.</returns>
      <param name="providerManifest">Манифест.</param>
      <param name="commandTree">Дерево команд.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>Создает базу данных, определенную подключением, и объекты схемы (таблицы, первичные ключи, внешние ключи) на основе содержимого объекта storeItemCollection.</summary>
      <param name="connection">Подключение к несуществующей базе данных, которую необходимо создать и заполнить объектами хранилища, определенными параметром storeItemCollection.</param>
      <param name="commandTimeout">Время ожидания выполнения любых команд, необходимых для создания базы данных.</param>
      <param name="storeItemCollection">Коллекция всех элементов хранилища, составленная на основе того, какой скрипт необходимо создать.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateDatabaseScript(System.String,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>Формирует DDL-скрипт, создающий объекты схемы (таблицы, первичные ключи, внешние ключи) на основе содержимого параметра StoreItemCollection, которые предназначены для версии базы данных, соответствующей токену манифеста поставщика.</summary>
      <returns>DDL-скрипт, создающий объекты схемы на основе содержимого параметра StoreItemCollection, предназначенные для версии базы данных, соответствующей токену манифеста поставщика.</returns>
      <param name="providerManifestToken">Токен манифеста поставщика, определяющий целевую версию.</param>
      <param name="storeItemCollection">Структура базы данных.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.CreateDbCommandDefinition(System.Data.Entity.Core.Common.DbProviderManifest,System.Data.Entity.Core.Common.CommandTrees.DbCommandTree)">
      <summary>Создает объект определения команд для указанного манифеста поставщика и дерева команд.</summary>
      <returns>Объект определения исполняемой команды.</returns>
      <param name="providerManifest">Манифест поставщика, ранее извлеченный из поставщика хранилища.</param>
      <param name="commandTree">Дерево команд для инструкции.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>Возвращает значение, указывающее, существует ли определенная база данных на сервере.</summary>
      <returns>Значение true, если поставщик может определить базу данных только на основе указанного соединения.</returns>
      <param name="connection">Подключение к базе данных, существование которой проверяется этим методом.</param>
      <param name="commandTimeout">Время ожидания выполнения любых команд, необходимых для определения существования этой базы данных.</param>
      <param name="storeItemCollection">Коллекция всех элементов хранилища из модели.Этот параметр больше не используется для определения существования базы данных.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Lazy{System.Data.Entity.Core.Metadata.Edm.StoreItemCollection})">
      <summary>Возвращает значение, указывающее, существует ли определенная база данных на сервере.</summary>
      <returns>Значение true, если поставщик может определить базу данных только на основе указанного соединения.</returns>
      <param name="connection">Подключение к базе данных, существование которой проверяется этим методом.</param>
      <param name="commandTimeout">Время ожидания выполнения любых команд, необходимых для определения существования этой базы данных.</param>
      <param name="storeItemCollection">Коллекция всех элементов хранилища из модели.Этот параметр больше не используется для определения существования базы данных.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbCreateDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>Создает базу данных, определенную подключением, и объекты схемы (таблицы, первичные ключи, внешние ключи) на основе содержимого объекта StoreItemCollection.</summary>
      <param name="connection">Подключение к несуществующей базе данных, которую необходимо создать и заполнить объектами хранилища, определенными параметром storeItemCollection.</param>
      <param name="commandTimeout">Время ожидания выполнения любых команд, необходимых для создания базы данных.</param>
      <param name="storeItemCollection">Коллекция всех элементов хранилища, составленная на основе того, какой скрипт необходимо создать.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbCreateDatabaseScript(System.String,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>Формирует DDL-скрипт, создающий объекты схемы (таблицы, первичные ключи, внешние ключи) на основе содержимого параметра StoreItemCollection, которые предназначены для версии базы данных, соответствующей токену манифеста поставщика.</summary>
      <returns>DDL-скрипт, создающий объекты схемы на основе содержимого параметра StoreItemCollection, предназначенные для версии базы данных, соответствующей токену манифеста поставщика.</returns>
      <param name="providerManifestToken">Токен манифеста поставщика, определяющий целевую версию.</param>
      <param name="storeItemCollection">Структура базы данных.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbDatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>Возвращает значение, указывающее, существует ли определенная база данных на сервере.</summary>
      <returns>Значение true, если поставщик может определить базу данных только на основе указанного соединения.</returns>
      <param name="connection">Подключение к базе данных, существование которой проверяется этим методом.</param>
      <param name="commandTimeout">Время ожидания выполнения любых команд, необходимых для определения существования этой базы данных.</param>
      <param name="storeItemCollection">Коллекция всех элементов хранилища из модели.Этот параметр больше не используется для определения существования базы данных.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbDatabaseExists(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Lazy{System.Data.Entity.Core.Metadata.Edm.StoreItemCollection})">
      <summary>Возвращает значение, указывающее, существует ли определенная база данных на сервере.</summary>
      <returns>Значение true, если поставщик может определить базу данных только на основе указанного соединения.</returns>
      <param name="connection">Подключение к базе данных, существование которой проверяется этим методом.</param>
      <param name="commandTimeout">Время ожидания выполнения любых команд, необходимых для определения существования этой базы данных.</param>
      <param name="storeItemCollection">Коллекция всех элементов хранилища из модели.Этот параметр больше не используется для определения существования базы данных.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbDeleteDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>Удаление указанной базы данных.</summary>
      <param name="connection">Подключение к существующей базе данных, которую необходимо удалить.</param>
      <param name="commandTimeout">Время ожидания выполнения любых команд, необходимых для удаления базы данных.</param>
      <param name="storeItemCollection">Коллекция всех элементов хранилища из модели.Этот параметр больше не используется для удаления базы данных.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DbGetSpatialServices(System.String)">
      <summary>Возвращает пространственные службы для <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />.</summary>
      <returns>Пространственные службы.</returns>
      <param name="manifestToken">Сведения о токене, связанном с манифестом поставщика.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.DeleteDatabase(System.Data.Common.DbConnection,System.Nullable{System.Int32},System.Data.Entity.Core.Metadata.Edm.StoreItemCollection)">
      <summary>Удаление указанной базы данных.</summary>
      <param name="connection">Подключение к существующей базе данных, которую необходимо удалить.</param>
      <param name="commandTimeout">Время ожидания выполнения любых команд, необходимых для удаления базы данных.</param>
      <param name="storeItemCollection">Коллекция всех элементов хранилища из модели.Этот параметр больше не используется для удаления базы данных.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.ExpandDataDirectory(System.String)">
      <summary>Разворачивает |DataDirectory| по данному пути в случае, если он начинается с |DataDirectory|, и возвращает развернутый путь, либо, в случае, если она не начинается с |DataDirectory|, данную строку.</summary>
      <returns>Развернутый путь.</returns>
      <param name="path">Путь, который необходимо развернуть.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetConceptualSchemaDefinition(System.String)">
      <summary>Возвращает модуль чтения XML, который представляет описание языка CSDL</summary>
      <returns>Модуль XmlReader, представляющий описание языка CSDL</returns>
      <param name="csdlName">Имя описания языка CSDL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetDbProviderManifest(System.String)">
      <summary>При переопределении в производном классе возвращает экземпляр класса, производного от DbProviderManifest.</summary>
      <returns>Объект DbProviderManifest, представляющий манифест поставщика.</returns>
      <param name="manifestToken">Сведения о токене, связанном с манифестом поставщика.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetDbProviderManifestToken(System.Data.Common.DbConnection)">
      <summary>Возвращает токен манифеста для указанного подключения.</summary>
      <returns>Токен манифеста поставщика для указанного подключения.</returns>
      <param name="connection">Подключение для поиска токена манифеста.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetDbSpatialDataReader(System.Data.Common.DbDataReader,System.String)">
      <summary>Возвращает модуль чтения пространственных данных для <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />.</summary>
      <returns>Модуль чтения пространственных данных.</returns>
      <param name="fromReader">Модуль чтения, из которого поступили пространственные данные.</param>
      <param name="manifestToken">Сведения о токене, связанном с манифестом поставщика.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetExecutionStrategy(System.Data.Common.DbConnection)">
      <summary>Возвращает значение <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" />, которое будет использоваться для выполнения методов, использующих указанное подключение.</summary>
      <returns>Новый экземпляр <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy" />.</returns>
      <param name="connection">Подключение к базе данных</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetExecutionStrategy(System.Data.Common.DbConnection,System.String)">
      <summary>Возвращает значение <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" />, которое будет использоваться для выполнения методов, использующих указанное подключение.Эта перегрузка должна использоваться производными классами для совместимости с поставщиками-оболочками.</summary>
      <returns>Новый экземпляр <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy" />.</returns>
      <param name="connection">Подключение к базе данных</param>
      <param name="providerInvariantName">Неизменяемое имя поставщика</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetProviderFactory(System.Data.Common.DbConnection)">
      <summary>Возвращает DbProviderFactory на основе заданного DbConnection.</summary>
      <returns>Полученное свойство DbProviderFactory.</returns>
      <param name="connection">Используемое подключение.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetProviderManifest(System.String)">
      <summary>Возвращает манифест поставщика с помощью заданных сведений о версии.</summary>
      <returns>Манифест поставщика на основе указанных сведений о версии.</returns>
      <param name="manifestToken">Сведения о токене, связанном с манифестом поставщика.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetProviderManifestToken(System.Data.Common.DbConnection)">
      <summary>Возвращает токен манифеста поставщика по подключению.</summary>
      <returns>Токен манифеста поставщика.</returns>
      <param name="connection">Подключение к поставщику.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetProviderServices(System.Data.Common.DbConnection)">
      <summary>Возвращает поставщиков, исходя из предоставленного подключения.</summary>
      <returns>Службы <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />, основанные на указанном подключении.</returns>
      <param name="connection">Подключение к поставщику.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetService(System.Type,System.Object)">
      <summary>Вызывается для разрешения служб дополнительного поставщика по умолчанию в случае, если производный тип зарегистрирован в качестве поставщика EF с использованием записи в файле конфигурации приложения или посредством регистрации на основе кода в <see cref="T:System.Data.Entity.DbConfiguration" />.Реализация этого метода в этом классе использует сопоставители, добавленные с помощью метода AddDependencyResolver, для разрешения зависимостей.</summary>
      <returns>Экземпляр заданного типа, или значение NULL, если службу не удалось разрешить.</returns>
      <param name="type">Тип службы, для которого необходимо выполнить разрешение.</param>
      <param name="key">Необязательный ключ, предоставляющий дополнительную информацию для разрешения службы.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetServices(System.Type,System.Object)">
      <summary>Вызывается для разрешения служб дополнительного поставщика по умолчанию в случае, если производный тип зарегистрирован в качестве поставщика EF с использованием записи в файле конфигурации приложения или посредством регистрации на основе кода в <see cref="T:System.Data.Entity.DbConfiguration" />.Реализация этого метода в этом классе использует сопоставители, добавленные с помощью метода AddDependencyResolver, для разрешения зависимостей.</summary>
      <returns>Все зарегистрированные службы, удовлетворяющие заданным типу и ключу, или пустое перечисление, если таких нет.</returns>
      <param name="type">Тип службы, для которого необходимо выполнить разрешение.</param>
      <param name="key">Необязательный ключ, предоставляющий дополнительную информацию для разрешения службы.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetSpatialDataReader(System.Data.Common.DbDataReader,System.String)">
      <summary>Возвращает модуль чтения пространственных данных для <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />.</summary>
      <returns>Модуль чтения пространственных данных.</returns>
      <param name="fromReader">Модуль чтения, из которого поступили пространственные данные.</param>
      <param name="manifestToken">Токен манифеста, связанный с манифестом поставщика.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetSpatialServices(System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>Возвращает пространственные службы для <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />.</summary>
      <returns>Пространственные службы.</returns>
      <param name="key">Сведения о базе данных, для которой будут использоваться пространственные службы.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.GetSpatialServices(System.String)">
      <summary>Возвращает пространственные службы для <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />.</summary>
      <returns>Пространственные службы.</returns>
      <param name="manifestToken">Сведения о токене, связанном с манифестом поставщика.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.RegisterInfoMessageHandler(System.Data.Common.DbConnection,System.Action{System.String})">
      <summary>Регистрация обработчика сообщений без ошибок, поступающих от поставщика базы данных.</summary>
      <param name="connection">Соединение для получения сведений.</param>
      <param name="handler">Обработчик сообщений.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.SetDbParameterValue(System.Data.Common.DbParameter,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Object)">
      <summary>Задает значение параметра и соответствующие аспекты для указанной <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.</summary>
      <param name="parameter">Параметр.</param>
      <param name="parameterType">Тип параметра.</param>
      <param name="value">Значение параметра.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbProviderServices.SetParameterValue(System.Data.Common.DbParameter,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Object)">
      <summary>Задает значение параметра и соответствующие аспекты для указанной <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.</summary>
      <param name="parameter">Параметр.</param>
      <param name="parameterType">Тип параметра.</param>
      <param name="value">Значение параметра.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest">
      <summary>Специализация ProviderManifest, принимающая XmlReader</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.#ctor(System.Xml.XmlReader)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest" />.</summary>
      <param name="reader">Объект <see cref="T:System.Xml.XmlReader" /> предоставляет доступ к XML-данным в файле манифеста поставщика.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.GetFacetDescriptions(System.Data.Entity.Core.Metadata.Edm.EdmType)">
      <summary>Возвращает список описаний аспектов для заданного типа модели EDM.</summary>
      <returns>Коллекция типа <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, содержащая список описаний аспектов для заданного типа модели EDM.</returns>
      <param name="edmType">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />, для которого нужно получить описания аспектов.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.GetStoreFunctions">
      <summary>Возвращает список функций, поддерживаемых поставщиком.</summary>
      <returns>Коллекция типа <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, содержащая список функций, поддерживаемых поставщиком.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.GetStoreTypes">
      <summary>Возвращает список типов-примитивов, поддерживаемых поставщиком хранения.</summary>
      <returns>Коллекция типа <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, содержащая список типов-примитивов, поддерживаемых поставщиком хранения.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.NamespaceName">
      <summary>Возвращает имя пространства имен, поддерживаемое манифестом этого поставщика.</summary>
      <returns>Имя пространства имен, поддерживаемое манифестом этого поставщика.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.StoreTypeNameToEdmPrimitiveType">
      <summary>Возвращает наилучший эквивалент сопоставления типа модели EDM с заданным по имени типом хранения.</summary>
      <returns>Наилучший эквивалент сопоставления типа модели EDM для заданного по имени типа хранения.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.DbXmlEnabledProviderManifest.StoreTypeNameToStorePrimitiveType">
      <summary>Возвращает наилучший эквивалент типа-примитива хранения, сопоставленный с заданным именем типа хранения.</summary>
      <returns>Наилучший эквивалент типа-примитива хранения, сопоставленный с заданным именем типа хранения.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.EntityRecordInfo">
      <summary>Класс EntityRecordInfo, предоставляющий удобный способ доступа к сведениям о типах и о столбцах.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.EntityRecordInfo.#ctor(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember},System.Data.Entity.Core.EntityKey,System.Data.Entity.Core.Metadata.Edm.EntitySet)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Common.EntityRecordInfo" /> определенного типа сущности с помощью перечисляемой коллекции полей данных с конкретным ключом и сведениями о наборе сущностей.</summary>
      <param name="metadata">Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" /> сущности, представленной <see cref="T:System.Data.Common.DbDataRecord" /> и описанной объектом <see cref="T:System.Data.Entity.Core.Common.EntityRecordInfo" />.</param>
      <param name="memberInfo">Перечислимая коллекция объектов <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmMember" />, представляющих сведения о столбцах.</param>
      <param name="entityKey">Ключ сущности.</param>
      <param name="entitySet">Набор сущностей, которому принадлежит сущность.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntityRecordInfo.EntityKey">
      <summary>Возвращает <see cref="T:System.Data.Entity.Core.EntityKey" /> для сущности.</summary>
      <returns>Ключ сущности.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.FieldMetadata">
      <summary>Класс FieldMetadata, обеспечивающий корреляцию между порядковыми номерами столбцов и MemberMetadata.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.FieldMetadata.#ctor(System.Int32,System.Data.Entity.Core.Metadata.Edm.EdmMember)">
      <summary>Инициализирует новый объект <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" /> указанным значением порядкового номера и типом поля.</summary>
      <param name="ordinal">Целое число, указывающее расположение метаданных.</param>
      <param name="fieldType">Тип поля.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.FieldMetadata.FieldType">
      <summary>Возвращает тип поля для объекта <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" />.</summary>
      <returns>Тип поля для этого объекта <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.FieldMetadata.Ordinal">
      <summary>Возвращает порядковый номер для объекта <see cref="T:System.Data.Entity.Core.Common.FieldMetadata" />.</summary>
      <returns>Целое число, представляющее порядковый номер.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor">
      <summary>Представляет абстрактный базовый тип для типов, которые реализуют интерфейс IExpressionVisitor, предназначенный для порождения от него.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbCommandTree)">
      <summary>Реализует шаблон посетителя для дерева команд.</summary>
      <param name="commandTree">Дерево команд.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitDeleteCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree)">
      <summary>Реализует шаблон посетителя для дерева команд удаления.</summary>
      <param name="deleteTree">Дерево команд удаления.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitFunctionCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree)">
      <summary>Реализует шаблон посетителя для дерева команд функции.</summary>
      <param name="functionTree">Дерево команд функции.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitInsertCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree)">
      <summary>Реализует шаблон посетителя для дерева команд вставки.</summary>
      <param name="insertTree">Дерево команд вставки.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitModificationClause(System.Data.Entity.Core.Common.CommandTrees.DbModificationClause)">
      <summary>Реализует шаблон посетителя для предложения изменения.</summary>
      <param name="modificationClause">Предложение изменения.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitModificationClauses(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbModificationClause})">
      <summary>Реализует шаблон посетителя для коллекции предложений изменения.</summary>
      <param name="modificationClauses">Предложения изменения.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitQueryCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree)">
      <summary>Реализует шаблон посетителя для дерева команд запроса.</summary>
      <param name="queryTree">Дерево команд запроса.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitSetClause(System.Data.Entity.Core.Common.CommandTrees.DbSetClause)">
      <summary>Реализует шаблон посетителя для предложения set.</summary>
      <param name="setClause">Предложение set.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicCommandTreeVisitor.VisitUpdateCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree)">
      <summary>Реализует шаблон посетителя для дерева команд обновления.</summary>
      <param name="updateTree">Дерево команд обновления.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor">
      <summary>Абстрактный базовый тип для типов, которые реализуют интерфейс IExpressionVisitor, предназначенный для порождения от него.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbAndExpression)">
      <summary>Метод шаблона посетителя для <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression" />.</summary>
      <param name="expression">Выражение DbAndExpression, посещение которого выполняется.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression)">
      <summary>Метод шаблона посетителя для <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" />.</summary>
      <param name="expression">Выражение DbApplyExpression, посещение которого выполняется.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression)">
      <summary>Метод шаблона посетителя для <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" />.</summary>
      <param name="expression">Выражение DbArithmeticExpression, посещение которого выполняется.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression)">
      <summary>Метод шаблона посетителя для <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression" />.</summary>
      <param name="expression">Выражение DbCaseExpression, посещение которого выполняется.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCastExpression)">
      <summary>Метод шаблона посетителя для <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression" />.</summary>
      <param name="expression">Выражение DbCastExpression, посещение которого выполняется.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression)">
      <summary>Метод шаблона посетителя для <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" />.</summary>
      <param name="expression">Выражение DbComparisonExpression, посещение которого выполняется.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression)">
      <summary>Метод шаблона посетителя для <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" />.</summary>
      <param name="expression">Выражение DbConstantExpression, посещение которого выполняется.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression)">
      <summary>Метод шаблона посетителя для <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression" />.</summary>
      <param name="expression">Выражение DbCrossJoinExpression, посещение которого выполняется.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression)">
      <summary>Метод шаблона посетителя для <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression" />.</summary>
      <param name="expression">Выражение DeRefExpression, посещение которого выполняется.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression)">
      <summary>Метод шаблона посетителя для <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression" />.</summary>
      <param name="expression">Выражение DbDistinctExpression, посещение которого выполняется.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbElementExpression)">
      <summary>Метод шаблона посетителя для <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression" />.</summary>
      <param name="expression">Выражение DbElementExpression, посещение которого выполняется.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression)">
      <summary>Метод шаблона посетителя для <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression" />.</summary>
      <param name="expression">Выражение DbEntityRefExpression, посещение которого выполняется.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression)">
      <summary>Метод шаблона посетителя для <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression" />.</summary>
      <param name="expression">Выражение DbExceptExpression, посещение которого выполняется.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Вызывается при обнаружении выражения <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> типа, не распознаваемого иным образом.</summary>
      <param name="expression">Выражение</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> равно null.</exception>
      <exception cref="T:System.NotSupportedException">Всегда формируется при вызове этого метода, так как указывает, что <paramref name="expression" /> имеет неподдерживаемый тип</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression)">
      <summary>Метод шаблона посетителя для <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" />.</summary>
      <param name="expression">Выражение DbFilterExpression, посещение которого выполняется.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression)">
      <summary>Метод шаблона посетителя для <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />.</summary>
      <param name="expression">Выражение DbFunctionExpression, посещение которого выполняется.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression)">
      <summary>Метод шаблона посетителя для <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression" />.</summary>
      <param name="expression">Выражение DbExpression, посещение которого выполняется.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbInExpression)">
      <summary>Метод шаблона посетителя для <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbInExpression" />.</summary>
      <param name="expression">Выражение DbInExpression, посещение которого выполняется.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression)">
      <summary>Метод шаблона посетителя для <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression" />.</summary>
      <param name="expression">Выражение DbIntersectExpression, посещение которого выполняется.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression)">
      <summary>Метод шаблона посетителя для <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" />.</summary>
      <param name="expression">Выражение DbIsEmptyExpression, посещение которого выполняется.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression)">
      <summary>Метод шаблона посетителя для <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression" />.</summary>
      <param name="expression">Выражение DbIsNullExpression, посещение которого выполняется.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression)">
      <summary>Метод шаблона посетителя для <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression" />.</summary>
      <param name="expression">Выражение DbIsOfExpression, посещение которого выполняется.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression)">
      <summary>Метод шаблона посетителя для <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />.</summary>
      <param name="expression">Выражение DbJoinExpression, посещение которого выполняется.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression)">
      <summary>Метод шаблона посетителя для <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression" />.</summary>
      <param name="expression">Выражение DbLambdaExpression, посещение которого выполняется.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression)">
      <summary>Метод шаблона посетителя для <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" />.</summary>
      <param name="expression">Выражение DbLikeExpression, посещение которого выполняется.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression)">
      <summary>Метод шаблона посетителя для <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" />.</summary>
      <param name="expression">Выражение DbLimitExpression, посещение которого выполняется.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression)">
      <summary>Метод шаблона посетителя для <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />.</summary>
      <param name="expression">Выражение DbNewInstanceExpression, посещение которого выполняется.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNotExpression)">
      <summary>Метод шаблона посетителя для <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" />.</summary>
      <param name="expression">Выражение DbNotExpression, посещение которого выполняется.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNullExpression)">
      <summary>Метод шаблона посетителя для <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression" />.</summary>
      <param name="expression">Выражение DbNullExpression, посещение которого выполняется.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression)">
      <summary>Метод шаблона посетителя для <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression" />.</summary>
      <param name="expression">Выражение DbOfTypeExpression, посещение которого выполняется.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOrExpression)">
      <summary>Метод шаблона посетителя для <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression" />.</summary>
      <param name="expression">Выражение DbOrExpression, посещение которого выполняется.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression)">
      <summary>Метод шаблона посетителя для <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" />.</summary>
      <param name="expression">Выражение DbParameterReferenceExpression, посещение которого выполняется.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression)">
      <summary>Метод шаблона посетителя для <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" />.</summary>
      <param name="expression">Выражение DbProjectExpression, посещение которого выполняется.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
      <summary>Метод шаблона посетителя для <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" />.</summary>
      <param name="expression">Выражение DbPropertyExpression, посещение которого выполняется.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression)">
      <summary>Метод шаблона посетителя для <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" />.</summary>
      <param name="expression">Выражение DbQuantifierExpression, посещение которого выполняется.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefExpression)">
      <summary>Метод шаблона посетителя для <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" />.</summary>
      <param name="expression">Выражение DbRefExpression, посещение которого выполняется.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression)">
      <summary>Метод шаблона посетителя для <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression" />.</summary>
      <param name="expression">Выражение DbRefKeyExpression, посещение которого выполняется.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression)">
      <summary>Метод шаблона посетителя для <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression" />.</summary>
      <param name="expression">Выражение DbRelationshipNavigationExpression, посещение которого выполняется.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbScanExpression)">
      <summary>Метод шаблона посетителя для <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression" />.</summary>
      <param name="expression">Выражение DbScanExpression, посещение которого выполняется.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression)">
      <summary>Метод шаблона посетителя для <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" />.</summary>
      <param name="expression">Выражение DbSkipExpression, посещение которого выполняется.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression)">
      <summary>Метод шаблона посетителя для <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />.</summary>
      <param name="expression">Выражение DbSortExpression, посещение которого выполняется.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression)">
      <summary>Метод шаблона посетителя для <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression" />.</summary>
      <param name="expression">Выражение DbTreatExpression, посещение которого выполняется.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression)">
      <summary>Метод шаблона посетителя для <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression" />.</summary>
      <param name="expression">Выражение DbUnionAllExpression, посещение которого выполняется.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>Метод шаблона посетителя для <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" />.</summary>
      <param name="expression">Выражение DbVariableReferenceExpression, посещение которого выполняется.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitAggregate(System.Data.Entity.Core.Common.CommandTrees.DbAggregate)">
      <summary>Вспомогательный метод для посещения указанного объекта <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate" />.</summary>
      <param name="aggregate">Статистическое выражение, которое необходимо посетить.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="aggregate" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitAggregateList(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbAggregate})">
      <summary>Вспомогательный метод для посещения каждого объекта <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate" /> в списке, если список отличен от NULL.</summary>
      <param name="aggregates">Список статистических выражений, которые должны быть посещены.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="aggregates" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitBinaryExpression(System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression)">
      <summary>Вспомогательный метод для посещения указанного объекта <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression" />.</summary>
      <param name="expression">Выражение DbBinaryExpression, которое необходимо посетить.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitExpression(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Вспомогательный метод для посещения указанного объекта <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, если он отличен от NULL.</summary>
      <param name="expression">Выражение, которое необходимо посетить.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitExpressionBindingPost(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
      <summary>Вспомогательный метод для последующей обработки после посещения DbExpressionBinding.</summary>
      <param name="binding">Посещенное ранее выражение DbExpressionBinding.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitExpressionBindingPre(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
      <summary>Вспомогательный метод для посещения указанного объекта <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />.</summary>
      <param name="binding">Выражение DbExpressionBinding, которое необходимо посетить.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="binding" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitExpressionList(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Вспомогательный метод для посещения каждого объекта <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> в заданном списке, если список отличен от NULL.</summary>
      <param name="expressionList">Список выражений, которые должны быть посещены.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expressionList" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitGroupExpressionBindingMid(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding)">
      <summary>Вспомогательный метод, указывающий, что ключи группирования <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression" /> были посещены и теперь должны быть посещены статистические выражения.</summary>
      <param name="binding">Привязка DbGroupExpressionBinding выражения DbGroupByExpression</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitGroupExpressionBindingPost(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding)">
      <summary>Вспомогательный метод для последующей обработки после посещения DbGroupExpressionBinding.</summary>
      <param name="binding">Посещенное ранее выражение DbGroupExpressionBinding.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitGroupExpressionBindingPre(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding)">
      <summary>Вспомогательный метод для посещения указанного объекта <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" />.</summary>
      <param name="binding">Выражение DbGroupExpressionBinding, которое необходимо посетить.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="binding" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitLambdaPost(System.Data.Entity.Core.Common.CommandTrees.DbLambda)">
      <summary>Вспомогательный метод для последующей обработки после посещения DbLambda.</summary>
      <param name="lambda">Посещенное ранее выражение DbLambda.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitLambdaPre(System.Data.Entity.Core.Common.CommandTrees.DbLambda)">
      <summary>Вспомогательный метод, указывающий, что текст лямбда <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" /> теперь должен быть посещен.</summary>
      <param name="lambda">Функция DbLambda, которая должна быть посещена</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="lambda" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.BasicExpressionVisitor.VisitUnaryExpression(System.Data.Entity.Core.Common.CommandTrees.DbUnaryExpression)">
      <summary>Вспомогательный метод для посещения указанного объекта <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUnaryExpression" />.</summary>
      <param name="expression">Выражение DbUnaryExpression, которое необходимо посетить.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="expression" /> равно null.</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate">
      <summary>Агрегаты — это псевдовыражения.Агрегаты похожи на выражения, однако они жестко ограничены местом своего использования — только в агрегатных предложениях выражения группирования.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbAggregate.Arguments">
      <summary>     Возвращает список выражений, которые определяют аргументы для агрегата. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbAggregate.ResultType">
      <summary>     Возвращает тип результата агрегата. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression">
      <summary>     представляет логическое «И» двух аргументов Boolean. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые не вырабатывают значение результата. </summary>
      <param name="visitor"> Экземпляр DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые вырабатывают значение результата конкретного типа. </summary>
      <param name="visitor"> Экземпляр типизированного выражения DbExpressionVisitor, возвращающего результирующее значение типа TResultType. </param>
      <typeparam name="TResultType">     Тип результата, формируемого посетителем.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression">
      <summary>     Представляет собой операцию применения, то есть вызов указанной функции для каждого элемента заданного входного набора. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые не вырабатывают значение результата. </summary>
      <param name="visitor"> Экземпляр DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые вырабатывают значение результата конкретного типа. </summary>
      <param name="visitor"> Экземпляр типизированного выражения DbExpressionVisitor, возвращающего результирующее значение типа TResultType. </param>
      <typeparam name="TResultType">     Тип результата, формируемого посетителем.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression.Apply">
      <summary>     Возвращает параметр <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />, указывающий на функцию, которая вызывается для каждого элемента во входном наборе. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression.Input">
      <summary>     Возвращает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />, задающее входной набор. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression">
      <summary>     Представляет арифметическую операцию (сложение, вычитание, умножение, деление, взятие остатка от деления или отрицание), которая применяется к двум числовым аргументам. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые не вырабатывают значение результата. </summary>
      <param name="visitor"> Экземпляр DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые вырабатывают значение результата конкретного типа. </summary>
      <param name="visitor"> Экземпляр типизированного выражения DbExpressionVisitor, возвращающего результирующее значение типа TResultType. </param>
      <typeparam name="TResultType">     Тип результата, формируемого посетителем.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression.Arguments">
      <summary>     Возвращает список выражений, определяющих текущие аргументы. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression">
      <summary>     Абстрактный базовый тип для выражений, которые принимают 2 операнда выражения. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression.Left">
      <summary>     Возвращает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, определяющее левый аргумент. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbBinaryExpression.Right">
      <summary>     Возвращает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, определяющее правый аргумент. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression">
      <summary>     Представляет логическую операцию Case When... Then... Else. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые не вырабатывают значение результата. </summary>
      <param name="visitor"> Экземпляр DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые вырабатывают значение результата конкретного типа. </summary>
      <param name="visitor"> Экземпляр типизированного выражения DbExpressionVisitor, возвращающего результирующее значение типа TResultType. </param>
      <typeparam name="TResultType">     Тип результата, формируемого посетителем.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.Else">
      <summary>     Возвращает или задает предложение Else в этом выражении DbCaseExpression. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.Then">
      <summary>     Возвращает предложения Then в этом выражении DbCaseExpression. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression.When">
      <summary>     Возвращает предложения When в этом выражении DbCaseExpression. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression">
      <summary>     Представляет операцию приведения типов, применяемую к полиморфному аргументу. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые не вырабатывают значение результата. </summary>
      <param name="visitor"> Экземпляр DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые вырабатывают значение результата конкретного типа. </summary>
      <param name="visitor"> Экземпляр типизированного выражения DbExpressionVisitor, возвращающего результирующее значение типа TResultType. </param>
      <typeparam name="TResultType">     Тип результата, формируемого посетителем.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree">
      <summary>Представляет абстрактный базовый тип для типов удаления, запроса, вставки и обновления DbCommandTree.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.CommandTreeKind">
      <summary>Возвращает тип дерева команд.</summary>
      <returns>Вид данного дерева команд.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.DataSpace">
      <summary>Возвращает область данных, в которой должны находиться метаданные, используемые этим деревом команд.</summary>
      <returns>Область данных, в которой должны находиться метаданные, используемые этим деревом команд.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.MetadataWorkspace">
      <summary>Возвращает рабочую область метаданных, используемую этим деревом команд.</summary>
      <returns>Рабочая область метаданных, используемая этим деревом команд.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.Parameters">
      <summary>Возвращает имя и соответствующий тип каждого параметра, для которых можно указать ссылку внутри этого дерева команд.</summary>
      <returns>Имя и соответствующий тип каждого параметра, для которых можно указать ссылку внутри этого дерева команд.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.ToString">
      <summary>Возвращает строковое представление объекта <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree" />.</summary>
      <returns>Строковое представление <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree.UseDatabaseNullSemantics">
      <summary>Получает значение, указывающее, использует ли дерево команд семантику по работе со значениями null для базы данных.</summary>
      <returns>Дерево команд использует семантику по работе со значениями null для базы данных.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind">
      <summary>Описывает другие команды базы данных. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Delete">
      <summary>Задает команду удаления.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Function">
      <summary>Задает команду функции.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Insert">
      <summary>Задает команду вставки.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Query">
      <summary>Задает команду запроса.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbCommandTreeKind.Update">
      <summary>Задает команду обновления.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression">
      <summary>     Представляет операцию сравнения (равно, больше, больше или равно, меньше, меньше или равно, не равно), применяемую к двум аргументам. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые не вырабатывают значение результата. </summary>
      <param name="visitor"> Экземпляр DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые вырабатывают значение результата конкретного типа. </summary>
      <param name="visitor"> Экземпляр типизированного выражения DbExpressionVisitor, возвращающего результирующее значение типа TResultType. </param>
      <typeparam name="TResultType">     Тип результата, формируемого посетителем.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression">
      <summary>     Представляет константное значение. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые не вырабатывают значение результата. </summary>
      <param name="visitor"> Экземпляр DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые вырабатывают значение результата конкретного типа. </summary>
      <param name="visitor"> Экземпляр типизированного выражения DbExpressionVisitor, возвращающего результирующее значение типа TResultType. </param>
      <typeparam name="TResultType">     Тип результата, формируемого посетителем.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression.Value">
      <summary>     Возвращает значение константы. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression">
      <summary>     Представляет безусловную операцию соединения между заданными аргументами коллекции </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые не вырабатывают значение результата. </summary>
      <param name="visitor"> Экземпляр DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые вырабатывают значение результата конкретного типа. </summary>
      <param name="visitor"> Экземпляр типизированного выражения DbExpressionVisitor, возвращающего результирующее значение типа TResultType. </param>
      <typeparam name="TResultType">     Тип результата, формируемого посетителем.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression.Inputs">
      <summary>     Возвращает список <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />, который предоставляет входные наборы для соединения. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree">
      <summary>Представляет операцию удаления одной строкой в виде канонического дерева команд.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree" />.</summary>
      <param name="metadata">Рабочая область метаданных.</param>
      <param name="dataSpace">Пространство данных.</param>
      <param name="target">Привязка выражения базы данных.</param>
      <param name="predicate">Выражение базы данных.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree.CommandTreeKind">
      <summary>Возвращает тип дерева команд.</summary>
      <returns>Вид данного дерева команд.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbDeleteCommandTree.Predicate">
      <summary>Возвращает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, указывающее предикат, который используется для определения удаляемых элементов целевой коллекции.</summary>
      <returns>Предикат, который используется для определения удаляемых элементов целевой коллекции.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression">
      <summary>     Представляет получение заданной сущности с использованием указанного значения Ref. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые не вырабатывают значение результата. </summary>
      <param name="visitor"> Экземпляр DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые вырабатывают значение результата конкретного типа. </summary>
      <param name="visitor"> Экземпляр типизированного выражения DbExpressionVisitor, возвращающего результирующее значение типа TResultType. </param>
      <typeparam name="TResultType">     Тип результата, формируемого посетителем.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression">
      <summary>     Представляет удаление повторов из операнда указанного набора. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые не вырабатывают значение результата. </summary>
      <param name="visitor"> Экземпляр DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые вырабатывают значение результата конкретного типа. </summary>
      <param name="visitor"> Экземпляр типизированного выражения DbExpressionVisitor, возвращающего результирующее значение типа TResultType. </param>
      <typeparam name="TResultType">     Тип результата, формируемого посетителем.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression">
      <summary>Представляет преобразование операнда указанного набора в одноэлементный набор.Если набор пустой, то преобразование возвращает значение null, в противном случае преобразование возвращает один из элементов в наборе.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые не вырабатывают значение результата. </summary>
      <param name="visitor"> Экземпляр DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые вырабатывают значение результата конкретного типа. </summary>
      <param name="visitor"> Экземпляр типизированного выражения DbExpressionVisitor, возвращающего результирующее значение типа TResultType. </param>
      <typeparam name="TResultType">     Тип результата, формируемого посетителем.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression">
      <summary>     Представляет получение ссылки на указанную сущность Entity как Ref. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые не вырабатывают значение результата. </summary>
      <param name="visitor"> Экземпляр DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые вырабатывают значение результата конкретного типа. </summary>
      <param name="visitor"> Экземпляр типизированного выражения DbExpressionVisitor, возвращающего результирующее значение типа TResultType. </param>
      <typeparam name="TResultType">     Тип результата, формируемого посетителем.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression">
      <summary>     Представляет операцию вычитания наборов, выраженных левым и правым операндами. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые не вырабатывают значение результата. </summary>
      <param name="visitor"> Экземпляр DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые вырабатывают значение результата конкретного типа. </summary>
      <param name="visitor"> Экземпляр типизированного выражения DbExpressionVisitor, возвращающего результирующее значение типа TResultType. </param>
      <typeparam name="TResultType">     Тип результата, формируемого посетителем.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Представляет базовый тип для всех выражений.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Реализует метод интерфейса шаблона посетителя для посетителей выражений, которые не формируют итоговое значение.</summary>
      <param name="visitor">Экземпляр DbExpressionVisitor.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="visitor" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Реализует метод интерфейса шаблона посетителя для посетителей выражений, которые формируют итоговое значение конкретного типа.</summary>
      <returns>Экземпляр <paramref name="TResultType" />.</returns>
      <param name="visitor"> Экземпляр типизированного выражения DbExpressionVisitor, возвращающего результирующее значение типа TResultType.</param>
      <typeparam name="TResultType">Тип результата, формируемого <paramref name="visitor" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="visitor" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему экземпляру DbExpression.</summary>
      <returns>Значение true, если заданный объект равен текущему экземпляру DbExpression. В противном случае — значение false.</returns>
      <param name="obj">Объект для сравнения с текущим <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpression.ExpressionKind">
      <summary>Возвращает тип выражения, который указывает операцию этого выражения.</summary>
      <returns>Тип выражения, который указывает операцию этого выражения.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromBinary(System.Byte[])">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, представляющее заданное двоичное значение, которое может быть равно NULL.</summary>
      <returns>Выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, представляющее заданное двоичное значение.</returns>
      <param name="value"> Двоичное значение, на котором должно быть основано возвращаемое выражение.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromBoolean(System.Nullable{System.Boolean})">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, представляющее указанное (допускающее значение NULL) логическое значение.</summary>
      <returns>Выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, представляющее заданное логическое значение.</returns>
      <param name="value">Логическое значение, на котором должно быть основано возвращаемое выражение.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromByte(System.Nullable{System.Byte})">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, представляющее указанное (допускающее значение NULL) байтовое значение.</summary>
      <returns>Выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, представляющее заданное байтовое значение.</returns>
      <param name="value">Байтовое значение, на котором должно быть основано возвращаемое выражение.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromDateTime(System.Nullable{System.DateTime})">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, представляющее указанное (допускающее значение NULL) значение <see cref="T:System.DateTime" />.</summary>
      <returns>Выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, представляющее заданное значение DateTime.</returns>
      <param name="value">Значение DateTime, на котором должно быть основано возвращаемое выражение.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromDateTimeOffset(System.Nullable{System.DateTimeOffset})">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, представляющее указанное (допускающее значение NULL) значение <see cref="T:System.DateTimeOffset" />.</summary>
      <returns>Выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, представляющее заданное значение DateTimeOffset.</returns>
      <param name="value">Значение DateTimeOffset, на котором должно быть основано возвращаемое выражение.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromDecimal(System.Nullable{System.Decimal})">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, представляющее указанное (допускающее значение NULL) десятичное значение.</summary>
      <returns>Выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, представляющее заданное десятичное значение.</returns>
      <param name="value">Десятичное значение, на котором должно быть основано возвращаемое выражение.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromDouble(System.Nullable{System.Double})">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, представляющее указанное (допускающее значение NULL) повторяющееся значение.</summary>
      <returns>Выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, представляющее заданное повторяющееся значение.</returns>
      <param name="value">Повторяющееся значение, на котором должно быть основано возвращаемое выражение.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromGeography(System.Data.Entity.Spatial.DbGeography)">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, представляющее указанное значение <see cref="T:System.Data.Entity.Spatial.DbGeography" />, которое может быть равно NULL.</summary>
      <returns>Выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, представляющее заданное значение DbGeography.</returns>
      <param name="value">Значение DbGeography, на котором должно быть основано возвращаемое выражение.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromGeometry(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, представляющее указанное значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, которое может быть равно NULL.</summary>
      <returns>Выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, представляющее заданное значение DbGeometry.</returns>
      <param name="value">Значение DbGeometry, на котором должно быть основано возвращаемое выражение.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromGuid(System.Nullable{System.Guid})">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, представляющее указанное (допускающее значение NULL) значение <see cref="T:System.Guid" />.</summary>
      <returns>Выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, представляющее заданное значение идентификатора Guid.</returns>
      <param name="value">Значение идентификатора Guid, на котором должно быть основано возвращаемое выражение.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromInt16(System.Nullable{System.Int16})">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, представляющее указанное (допускающее значение NULL) значение Int16.</summary>
      <returns>Выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, представляющее заданное значение Int16.</returns>
      <param name="value">Значение Int16, на котором должно быть основано возвращаемое выражение.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromInt32(System.Nullable{System.Int32})">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, представляющее указанное (допускающее значение NULL) значение Int32.</summary>
      <returns>Выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, представляющее заданное значение Int32.</returns>
      <param name="value">Значение Int32, на котором должно быть основано возвращаемое выражение.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromInt64(System.Nullable{System.Int64})">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, представляющее указанное (допускающее значение NULL) значение Int64.</summary>
      <returns>Выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, представляющее заданное значение Int64.</returns>
      <param name="value">Значение Int64, на котором должно быть основано возвращаемое выражение.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromSingle(System.Nullable{System.Single})">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, представляющее указанное (допускающее значение NULL) значение Single.</summary>
      <returns>Выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, представляющее заданное значение Single.</returns>
      <param name="value">Значение Single, на котором должно быть основано возвращаемое выражение.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.FromString(System.String)">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, представляющее заданное строковое значение.</summary>
      <returns>Выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, представляющее заданное строковое значение.</returns>
      <param name="value">Строковое значение, на котором должно быть основано возвращаемое выражение.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.GetHashCode">
      <summary>Служит в качестве хэш-функции для данного типа.</summary>
      <returns>Хэш-код для текущего выражения.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Byte[])~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Преобразует массив 8-разрядных целых чисел без знака в <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, который представляет преобразованный массив 8-разрядных целых чисел без знака.</returns>
      <param name="value">Массив 8-разрядных целых чисел без знака.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Data.Entity.Spatial.DbGeography)~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Преобразует объект DbGeography в <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, представляющий преобразованный объект DbGeography.</returns>
      <param name="value">Объект DbGeography.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Data.Entity.Spatial.DbGeometry)~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Преобразует объект DBGeometry в <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, представляющий преобразованный объект DbGeography.</returns>
      <param name="value">Объект DbGeometry.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Boolean})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Преобразует логический объект, допускающий значение NULL, в <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, представляющий преобразованный логический объект, допускающий значение NULL.</returns>
      <param name="value">Допускающий значение NULL логический объект.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Byte})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Преобразует 8-разрядное целое число без знака (допускающее значение NULL) в <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, представляющее преобразованное 8-разрядное целое число без знака.</returns>
      <param name="value">8-разрядное целое число без знака (допускающее значение NULL).</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.DateTime})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Преобразует объект <see cref="T:System.DateTime" />, допускающий значения NULL, в <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, представляющий объект <see cref="T:System.DateTime" />.</returns>
      <param name="value">Объект <see cref="T:System.DateTime" />, допускающий значение NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.DateTimeOffset})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Преобразует объект <see cref="T:System.DateTimeOffset" />, допускающий значения NULL, в <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, представляющий объект <see cref="T:System.DateTime" />, допускающий значение NULL.</returns>
      <param name="value">Объект <see cref="T:System.DateTime" />, допускающий значение NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Decimal})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Преобразует объект Decimal, допускающий значения NULL, в <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, который представляет объект Decimal, допускающий значения NULL.</returns>
      <param name="value">Объект Decimal, допускающий значения NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Double})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Преобразует объект типа double, допускающий значения NULL, в <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, представляющий объект типа double, допускающий значения NULL.</returns>
      <param name="value">Объект типа double, допускающий значения NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Guid})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Преобразует объект идентификатора GUID, допускающий значения NULL, в <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, представляющий объект <see cref="T:System.Guid" />, допускающий значения NULL.</returns>
      <param name="value">Объект <see cref="T:System.Guid" />, допускающий значения NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Int16})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Преобразует 16-разрядное целое число без знака (допускающее значение NULL) в <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, представляющее 16-разрядное целое число без знака, допускающее значение NULL.</returns>
      <param name="value">16-разрядное целое число без знака (допускающее значение NULL).</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Int32})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Преобразует 32-разрядное целое число без знака (допускающее значение NULL) в <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, представляющее 32-разрядное целое число без знака, допускающее значение NULL.</returns>
      <param name="value">32-разрядное целое число без знака (допускающее значение NULL).</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Int64})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Преобразует 64-разрядное целое число без знака (допускающее значение NULL) в <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, представляющее 64-разрядное целое число без знака, допускающее значение NULL.</returns>
      <param name="value">64-разрядное целое число без знака (допускающее значение NULL).</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.Nullable{System.Single})~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Преобразует число с плавающей запятой одиночной точности, допускающее значение NULL, в <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, представляющий число одиночной точности с плавающей запятой.</returns>
      <param name="value">Число с плавающей запятой одиночной точности.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpression.op_Implicit(System.String)~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Преобразует последовательную коллекцию символов Юникода в <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, который представляет последовательную коллекцию символов Юникода.</returns>
      <param name="value">Последовательная коллекция символов Юникода.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpression.ResultType">
      <summary>Возвращает тип метаданных для результирующего типа выражения.</summary>
      <returns>Тип метаданных для результирующего типа выражения.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding">
      <summary>Описывает привязку для выражения.Концептуально аналогично циклу foreach в C#.Свойство DbExpression задает коллекцию, по которой выполняется итерация, а свойство Var предоставляет средства для ссылки на текущий элемент коллекции во время итерации.Привязка DbExpressionBinding используется для описания аргументов, заданных для реляционных выражений, таких как <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" />, <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" /> и <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding.Expression">
      <summary>     Возвращает значение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, которое задает входной набор. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding.Variable">
      <summary>     Возвращает значение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" />, которое ссылается на переменную элемента. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding.VariableName">
      <summary>     Возвращает имя, присвоенное переменной элемента. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding.VariableType">
      <summary>     Возвращает метаданные типа переменной элемента. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind">
      <summary>     Описывает различные «представления» (классы) выражений. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.All">
      <summary>     Всегда принимает значение true. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.And">
      <summary>     Логический оператор And. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Any">
      <summary>     Всегда принимает значение True. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Case">
      <summary>     Инструкция условия. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Cast">
      <summary>     Приведение полиморфных типов. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Constant">
      <summary>     Значение константы. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.CrossApply">
      <summary>     Cross Apply </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.CrossJoin">
      <summary>     Cross Join </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Deref">
      <summary>     Удаление ссылки. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Distinct">
      <summary>     Удаление повторов. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Divide">
      <summary>     Деление. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Element">
      <summary>     Задано преобразование в одинарный элемент. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.EntityRef">
      <summary>     Получение значения ссылки сущности. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Equals">
      <summary>     Равенство </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Except">
      <summary>     Вычитание множеств </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Filter">
      <summary>     Ограничение. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.FullOuterJoin">
      <summary>     Полное внешнее объединение </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Function">
      <summary>     Вызов автономной функции </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.GreaterThan">
      <summary>     Больше. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.GreaterThanOrEquals">
      <summary>     Больше или равно. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.GroupBy">
      <summary>     Группирование. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.In">
      <summary>     Вхождение в диапазон. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.InnerJoin">
      <summary>     Внутреннее соединение </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Intersect">
      <summary>     Пересечение наборов. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.IsEmpty">
      <summary>     Определение пустого набора. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.IsNull">
      <summary>     Определение значения null. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.IsOf">
      <summary>     Сравнение типов (указан тип или подтип). </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.IsOfOnly">
      <summary>     Сравнение типов (указано только тип). </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Lambda">
      <summary>     Применение лямбда-функции </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.LeftOuterJoin">
      <summary>     Левое внешнее соединение </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.LessThan">
      <summary>     Меньше. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.LessThanOrEquals">
      <summary>     Меньше или равно. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Like">
      <summary>     Строковое сравнение. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Limit">
      <summary>     Выражения с ограничением количества результатов (TOP n). </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Minus">
      <summary>     Вычитание. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Modulo">
      <summary>     Остаток от деления. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Multiply">
      <summary>     Умножение. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.NewInstance">
      <summary>     Создание экземпляров, строк и наборов. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Not">
      <summary>     Логический оператор Not. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.NotEquals">
      <summary>     Неравенство. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Null">
      <summary>     Значение null. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OfType">
      <summary>     Элементы набора по типу (или подтипу). </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OfTypeOnly">
      <summary>     Элементы набору по (точному) типу. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Or">
      <summary>     Логический оператор Or. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OuterApply">
      <summary>     Outer Apply. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.ParameterReference">
      <summary>     Ссылка на параметр. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Plus">
      <summary>     Сложение. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Project">
      <summary>     Проекция. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Property">
      <summary>     Получение статического значения или свойства экземпляра. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Ref">
      <summary>     Ссылка. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.RefKey">
      <summary>     Получение значения ключа ссылки. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.RelationshipNavigation">
      <summary>     Навигация по связи (составу или ассоциации). </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Scan">
      <summary>     Перебор набора связей или сущностей. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Skip">
      <summary>     Пропуск элементов упорядоченной коллекции. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Sort">
      <summary>     Сортировка. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.Treat">
      <summary>     Преобразование типов. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.UnaryMinus">
      <summary>     Отрицание. </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.UnionAll">
      <summary>     Объединение наборов (с повторами). </summary>
    </member>
    <member name="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.VariableReference">
      <summary>     Ссылка на переменную. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder">
      <summary>Обеспечивает происхождение всех метаданных в дереве выражения из указанной рабочей области метаданных, при необходимости заново перестраивает выражения и выполняет их повторную привязку с целью замены метаданных.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder" />.</summary>
      <param name="targetWorkspace">Целевая рабочая область.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
      <summary>Реализует шаблон посетителя для получения свойства экземпляра.</summary>
      <returns>Реализованный посетитель.</returns>
      <param name="expression">Выражение.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.VisitEntitySet(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
      <summary>Реализует шаблон посетителя для набора сущностей.</summary>
      <returns>Реализованный шаблон посетителя.</returns>
      <param name="entitySet">Набор сущностей.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.VisitFunction(System.Data.Entity.Core.Metadata.Edm.EdmFunction)">
      <summary>Реализует шаблон посетителя для функции.</summary>
      <returns>Реализованный шаблон посетителя.</returns>
      <param name="functionMetadata">Метаданные функции.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.VisitType(System.Data.Entity.Core.Metadata.Edm.EdmType)">
      <summary>Реализует шаблон посетителя для типа.</summary>
      <returns>Реализованный шаблон посетителя.</returns>
      <param name="type">Тип.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionRebinder.VisitTypeUsage(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Реализует шаблон посетителя для использования типа.</summary>
      <returns>Реализованный шаблон посетителя.</returns>
      <param name="type">Тип.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor">
      <summary>Абстрактный базовый класс шаблона посетителя выражения, который должен быть реализован посетителями, не возвращающими значение результата.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbAndExpression)">
      <summary>Метод шаблона посетителя для DbAndExpression.</summary>
      <param name="expression">Выражение DbAndExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression)">
      <summary>Метод шаблона посетителя для DbApplyExpression.</summary>
      <param name="expression">Выражение DbApplyExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression)">
      <summary>Метод шаблона посетителя для DbArithmeticExpression.</summary>
      <param name="expression">Выражение DbArithmeticExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression)">
      <summary>Метод шаблона посетителя для DbCaseExpression.</summary>
      <param name="expression">Выражение DbCaseExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCastExpression)">
      <summary>Метод шаблона посетителя для DbCastExpression.</summary>
      <param name="expression">Выражение DbCastExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression)">
      <summary>Метод шаблона посетителя для DbComparisonExpression.</summary>
      <param name="expression">Выражение DbComparisonExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression)">
      <summary>Метод шаблона посетителя для DbConstantExpression.</summary>
      <param name="expression">Выражение DbConstantExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression)">
      <summary>Метод шаблона посетителя для DbCrossJoinExpression.</summary>
      <param name="expression">Выражение DbCrossJoinExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression)">
      <summary>Метод шаблона посетителя для DbDerefExpression.</summary>
      <param name="expression">Выражение DbDerefExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression)">
      <summary>Метод шаблона посетителя для DbDistinctExpression.</summary>
      <param name="expression">Выражение DbDistinctExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbElementExpression)">
      <summary>Метод шаблона посетителя для DbElementExpression.</summary>
      <param name="expression">Выражение DbElementExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression)">
      <summary>Метод шаблона посетителя для DbEntityRefExpression.</summary>
      <param name="expression">Выражение DbEntityRefExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression)">
      <summary>Метод шаблона посетителя для DbExceptExpression.</summary>
      <param name="expression">Выражение DbExceptExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Вызывается, если встречается выражение типа, который в противном случае останется нераспознанным.</summary>
      <param name="expression">Выражение.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression)">
      <summary>Метод шаблона посетителя для DbFilterExpression.</summary>
      <param name="expression">Выражение DbFilterExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression)">
      <summary>Метод шаблона посетителя для DbFunctionExpression.</summary>
      <param name="expression">Выражение DbFunctionExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression)">
      <summary>Метод шаблона посетителя для DbGroupByExpression.</summary>
      <param name="expression">Выражение DbGroupByExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbInExpression)">
      <summary>Метод шаблона посетителя для DbInExpression.</summary>
      <param name="expression">Выражение DbInExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression)">
      <summary>Метод шаблона посетителя для DbIntersectExpression.</summary>
      <param name="expression">Выражение DbIntersectExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression)">
      <summary>Метод шаблона посетителя для DbIsEmptyExpression.</summary>
      <param name="expression">Выражение DbIsEmptyExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression)">
      <summary>Метод шаблона посетителя для DbIsNullExpression.</summary>
      <param name="expression">Выражение DbIsNullExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression)">
      <summary>Метод шаблона посетителя для DbIsOfExpression.</summary>
      <param name="expression">Выражение DbIsOfExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression)">
      <summary>Метод шаблона посетителя для DbJoinExpression.</summary>
      <param name="expression">Выражение DbJoinExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression)">
      <summary>Метод шаблона посетителя для DbLambdaExpression.</summary>
      <param name="expression">Выражение DbLambdaExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression)">
      <summary>Метод шаблона посетителя для DbLikeExpression.</summary>
      <param name="expression">Выражение DbLikeExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression)">
      <summary>Метод шаблона посетителя для DbLimitExpression.</summary>
      <param name="expression">Выражение DbLimitExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression)">
      <summary>Метод шаблона посетителя для DbNewInstanceExpression.</summary>
      <param name="expression">Выражение DbNewInstanceExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNotExpression)">
      <summary>Метод шаблона посетителя для DbNotExpression.</summary>
      <param name="expression">Выражение DbNotExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNullExpression)">
      <summary>Метод шаблона посетителя для DbNullExpression.</summary>
      <param name="expression">Выражение DbNullExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression)">
      <summary>Метод шаблона посетителя для DbOfTypeExpression.</summary>
      <param name="expression">Выражение DbOfTypeExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOrExpression)">
      <summary>Метод шаблона посетителя для DbOrExpression.</summary>
      <param name="expression">Выражение DbOrExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression)">
      <summary>Метод шаблона посетителя для DbParameterReferenceExpression.</summary>
      <param name="expression">Выражение DbParameterReferenceExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression)">
      <summary>Метод шаблона посетителя для DbProjectExpression.</summary>
      <param name="expression">Выражение DbProjectExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
      <summary>Метод шаблона посетителя для DbPropertyExpression.</summary>
      <param name="expression">Выражение DbPropertyExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression)">
      <summary>Метод шаблона посетителя для DbQuantifierExpression.</summary>
      <param name="expression">Выражение DbQuantifierExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefExpression)">
      <summary>Метод шаблона посетителя для DbRefExpression.</summary>
      <param name="expression">Выражение DbRefExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression)">
      <summary>Метод шаблона посетителя для DbRefKeyExpression.</summary>
      <param name="expression">Выражение DbRefKeyExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression)">
      <summary>Метод шаблона посетителя для DbRelationshipNavigationExpression.</summary>
      <param name="expression">Выражение DbRelationshipNavigationExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbScanExpression)">
      <summary>Метод шаблона посетителя для DbScanExpression.</summary>
      <param name="expression">Выражение DbScanExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression)">
      <summary>Метод шаблона посетителя для DbSkipExpression.</summary>
      <param name="expression">Выражение DbSkipExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression)">
      <summary>Метод шаблона посетителя для DbSortExpression.</summary>
      <param name="expression">Выражение DbSortExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression)">
      <summary>Метод шаблона посетителя для DbTreatExpression.</summary>
      <param name="expression">Выражение DbTreatExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression)">
      <summary>Метод шаблона посетителя для DbUnionAllExpression.</summary>
      <param name="expression">Выражение DbUnionAllExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>Метод шаблона посетителя для DbVariableReferenceExpression.</summary>
      <param name="expression">Выражение DbVariableReferenceExpression, посещение которого выполняется.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1">
      <summary>     Абстрактный базовый класс шаблона посетителя выражения, который должен быть реализован посетителями, возвращающими значение результата конкретного типа. </summary>
      <typeparam name="TResultType"> Тип значения результата, сформированного посетителем. </typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbAndExpression)">
      <summary>     Типизированный метод шаблона посетителя для DbAndExpression. </summary>
      <param name="expression"> Выражение DbAndExpression, посещение которого выполняется. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression)">
      <summary>     Типизированный метод шаблона посетителя для DbApplyExpression. </summary>
      <param name="expression"> Выражение DbApplyExpression, посещение которого выполняется. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression)">
      <summary>     Типизированный метод шаблона посетителя для DbArithmeticExpression. </summary>
      <param name="expression"> Выражение DbArithmeticExpression, посещение которого выполняется. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression)">
      <summary>     Типизированный метод шаблона посетителя для DbCaseExpression. </summary>
      <param name="expression"> Выражение DbCaseExpression, посещение которого выполняется. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCastExpression)">
      <summary>     Типизированный метод шаблона посетителя для DbCastExpression. </summary>
      <param name="expression"> Выражение DbCastExpression, посещение которого выполняется. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression)">
      <summary>     Типизированный метод шаблона посетителя для DbComparisonExpression. </summary>
      <param name="expression"> Выражение DbComparisonExpression, посещение которого выполняется. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression)">
      <summary>     Типизированный метод шаблона посетителя для DbConstantExpression. </summary>
      <param name="expression"> Выражение DbConstantExpression, посещение которого выполняется. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression)">
      <summary>     Типизированный метод шаблона посетителя для DbCrossJoinExpression. </summary>
      <param name="expression"> Выражение DbCrossJoinExpression, посещение которого выполняется. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression)">
      <summary>     Метод шаблона посетителя для DbDerefExpression. </summary>
      <param name="expression"> Выражение DbDerefExpression, посещение которого выполняется. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression)">
      <summary>     Типизированный метод шаблона посетителя для DbDistinctExpression. </summary>
      <param name="expression"> Выражение DbDistinctExpression, посещение которого выполняется. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbElementExpression)">
      <summary>     Типизированный метод шаблона посетителя для DbElementExpression. </summary>
      <param name="expression"> Выражение DbElementExpression, посещение которого выполняется. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression)">
      <summary>     Метод шаблона посетителя для DbEntityRefExpression. </summary>
      <param name="expression"> Выражение DbEntityRefExpression, посещение которого выполняется. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression)">
      <summary>     Типизированный метод шаблона посетителя для DbExceptExpression. </summary>
      <param name="expression"> Выражение DbExceptExpression, посещение которого выполняется. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>     Вызывается, если встречается выражение типа, который в противном случае останется нераспознанным. </summary>
      <param name="expression"> Выражение. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression)">
      <summary>     Типизированный метод шаблона посетителя для DbFilterExpression. </summary>
      <param name="expression"> Выражение DbFilterExpression, посещение которого выполняется. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression)">
      <summary>     Метод шаблона посетителя для DbFunctionExpression </summary>
      <param name="expression"> Выражение DbFunctionExpression, посещение которого выполняется. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression)">
      <summary>     Типизированный метод шаблона посетителя для DbGroupByExpression. </summary>
      <param name="expression"> Выражение DbGroupByExpression, посещение которого выполняется. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbInExpression)">
      <summary>     Типизированный метод шаблона посетителя для DbInExpression. </summary>
      <param name="expression"> Выражение DbInExpression, посещение которого выполняется. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression)">
      <summary>     Типизированный метод шаблона посетителя для DbIntersectExpression. </summary>
      <param name="expression"> Выражение DbIntersectExpression, посещение которого выполняется. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression)">
      <summary>     Типизированный метод шаблона посетителя для DbIsEmptyExpression. </summary>
      <param name="expression"> Выражение DbIsEmptyExpression, посещение которого выполняется. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression)">
      <summary>     Типизированный метод шаблона посетителя для DbIsNullExpression. </summary>
      <param name="expression"> Выражение DbIsNullExpression, посещение которого выполняется. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression)">
      <summary>     Типизированный метод шаблона посетителя для DbIsOfExpression. </summary>
      <param name="expression"> Выражение DbIsOfExpression, посещение которого выполняется. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression)">
      <summary>     Типизированный метод шаблона посетителя для DbJoinExpression. </summary>
      <param name="expression"> Выражение DbJoinExpression, посещение которого выполняется. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression)">
      <summary>     Метод шаблона посетителя для DbLambdaExpression. </summary>
      <param name="expression"> Выражение DbLambdaExpression, посещение которого выполняется. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression)">
      <summary>     Метод шаблона посетителя для DbLikeExpression. </summary>
      <param name="expression"> Выражение DbLikeExpression, посещение которого выполняется. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression)">
      <summary>     Метод шаблона посетителя для DbLimitExpression. </summary>
      <param name="expression"> Выражение DbLimitExpression, посещение которого выполняется. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression)">
      <summary>     Типизированный метод шаблона посетителя для DbNewInstanceExpression. </summary>
      <param name="expression"> Выражение DbNewInstanceExpression, посещение которого выполняется. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNotExpression)">
      <summary>     Типизированный метод шаблона посетителя для DbNotExpression. </summary>
      <param name="expression"> Выражение DbNotExpression, посещение которого выполняется. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNullExpression)">
      <summary>     Типизированный метод шаблона посетителя для DbNullExpression. </summary>
      <param name="expression"> Выражение DbNullExpression, посещение которого выполняется. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression)">
      <summary>     Типизированный метод шаблона посетителя для DbOfTypeExpression. </summary>
      <param name="expression"> Выражение DbOfTypeExpression, посещение которого выполняется. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOrExpression)">
      <summary>     Типизированный метод шаблона посетителя для DbOrExpression. </summary>
      <param name="expression"> Выражение DbOrExpression, посещение которого выполняется. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression)">
      <summary>     Типизированный метод шаблона посетителя для DbParameterReferenceExpression. </summary>
      <param name="expression"> Выражение DbParameterReferenceExpression, посещение которого выполняется. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression)">
      <summary>     Типизированный метод шаблона посетителя для DbProjectExpression. </summary>
      <param name="expression"> Выражение DbProjectExpression, посещение которого выполняется. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
      <summary>     Типизированный метод шаблона посетителя для DbPropertyExpression. </summary>
      <param name="expression"> Выражение DbPropertyExpression, посещение которого выполняется. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression)">
      <summary>     Типизированный метод шаблона посетителя для DbQuantifierExpression. </summary>
      <param name="expression"> Выражение DbQuantifierExpression, посещение которого выполняется. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefExpression)">
      <summary>     Типизированный метод шаблона посетителя для DbRefExpression. </summary>
      <param name="expression"> Выражение DbRefExpression, посещение которого выполняется. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression)">
      <summary>     Метод шаблона посетителя для DbRefKeyExpression. </summary>
      <param name="expression"> Выражение DbRefKeyExpression, посещение которого выполняется. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression)">
      <summary>     Типизированный метод шаблона посетителя для DbRelationshipNavigationExpression. </summary>
      <param name="expression"> Выражение DbRelationshipNavigationExpression, посещение которого выполняется. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbScanExpression)">
      <summary>     Типизированный метод шаблона посетителя для DbScanExpression. </summary>
      <param name="expression"> Выражение DbScanExpression, посещение которого выполняется. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression)">
      <summary>     Типизированный метод шаблона посетителя для DbSkipExpression. </summary>
      <param name="expression"> Выражение DbSkipExpression, посещение которого выполняется. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression)">
      <summary>     Типизированный метод шаблона посетителя для DbSortExpression. </summary>
      <param name="expression"> Выражение DbSortExpression, посещение которого выполняется. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression)">
      <summary>     Типизированный метод шаблона посетителя для DbTreatExpression. </summary>
      <param name="expression"> Выражение DbTreatExpression, посещение которого выполняется. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression)">
      <summary>     Типизированный метод шаблона посетителя для DbUnionAllExpression. </summary>
      <param name="expression"> Выражение DbUnionAllExpression, посещение которого выполняется. </param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor`1.Visit(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>     Типизированный метод шаблона посетителя для DbVariableReferenceExpression. </summary>
      <param name="expression"> Выражение DbVariableReferenceExpression, посещение которого выполняется. </param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression">
      <summary>     Представляет предикат, применяемый к входному набору для создания набора элементов, удовлетворяющих предикату. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые не вырабатывают значение результата. </summary>
      <param name="visitor"> Экземпляр DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые вырабатывают значение результата конкретного типа. </summary>
      <param name="visitor"> Экземпляр типизированного выражения DbExpressionVisitor, возвращающего результирующее значение типа TResultType. </param>
      <typeparam name="TResultType">     Тип результата, формируемого посетителем.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression.Input">
      <summary>     Возвращает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />, задающее входной набор. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression.Predicate">
      <summary>     Возвращает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, которое указывает предикат, используемый для фильтрации набора входных данных. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate">
      <summary>     Возвращает тип агрегата, который соответствует вызову агрегатной функции. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate.Distinct">
      <summary>     Возвращает значение, указывающее, применяется ли агрегатная функция в той или иной форме </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate.Function">
      <summary>     Возвращает метаданные метода, которые задают вызываемую агрегатную функцию. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree">
      <summary>Представляет вызов функции в виде канонического дерева команд.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Metadata.Edm.TypeUsage}})">
      <summary>Создает новое дерево DbFunctionCommandTree, использующее указанную рабочую область метаданных, пространство данных и метаданные функции.</summary>
      <param name="metadata">Рабочая область метаданных, которую должно использовать дерево команд. </param>
      <param name="dataSpace">Логическая область, к которой метаданные в выражениях, используемых в этом дереве команд, должны относиться.</param>
      <param name="edmFunction">Вызываемая функция модели EDM.</param>
      <param name="resultType">Тип результата функции.</param>
      <param name="parameters">Параметры, связанные с вызываемой функцией.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.CommandTreeKind">
      <summary>Возвращает или задает вид дерева команд.</summary>
      <returns>Вид дерева команд.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.EdmFunction">
      <summary>Возвращает объект <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.EdmFunction" />, который представляет функцию для вызова.</summary>
      <returns>Объект <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.EdmFunction" />, который представляет функцию для вызова.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionCommandTree.ResultType">
      <summary>Возвращает тип результата функции. В настоящее время возвращается только коллекция RowTypes.В отличие от обычного экземпляра RowType, просто отображает имя или тип, а не порядок параметра.</summary>
      <returns>Тип результата функции.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression">
      <summary>     Представляет вызов функции. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые не вырабатывают значение результата. </summary>
      <param name="visitor"> Экземпляр DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые вырабатывают значение результата конкретного типа. </summary>
      <param name="visitor"> Экземпляр типизированного выражения DbExpressionVisitor, возвращающего результирующее значение типа TResultType. </param>
      <typeparam name="TResultType">     Тип результата, формируемого посетителем.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression.Arguments">
      <summary>     Возвращает список <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, предоставляющий аргументы функции. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression.Function">
      <summary>     Возвращает метаданные вызываемой функции. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupAggregate">
      <summary>Представляет коллекцию элементов, образующих группу.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression">
      <summary>     Представляет операцию group by, выполняющую группирование элементов во входном наборе на основе указанных ключевых выражений, за которым следует применение указанных статистических выражений. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые не вырабатывают значение результата. </summary>
      <param name="visitor"> Экземпляр DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые вырабатывают значение результата конкретного типа. </summary>
      <param name="visitor"> Экземпляр типизированного выражения DbExpressionVisitor, возвращающего результирующее значение типа TResultType. </param>
      <typeparam name="TResultType">     Тип результата, формируемого посетителем.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Aggregates">
      <summary>     Возвращает список <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAggregate" />, содержащий применяемые статистические функции. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Input">
      <summary>     Возвращает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" />, указывающий входной набор и предоставляющий доступ к переменным элементов набора и группы. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression.Keys">
      <summary>     Возвращает список <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, содержащий ключи группирования. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding">
      <summary>Определяет для входного набора привязку к выражению <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression" />.В дополнение к свойствам привязки <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" /> DbGroupExpressionBinding также предоставляет доступ к элементу группы посредством ссылки на переменную &lt;seealso cref="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupVariable" /&gt; и к агрегату группы посредством свойства &lt;seealso cref="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupAggregate" /&gt;.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.Expression">
      <summary>     Возвращает значение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, которое задает входной набор. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupAggregate">
      <summary>     Возвращает класс DbGroupAggregate, представляющий коллекцию элементов в группе. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupVariable">
      <summary>     Возвращает класс DbVariableReferenceExpression, который ссылается на переменную элемента в группе. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupVariableName">
      <summary>     Возвращает имя, присвоенное переменной элемента группы. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.GroupVariableType">
      <summary>     Возвращает метаданные типа для переменной элемента группы. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.Variable">
      <summary>     Возвращает класс DbVariableReferenceExpression, который ссылается на переменную элемента. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.VariableName">
      <summary>     Возвращает имя, присвоенное переменной элемента. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding.VariableType">
      <summary>     Возвращает метаданные типа переменной элемента. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbInExpression">
      <summary>     Представляет логическое выражение, предназначенное для проверки того, соответствует ли указанный элемент какому-либо элементу в списке. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbInExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые не вырабатывают значение результата. </summary>
      <param name="visitor"> Экземпляр DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbInExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые вырабатывают значение результата конкретного типа. </summary>
      <param name="visitor"> Экземпляр типизированного выражения DbExpressionVisitor, возвращающего результирующее значение типа TResultType. </param>
      <typeparam name="TResultType">     Тип результата, формируемого посетителем.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInExpression.Item">
      <summary>     Возвращает выражение DbExpression, которое указывает элемент для согласования. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInExpression.List">
      <summary>     Возвращает список выражений DbExpression, которые должны быть проверены на соответствие. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree">
      <summary>Представляет операцию вставки из одной строки в виде канонического дерева команд.Если задано свойство <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.Returning" />, то команда возвращает модуль чтения, а в противном случае возвращает скалярное значение, показывающее число обработанных строк.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Entity.Core.Common.CommandTrees.DbModificationClause},System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree" />.</summary>
      <param name="metadata">Метаданные.</param>
      <param name="dataSpace">Пространство данных.</param>
      <param name="target">Базы данных в качестве целевого объекта.</param>
      <param name="setClauses">Набор предложений, определяющих значения столбцов во вставленной строке.</param>
      <param name="returning">Выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, задающее проекцию результатов, которые будут возвращены, на основе измененных строк.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.CommandTreeKind">
      <summary>Возвращает вид дерева команд.</summary>
      <returns>Вид дерева команд.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.Returning">
      <summary>Возвращает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, задающее проекцию результатов, которые будут возвращены, на основе измененных строк.Значение null указывает, что данная команда не должна возвращать результатов.</summary>
      <returns>Выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, задающее проекцию результатов, которые будут возвращены, на основе измененных строк.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.SetClauses">
      <summary>Возвращает набор предложений, определяющих значения столбцов во вставленной строке.</summary>
      <returns>Набор предложений, определяющих значения столбцов во вставленной строке.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression">
      <summary>     Представляет операцию пересечения наборов между левым и правым операндами. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые не вырабатывают значение результата. </summary>
      <param name="visitor"> Экземпляр DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые вырабатывают значение результата конкретного типа. </summary>
      <param name="visitor"> Экземпляр типизированного выражения DbExpressionVisitor, возвращающего результирующее значение типа TResultType. </param>
      <typeparam name="TResultType">     Тип результата, формируемого посетителем.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression">
      <summary>     Представляет определение пустого набора, примененное к аргументу, содержащему один набор. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые не вырабатывают значение результата. </summary>
      <param name="visitor"> Экземпляр DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые вырабатывают значение результата конкретного типа. </summary>
      <param name="visitor"> Экземпляр типизированного выражения DbExpressionVisitor, возвращающего результирующее значение типа TResultType. </param>
      <typeparam name="TResultType">     Тип результата, формируемого посетителем.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression">
      <summary>     Представляет определение значения NULL, применяемого к одному аргументу. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые не вырабатывают значение результата. </summary>
      <param name="visitor"> Экземпляр DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые вырабатывают значение результата конкретного типа. </summary>
      <param name="visitor"> Экземпляр типизированного выражения DbExpressionVisitor, возвращающего результирующее значение типа TResultType. </param>
      <typeparam name="TResultType">     Тип результата, формируемого посетителем.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression">
      <summary>     Представляет сравнение типа единственного аргумента с указанным типом. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые не вырабатывают значение результата. </summary>
      <param name="visitor"> Экземпляр DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые вырабатывают значение результата конкретного типа. </summary>
      <param name="visitor"> Экземпляр типизированного выражения DbExpressionVisitor, возвращающего результирующее значение типа TResultType. </param>
      <typeparam name="TResultType">     Тип результата, формируемого посетителем.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression.OfType">
      <summary>     Возвращает метаданные типа, с которыми должны сравниваться метаданные типа аргумента. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression">
      <summary>     Представляет операцию внутреннего, левого внешнего или полного внешнего соединения между указанными параметрами коллекции при указанном условии соединения. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые не вырабатывают значение результата. </summary>
      <param name="visitor"> Экземпляр DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые вырабатывают значение результата конкретного типа. </summary>
      <param name="visitor"> Экземпляр типизированного выражения DbExpressionVisitor, возвращающего результирующее значение типа TResultType. </param>
      <typeparam name="TResultType">     Тип результата, формируемого посетителем.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.JoinCondition">
      <summary>     Возвращает значение типа <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, определяющее условие объединения. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.Left">
      <summary>     Возвращает привязку <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />, которая обеспечивает левое входное значение. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression.Right">
      <summary>     Возвращает привязку <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />, которая обеспечивает правое входное значение. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression">
      <summary>     Представляет приложение лямбда-функции. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые не вырабатывают значение результата. </summary>
      <param name="visitor"> Экземпляр DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые вырабатывают значение результата конкретного типа. </summary>
      <param name="visitor"> Экземпляр типизированного выражения DbExpressionVisitor, возвращающего результирующее значение типа TResultType. </param>
      <typeparam name="TResultType">     Тип результата, формируемого посетителем.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression.Arguments">
      <summary>     Возвращает список <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, предоставляющий аргументы, к которым должна быть применена лямбда-функция. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression.Lambda">
      <summary>     Возвращает значение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" />, которое представляет лямбда-функцию, применяемую в этом выражении. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression">
      <summary>     Представляет сравнение строк по указанному шаблону с необязательной экранирующей строкой </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые не вырабатывают значение результата. </summary>
      <param name="visitor"> Экземпляр DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые вырабатывают значение результата конкретного типа. </summary>
      <param name="visitor"> Экземпляр типизированного выражения DbExpressionVisitor, возвращающего результирующее значение типа TResultType. </param>
      <typeparam name="TResultType">     Тип результата, формируемого посетителем.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Argument">
      <summary>     Возвращает выражение, указывающее строку, которая должна быть сравнена с заданным шаблоном. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Escape">
      <summary>     Возвращает выражение, которое предоставляет необязательную экранирующую строку, применяемую для сравнения. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression.Pattern">
      <summary>     Возвращает выражение, указывающее шаблон, с которым должна быть сравнена данная строка. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression">
      <summary>     Представляет ограничение на количество элементов в коллекции аргументов, соответствующее указанному значению предела. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые не вырабатывают значение результата. </summary>
      <param name="visitor"> Экземпляр DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые вырабатывают значение результата конкретного типа. </summary>
      <param name="visitor"> Экземпляр типизированного выражения DbExpressionVisitor, возвращающего результирующее значение типа TResultType. </param>
      <typeparam name="TResultType">     Тип результата, формируемого посетителем.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.Argument">
      <summary>     Возвращает выражение, определяющее входную коллекцию. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.Limit">
      <summary>     Возвращает выражение, ограничивающее количество элементов, возвращаемых из входной коллекции. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression.WithTies">
      <summary>     Выясняет, включает ли ограничивающая операция связанные результаты, которые могут иметь больше результатов, чем задано ограничением, если есть связи. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbModificationClause">
      <summary>Указывает одно предложение в операции вставки или изменения обновления. См. предложения <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbInsertCommandTree.SetClauses" /> и <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.SetClauses" />.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbModificationCommandTree">
      <summary>     Представляет операцию DML, представленную в виде канонического дерева команд. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbModificationCommandTree.Target">
      <summary>     Возвращает привязку <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />, которая определяет целевую таблицу для операции DML. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression">
      <summary>     Представляет структуру нового экземпляра определенного типа, включая типы набора и записи. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые не вырабатывают значение результата. </summary>
      <param name="visitor"> Экземпляр DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые вырабатывают значение результата конкретного типа. </summary>
      <param name="visitor"> Экземпляр типизированного выражения DbExpressionVisitor, возвращающего результирующее значение типа TResultType. </param>
      <typeparam name="TResultType">     Тип результата, формируемого посетителем.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression.Arguments">
      <summary>     Возвращает список <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> значений «свойство-столбец» или элементов набора для нового экземпляра. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression">
      <summary>     Представляет логический оператор Not с одним аргументом типа Boolean. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые не вырабатывают значение результата. </summary>
      <param name="visitor"> Экземпляр DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые вырабатывают значение результата конкретного типа. </summary>
      <param name="visitor"> Экземпляр типизированного выражения DbExpressionVisitor, возвращающего результирующее значение типа TResultType. </param>
      <typeparam name="TResultType">     Тип результата, формируемого посетителем.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression">
      <summary>     Представляет значение null. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые не вырабатывают значение результата. </summary>
      <param name="visitor"> Экземпляр DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые вырабатывают значение результата конкретного типа. </summary>
      <param name="visitor"> Экземпляр типизированного выражения DbExpressionVisitor, возвращающего результирующее значение типа TResultType. </param>
      <typeparam name="TResultType">     Тип результата, формируемого посетителем.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression">
      <summary>     Представляет методы для получения элементов указанного типа из заданного аргумента набора. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые не вырабатывают значение результата. </summary>
      <param name="visitor"> Экземпляр DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые вырабатывают значение результата конкретного типа. </summary>
      <param name="visitor"> Экземпляр типизированного выражения DbExpressionVisitor, возвращающего результирующее значение типа TResultType. </param>
      <typeparam name="TResultType">     Тип результата, формируемого посетителем.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression.OfType">
      <summary>     Возвращает метаданные типа элементов, которые должны быть получены из аргумента набора. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression">
      <summary>     Представляет логическое «ИЛИ» двух аргументов Boolean. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые не вырабатывают значение результата. </summary>
      <param name="visitor"> Экземпляр DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые вырабатывают значение результата конкретного типа. </summary>
      <param name="visitor"> Экземпляр типизированного выражения DbExpressionVisitor, возвращающего результирующее значение типа TResultType. </param>
      <typeparam name="TResultType">     Тип результата, формируемого посетителем.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression">
      <summary>     Представляет ссылку на параметр, объявленный в дереве команд, которое содержит это выражение. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые не вырабатывают значение результата. </summary>
      <param name="visitor"> Экземпляр DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые вырабатывают значение результата конкретного типа. </summary>
      <param name="visitor"> Экземпляр типизированного выражения DbExpressionVisitor, возвращающего результирующее значение типа TResultType. </param>
      <typeparam name="TResultType">     Тип результата, формируемого посетителем.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression.ParameterName">
      <summary>     Возвращает имя упоминаемого параметра. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression">
      <summary>     Представляет проекцию заданного набора значений на указанный входной набор. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые не вырабатывают значение результата. </summary>
      <param name="visitor"> Экземпляр DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые вырабатывают значение результата конкретного типа. </summary>
      <param name="visitor"> Экземпляр типизированного выражения DbExpressionVisitor, возвращающего результирующее значение типа TResultType. </param>
      <typeparam name="TResultType">     Тип результата, формируемого посетителем.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression.Input">
      <summary>     Возвращает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />, задающее входной набор. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression.Projection">
      <summary>     Возвращает значение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, которое задает проекцию. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression">
      <summary>Предоставляет методы и свойства для получения свойства экземпляра.Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>Реализует шаблон «Посетитель» для выражений, не возвращающих результирующее значение.</summary>
      <param name="visitor">Экземпляр <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр visitor имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>Реализует шаблон «Посетитель» для выражений, возвращающих результирующее значение определенного типа.</summary>
      <returns>Результирующее значение определенного типа, возвращаемое выражением <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />.</returns>
      <param name="visitor">Экземпляр типизированного выражения <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor" />, возвращающего результирующее значение определенного типа.</param>
      <typeparam name="TResultType">Тип результата, формируемого посетителем.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр visitor имеет значение null.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.Instance">
      <summary>Возвращает значение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, задающее экземпляр, из которого должно быть получено свойство.</summary>
      <returns>Выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, определяющее экземпляр, из которого должно быть получено значение свойства.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.op_Implicit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)~System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}">
      <summary>Включает неявное приведение в тип <see cref="T:System.Collections.Generic.KeyValuePair`2" />.</summary>
      <returns>Преобразованное значение.</returns>
      <param name="value">Выражение для преобразования.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.Property">
      <summary>Возвращает метаданные получаемого свойства.</summary>
      <returns>Метаданные получаемого свойства.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression.ToKeyValuePair">
      <summary>Создает новую пару ключ-значение на основе этого выражения свойства.</summary>
      <returns>Новая пара ключ-значение с ключом и значением, полученными из объекта <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression">
      <summary>     Представляет операцию с квантором заданного типа (Any, All) над элементами указанного набора входных данных. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые не вырабатывают значение результата. </summary>
      <param name="visitor"> Экземпляр DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые вырабатывают значение результата конкретного типа. </summary>
      <param name="visitor"> Экземпляр типизированного выражения DbExpressionVisitor, возвращающего результирующее значение типа TResultType. </param>
      <typeparam name="TResultType">     Тип результата, формируемого посетителем.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression.Input">
      <summary>     Возвращает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />, задающее входной набор. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression.Predicate">
      <summary>     Возвращает предикат логического типа, который должен вычисляться для каждого выражения в наборе входных данных. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree">
      <summary>Представляет операцию запроса в виде канонического дерева команд.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree" />, использующий указанное рабочее пространство метаданных.</summary>
      <param name="metadata">Рабочая область метаданных, которую должно использовать дерево команд.</param>
      <param name="dataSpace">Логическая область, к которой метаданные в выражениях, используемых в этом дереве команд, должны относиться.</param>
      <param name="query">Выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, определяющее логику операции запроса.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="metadata" /> или <paramref name="query" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dataSpace" /> не представляет допустимое пространство данных.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree" />, использующий указанное рабочее пространство метаданных.</summary>
      <param name="metadata">Рабочая область метаданных, которую должно использовать дерево команд.</param>
      <param name="dataSpace">Логическая область, к которой метаданные в выражениях, используемых в этом дереве команд, должны относиться. </param>
      <param name="query">Выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, определяющее логику операции запроса. </param>
      <param name="validate">Значение true, если нужно проверить дерево; в противном случае — значение false.Если задано значение false, проверка дерева выключена.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="metadata" /> или <paramref name="query" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="dataSpace" /> не представляет допустимое пространство данных.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Boolean,System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree" />.</summary>
      <param name="metadata">Рабочая область метаданных, которую должно использовать дерево команд.</param>
      <param name="dataSpace">Логическая область, к которой метаданные в выражениях, используемых в этом дереве команд, должны относиться.</param>
      <param name="query">Выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, определяющее логику операции запроса.</param>
      <param name="validate">Значение true, если нужно проверить дерево; в противном случае — значение false.Если задано значение false, проверка дерева выключена.</param>
      <param name="useDatabaseNullSemantics">Значение true, если нужно использовать семантику базы данных по работе со значениями null; в противном случае — значение false.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.CommandTreeKind">
      <summary>Возвращает тип дерева команд.</summary>
      <returns>Вид данного дерева команд.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.Query">
      <summary>Возвращает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, определяющее логику операции запроса.</summary>
      <returns>Выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, определяющее логику операции запроса.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression">
      <summary>     Представляет (строго типизированную) ссылку на экземпляр в наборе сущностей. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые не вырабатывают значение результата. </summary>
      <param name="visitor"> Экземпляр DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые вырабатывают значение результата конкретного типа. </summary>
      <param name="visitor"> Экземпляр типизированного выражения DbExpressionVisitor, возвращающего результирующее значение типа TResultType. </param>
      <typeparam name="TResultType">     Тип результата, формируемого посетителем.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression.EntitySet">
      <summary>     Возвращает метаданные для набора сущностей, содержащего экземпляр. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression">
      <summary>     Представляет получение значения ключа указанной ссылки в виде строки. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые не вырабатывают значение результата. </summary>
      <param name="visitor"> Экземпляр DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые вырабатывают значение результата конкретного типа. </summary>
      <param name="visitor"> Экземпляр типизированного выражения DbExpressionVisitor, возвращающего результирующее значение типа TResultType. </param>
      <typeparam name="TResultType">     Тип результата, формируемого посетителем.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression">
      <summary>     Представляет навигацию связи (композиции или ассоциации), полученную из роли «from», «to» и экземпляра роли «from». </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые не вырабатывают значение результата. </summary>
      <param name="visitor"> Экземпляр DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые вырабатывают значение результата конкретного типа. </summary>
      <param name="visitor"> Экземпляр типизированного выражения DbExpressionVisitor, возвращающего результирующее значение типа TResultType. </param>
      <typeparam name="TResultType">     Тип результата, формируемого посетителем.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.NavigateFrom">
      <summary>     Возвращает метаданные для элемента связи, от которого должен быть выполнен переход. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.NavigateTo">
      <summary>     Возвращает метаданные для элемента связи, к которому должен быть выполнен переход. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.NavigationSource">
      <summary>     Возвращает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, указывающее экземпляр исходного элемента связи «from», от которого должен происходить переход. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression.Relationship">
      <summary>     Возвращает метаданные для связи, по которой выполняется переход. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression">
      <summary>     Представляет «просмотр» всех элементов заданного набора сущностей. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые не вырабатывают значение результата. </summary>
      <param name="visitor"> Экземпляр DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые вырабатывают значение результата конкретного типа. </summary>
      <param name="visitor"> Экземпляр типизированного выражения DbExpressionVisitor, возвращающего результирующее значение типа TResultType. </param>
      <typeparam name="TResultType">     Тип результата, формируемого посетителем.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression.Target">
      <summary>     Возвращает метаданные упоминаемого набора сущностей или связей. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbSetClause">
      <summary>     Определяет предложение в операции модификации, задающей значение свойства. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSetClause.Property">
      <summary>     Возвращает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, которое определяет свойство, подлежащее обновлению. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSetClause.Value">
      <summary>     Возвращает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, которое определяет новое значение обновляемого свойства. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression">
      <summary>     Представляет операцию пропуска указанного количества элементов входного набора после применения упорядочения, описанного в ключах данной сортировки. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые не вырабатывают значение результата. </summary>
      <param name="visitor"> Экземпляр DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые вырабатывают значение результата конкретного типа. </summary>
      <param name="visitor"> Экземпляр типизированного выражения DbExpressionVisitor, возвращающего результирующее значение типа TResultType. </param>
      <typeparam name="TResultType">     Тип результата, формируемого посетителем.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.Count">
      <summary>     Возвращает выражение, указывающее, сколько элементов входной коллекции нужно пропустить. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.Input">
      <summary>     Возвращает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />, задающее входной набор. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression.SortOrder">
      <summary>     Возвращает список <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" />, определяющий порядок сортировки. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause">
      <summary>     Задает ключ сортировки, используемый как часть порядка сортировки в выражении DbSortExpression. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortClause.Ascending">
      <summary>     Возвращает логическое значение, указывающее, используется ли для этого ключа восходящий порядок сортировки. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortClause.Collation">
      <summary>     Возвращает строковое значение, представляющее собой параметры сортировки для данного ключа сортировки. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortClause.Expression">
      <summary>     Возвращает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, предоставляющее значение для указанного ключа сортировки. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression">
      <summary>     Представляет операцию сортировки, примененную к элементам заданного набора входных значений на основе указанных ключей сортировки. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые не вырабатывают значение результата. </summary>
      <param name="visitor"> Экземпляр DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые вырабатывают значение результата конкретного типа. </summary>
      <param name="visitor"> Экземпляр типизированного выражения DbExpressionVisitor, возвращающего результирующее значение типа TResultType. </param>
      <typeparam name="TResultType">     Тип результата, формируемого посетителем.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression.Input">
      <summary>     Возвращает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />, задающее входной набор. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression.SortOrder">
      <summary>     Возвращает список <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" />, определяющий порядок сортировки. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression">
      <summary>     Представляет преобразование типа одного аргумента в указанный тип. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые не вырабатывают значение результата. </summary>
      <param name="visitor"> Экземпляр DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые вырабатывают значение результата конкретного типа. </summary>
      <param name="visitor"> Экземпляр типизированного выражения DbExpressionVisitor, возвращающего результирующее значение типа TResultType. </param>
      <typeparam name="TResultType">     Тип результата, формируемого посетителем.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbUnaryExpression">
      <summary>     Абстрактный базовый тип для выражений, которые принимают один операнд выражения. </summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUnaryExpression.Argument">
      <summary>     Возвращает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, определяющее аргумент. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression">
      <summary>     Представляет операцию объединения (без удаления дубликатов) наборов, заданных левым и правым операндами. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые не вырабатывают значение результата. </summary>
      <param name="visitor"> Экземпляр DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые вырабатывают значение результата конкретного типа. </summary>
      <param name="visitor"> Экземпляр типизированного выражения DbExpressionVisitor, возвращающего результирующее значение типа TResultType. </param>
      <typeparam name="TResultType">     Тип результата, формируемого посетителем.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree">
      <summary>Представляет однострочную операцию обновления, выраженную в виде дерева команд.Этот класс не наследуется.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Entity.Core.Common.CommandTrees.DbModificationClause},System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree" />.</summary>
      <param name="metadata">Модель, в которой будет выполняться эта команда.</param>
      <param name="dataSpace">Пространство данных.</param>
      <param name="target">Целевая таблица для операции языка обработки данных (DML).</param>
      <param name="predicate">Предикат, который используется для определения обновляемых элементов целевой коллекции.</param>
      <param name="setClauses">Список предложений набора обновлений, который определяет операцию обновления.</param>
      <param name="returning">Выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, задающее проекцию результатов, которые будут возвращены, на основе измененных строк.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.CommandTreeKind">
      <summary>Возвращает тип дерева команд.</summary>
      <returns>Вид данного дерева команд.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.Predicate">
      <summary>Возвращает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, которое указывает предикат, используемый для определения того, какие элементы целевой коллекции должны быть обновлены.</summary>
      <returns>Выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, которое указывает предикат, используемый для определения того, какие элементы целевой коллекции должны быть обновлены.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.Returning">
      <summary>Возвращает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, которое указывает проекцию результатов, подлежащих возврату, с учетом измененных строк.</summary>
      <returns>Выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, задающее проекцию результатов, которые будут возвращены, на основе измененных строк.Значение NULL указывает, что данная команда не должна возвращать результаты.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbUpdateCommandTree.SetClauses">
      <summary>Возвращает список предложений набора обновлений, который определяет операцию обновления.</summary>
      <returns>Список предложений набора обновлений, который определяет операцию обновления.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression">
      <summary>     Представляет ссылку на переменную, в настоящий момент находящуюся в области. </summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression.Accept(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor)">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые не вырабатывают значение результата. </summary>
      <param name="visitor"> Экземпляр DbExpressionVisitor. </param>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression.Accept``1(System.Data.Entity.Core.Common.CommandTrees.DbExpressionVisitor{``0})">
      <summary>     Метод шаблона посетителя для посетителей-выражений, которые вырабатывают значение результата конкретного типа. </summary>
      <param name="visitor"> Экземпляр типизированного выражения DbExpressionVisitor, возвращающего результирующее значение типа TResultType. </param>
      <typeparam name="TResultType">     Тип результата, формируемого посетителем.</typeparam>
      <exception cref="T:System.ArgumentNullException">visitor</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression.VariableName">
      <summary>     Возвращает имя упоминаемой переменной. </summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor">
      <summary>Обходит каждый из элементов дерева выражения, начиная с заданного корневого выражения.Если какой-либо из элементов изменился, дерево строится заново до корневого узла и возвращается новое корневое выражение. В противном случае возвращается исходное корневое выражение.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.OnEnterScope(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression})">
      <summary>Представляет событие входа посетителя выражения в область с указанными переменными.</summary>
      <param name="scopeVariables">Коллекция переменных области.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.OnExitScope">
      <summary>Выход из области посетителя выражения.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.OnExpressionReplaced(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Заменяет старое выражение новым для посетителя выражения.</summary>
      <param name="oldExpression">Старое выражение.</param>
      <param name="newExpression">Новое выражение.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.OnVariableRebound(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression,System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>Представляет событие, когда переменная повторно привязывается для посетителя выражения.</summary>
      <param name="fromVarRef">Расположение переменной.</param>
      <param name="toVarRef">Ссылка на переменную, когда она привязывается повторно.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbAndExpression)">
      <summary>Реализует шаблон посетителя для логического выражения AND.</summary>
      <returns>Реализованный посетитель.</returns>
      <param name="expression">Выражение DbAndExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression)">
      <summary>Реализует шаблон посетителя для вызова указанной функции в отношении каждого элемента в указанном входном наборе.</summary>
      <returns>Реализованный посетитель.</returns>
      <param name="expression">Выражение DbApplyExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression)">
      <summary>Реализует шаблон посетителя для арифметической операции, примененной к числовым аргументам.</summary>
      <returns>Реализованный посетитель.</returns>
      <param name="expression">Выражение DbArithmeticExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression)">
      <summary>Реализует шаблон посетителя для приложений When, Then и Else.</summary>
      <returns>Реализованный посетитель.</returns>
      <param name="expression">Выражение DbCaseExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCastExpression)">
      <summary>Реализует шаблон посетителя для преобразования типа одного аргумента в указанный тип.</summary>
      <returns>Реализованный посетитель.</returns>
      <param name="expression">Выражение DbCastExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression)">
      <summary>Реализует шаблон посетителя для операции сравнения, примененной к двум аргументам.</summary>
      <returns>Реализованный посетитель.</returns>
      <param name="expression">Выражение DbComparisonExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression)">
      <summary>Реализует шаблон посетителя для различных видов констант.</summary>
      <returns>Реализованный посетитель.</returns>
      <param name="expression">Выражение DbConstantExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression)">
      <summary>Реализует шаблон посетителя для операции безусловного соединения между указанными аргументами коллекции.</summary>
      <returns>Реализованный посетитель.</returns>
      <param name="expression">Выражение DbCrossJoinExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression)">
      <summary>Реализует шаблон посетителя для выражения, которое извлекает сущность по указанной ссылке.</summary>
      <returns>Реализованный посетитель.</returns>
      <param name="expression">Выражение DbDerefExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression)">
      <summary>Реализует шаблон посетителя для удаленных повторяющихся элементов из указанного аргумента набора.</summary>
      <returns>Реализованный посетитель.</returns>
      <param name="expression">Выражение DbDistinctExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbElementExpression)">
      <summary>Реализует шаблон посетителя для преобразования указанного аргумента набора в одинарный элемент.</summary>
      <returns>Реализованный посетитель.</returns>
      <param name="expression">Выражение DbElementExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression)">
      <summary>Реализует шаблон посетителя для выражения, которое извлекает ссылку из базового экземпляра сущности.</summary>
      <returns>Реализованный посетитель.</returns>
      <param name="expression">Выражение DbEntityRefExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression)">
      <summary>Реализует шаблон посетителя для операция вычитания набора между левым и правым операндами.</summary>
      <returns>Реализованный посетитель.</returns>
      <param name="expression">Выражение DbExceptExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Реализует шаблон посетителя для базовой функциональности, необходимой для типов выражения.</summary>
      <returns>Реализованный посетитель.</returns>
      <param name="expression">Выражение DbExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression)">
      <summary>Реализует шаблон посетителя для предиката, примененного для фильтрации входного набора.</summary>
      <returns>Реализованный посетитель.</returns>
      <param name="expression">Выражение DbFilterExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression)">
      <summary>Реализует шаблон посетителя для вызова функции.</summary>
      <returns>Реализованный посетитель.</returns>
      <param name="expression">Выражение DbFunctionExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression)">
      <summary>Реализует шаблон посетителя для группирования по операциям.</summary>
      <returns>Реализованный посетитель.</returns>
      <param name="expression">Выражение DbGroupByExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbInExpression)">
      <summary>Реализует шаблон посетителя для DbInExpression.</summary>
      <returns>Реализованный посетитель.</returns>
      <param name="expression">Выражение DbInExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression)">
      <summary>Реализует шаблон посетителя для операции пересечения наборов между левым и правым операндами.</summary>
      <returns>Реализованный посетитель.</returns>
      <param name="expression">Выражение DbIntersectExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression)">
      <summary>Реализует шаблон посетителя для операции определения пустого набора, примененной к одному аргументу набора.</summary>
      <returns>Реализованный посетитель.</returns>
      <param name="expression">Выражение DbIsEmptyExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression)">
      <summary>Реализует шаблон посетителя для операции определения значения NULL, примененной к одному аргументу.</summary>
      <returns>Реализованный посетитель.</returns>
      <param name="expression">Выражение DbIsNullExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression)">
      <summary>Реализует шаблон посетителя для сравнения типа одного аргумента с указанным типом.</summary>
      <returns>Реализованный посетитель.</returns>
      <param name="expression">Выражение DbIsOfExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression)">
      <summary>Реализует шаблон посетителя для операции внутреннего, левого внешнего или полного внешнего соединения между указанными параметрами коллекции при указанном условии соединения.</summary>
      <returns>Реализованный посетитель.</returns>
      <param name="expression">Выражение DbJoinExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression)">
      <summary>Реализует шаблон посетителя для приложения лямбда-функции к аргументам, представленным объектами DbExpression.</summary>
      <returns>Реализованный посетитель.</returns>
      <param name="expression">Выражение DbLambdaExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression)">
      <summary>Реализует шаблон посетителя для сравнения строк с указанным шаблоном с необязательной экранизирующей строкой.</summary>
      <returns>Реализованный посетитель.</returns>
      <param name="expression">Выражение DbLikeExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression)">
      <summary>Реализует шаблон посетителя для ограничения количества элементов в коллекции аргументов по указанному значению предела.</summary>
      <returns>Реализованный посетитель.</returns>
      <param name="expression">Выражение DbLimitExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression)">
      <summary>Реализует шаблон посетителя для создания нового экземпляра определенного типа, включая типы набора и записи.</summary>
      <returns>Реализованный посетитель.</returns>
      <param name="expression">Выражение DbNewInstanceExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNotExpression)">
      <summary>Реализует шаблон посетителя для логического оператора NOT одного аргумента типа Boolean.</summary>
      <returns>Реализованный посетитель.</returns>
      <param name="expression">Выражение DbNotExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbNullExpression)">
      <summary>Реализует шаблон посетителя для ссылки на типизированный литерал NULL.</summary>
      <returns>Реализованный посетитель.</returns>
      <param name="expression">Выражение DbNullExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression)">
      <summary>Реализует шаблон посетителя для получения элементов указанного типа из заданного аргумента набора.</summary>
      <returns>Реализованный посетитель.</returns>
      <param name="expression">Выражение DbOfTypeExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbOrExpression)">
      <summary>Реализует шаблон посетителя для логической операции OR над двумя аргументами типа Boolean.</summary>
      <returns>Реализованный посетитель.</returns>
      <param name="expression">Выражение DbOrExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression)">
      <summary>Реализует шаблон посетителя для ссылки на параметр, объявленный в дереве команд, которое содержит это выражение.</summary>
      <returns>Реализованный посетитель.</returns>
      <param name="expression">Выражение DbParameterReferenceExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression)">
      <summary>Реализует шаблон посетителя для проекции данного входного набора на указанное выражение.</summary>
      <returns>Реализованный посетитель.</returns>
      <param name="expression">Выражение DbProjectExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression)">
      <summary>Реализует шаблон посетителя для получения свойства экземпляра.</summary>
      <returns>Реализованный посетитель.</returns>
      <param name="expression">Выражение DbPropertyExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression)">
      <summary>Реализует шаблон посетителя для операции с квантификатором заданного типа (Any, All) над элементами указанного набора входных данных.</summary>
      <returns>Реализованный посетитель.</returns>
      <param name="expression">Выражение DbQuantifierExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefExpression)">
      <summary>Реализует шаблон посетителя для строго типизированный ссылки на указанный экземпляр в наборе сущностей.</summary>
      <returns>Реализованный посетитель.</returns>
      <param name="expression">Выражение DbRefExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression)">
      <summary>Реализует шаблон посетителя для получения значения ключа из базового значения ссылки.</summary>
      <returns>Реализованный посетитель.</returns>
      <param name="expression">Выражение DbRefKeyExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression)">
      <summary>Реализует шаблон посетителя для навигации связи.</summary>
      <returns>Реализованный посетитель.</returns>
      <param name="expression">Выражение DbRelationshipNavigationExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbScanExpression)">
      <summary>Реализует шаблон посетителя для просмотра набора сущностей или связей, как указано в свойстве Target.</summary>
      <returns>Реализованный посетитель.</returns>
      <param name="expression">Выражение DbScanExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression)">
      <summary>Реализует шаблон посетителя для выражения SKIP.</summary>
      <returns>Реализованный посетитель.</returns>
      <param name="expression">Выражение DbSkipExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression)">
      <summary>Реализует шаблон посетителя для ключа сортировки, который может использоваться как часть порядка сортировки.</summary>
      <returns>Реализованный посетитель.</returns>
      <param name="expression">Выражение DbSortExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression)">
      <summary>Реализует шаблон посетителя для операции преобразования типа, применяемой к полиморфному аргументу.</summary>
      <returns>Реализованный посетитель.</returns>
      <param name="expression">Выражение DbTreatExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression)">
      <summary>Реализует шаблон посетителя для операция объединения наборов между левым и правым операндами.</summary>
      <returns>Реализованный посетитель.</returns>
      <param name="expression">Выражение DbUnionAllExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.Visit(System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression)">
      <summary>Реализует шаблон посетителя для ссылки на переменную, которая в данный момент находится в области.</summary>
      <returns>Реализованный посетитель.</returns>
      <param name="expression">Выражение DbVariableReferenceExpression, посещение которого выполняется.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitAggregate(System.Data.Entity.Core.Common.CommandTrees.DbAggregate)">
      <summary>Реализует шаблон посетителя для агрегата.</summary>
      <returns>Реализованный шаблон посетителя.</returns>
      <param name="aggregate">Статистическое выражение, которое необходимо посетить.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitEntitySet(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
      <summary>Реализует шаблон посетителя для набора сущностей.</summary>
      <returns>Реализованный шаблон посетителя.</returns>
      <param name="entitySet">Набор сущностей.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitExpression(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Реализует шаблон посетителя для выражения.</summary>
      <returns>Реализованный шаблон посетителя.</returns>
      <param name="expression">Выражение.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionBinding(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
      <summary>Реализует шаблон посетителя для привязки выражения.</summary>
      <returns>Реализованный шаблон посетителя.</returns>
      <param name="binding">Привязка выражения.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionBindingList(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding})">
      <summary>Реализует шаблон посетителя для списка привязок выражения.</summary>
      <returns>Реализованный шаблон посетителя.</returns>
      <param name="list">Список привязок выражения.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitExpressionList(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Реализует шаблон посетителя для списка выражений.</summary>
      <returns>Реализованный шаблон посетителя.</returns>
      <param name="list">Список выражений.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitFunction(System.Data.Entity.Core.Metadata.Edm.EdmFunction)">
      <summary>Реализует шаблон посетителя для функции.</summary>
      <returns>Реализованный шаблон посетителя.</returns>
      <param name="functionMetadata">Метаданные функции.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitFunctionAggregate(System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate)">
      <summary>Реализует шаблон посетителя для агрегата функции.</summary>
      <returns>Реализованный шаблон посетителя.</returns>
      <param name="aggregate">Агрегат.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitGroupAggregate(System.Data.Entity.Core.Common.CommandTrees.DbGroupAggregate)">
      <summary>Реализует шаблон посетителя для группового агрегата.</summary>
      <returns>Реализованный шаблон посетителя.</returns>
      <param name="aggregate">Агрегат.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitGroupExpressionBinding(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding)">
      <summary>Реализует шаблон посетителя для привязки выражения группы.</summary>
      <returns>Реализованный шаблон посетителя.</returns>
      <param name="binding">Привязка.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitLambda(System.Data.Entity.Core.Common.CommandTrees.DbLambda)">
      <summary>Реализует шаблон посетителя для лямбда-функции.</summary>
      <returns>Реализованный шаблон посетителя.</returns>
      <param name="lambda">Лямбда-функция.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitSortClause(System.Data.Entity.Core.Common.CommandTrees.DbSortClause)">
      <summary>Реализует шаблон посетителя для предложения сортировки.</summary>
      <returns>Реализованный шаблон посетителя.</returns>
      <param name="clause">Предложение сортировки.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitSortOrder(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbSortClause})">
      <summary>Реализует шаблон посетителя для порядка сортировки.</summary>
      <returns>Реализованный шаблон посетителя.</returns>
      <param name="sortOrder">Порядок сортировки.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitType(System.Data.Entity.Core.Metadata.Edm.EdmType)">
      <summary>Реализует шаблон посетителя для типа.</summary>
      <returns>Реализованный шаблон посетителя.</returns>
      <param name="type">Тип.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.DefaultExpressionVisitor.VisitTypeUsage(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Реализует шаблон посетителя для использования типа.</summary>
      <returns>Реализованный шаблон посетителя.</returns>
      <param name="type">Тип.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder">
      <summary>Представляет API для создания объектов <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> и обеспечивает доступ к этому API как к методам расширения в самом типе выражения.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Aggregate(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новый объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate" />.</summary>
      <returns>Новая статистическая функция со ссылкой на указанную функцию и аргумент.Свойство Distinct статистической функции будет иметь значение false.</returns>
      <param name="function">Функция, определяющая статистическую операцию.</param>
      <param name="argument">Аргумент, по которому должна вычисляться агрегатная функция.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="function" /> или <paramref name="argument" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="function" /> не является агрегатной функцией или имеет несколько аргументов, либо тип результата <paramref name="argument" /> не эквивалентен типу параметра <paramref name="function" /> и не может быть приведен к нему путем продвижения.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.AggregateDistinct(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новый объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionAggregate" />, применяемый особым образом.</summary>
      <returns>Новая статистическая функция со ссылкой на указанную функцию и аргумент.Свойство Distinct статистической функции будет иметь значение true.</returns>
      <param name="function">Функция, определяющая статистическую операцию.</param>
      <param name="argument">Аргумент, по которому должна вычисляться агрегатная функция.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="function" /> или <paramref name="argument" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="function" /> не является агрегатной функцией или имеет несколько аргументов, либо тип результата <paramref name="argument" /> не эквивалентен типу параметра <paramref name="function" /> и не может быть приведен к нему путем продвижения.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Создает новый объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" />, определяющий, распространяется ли действие заданного предиката на все элементы входного набора.</summary>
      <returns>Новое выражение DbQuantifierExpression, представляющее операцию All.</returns>
      <param name="source">Выражение, задающее входной набор.</param>
      <param name="predicate">Метод, представляющий предикат, который необходимо вычислить для каждого из элементов входного набора.Этот метод должен создавать выражение с результатом логического типа, реализующее логику предиката.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> или <paramref name="predicate" /> равно null.</exception>
      <exception cref="T:System.ArgumentNullException">Выражение, созданное <paramref name="predicate" />, имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="source" /> не относится к типу коллекции.</exception>
      <exception cref="T:System.ArgumentException">Выражение, созданное <paramref name="predicate" />, не относится к логическому типу.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.All(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новый объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" />, определяющий, распространяется ли действие заданного предиката на все элементы входного набора.</summary>
      <returns>Новое выражение DbQuantifierExpression, представляющее операцию All.</returns>
      <param name="input">Привязка выражения, задающая входной набор.</param>
      <param name="predicate">Выражение, представляющее предикат, который необходимо вычислить для каждого из элементов входного набора.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> или <paramref name="predicate" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Выражение, созданное <paramref name="predicate" />, не относится к логическому типу.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.And(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbAndExpression" />, выполняющий логическую операцию И для левого и правого аргументов.</summary>
      <returns>Новое выражение DbAndExpression с указанными аргументами.</returns>
      <param name="left">Логическое выражение, задающее левый аргумент.</param>
      <param name="right">Логическое выражение, задающее правый аргумент.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="left" /> или <paramref name="right" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="left" /> или <paramref name="right" /> не относится к логическому типу.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, определяющее, не пуст ли заданный аргумент.</summary>
      <returns>Новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" />, применяемое к выражению <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" /> с указанным аргументом.</returns>
      <param name="source">Выражение, задающее входной набор.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="source" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="source" /> не относится к типу коллекции.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Создает новый объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" />, определяющий, распространяется ли действие заданного предиката на все элементы входного набора.</summary>
      <returns> Новое выражение DbQuantifierExpression, представляющее операцию Any. </returns>
      <param name="source">Выражение, задающее входной набор.</param>
      <param name="predicate">Метод, представляющий предикат, который необходимо вычислить для каждого из элементов входного набора.Этот метод должен создавать выражение с результатом логического типа, реализующее логику предиката.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> или <paramref name="predicate" /> равно null.</exception>
      <exception cref="T:System.ArgumentNullException">Выражение, созданное <paramref name="predicate" />, имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="source" /> не относится к типу коллекции.</exception>
      <exception cref="T:System.ArgumentException">Выражение, созданное <paramref name="predicate" />, не относится к логическому типу.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Any(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новый объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQuantifierExpression" />, определяющий, распространяется ли действие заданного предиката на все элементы входного набора.</summary>
      <returns>Новое выражение DbQuantifierExpression, представляющее операцию Any.</returns>
      <param name="input">Привязка выражения, задающая входной набор.</param>
      <param name="predicate">Выражение, представляющее предикат, который необходимо вычислить для каждого из элементов входного набора.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="input" /> или <paramref name="predicate" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="predicate" /> не относится к логическому типу.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As(System.Data.Entity.Core.Common.CommandTrees.DbAggregate,System.String)">
      <summary>Возвращает указанные аргументы в виде объекта пары «ключ-значение».</summary>
      <returns>Объект пары «ключ-значение».</returns>
      <param name="value">Значение из пары «ключ-значение».</param>
      <param name="alias">Ключ из пары «ключ-значение».</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.As(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
      <summary>Возвращает указанные аргументы в виде объекта пары «ключ-значение».</summary>
      <returns>Объект пары «ключ-значение».</returns>
      <param name="value">Значение из пары «ключ-значение».</param>
      <param name="alias">Ключ из пары «ключ-значение».</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Bind(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новый объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />, использующий созданное имя переменной для привязки заданного выражения.</summary>
      <returns>Привязка нового выражения к указанному выражению и созданному имени переменной.</returns>
      <param name="input">Выражение, которое требуется привязать.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="input" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="input" /> не относится к типу коллекции.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.BindAs(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
      <summary>Создает новый объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />, использующий заданное имя переменной для привязки заданного выражения.</summary>
      <returns>Привязка нового выражения к указанному выражению и имени переменной.</returns>
      <param name="input">Выражение, которое требуется привязать.</param>
      <param name="varName">Имя переменной, которое должно использоваться для привязки.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="input" /> или <paramref name="varName" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="input" /> не относится к типу коллекции.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Case(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новый объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCaseExpression" />.</summary>
      <returns>Новое выражение DbCaseExpression с указанными вариантами и результатом по умолчанию.</returns>
      <param name="whenExpressions">Список выражений, предоставляющих условия для каждого варианта.</param>
      <param name="thenExpressions">Список выражений, предоставляющих результат для каждого варианта.</param>
      <param name="elseExpression">Выражение, определяющее результат в случае, если ни один из вариантов не подходит.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="whenExpressions" /> или <paramref name="thenExpressions" /> равны null или содержат значения null, или <paramref name="elseExpression" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="whenExpressions" /> или <paramref name="thenExpressions" /> пуст, либо <paramref name="whenExpressions" /> содержит выражение с типом результата, отличным от логического, либо у результатов всех выражений в <paramref name="thenExpressions" /> и <paramref name="elseExpression" /> отсутствует общий тип.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CastTo(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCastExpression" />, применяющее операцию приведения к полиморфному аргументу.</summary>
      <returns>Новое выражение DbCastExpression с указанным аргументом и типом целевого объекта.</returns>
      <param name="argument">Аргумент, к которому требуется применить приведение.</param>
      <param name="toType">Метаданные типа, указывающие тип, к которому требуется привести аргумент.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="argument" /> или <paramref name="toType" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Указанное приведение недопустимо.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Constant(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Object)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> заданного примитивного типа с указанным константным значением.</summary>
      <returns>Новое выражение DbConstantExpression с заданным значением и типом результата <paramref name="constantType" />.</returns>
      <param name="constantType">Тип константного значения.</param>
      <param name="value">Представляемое константное значение.</param>
      <exception cref="T:System.ArgumentNullException">valueconstantType</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> не является экземпляром допустимого константного типа, <paramref name="constantType" /> не представляет тип-примитив, либо <paramref name="value" /> имеет тип-примитив, отличный от представленного <paramref name="constantType" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Constant(System.Object)">
      <summary>Создает новый объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> с заданным константным значением.</summary>
      <returns>Новое выражение DbConstantExpression с заданным значением.</returns>
      <param name="value">Представляемое константное значение.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="value" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="value" /> не является экземпляром допустимого типа константы.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" />, которое представляет ссылку на определенную сущность на основе значений ключей.</summary>
      <returns>Новое выражение DbRefExpression, которое ссылается на элемент с указанными значениями ключей в заданном наборе сущностей.</returns>
      <param name="entitySet">Набор сущностей, содержащий элемент, на который указывает ссылка.</param>
      <param name="keyValues">Коллекция выражений <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, предоставляющих значения ключей.Эти выражения должны соответствовать (по числу, типу и порядку) ключевым свойствам типа упоминаемой сущности.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" /> равно null, либо <paramref name="keyValues" /> равно null или содержит null.</exception>
      <exception cref="T:System.ArgumentException">Число <paramref name="keyValues" /> не соответствует числу ключевых элементов, объявленных в типе элемента <paramref name="entitySet" />, либо <paramref name="keyValues" /> содержит выражение, тип результата которого несовместим с типом соответствующего ключевого элемента.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" />, которое представляет ссылку на определенную сущность на основе значений ключей.</summary>
      <returns>Новое выражение DbRefExpression, которое ссылается на элемент с указанными значениями ключей в заданном наборе сущностей.</returns>
      <param name="entitySet">Набор сущностей, содержащий элемент, на который указывает ссылка.</param>
      <param name="keyValues">Коллекция выражений <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, предоставляющих значения ключей.Эти выражения должны соответствовать (по числу, типу и порядку) ключевым свойствам типа упоминаемой сущности.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" /> равно null, либо <paramref name="keyValues" /> равно null или содержит null.</exception>
      <exception cref="T:System.ArgumentException">Число <paramref name="keyValues" /> не соответствует числу ключевых элементов, объявленных в типе элемента <paramref name="entitySet" />, либо <paramref name="keyValues" /> содержит выражение, тип результата которого несовместим с типом соответствующего ключевого элемента.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" />, которое представляет ссылку на определенную сущность данного типа на основе значений ключа.</summary>
      <returns>Новое выражение DbRefExpression, которое ссылается на элемент с указанными значениями ключей в заданном наборе сущностей.</returns>
      <param name="entitySet">Набор сущностей, содержащий элемент, на который указывает ссылка.</param>
      <param name="entityType">Тип упоминаемой сущности.Тип сущности должен принадлежать той же иерархии, что и тип элемента набора сущностей.</param>
      <param name="keyValues">Коллекция выражений <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, предоставляющих значения ключей.Эти выражения должны соответствовать (по числу, типу и порядку) ключевым свойствам типа упоминаемой сущности.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" /> или <paramref name="entityType" /> равно null или содержит значения null, или <paramref name="keyValues" /> равно null или содержит null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="entityType" /> не является типом в той же иерархии типов (подтипом, супертипом или тем же типом), что и тип элемента <paramref name="entitySet" />.</exception>
      <exception cref="T:System.ArgumentException">Число <paramref name="keyValues" /> не соответствует числу ключевых элементов, объявленных в типе элемента <paramref name="entitySet" />, либо <paramref name="keyValues" /> содержит выражение, тип результата которого несовместим с типом соответствующего ключевого элемента.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CreateRef(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" />, которое представляет ссылку на определенную сущность данного типа на основе значений ключа.</summary>
      <returns>Новое выражение DbRefExpression, которое ссылается на элемент с указанными значениями ключей в заданном наборе сущностей.</returns>
      <param name="entitySet">Набор сущностей, содержащий элемент, на который указывает ссылка.</param>
      <param name="entityType">Тип упоминаемой сущности.Тип сущности должен принадлежать той же иерархии, что и тип элемента набора сущностей.</param>
      <param name="keyValues">Коллекция выражений <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, предоставляющих значения ключей.Эти выражения должны соответствовать (по числу, типу и порядку) ключевым свойствам типа упоминаемой сущности.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" /> или <paramref name="entityType" /> равно null или содержит значения null, или <paramref name="keyValues" /> равно null или содержит null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="entityType" /> не является типом в той же иерархии типов (подтипом, супертипом или тем же типом), что и тип элемента <paramref name="entitySet" />.</exception>
      <exception cref="T:System.ArgumentException">Число <paramref name="keyValues" /> не соответствует числу ключевых элементов, объявленных в типе элемента <paramref name="entitySet" />, либо <paramref name="keyValues" /> содержит выражение, тип результата которого несовместим с типом соответствующего ключевого элемента.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}})">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" />, которое вычисляет указанное выражение <paramref name="apply" /> по одному разу для каждого из элементов входного набора, создавая на выходе коллекцию строк с соответствующими столбцами input и apply.Строки, для которых результатом выражения <paramref name="apply" /> стало пустое множество, не включаются.</summary>
      <returns>Новое выражение DbApplyExpression с указанным входным, привязками и <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> типа CrossApply.</returns>
      <param name="source">Объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, задающий входной набор. </param>
      <param name="apply">Метод, задающий логику вычисления, которую необходимо применить для каждого из элементов входного набора.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> или <paramref name="apply" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="source" /> не относится к типу коллекции.</exception>
      <exception cref="T:System.ArgumentNullException">Результат <paramref name="apply" /> содержит имя или выражение, равное null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="apply" /> содержит имя или выражение, недопустимые в привязке выражения.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossApply(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" />, которое вычисляет указанное выражение <paramref name="apply" /> по одному разу для каждого из элементов входного набора, создавая на выходе коллекцию строк с соответствующими столбцами input и apply.Строки, для которых результатом выражения <paramref name="apply" /> стало пустое множество, не включаются.</summary>
      <returns>Новое выражение DbApplyExpression с указанными привязками input и apply и <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> типа CrossApply.</returns>
      <param name="input">Объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />, задающий входной набор.</param>
      <param name="apply">Объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />, задающий логику вычисления, которую необходимо применить по одному разу для каждого из элементов входного набора.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="input" /> или <paramref name="apply" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.CrossJoin(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding})">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCrossJoinExpression" />, которое без каких-либо условий объединяет наборы, заданные списком входящих привязок выражений.</summary>
      <returns>Новое выражение DbCrossJoinExpression с <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> типа перекрестного соединения, которое представляет безусловное соединение входных наборов.</returns>
      <param name="inputs">Список привязок выражений, задающий входные наборы.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="inputs" /> равно null или содержит null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="inputs" /> содержит менее 2 привязок выражений.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Deref(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDerefExpression" />, которое извлекает определенную сущность, если дано выражение ссылки.</summary>
      <returns>Новое выражение DbDerefExpression, которое извлекает заданную сущность.</returns>
      <param name="argument">Выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, предоставляющее ссылку.Выражение должно быть ссылочного типа.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="argument" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="argument" /> не относится к ссылочному типу.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Distinct(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbDistinctExpression" />, которое удаляет повторяющиеся элементы из указанного аргумента набора.</summary>
      <returns>Новое выражение DbDistinctExpression, которое представляет определенную операцию, применяемую к указанному набору аргументов.</returns>
      <param name="argument">Выражение, задающее набор, для которого требуется выполнить операцию удаления повторяющихся элементов.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="argument" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="argument" /> не относится к ссылочному типу.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Divide(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" /> для деления левого аргумента на правый.</summary>
      <returns>Новое выражение DbArithmeticExpression, представляющее операцию деления.</returns>
      <param name="left">Выражение, задающее левый аргумент.</param>
      <param name="right">Выражение, задающее правый аргумент.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="left" /> или <paramref name="right" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Общего численного типа результата для <paramref name="left" /> и <paramref name="right" /> не существует.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Element(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbElementExpression" />, которое преобразует набор в одноэлементное значение.</summary>
      <returns>Выражение DbElementExpression, которое представляет преобразование аргумента указанного набора в одноэлементный набор.</returns>
      <param name="argument">Выражение, задающее входной набор.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="argument" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="argument" /> не относится к ссылочному типу.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Equal(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" />, проверяющее, равен ли левый аргумент правому.</summary>
      <returns>Новое выражение DbComparisonExpression, представляющее операцию сравнения на равенство.</returns>
      <param name="left">Выражение, задающее левый аргумент.</param>
      <param name="right">Выражение, задающее правый аргумент.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="left" /> или <paramref name="right" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Общего численного типа результата для <paramref name="left" /> и <paramref name="right" /> не существует.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Except(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExceptExpression" />, вычисляющее разницу между левым аргументом набора и правым аргументом набора.</summary>
      <returns>Новое выражение DbExceptExpression, которое представляет разницу между левым и правым аргументом.</returns>
      <param name="left">Выражение, определяющее левый аргумент набора.</param>
      <param name="right">Выражение, определяющее правый аргумент набора.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="left" /> или <paramref name="right" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Общего численного типа результата для <paramref name="left" /> и <paramref name="right" /> не существует.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Exists(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, определяющее, не пуст ли заданный аргумент.</summary>
      <returns>Новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" />, применяемое к выражению <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" /> с указанным аргументом.</returns>
      <param name="argument">Выражение, задающее входной набор.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="argument" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="argument" /> не относится к типу коллекции.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.False">
      <summary>Создает <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> с логическим значением false.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> с логическим значением false.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Filter(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" />, фильтрующее элементы заданного входного набора с использованием заданного предиката.</summary>
      <returns>Новое выражение DbFilterExpression, которое создает отфильтрованный набор.</returns>
      <param name="input">Привязка выражения, задающая входной набор.</param>
      <param name="predicate">Выражение, представляющее предикат, который необходимо вычислить для каждого из элементов входного набора.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="input" /> или <paramref name="predicate" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="predicate" /> не относится к логическому типу.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />, которое объединяет наборы, заданные левым и правым выражениями, при указанном условии соединения, используя поле FullOuterJoin в качестве значения <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />.</summary>
      <returns>Новое выражение DbJoinExpression с <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> типа FullOuterJoin, которое представляет операцию полного внешнего соединения, применяемую к левому и правому входному набору с заданными критериями соединения. </returns>
      <param name="left">Объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, задающий левый аргумент набора.</param>
      <param name="right">Объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, задающий правый аргумент набора.</param>
      <param name="joinCondition">Метод, представляющий условие объединения.Этот метод должен создавать выражение с результатом логического типа, указывающее логику условия объединения.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />, <paramref name="right" /> или <paramref name="joinCondition" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="left" /> или <paramref name="right" /> не относится к типу коллекции.</exception>
      <exception cref="T:System.ArgumentNullException">Выражение, созданное <paramref name="joinCondition" />, имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Выражение, созданное <paramref name="joinCondition" />, не относится к логическому типу.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.FullOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />, которое объединяет наборы, заданные левой и правой привязкой выражения, при указанном условии объединения, используя поле FullOuterJoin в качестве значения <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />.</summary>
      <returns>Новое выражение DbJoinExpression с <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> типа FullOuterJoin, которое представляет операцию полного внешнего соединения, применяемую к левому и правому входному набору с заданными критериями соединения.</returns>
      <param name="left">Объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />, задающий левый аргумент набора.</param>
      <param name="right">Объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />, задающий правый аргумент набора.</param>
      <param name="joinCondition">Выражение, задающее условие объединения.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />, <paramref name="right" /> или <paramref name="joinCondition" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="joinCondition" /> не относится к логическому типу.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetEntityRef(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbEntityRefExpression" />, которое извлекает ссылку заданной сущности в структурной форме.</summary>
      <returns>Новое выражение DbEntityRefExpression, которое получает ссылку на указанной сущности.</returns>
      <param name="argument">Выражение, задающее сущность.Выражение должно иметь тип результата сущности.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="argument" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="argument" /> не относится к типу сущности.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GetRefKey(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefKeyExpression" />, которое извлекает ключевые значения заданной ссылки в структурной форме.</summary>
      <returns>Новое выражение DbRefKeyExpression, которое извлекает значения ключа указанной ссылки.</returns>
      <param name="argument">Выражение, задающее ссылку.Это выражение должно иметь ссылочный тип с типом элемента сущности.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="argument" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="argument" /> не относится к типу сущности.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThan(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" />, определяющее, верно ли, что левый аргумент больше правого.</summary>
      <returns>Новое выражение DbComparisonExpression, которое представляет сравнение «больше чем».</returns>
      <param name="left">Выражение, задающее левый аргумент.</param>
      <param name="right">Выражение, задающее правый аргумент.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="left" /> или <paramref name="right" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Общего типа результата сравнения по порядку для <paramref name="left" /> и <paramref name="right" /> не существует.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GreaterThanOrEqual(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" />, определяющее, верно ли, что левый аргумент больше или равен правому.</summary>
      <returns>Новое выражение DbComparisonExpression, которое представляет сравнение «больше или равно».</returns>
      <param name="left">Выражение, задающее левый аргумент.</param>
      <param name="right">Выражение, задающее правый аргумент.</param>
      <exception cref="T:System.ArgumentNullException">Значение left или right равно null.</exception>
      <exception cref="T:System.ArgumentException">Общего типа результата сравнения по порядку для left и right не существует.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupAggregate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новый объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupAggregate" /> на основе указанного аргумента.</summary>
      <returns>Новое групповое статистическое выражение, представляющее элементы группы, на которую ссылается заданный аргумент.</returns>
      <param name="argument">Аргумент, с которым выполняется операция вложения.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="argument" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBind(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новую привязку выражения группы, которая использует созданные имена переменной и групповой переменной для привязки заданного выражения.</summary>
      <returns>Новая привязка выражения группы с указанным выражением и созданными именем переменной и именем групповой переменной.</returns>
      <param name="input">Выражение, которое требуется привязать.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="input" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="input" /> не относится к типу коллекции.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBindAs(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String,System.String)">
      <summary>Создает новый объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" />, который использует заданные имена переменной и групповой переменной для привязки заданного выражения.</summary>
      <returns>Новая привязка выражения группы с указанным выражением, именем переменной и именем групповой переменной.</returns>
      <param name="input">Выражение, которое требуется привязать.</param>
      <param name="varName">Имя переменной, которое должно использоваться для привязки.</param>
      <param name="groupVarName">Имя переменной, которое должно использоваться для ссылки на группу при использовании новой привязки выражения группы в выражении group-by.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />, <paramref name="varName" /> или <paramref name="groupVarName" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="input" /> не относится к типу коллекции.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.GroupBy(System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbAggregate}})">
      <summary>Создает новый объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupByExpression" />, группирующий элементы входного набора в соответствии с заданными ключами группы и применяющий указанные статистические функции.</summary>
      <returns>Новое выражение DbGroupByExpression с указанным входным набором, ключами группирования и статистическими выражениями.</returns>
      <param name="input">Объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbGroupExpressionBinding" />, задающий входной набор.</param>
      <param name="keys">Список пар строка-выражение, определяющих столбцы группирования.</param>
      <param name="aggregates">Список выражений, задающих статистические функции, которые необходимо применить.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />, <paramref name="keys" /> или <paramref name="aggregates" /> равняется NULL, <paramref name="keys" /> содержит равное null имя или выражение, задающее ключевой столбец, либо статистические выражения содержат имя статистического столбца <paramref name="aggregate" />, равное null.</exception>
      <exception cref="T:System.ArgumentException">Оба параметра <paramref name="keys" /> и <paramref name="aggregates" /> пусты или недействительны, либо указано повторяющееся имя столбца.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.In(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression})">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbInExpression" />, связывающий результат указанного выражения с результатами константных выражений в заданном списке.</summary>
      <returns>Новое выражение DbInExpression с указанными аргументами, если список DbConstantExpression не пуст; в противном случае — константное выражение false.</returns>
      <param name="expression">Выражение DbExpression для сопоставления.</param>
      <param name="list">Список выражений DbConstantExpression, которые должны быть проверены на соответствие.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="expression" /> или <paramref name="list" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Тип результата <paramref name="expression" /> отличается от типа результата выражения из <paramref name="list" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />, которое объединяет наборы, заданные левым и правым выражениями, при указанном условии объединения, используя поле InnerJoin в качестве значения <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />.</summary>
      <returns>Новое выражение DbJoinExpression с <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> типа InnerJoin, которое представляет операцию внутреннего соединения, применяемую к левому и правому входному набору с заданными критериями соединения.</returns>
      <param name="left">Объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, задающий левый аргумент набора.</param>
      <param name="right">Объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, задающий правый аргумент набора.</param>
      <param name="joinCondition">Метод, представляющий условие объединения.Этот метод должен создавать выражение с результатом логического типа, указывающее логику условия объединения.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />, <paramref name="right" /> или <paramref name="joinCondition" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="left" /> или <paramref name="right" /> не относится к типу коллекции.</exception>
      <exception cref="T:System.ArgumentNullException">Выражение, созданное <paramref name="joinCondition" />, имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Выражение, созданное <paramref name="joinCondition" />, не относится к логическому типу.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.InnerJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />, которое объединяет наборы, заданные левым и правым выражениями, при указанном условии объединения, используя поле InnerJoin в качестве значения <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />.</summary>
      <returns>Новое выражение DbJoinExpression с <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> типа InnerJoin, которое представляет операцию внутреннего соединения, применяемую к левому и правому входному набору с заданными критериями соединения.</returns>
      <param name="left">Объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />, задающий левый аргумент набора.</param>
      <param name="right">Объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />, задающий правый аргумент набора.</param>
      <param name="joinCondition">Выражение, задающее условие объединения.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />, <paramref name="right" /> или <paramref name="joinCondition" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="joinCondition" /> не относится к логическому типу.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Intersect(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIntersectExpression" />, вычисляющее пересечение левого и правого аргументов набора.</summary>
      <returns>Новое выражение DbIntersectExpression, которое представляет пересечение левого и правого аргументов.</returns>
      <param name="left">Выражение, определяющее левый аргумент набора.</param>
      <param name="right">Выражение, определяющее правый аргумент набора.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" /> или right равно <paramref name="null" />.</exception>
      <exception cref="T:System.ArgumentException">Общего типа результата коллекции для <paramref name="left" /> и <paramref name="right" /> не существует.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Common.CommandTrees.DbLambda,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression" />, представляющее применение заданной лямбда-функции к указанным аргументам.</summary>
      <returns>Новое выражение DbLambdaExpression, представляющее применение лямбда-функции.</returns>
      <param name="lambda">Экземпляр <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" />, представляющий лямбда-функцию, которую требуется применить.</param>
      <param name="arguments">Список выражений, задающих аргументы.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lambda" /> равно null, либо <paramref name="arguments" /> равно null или содержит null.</exception>
      <exception cref="T:System.ArgumentException">Число <paramref name="arguments" /> не равно числу переменных, объявленных в <paramref name="lambda" />, либо <paramref name="arguments" /> содержит выражение, тип результата которого не эквивалентен типу соответствующей переменной и не приводится к нему путем продвижения.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Common.CommandTrees.DbLambda,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambdaExpression" />, представляющее применение заданной лямбда-функции к указанным аргументам.</summary>
      <returns>Новое выражение DbLambdaExpression, представляющее применение лямбда-функции.</returns>
      <param name="lambda">Экземпляр <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" />, представляющий лямбда-функцию, которую требуется применить.</param>
      <param name="arguments">Выражения, задающие аргументы.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="lambda" /> равно null, либо <paramref name="arguments" /> равно null или содержит null.</exception>
      <exception cref="T:System.ArgumentException">Число <paramref name="arguments" /> не равно числу переменных, объявленных в <paramref name="lambda" />, либо <paramref name="arguments" /> содержит выражение, тип результата которого не эквивалентен типу соответствующей переменной и не приводится к нему путем продвижения.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, представляющее вызов заданной функции с заданными аргументами.</summary>
      <returns>Новое выражение DbFunctionExpression, представляющее вызов функции.</returns>
      <param name="function">Метаданные для вызываемой функции.</param>
      <param name="arguments">Список выражений, задающих аргументы для функции.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> равно null, либо <paramref name="arguments" /> равно null или содержит null.</exception>
      <exception cref="T:System.ArgumentException">Число <paramref name="arguments" /> не равно числу переменных, объявленных в <paramref name="function" />, либо <paramref name="arguments" /> содержит выражение, тип результата которого не эквивалентен типу соответствующей переменной и не приводится к нему путем продвижения.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Invoke(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, представляющее вызов заданной функции с заданными аргументами.</summary>
      <returns>Новое выражение DbFunctionExpression, представляющее вызов функции.</returns>
      <param name="function">Метаданные для вызываемой функции.</param>
      <param name="arguments">Выражения, задающие аргументы для функции.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="function" /> равно null, либо <paramref name="arguments" /> равно null или содержит null.</exception>
      <exception cref="T:System.ArgumentException">Число <paramref name="arguments" /> не равно числу переменных, объявленных в <paramref name="function" />, либо <paramref name="arguments" /> содержит выражение, тип результата которого не эквивалентен типу соответствующей переменной и не приводится к нему путем продвижения.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsEmpty(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsEmptyExpression" />, определяющее, является ли заданный аргумент пустым набором.</summary>
      <returns>Новое выражение DbIsEmptyExpression с указанным аргументом.</returns>
      <param name="argument">Выражение, задающее входной набор.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="argument" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="argument" /> не относится к типу коллекции.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsNull(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsNullExpression" />, определяющее, не равен ли заданный аргумент нулю.</summary>
      <returns>Новое выражение DbIsNullExpression с указанным аргументом.</returns>
      <param name="argument">Выражение, задающее аргумент.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="argument" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="argument" /> имеет тип коллекции.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOf(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression" />, определяющее, принадлежит ли заданный аргумент определенному типу или подтипу.</summary>
      <returns>Новое выражение DbIsOfExpression с указанным экземпляром, типом и DbExpressionKind типа IsOf.</returns>
      <param name="argument">Выражение, задающее экземпляр.</param>
      <param name="type">Метаданные типа, задающие тип, с которым нужно сравнить тип результата экземпляра.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="argument" /> или <paramref name="type" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> не совпадает с типом результата <paramref name="argument" /> по иерархии типа.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.IsOfOnly(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbIsOfExpression" />, определяющее, принадлежит ли заданный аргумент определенному типу (только этому типу, не подтипу).</summary>
      <returns>Новое выражение DbIsOfExpression с указанным экземпляром, типом и DbExpressionKind типа IsOfOnly.</returns>
      <param name="argument">Выражение, задающее экземпляр.</param>
      <param name="type">Метаданные типа, задающие тип, с которым нужно сравнить тип результата экземпляра.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="argument" /> или <paramref name="type" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> не совпадает с типом результата <paramref name="argument" /> по иерархии типа.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />, объединяющее наборы, заданные внешним и внутренним выражениями при условии равенства заданных внешнего и внутреннего ключей, используя поле InnerJoin в качестве значения <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />.</summary>
      <returns>Новое выражение DbJoinExpression с <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> типа InnerJoin, которое представляет операцию внутреннего соединения, применяемую к левому и правому входным наборам с условием соединения, проверяющим значения внешнего и внутреннего ключа на равенство.</returns>
      <param name="outer">Объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, задающий внешний аргумент набора.</param>
      <param name="inner">Объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, задающий внутренний аргумент набора.</param>
      <param name="outerKey">Метод, задающий способ получения значения внешнего ключа из элемента внешнего набора.</param>
      <param name="innerKey">Метод, задающий способ получения значения внутреннего ключа из элемента внутреннего набора.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="outer" />, <paramref name="inner" />, <paramref name="outerKey" /> или <paramref name="innerKey" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="outerKey" /> или <paramref name="innerKey" /> не относится к типу коллекции.</exception>
      <exception cref="T:System.ArgumentNullException">Выражение, созданное <paramref name="outerKey" /> или <paramref name="innerKey" />, имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Выражения, созданные <paramref name="outerKey" /> или <paramref name="innerKey" />, не поддерживают сравнение на равенство.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Join``1(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,``0})">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" />, проецирующее заданный селектор на наборы, которые заданы внешним и внутренним выражениями, которые объединяются при условии равенства заданных внешнего и внутреннего ключей, используя поле InnerJoin в качестве значения <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />.</summary>
      <returns>Новое выражениеDbProjectExpression с указанным селектором в качестве проекции и новым выражением DbJoinExpression в качестве входного параметра.Входное выражение DbJoinExpression создается с <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> типа InnerJoin, которое представляет операцию внутреннего соединения, применяемую к левому и правому входному набору с условием соединения, сравнивающим значения внешнего и внутреннего ключа на равенство.</returns>
      <param name="outer">Объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, задающий внешний аргумент набора.</param>
      <param name="inner">Объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, задающий внутренний аргумент набора.</param>
      <param name="outerKey">Метод, задающий способ получения значения внешнего ключа из элемента внешнего набора.</param>
      <param name="innerKey">Метод, задающий способ получения значения внутреннего ключа из элемента внутреннего набора.</param>
      <param name="selector">Метод, задающий способ получения элемента результирующего набора из элементов внутреннего и внешнего наборов.Этот метод должен создавать экземпляр типа, совместимого с операцией Join, который также можно разрешить в объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.Требования совместимости для <paramref name="TSelector" /> описаны в примечаниях.</param>
      <typeparam name="TSelector">Тип селектора.</typeparam>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="outer" />, <paramref name="inner" />, <paramref name="outerKey" />, <paramref name="innerKey" /> или <paramref name="selector" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="outer" /> или <paramref name="inner" /> не относится к типу коллекции.</exception>
      <exception cref="T:System.ArgumentNullException">Выражение, созданное <paramref name="outerKey" /> или <paramref name="innerKey" />, имеет значение null.</exception>
      <exception cref="T:System.ArgumentNullException">Результат <paramref name="selector" /> после преобразования в DbExpression равен null.</exception>
      <exception cref="T:System.ArgumentException">Выражения, созданные <paramref name="outerKey" /> и <paramref name="innerKey" />, не поддерживают сравнение на равенство.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="selector" /> несовместим с SelectMany.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Lambda(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression})">
      <summary>Создает новый объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" /> с заданной встроенной реализацией лямбда-функции и формальными параметрами.</summary>
      <returns>Новый класс DbLambda с описанием встроенной лямбда-функции, указанным текстом и формальными параметрами.</returns>
      <param name="body">Выражение, определяющее логику лямбда-функции.</param>
      <param name="variables">Коллекция <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" />, представляющая формальные параметры для лямбда-функции.Эти переменные допустимо использовать в выражении <paramref name="body" />.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variables" /> равны NULL или содержат значения NULL, или <paramref name="body" /> равно NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="variables" /> содержат несколько элементов с одним и тем же именем переменной.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Lambda(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression[])">
      <summary>Создает новый объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" /> с заданной встроенной реализацией лямбда-функции и формальными параметрами.</summary>
      <returns>Новый класс DbLambda с описанием встроенной лямбда-функции, указанным текстом и формальными параметрами.</returns>
      <param name="body">Выражение, определяющее логику лямбда-функции.</param>
      <param name="variables">Коллекция <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" />, представляющая формальные параметры для лямбда-функции.Эти переменные допустимо использовать в выражении body.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="variables" /> равны NULL или содержат значения NULL, или <paramref name="body" /> равно NULL.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="variables" /> содержат несколько элементов с одним и тем же именем переменной.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />, которое объединяет наборы, заданные левым и правым выражениями, при указанном условии объединения, используя поле LeftOuterJoin в качестве значения <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />.</summary>
      <returns>Новое выражение DbJoinExpression с <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> типа LeftOuterJoin, которое представляет операцию левого внешнего соединения, применяемую к левому и правому входному набору с заданными критериями соединения.</returns>
      <param name="left">Объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, задающий левый аргумент набора.</param>
      <param name="right">Объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, задающий правый аргумент набора.</param>
      <param name="joinCondition">Метод, представляющий условие объединения.Этот метод должен создавать выражение с результатом логического типа, указывающее логику условия объединения.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />, <paramref name="right" /> или <paramref name="joinCondition" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="left" /> или <paramref name="right" /> не относится к типу коллекции.</exception>
      <exception cref="T:System.ArgumentNullException">Выражение, созданное <paramref name="joinCondition" />, имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Выражение, созданное <paramref name="joinCondition" />, не относится к логическому типу.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LeftOuterJoin(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbJoinExpression" />, которое объединяет наборы, заданные левой и правой привязкой выражения, при указанном условии объединения, используя поле LeftOuterJoin в качестве значения <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" />.</summary>
      <returns>Новое выражение DbJoinExpression с <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> типа LeftOuterJoin, которое представляет операцию левого внешнего соединения, применяемую к левому и правому входному набору с заданными критериями соединения.</returns>
      <param name="left">Объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />, задающий левый аргумент набора.</param>
      <param name="right">Объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />, задающий правый аргумент набора.</param>
      <param name="joinCondition">Выражение, задающее условие объединения.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="left" />, <paramref name="right" /> или <paramref name="joinCondition" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="joinCondition" /> не относится к логическому типу.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThan(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" />, определяющее, верно ли, что левый аргумент меньше правого.</summary>
      <returns>Новое выражение DbComparisonExpression, которое представляет сравнение «меньше чем».</returns>
      <param name="left">Выражение, задающее левый аргумент.</param>
      <param name="right">Выражение, задающее правый аргумент.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="left" /> или <paramref name="right" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Общего типа результата сравнения по порядку для <paramref name="left" /> и <paramref name="right" /> не существует.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.LessThanOrEqual(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" />, определяющее, верно ли, что левый аргумент меньше или равен правому аргументу.</summary>
      <returns>Новое выражение DbComparisonExpression, которое представляет сравнение «меньше или равно».</returns>
      <param name="left">Выражение, задающее левый аргумент.</param>
      <param name="right">Выражение, задающее правый аргумент.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="left" /> или <paramref name="right" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Общего типа результата сравнения по порядку для <paramref name="left" /> и <paramref name="right" /> не существует.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" />, которое сравнивает указанную входную строку с заданным шаблоном.</summary>
      <returns>Новое выражение DbLikeExpression с указанными входными данными, шаблоном и пустой escape-последовательностью.</returns>
      <param name="argument">Выражение, задающее входную строку.</param>
      <param name="pattern">Выражение, задающее шаблонную строку.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="argument" /> или <paramref name="pattern" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="argument" /> или <paramref name="pattern" /> не относится к строковому типу.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Like(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLikeExpression" />, которое сравнивает указанную входную строку с заданным шаблоном, используя необязательную строку escape-последовательности.</summary>
      <returns>Новое выражение DbLikeExpression с указанными входными данными, шаблоном и escape-последовательностью.</returns>
      <param name="argument">Выражение, задающее входную строку.</param>
      <param name="pattern">Выражение, задающее шаблонную строку.</param>
      <param name="escape">Необязательное выражение, задающее строку escape-последовательности.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="argument" />, <paramref name="pattern" /> или escape-последовательность равны <paramref name="null" />.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="argument" />, <paramref name="pattern" /> или escape-последовательность не относятся к строковому типу.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Limit(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" />, которое ограничивает количество элементов в коллекции аргументов, соответствующее указанному значению предела.Связанные результаты не включаются в выходные данные.</summary>
      <returns>Новое выражение DbLimitExpression с указанными значениями аргумента и предела числа, не включающее связанные результаты.</returns>
      <param name="argument">Выражение, определяющее входную коллекцию.</param>
      <param name="count">Выражение, задающее предельное значение.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="argument" /> или <paramref name="count" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="argument" /> не относится к типу коллекции, либо результат <paramref name="count" /> не относится к типу, эквивалентному 64-разрядному целочисленному типу или приводимому к нему путем продвижения.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Minus(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" />, которое вычитает правый аргумент из левого аргумента.</summary>
      <returns>Новое выражение DbArithmeticExpression, представляющее операцию вычитания.</returns>
      <param name="left">Выражение, задающее левый аргумент.</param>
      <param name="right">Выражение, задающее правый аргумент.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="left" /> или <paramref name="right" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Общего типа результата сравнения по порядку для <paramref name="left" /> и <paramref name="right" /> не существует.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Modulo(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" />, вычисляющее остаток при делении левого аргумента на правый аргумент.</summary>
      <returns>Новое выражение DbArithmeticExpression, представляющее операцию остатка от деления.</returns>
      <param name="left">Выражение, задающее левый аргумент.</param>
      <param name="right">Выражение, задающее правый аргумент.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="left" /> или <paramref name="right" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Общего типа результата сравнения по порядку для <paramref name="left" /> и <paramref name="right" /> не существует.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Multiply(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" />, которое умножает левый аргумент на правый аргумент.</summary>
      <returns>Новое выражение DbArithmeticExpression, представляющее операцию умножения.</returns>
      <param name="left">Выражение, задающее левый аргумент.</param>
      <param name="right">Выражение, задающее правый аргумент.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="left" /> или <paramref name="right" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Общего типа результата сравнения по порядку для <paramref name="left" /> и <paramref name="right" /> не существует.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression" />, представляющее навигацию композиции или связи ассоциации.</summary>
      <returns>Новое выражение DbRelationshipNavigationExpression, представляющее навигацию указанных начальных и конечных концов связи заданного типа из указанного экземпляра источника навигации.</returns>
      <param name="navigateFrom">Выражение, задающее экземпляр, из которого должен происходить переход.</param>
      <param name="fromEnd">Метаданные свойства, представляющего конец связи, из которой должен произойти переход.</param>
      <param name="toEnd">Метаданные свойства, представляющего конец связи, в которую должен произойти переход.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="fromEnd" />, <paramref name="toEnd" /> или <paramref name="NavigateForm" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="fromEnd" /> и <paramref name="toEnd" /> не объявлены одним и тем же типом связи, или <paramref name="navigateFrom" /> имеет тип результата, несовместимый с типом свойства <paramref name="fromEnd" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Navigate(System.Data.Entity.Core.Metadata.Edm.RelationshipType,System.String,System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRelationshipNavigationExpression" />, представляющее навигацию композиции или связи ассоциации.</summary>
      <returns>Новое выражение DbRelationshipNavigationExpression, представляющее навигацию указанных начальных и конечных концов связи заданного типа из указанного экземпляра источника навигации.</returns>
      <param name="type">Метаданные для типа связей, представляющие связь.</param>
      <param name="fromEndName">Имя свойства типа связи, представляющего конец связи, из которой должен произойти переход.</param>
      <param name="toEndName">Имя свойства типа связи, представляющего конец связи, в которую должен произойти переход.</param>
      <param name="navigateFrom">Выражение, задающее экземпляр, из которого должен происходить переход.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="type" />
        <paramref name="fromEndName" />, <paramref name="toEndName" /> или <paramref name="NavigateForm" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="type" /> не сопоставлен с рабочей областью метаданных этого дерева команд, либо <paramref name="navigateFrom" /> сопоставлен с другим деревом команд, либо <paramref name="type" /> не содержит объявления свойства окончания связи с именем <paramref name="toEndName" /> или <paramref name="fromEndName" />, либо <paramref name="navigateFrom" /> имеет тип результата, несовместимый с <paramref name="fromEndName" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Negate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" />, которое отрицает значение аргумента.</summary>
      <returns>Новое выражение DbArithmeticExpression, представляющее операцию отрицания.</returns>
      <param name="argument">Выражение, задающее аргумент.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="argument" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Тип числового результата для <paramref name="argument" /> не существует.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Создает новый объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />.Если тип аргумента является типом коллекции, аргументы задают элементы коллекции.В противном случае аргументы используются как значения свойств или столбцов в новом экземпляре.</summary>
      <returns>Новое выражение DbNewInstanceExpression с указанным типом и аргументами.</returns>
      <param name="instanceType">Тип нового экземпляра.</param>
      <param name="arguments">Выражения, задающие значения новых экземпляров, которые интерпретируются в соответствии с типом экземпляра.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="instanceType" /> или <paramref name="arguments" /> равно null, либо <paramref name="arguments" /> содержит null.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="arguments" /> является пустым, либо типы результатов содержащихся выражений не соответствуют требованиям <paramref name="instanceType" /> (как описано в примечаниях).</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.New(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>Создает новый объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />.Если тип аргумента является типом коллекции, аргументы задают элементы коллекции.В противном случае аргументы используются как значения свойств или столбцов в новом экземпляре.</summary>
      <returns>Новое выражение DbNewInstanceExpression с указанным типом и аргументами.</returns>
      <param name="instanceType">Тип нового экземпляра.</param>
      <param name="arguments">Выражения, задающие значения новых экземпляров, которые интерпретируются в соответствии с типом экземпляра.</param>
      <exception cref="T:System.ArgumentNullException">instanceTypeargumentsarguments</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="instanceType" /> или <paramref name="arguments" /> равно null, либо <paramref name="arguments" /> содержит null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewCollection(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />, которое формирует коллекцию, содержащую указанные элементы.Тип коллекции основывается на общем типе элементов.Если общий тип элементов не существует, создается исключение.</summary>
      <returns>Новое выражение DbNewInstanceExpression с указанным типом коллекции и аргументами.</returns>
      <param name="elements">Список выражений, предоставляющих элементы коллекции.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> равно null или содержит null.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="elements" /> пуст или содержит выражения, для которых не существует общего типа результата.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewCollection(System.Data.Entity.Core.Common.CommandTrees.DbExpression[])">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />, которое формирует коллекцию, содержащую указанные элементы.Тип коллекции основывается на общем типе элементов.Если общий тип элементов не существует, создается исключение.</summary>
      <returns>Новое выражение DbNewInstanceExpression с указанным типом коллекции и аргументами.</returns>
      <param name="elements">Список выражений, предоставляющих элементы коллекции.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="elements" /> равно null или содержит null.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="elements" /> пуст или содержит выражения, для которых не существует общего типа результата.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewEmptyCollection(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />, формирующее пустую коллекцию заданного типа.</summary>
      <returns>Новое выражение DbNewInstanceExpression с указанным типом коллекции и пустым списком Arguments.</returns>
      <param name="collectionType">Метаданные типа создаваемой коллекции.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="collectionType" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="collectionType" /> не относится к типу коллекции.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewRow(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}})">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />, формирующее строку с указанными именами столбцов и значениями, которые заданы как выражения.</summary>
      <returns>Новое выражение DbNewInstanceExpression, представляющее конструкцию строки.</returns>
      <param name="columnValues">Список пар ключ-значение string-DbExpression, определяющий структуру и значения строки.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="columnValues" /> равен null или содержит элемент с именем столбца или выражением, равными null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="columnValues" /> пуст или содержит повторяющееся или недопустимое имя столбца.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Not(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNotExpression" />, выполняющее логическое отрицание заданного аргумента.</summary>
      <returns>Новое выражение DbNotExpression с указанным аргументом.</returns>
      <param name="argument">Логическое выражение, задающее аргумент.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="argument" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">аргумент или не относится к логическому типу.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NotEqual(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbComparisonExpression" />, проверяющее, не равен ли левый аргумент правому.</summary>
      <returns>Новое выражение DbComparisonExpression, представляющее операцию проверки на неравенство.</returns>
      <param name="left">Выражение, задающее левый аргумент.</param>
      <param name="right">Выражение, задающее правый аргумент.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="left" /> или <paramref name="right" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Общего типа результата сравнения по равенству для <paramref name="left" /> и <paramref name="right" /> не существует.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Null(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNullExpression" />, представляющее типизированное значение null.</summary>
      <returns>Экземпляр DbNullExpression.</returns>
      <param name="nullType">Тип значения null.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="nullType" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfType(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression" />, которое формирует набор, состоящий из элементов данного входного набора указанного типа.</summary>
      <returns>Новое выражение DbOfTypeExpression с указанными аргументом и типом набора и ExpressionKind типа <see cref="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OfType" />.</returns>
      <param name="argument">Объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, задающий входной набор.</param>
      <param name="type">Метаданные типа для типа, которому должны принадлежать элементы входного набора, чтобы войти в результирующий набор.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="argument" /> или <paramref name="type" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="argument" /> не относится к типу коллекции <paramref name="type" />, либо тип не является типом в той же иерархии типов, что и тип результата элемента коллекции <paramref name="argument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OfTypeOnly(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOfTypeExpression" />, которое формирует набор, состоящий из элементов данного входного набора указанного типа.</summary>
      <returns>Новое выражение DbOfTypeExpression с указанными аргументом и типом набора и ExpressionKind типа <see cref="F:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind.OfTypeOnly" />.</returns>
      <param name="argument">Объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, задающий входной набор.</param>
      <param name="type">Метаданные типа для типа, которому должны строго соответствовать элементы входного набора, чтобы войти в результирующий набор.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="argument" /> или <paramref name="type" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="argument" /> не относится к типу коллекции <paramref name="type" />, либо тип не является типом в той же иерархии типов, что и тип результата элемента коллекции <paramref name="argument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Or(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbOrExpression" />, выполняющий логическую операцию ИЛИ для левого и правого аргументов. </summary>
      <returns> Новое выражение DbOrExpression с указанными аргументами. </returns>
      <param name="left"> Логическое выражение, задающее левый аргумент. </param>
      <param name="right"> Логическое выражение, задающее правый аргумент. </param>
      <exception cref="T:System.ArgumentNullException">leftright</exception>
      <exception cref="T:System.ArgumentException">leftright</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />, сортирующее заданный входной набор по указанному ключу сортировки в порядке возрастания и с параметрами сортировки по умолчанию.</summary>
      <returns>Новое выражение DbSortExpression, представляющее операцию упорядочивания.</returns>
      <param name="source">Выражение, задающее входной набор.</param>
      <param name="sortKey">Метод, определяющий процедуру получения выражения ключа сортировки для заданного элемента входного набора.Этот метод должен создавать выражение с типом результата сравниваемых по порядку строк, предоставляющее определение ключа сортировки.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> или <paramref name="sortKey" /> равно null.</exception>
      <exception cref="T:System.ArgumentNullException">Выражение, созданное <paramref name="sortKey" />, имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="source" /> не относится к типу коллекции.</exception>
      <exception cref="T:System.ArgumentException">Выражение, созданное <paramref name="sortKey" />, не относится к типу результата, поддерживающему порядковое сравнение.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderBy(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />, сортирующее заданный входной набор по указанному ключу сортировки в порядке возрастания и с заданными параметрами сортировки.</summary>
      <returns>Новое выражение DbSortExpression, представляющее операцию упорядочивания.</returns>
      <param name="source">Выражение, задающее входной набор.</param>
      <param name="sortKey">Метод, определяющий процедуру получения выражения ключа сортировки для заданного элемента входного набора.Этот метод должен создавать выражение с типом результата сравниваемых по порядку строк, предоставляющее определение ключа сортировки.</param>
      <param name="collation">Параметры сортировки</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="sortKey" /> или <paramref name="collation" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentNullException">Выражение, созданное <paramref name="sortKey" />, имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="source" /> не относится к типу коллекции.</exception>
      <exception cref="T:System.ArgumentException">Выражение, созданное <paramref name="sortKey" />, не относится к строковому типу результата, поддерживающему порядковое сравнение.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> является пустой строкой или содержит только пробелы.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />, сортирующее заданный входной набор по указанному ключу сортировки в порядке убывания и с параметрами сортировки по умолчанию.</summary>
      <returns>Новое выражение DbSortExpression, представляющее операцию упорядочивания.</returns>
      <param name="source">Выражение, задающее входной набор.</param>
      <param name="sortKey">Метод, определяющий процедуру получения выражения ключа сортировки для заданного элемента входного набора.Этот метод должен создавать выражение с типом результата сравниваемых по порядку строк, предоставляющее определение ключа сортировки.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> или <paramref name="sortKey" /> равно null.</exception>
      <exception cref="T:System.ArgumentNullException">Выражение, созданное <paramref name="sortKey" />, имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="source" /> не относится к типу коллекции.</exception>
      <exception cref="T:System.ArgumentException">Выражение, созданное <paramref name="sortKey" />, не относится к строковому типу результата, поддерживающему порядковое сравнение.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OrderByDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />, сортирующее заданный входной набор по указанному ключу сортировки в порядке убывания и с параметрами сортировки по умолчанию.</summary>
      <returns>Новое выражение DbSortExpression, представляющее операцию упорядочивания.</returns>
      <param name="source">Выражение, задающее входной набор.</param>
      <param name="sortKey">Метод, определяющий процедуру получения выражения ключа сортировки для заданного элемента входного набора.Этот метод должен создавать выражение с типом результата сравниваемых по порядку строк, предоставляющее определение ключа сортировки.</param>
      <param name="collation">Параметры сортировки</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="sortKey" /> или <paramref name="collation" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentNullException">Выражение, созданное <paramref name="sortKey" />, имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="source" /> не относится к типу коллекции.</exception>
      <exception cref="T:System.ArgumentException">Выражение, созданное <paramref name="sortKey" />, не относится к строковому типу результата, поддерживающему порядковое сравнение.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> является пустой строкой или содержит только пробелы.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}})">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" />, которое вычисляет указанное выражение <paramref name="apply" /> по одному разу для каждого из элементов входного набора, создавая на выходе коллекцию строк с соответствующими столбцами input и apply.Для строк, для которых операция <paramref name="apply" /> создает пустой набор, значение столбца apply равно null.</summary>
      <returns>Новое выражение DbApplyExpression с указанным входным, привязками и <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> типа OuterApply.</returns>
      <param name="source">Объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, задающий входной набор.</param>
      <param name="apply">Метод, задающий логику вычисления, которую необходимо применить для каждого из элементов входного набора.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> или <paramref name="apply" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="source" /> не относится к типу коллекции.</exception>
      <exception cref="T:System.ArgumentNullException">Результат apply содержит имя или выражение, равное null.</exception>
      <exception cref="T:System.ArgumentException">Результат apply содержит имя или выражение, недопустимые в привязке выражения.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.OuterApply(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" />, которое вычисляет указанное выражение <paramref name="apply" /> по одному разу для каждого из элементов входного набора, создавая на выходе коллекцию строк с соответствующими столбцами input и apply.Для строк, для которых операция <paramref name="apply" /> создает пустой набор, значение столбца apply равно null.</summary>
      <returns>Новое выражение DbApplyExpression с указанным входным, привязками и <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> типа OuterApply.</returns>
      <param name="input">Объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />, задающий входной набор.</param>
      <param name="apply">Объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding" />, задающий логику вычисления, которую необходимо применить по одному разу для каждого из элементов входного набора.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="input" /> или <paramref name="apply" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Parameter(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.String)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" />, ссылающееся на параметр с заданными именем и типом.</summary>
      <returns>DbParameterReferenceExpression, представляющее ссылку на параметр с указанным именем и типом; тип результата выражения совпадает с <paramref name="type" />.</returns>
      <param name="type">Тип параметра, на который указывает ссылка.</param>
      <param name="name">Имя упоминаемого параметра.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Plus(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" />, прибавляющее к левому аргументу правый.</summary>
      <returns>Новое выражение DbArithmeticExpression, представляющее операцию сложения.</returns>
      <param name="left">Выражение, задающее левый аргумент.</param>
      <param name="right">Выражение, задающее правый аргумент.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="left" /> или <paramref name="right" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Общего числового типа для left и right не существует.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Project(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" />, создающее проекцию заданного выражения на данном входном наборе.</summary>
      <returns>Новое выражение DbProjectExpression, представляющее операцию проекции.</returns>
      <param name="input">Привязка выражения, задающая входной набор.</param>
      <param name="projection">Выражение, которое требуется спроецировать на набор.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="input" /> или <paramref name="projection" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" />, представляющее получение указанного свойства.</summary>
      <returns>Новое выражение DbPropertyExpression, представляющее получение свойства.</returns>
      <param name="instance">Экземпляр, из которого требуется извлечь свойство.Может иметь значение null, если свойство статическое.</param>
      <param name="propertyMetadata">Метаданные для извлекаемого свойства.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="propertyMetadata" /> равен null, либо параметр <paramref name="instance" /> равен null, и свойство не является статическим.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.NavigationProperty)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" />, представляющее получение указанного свойства навигации.</summary>
      <returns>Новое выражение DbPropertyExpression, представляющее получение свойства навигации.</returns>
      <param name="instance">Экземпляр, из которого требуется извлечь свойство навигации.</param>
      <param name="navigationProperty">Метаданные извлекаемого свойства навигации.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="navigationProperty" /> равен null, или параметр <paramref name="instance" /> равен null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" />, представляющее получение указанного конечного элемента связи.</summary>
      <returns>Новое выражение DbPropertyExpression, представляющее получение элемента связи.</returns>
      <param name="instance">Экземпляр, из которого требуется извлечь конечный элемент связи.</param>
      <param name="relationshipEnd">Метаданные для извлекаемого конечного элемента связи.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="relationshipEnd" /> равен null, либо параметр <paramref name="instance" /> равен null, и свойство не является статическим.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Property(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbPropertyExpression" />, представляющее получение свойства экземпляра с заданным именем из указанного экземпляра.</summary>
      <returns>Новое выражение DbPropertyExpression, представляющее получение свойства.</returns>
      <param name="instance">Экземпляр, из которого требуется извлечь свойство.</param>
      <param name="propertyName">Имя свойства, которое необходимо извлечь.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="propertyName" /> равен null, либо параметр <paramref name="instance" /> равен null, и свойство не является статическим.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">В типе <paramref name="instance" /> не объявлено свойство с указанным именем.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" />, которое представляет ссылку на определенную сущность на основе значений ключей.</summary>
      <returns>Новое выражение DbRefExpression, которое ссылается на элемент с указанными значениями ключей в заданном наборе сущностей.</returns>
      <param name="entitySet">Набор сущностей, содержащий элемент, на который указывает ссылка.</param>
      <param name="keyRow">Выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, которое создает запись со столбцами, совпадающими (по количеству, типу и порядку) со свойствами ключа типа упоминаемой сущности.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="entitySet" /> или <paramref name="keyRow" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">keyRow</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.RefFromKey(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbRefExpression" />, которое представляет ссылку на определенную сущность на основе значений ключей.</summary>
      <returns>Новое выражение DbRefExpression, которое ссылается на элемент с указанными значениями ключей в заданном наборе сущностей.</returns>
      <param name="entitySet">Набор сущностей, содержащий элемент, на который указывает ссылка.</param>
      <param name="keyRow">Выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, которое создает запись со столбцами, совпадающими (по количеству, типу и порядку) со свойствами ключа типа упоминаемой сущности.</param>
      <param name="entityType">Тип сущности, на которую должна указывать ссылка.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="entitySet" />, <paramref name="keyRow" /> или <paramref name="entityType" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="entityType" /> не совпадает по иерархии с типом сущности набора сущностей, либо результат <paramref name="keyRow" /> не имеет типа записи, соответствующего ключевым свойствам упоминаемого типа сущности набора сущностей.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Scan(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbScanExpression" />, ссылающееся на заданную сущность или набор связей.</summary>
      <returns>Новое выражение DbScanExpression, основанное на указанном наборе сущностей или связей.</returns>
      <param name="targetSet">Метаданные для сущности или набора связей, на который должна указывать ссылка.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="targetSet" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Select``1(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,``0})">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" />, выбирающее заданное выражение из данного входного набора.</summary>
      <returns> Новое выражение DbProjectExpression, представляющее операцию выбора. </returns>
      <param name="source">Выражение, задающее входной набор.</param>
      <param name="projection">Метод, определяющий процедуру получения проецированного выражения для заданного элемента входного набора.Этот метод должен создавать экземпляр типа, совместимого с операцией Select, который также можно сопоставить в объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.Требования совместимости для <paramref name="TProjection" /> описаны в примечаниях.</param>
      <typeparam name="TProjection">Тип результата метода <paramref name="projection" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> или <paramref name="projection" /> равно null.</exception>
      <exception cref="T:System.ArgumentNullException">Результат <paramref name="projection" /> равен null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" />, которое вычисляет указанное выражение <paramref name="apply" /> по одному разу для каждого из элементов входного набора, создавая на выходе коллекцию строк с соответствующими столбцами input и apply.Строки, для которых результатом выражения <paramref name="apply" /> стало пустое множество, не включаются.Затем создается выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" />, выбирающее указанный <paramref name="selector" /> из каждой строки, формируя таким образом коллекцию результатов.</summary>
      <returns>Новое выражение DbProjectExpression, выбирающее столбец apply из нового выражения DbApplyExpression, с указанными входными данными и привязками и <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> типа CrossApply.</returns>
      <param name="source">Объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, задающий входной набор.</param>
      <param name="apply">Метод, представляющий логику вычисления, которую необходимо применить для каждого из элементов входного набора.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> или <paramref name="apply" /> равно null.</exception>
      <exception cref="T:System.ArgumentNullException">Выражение, созданное <paramref name="apply" />, имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="source" /> не относится к типу коллекции.</exception>
      <exception cref="T:System.ArgumentException">Выражение, созданное <paramref name="apply" />, не имеет тип коллекции.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SelectMany``1(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,``0})">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbApplyExpression" />, которое вычисляет указанное выражение <paramref name="apply" /> по одному разу для каждого из элементов входного набора, создавая на выходе коллекцию строк с соответствующими столбцами input и apply.Строки, для которых результатом выражения <paramref name="apply" /> стало пустое множество, не включаются.Затем создается выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbProjectExpression" />, выбирающее указанный <paramref name="selector" /> из каждой строки, формируя таким образом коллекцию результатов.</summary>
      <returns>Новое выражение DbProjectExpression, выбирающее результат заданного селектора из нового выражения DbApplyExpression с указанными входными данными, привязками и <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpressionKind" /> типа CrossApply.</returns>
      <param name="source">Объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, задающий входной набор.</param>
      <param name="apply">Метод, представляющий логику вычисления, которую необходимо применить для каждого из элементов входного набора.</param>
      <param name="selector">Метод, задающий способ получения элемента результирующего набора из элемента входного набора и набора apply.Этот метод должен создавать экземпляр типа, совместимого с операцией SelectMany, который можно разрешить в объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.Требования совместимости для <paramref name="TSelector" /> описаны в примечаниях.</param>
      <typeparam name="TSelector">Тип результата метода <paramref name="selector" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="apply" /> или <paramref name="selector" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentNullException">Выражение, созданное <paramref name="apply" />, имеет значение null.</exception>
      <exception cref="T:System.ArgumentNullException">Результат <paramref name="selector" /> при преобразовании в DbExpression равен null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="source" /> не относится к типу коллекции.</exception>
      <exception cref="T:System.ArgumentException">Выражение, созданное <paramref name="apply" />, не имеет тип коллекции.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.SetClause(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новый <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSetClause" />, представляющий назначение свойства значению.</summary>
      <returns>Созданное предложение set.</returns>
      <param name="property">Свойство, которое нужно задать.</param>
      <param name="value">Значение для задания свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbSortClause},System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" />, которое сортирует указанный входной набор согласно заданным правилам сортировки, прежде чем будет пропущено указанное число элементов.</summary>
      <returns>Новое выражение DbSkipExpression, которое представляет операцию пропуска.</returns>
      <param name="input">Привязка выражения, задающая входной набор.</param>
      <param name="sortOrder">Список правил сортировки, определяющих, как должны быть отсортированы элементы входного набора.</param>
      <param name="count">Выражение, указывающее, какое количество элементов упорядоченного набора следует пропустить.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" />, <paramref name="sortOrder" /> или <paramref name="count" /> равны null, либо <paramref name="sortOrder" /> содержит null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="sortOrder" /> является пустым, либо <paramref name="count" /> не является <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> или <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" /> или имеет тип результата, не равный 64-разрядному целочисленному типу и не приводимый к нему путем продвижения.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Skip(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSkipExpression" />, пропускающее заданное число элементов сортированного входного набора.</summary>
      <returns>Новое выражение DbSkipExpression, которое представляет операцию пропуска.</returns>
      <param name="argument">Объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />, задающий сортированный входной набор.</param>
      <param name="count">Выражение, указывающее, какое количество элементов упорядоченного набора следует пропустить.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="argument" /> или <paramref name="count" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="Count" /> не является <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> или <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression" /> или имеет тип результата, не равный 64-разрядному целочисленному типу и не приводимый к нему путем продвижения.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Sort(System.Data.Entity.Core.Common.CommandTrees.DbExpressionBinding,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Common.CommandTrees.DbSortClause})">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" />, сортирующее заданный входной набор с использованием указанных правил сортировки.</summary>
      <returns>Новое выражение DbSortExpression, представляющее операцию сортировки.</returns>
      <param name="input">Привязка выражения, задающая входной набор.</param>
      <param name="sortOrder">Список правил сортировки, определяющих, как должны быть отсортированы элементы входного набора.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="input" /> или <paramref name="sortOrder" /> равно null, либо <paramref name="sortOrder" /> содержит null.</exception>
      <exception cref="T:System.ArgumentException">Параметр <paramref name="sortOrder" /> пуст.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Take(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLimitExpression" />, которое ограничивает количество элементов в коллекции аргументов, соответствующее указанному значению предела.Связанные результаты не включаются в выходные данные.</summary>
      <returns>Новое выражение DbLimitExpression с указанными значениями аргумента и предела числа, не включающее связанные результаты.</returns>
      <param name="argument">Выражение, определяющее входную коллекцию.</param>
      <param name="count">Выражение, задающее предельное значение.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="argument" /> или <paramref name="count" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="argument" /> не относится к типу коллекции, либо результат <paramref name="count" /> не относится к типу, эквивалентному 64-разрядному целочисленному типу или приводимому к нему путем продвижения.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Создает новый объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> с порядком сортировки, включающим порядок сортировки данного входного набора и указанный ключ сортировки в порядке возрастания и с параметрами сортировки по умолчанию.</summary>
      <returns>Новое выражение DbSortExpression, представляющее новую операцию общего упорядочивания.</returns>
      <param name="source">Выражение DbSortExpression, задающее упорядоченный входной набор.</param>
      <param name="sortKey">Метод, определяющий процедуру получения дополнительного выражения ключа сортировки для заданного элемента входного набора.Этот метод должен создавать выражение с типом результата сравниваемых по порядку строк, предоставляющее определение ключа сортировки.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> или <paramref name="sortKey" /> равно null.</exception>
      <exception cref="T:System.ArgumentNullException">Выражение, созданное <paramref name="sortKey" />, имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="source" /> не относится к типу коллекции.</exception>
      <exception cref="T:System.ArgumentException">Выражение, созданное <paramref name="sortKey" />, не относится к типу результата, поддерживающему порядковое сравнение.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenBy(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)">
      <summary>Создает новый объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> с порядком сортировки, включающим порядок сортировки     данного входного набора и указанный ключ сортировки в порядке возрастания и     с указанными параметрами сортировки.</summary>
      <returns>Новое выражение DbSortExpression, представляющее новую операцию общего упорядочивания.</returns>
      <param name="source">Выражение DbSortExpression, задающее упорядоченный входной набор.</param>
      <param name="sortKey">Метод, определяющий процедуру получения дополнительного выражения ключа сортировки для заданного элемента входного набора.Этот метод должен создавать выражение с типом результата сравниваемых по порядку строк, предоставляющее определение ключа сортировки.</param>
      <param name="collation">Параметры сортировки</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="source" />, <paramref name="sortKey" /> или <paramref name="collation" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentNullException">Выражение, созданное <paramref name="sortKey" />, имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="source" /> не относится к типу коллекции.</exception>
      <exception cref="T:System.ArgumentException">Выражение, созданное <paramref name="sortKey" />, не относится к строковому типу результата, поддерживающему порядковое сравнение.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> является пустой строкой или содержит только пробелы.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Создает новый объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> с порядком сортировки, включающим порядок сортировки данного входного набора и указанный ключ сортировки в порядке убывания и с параметрами сортировки по умолчанию.</summary>
      <returns>Новое выражение DbSortExpression, представляющее новую операцию общего упорядочивания.</returns>
      <param name="source">Выражение DbSortExpression, задающее упорядоченный входной набор.</param>
      <param name="sortKey">Метод, определяющий процедуру получения дополнительного выражения ключа сортировки для заданного элемента входного набора.Этот метод должен создавать выражение с типом результата сравниваемых по порядку строк, предоставляющее определение ключа сортировки.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> или <paramref name="sortKey" /> равно null.</exception>
      <exception cref="T:System.ArgumentNullException">Выражение, созданное <paramref name="sortKey" />, имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="source" /> не относится к типу коллекции.</exception>
      <exception cref="T:System.ArgumentException">Выражение, созданное <paramref name="sortKey" />, не относится к типу результата, поддерживающему порядковое сравнение.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ThenByDescending(System.Data.Entity.Core.Common.CommandTrees.DbSortExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.String)">
      <summary>Создает новый объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortExpression" /> с порядком сортировки, включающим порядок сортировки     данного входного набора и указанный ключ сортировки в порядке убывания и     с указанными параметрами сортировки.</summary>
      <returns>Новое выражение DbSortExpression, представляющее новую операцию общего упорядочивания.</returns>
      <param name="source">Выражение DbSortExpression, задающее упорядоченный входной набор.</param>
      <param name="sortKey">Метод, определяющий процедуру получения дополнительного выражения ключа сортировки для заданного элемента входного набора.Этот метод должен создавать выражение с типом результата сравниваемых по порядку строк, предоставляющее определение ключа сортировки.</param>
      <param name="collation">Параметры сортировки.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="source" />, <paramref name="sortKey" /> или <paramref name="collation" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentNullException">Выражение, созданное <paramref name="sortKey" />, имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="source" /> не относится к типу коллекции.</exception>
      <exception cref="T:System.ArgumentException">Выражение, созданное <paramref name="sortKey" />, не относится к строковому типу результата, поддерживающему порядковое сравнение.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> является пустой строкой или содержит только пробелы.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новый объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> с порядком сортировки по возрастанию и параметрами сортировки по умолчанию.</summary>
      <returns>Новое предложение сортировки с указанным ключом сортировки и порядком сортировки по возрастанию.</returns>
      <param name="key">Выражение, определяющее ключ сортировки.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="key" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="key" /> не относится к типу, поддерживающему порядковое сравнение.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClause(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
      <summary>Создает новый объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> с порядком сортировки по возрастанию и заданными параметрами сортировки.</summary>
      <returns>Новое предложение сортировки с заданным ключом и параметрами сортировки, а также порядком сортировки по возрастанию.</returns>
      <param name="key">Выражение, определяющее ключ сортировки.</param>
      <param name="collation">Параметры сортировки.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="key" /> равно null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> является пустой строкой или содержит только пробелы.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="key" /> не относится к типу, поддерживающему порядковое сравнение.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новый объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> с порядком сортировки по убыванию и параметрами сортировки по умолчанию.</summary>
      <returns>Новое предложение сортировки с указанным ключом сортировки и порядком сортировки по убыванию.</returns>
      <param name="key">Выражение, определяющее ключ сортировки.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="key" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="key" /> не относится к типу, поддерживающему порядковое сравнение.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.ToSortClauseDescending(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.String)">
      <summary>Создает новый объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbSortClause" /> с порядком сортировки по убыванию и заданными параметрами сортировки.</summary>
      <returns>Новое предложение сортировки с заданным ключом и параметрами сортировки, а также порядком сортировки по убыванию.</returns>
      <param name="key">Выражение, определяющее ключ сортировки.</param>
      <param name="collation">Параметры сортировки.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="key" /> равно null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">
        <paramref name="collation" /> является пустой строкой или содержит только пробелы.</exception>
      <exception cref="T:System.ArgumentException">Результат <paramref name="key" /> не относится к типу, поддерживающему порядковое сравнение.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.TreatAs(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Создает новый объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbTreatExpression" />.</summary>
      <returns>Новое выражение DbTreatExpression с указанными аргументом и типом.</returns>
      <param name="argument">Выражение, задающее экземпляр.</param>
      <param name="treatType">Метаданные типа для собственного типа.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="argument" /> или <paramref name="treatType" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">
        <paramref name="treatType" /> не совпадает с типом результата <paramref name="argument" /> по иерархии типа.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.True">
      <summary>Создает <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> с логическим значением true.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbConstantExpression" /> с логическим значением true.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnaryMinus(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbArithmeticExpression" />, которое отрицает значение аргумента.</summary>
      <returns>Новое выражение DbArithmeticExpression, представляющее операцию отрицания.</returns>
      <param name="argument">Выражение, задающее аргумент.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="argument" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Тип числового результата для <paramref name="argument" /> не существует.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Union(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новый объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, вычисляющий объединение левого и правого аргументов набора, при этом повторяющиеся элементы удаляются.</summary>
      <returns>Новое выражение DbExpression, которое вычисляет объединение левого и правого аргумента без повторений.</returns>
      <param name="left">Выражение, определяющее левый аргумент набора.</param>
      <param name="right">Выражение, определяющее правый аргумент набора.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="left" /> или <paramref name="right" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Общего типа результата коллекции с типом сравниваемых по равенству элементов между <paramref name="left" /> и <paramref name="right" /> не существует.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.UnionAll(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbUnionAllExpression" />, вычисляющее соединение левого и правого аргументов набора, не удаляя повторяющиеся элементы.</summary>
      <returns>Новое выражение DbUnionAllExpression, которое вычисляет соединение левого и правого аргумента с повторениями.</returns>
      <param name="left">Выражение, определяющее левый аргумент набора.</param>
      <param name="right">Выражение, определяющее правый аргумент набора.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="left" /> или <paramref name="right" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Общего типа результата коллекции для <paramref name="left" /> и <paramref name="right" /> не существует.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Variable(System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.String)">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression" />, ссылающееся на переменную с заданными именем и типом.</summary>
      <returns>Выражение DbVariableReferenceExpression, представляющее ссылку на переменную с указанным именем и типом; тип результата выражения совпадает с <paramref name="type" />.</returns>
      <param name="type">Тип переменной, на которую указывает ссылка.</param>
      <param name="name">Имя упоминаемой переменной.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.Where(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Func{System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression})">
      <summary>Создает новое выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFilterExpression" />, фильтрующее элементы заданного входного набора с использованием заданного предиката.</summary>
      <returns>Новое выражение DbQuantifierExpression, представляющее операцию Any.</returns>
      <param name="source">Выражение, задающее входной набор.</param>
      <param name="predicate">Метод, представляющий предикат, который необходимо вычислить для каждого из элементов входного набора.Этот метод должен создавать выражение с результатом логического типа, реализующее логику предиката.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="source" /> или <paramref name="predicate" /> равно null.</exception>
      <exception cref="T:System.ArgumentNullException">Выражение, созданное <paramref name="predicate" />, имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Выражение, созданное <paramref name="predicate" />, не относится к логическому типу.</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions">
      <summary>Представляет API для создания объектов <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, которые вызывают канонические функции модели EDM, и предоставляет доступ к этому API как к методам расширения в самом типе выражения.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Abs(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию Abs с заданным аргументом, который должен иметь числовой тип результата.Тип результата выражения совпадает с типом результата <paramref name="value" />.</summary>
      <returns>Новое выражение DbFunctionExpression, возвращающее абсолютное значение <paramref name="value" />.</returns>
      <param name="value">Выражение, задающее числовое значение.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="value" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции Abs не принимает аргумент с типом результата <paramref name="value" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddDays(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию AddDays с заданными аргументами, которые должны иметь типы результатов DateTime или DateTimeOffset и целочисленный тип.Тип результата выражения совпадает с типом результата <paramref name="dateValue" />.</summary>
      <returns>Новое выражение DbFunctionExpression, которое добавляет количество дней, указанных в поле <paramref name="addValue" />, к значению, заданному в поле <paramref name="dateValue" />.</returns>
      <param name="dateValue">Выражение, задающее значение, к которому необходимо прибавить значение <paramref name="addValue" />.</param>
      <param name="addValue">Выражение, задающее число дней, прибавляемых к значению <paramref name="dateValue" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="dateValue" /> или <paramref name="addValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции AddDays не принимает аргументов с типами результата <paramref name="dateValue" /> и <paramref name="addValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddHours(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию AddHours с заданными аргументами, которые должны иметь типы результатов DateTime, DateTimeOffset или Time и целочисленный тип.Тип результата выражения совпадает с типом результата <paramref name="timeValue" />.</summary>
      <returns>Новое выражение DbFunctionExpression, которое добавляет количество часов, указанных в поле <paramref name="addValue" />, к значению, заданному в поле <paramref name="timeValue" />.</returns>
      <param name="timeValue">Выражение, задающее значение, к которому необходимо прибавить значение <paramref name="addValue" />.</param>
      <param name="addValue">Выражение, задающее число часов, прибавляемых к значению <paramref name="timeValue" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="timeValue" /> или <paramref name="addValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции AddHours не принимает аргументов с типами результата <paramref name="timeValue" /> и <paramref name="addValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMicroseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию AddMicroseconds с заданными аргументами, которые должны иметь типы результатов DateTime, DateTimeOffset или Time и целочисленный тип.Тип результата выражения совпадает с типом результата <paramref name="timeValue" />.</summary>
      <returns>Новое выражение DbFunctionExpression, которое добавляет количество микросекунд, указанных в поле <paramref name="addValue" />, к значению, заданному в поле <paramref name="timeValue" />.</returns>
      <param name="timeValue">Выражение, задающее значение, к которому необходимо прибавить значение <paramref name="addValue" />.</param>
      <param name="addValue">Выражение, задающее число микросекунд, прибавляемых к значению <paramref name="timeValue" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="timeValue" /> или <paramref name="addValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одно из переопределений канонической функции AddMicroseconds не принимает аргументы с типами результата <paramref name="timeValue" /> и <paramref name="addValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMilliseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию AddMilliseconds с заданными аргументами, которые должны иметь типы результатов DateTime, DateTimeOffset или Time и целочисленный тип.Тип результата выражения совпадает с типом результата <paramref name="timeValue" />.</summary>
      <returns>Новое выражение DbFunctionExpression, которое добавляет количество миллисекунд, указанных в поле <paramref name="addValue" />, к значению, заданному в поле <paramref name="timeValue" />.</returns>
      <param name="timeValue">Выражение, задающее значение, к которому необходимо прибавить значение <paramref name="addValue" />.</param>
      <param name="addValue">Выражение, задающее число миллисекунд, прибавляемых к значению <paramref name="timeValue" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="timeValue" /> или <paramref name="addValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одно из переопределений канонической функции AddMilliseconds не принимает аргументы с типами результата <paramref name="timeValue" /> и <paramref name="addValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMinutes(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию AddMinutes с заданными аргументами, которые должны иметь типы результатов DateTime, DateTimeOffset или Time и целочисленный тип.Тип результата выражения совпадает с типом результата <paramref name="timeValue" />.</summary>
      <returns>Новое выражение DbFunctionExpression, которое добавляет количество минут, указанных в поле <paramref name="addValue" />, к значению, заданному в поле <paramref name="timeValue" />.</returns>
      <param name="timeValue">Выражение, задающее значение, к которому необходимо прибавить значение <paramref name="addValue" />.</param>
      <param name="addValue">Выражение, задающее число минут, прибавляемых к значению <paramref name="timeValue" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="timeValue" /> или <paramref name="addValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции AddMinutes не принимает аргументов с типами результата <paramref name="timeValue" /> и <paramref name="addValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddMonths(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию AddMonths с заданными аргументами, которые должны иметь типы результатов DateTime или DateTimeOffset и целочисленный тип.Тип результата выражения совпадает с типом результата <paramref name="dateValue" />.</summary>
      <returns>Новое выражение DbFunctionExpression, которое добавляет количество месяцев, указанных в поле <paramref name="addValue" />, к значению, заданному в поле <paramref name="dateValue" />.</returns>
      <param name="dateValue">Выражение, задающее значение, к которому необходимо прибавить значение <paramref name="addValue" />.</param>
      <param name="addValue">Выражение, задающее число месяцев, прибавляемых к значению <paramref name="dateValue" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="dateValue" /> или <paramref name="addValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции AddMonths не принимает аргументов с типами результата <paramref name="dateValue" /> и <paramref name="addValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddNanoseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию AddNanoseconds с заданными аргументами, которые должны иметь типы результатов DateTime, DateTimeOffset или Time и целочисленный тип.Тип результата выражения совпадает с типом результата <paramref name="timeValue" />.</summary>
      <returns>Новое выражение DbFunctionExpression, которое добавляет количество наносекунд, указанных в поле <paramref name="addValue" />, к значению, заданному в поле <paramref name="timeValue" />.</returns>
      <param name="timeValue">Выражение, задающее значение, к которому необходимо прибавить значение <paramref name="addValue" />.</param>
      <param name="addValue">Выражение, задающее число наносекунд, прибавляемых к значению <paramref name="timeValue" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="timeValue" /> или <paramref name="addValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одно из переопределений канонической функции AddNanoseconds не принимает аргументы с типами результата <paramref name="timeValue" /> и <paramref name="addValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddSeconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию AddSeconds с заданными аргументами, которые должны иметь типы результатов DateTime, DateTimeOffset или Time и целочисленный тип.Тип результата выражения совпадает с типом результата <paramref name="timeValue" />.</summary>
      <returns>Новое выражение DbFunctionExpression, которое добавляет количество секунд, указанных в поле <paramref name="addValue" />, к значению, заданному в поле <paramref name="timeValue" />.</returns>
      <param name="timeValue">Выражение, задающее значение, к которому необходимо прибавить значение <paramref name="addValue" />.</param>
      <param name="addValue">Выражение, задающее число секунд, прибавляемых к значению <paramref name="timeValue" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="timeValue" /> или <paramref name="addValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции AddSeconds не принимает аргументов с типами результата <paramref name="timeValue" /> и <paramref name="addValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.AddYears(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию AddYears с заданными аргументами, которые должны иметь типы результатов DateTime или DateTimeOffset и целочисленный тип.Тип результата выражения совпадает с типом результата <paramref name="dateValue" />.</summary>
      <returns>Новое выражение DbFunctionExpression, которое добавляет количество лет, указанных в поле <paramref name="addValue" />, к значению, заданному в поле <paramref name="dateValue" />.</returns>
      <param name="dateValue">Выражение, задающее значение, к которому необходимо прибавить значение <paramref name="addValue" />.</param>
      <param name="addValue">Выражение, задающее число лет, прибавляемых к значению <paramref name="dateValue" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="dateValue" /> или <paramref name="addValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции AddYears не принимает аргументов с типами результата <paramref name="dateValue" /> и <paramref name="addValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Average(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию Avg для заданной коллекции.Тип результата выражения совпадает с типом элементов коллекции.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает среднее значение.</returns>
      <param name="collection">Выражение, задающее коллекцию, для которой должно быть вычислено среднее значение.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="collection" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции Avg не принимает аргумент с типом результата <paramref name="collection" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseAnd(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию BitwiseAnd с заданными аргументами, которые должны иметь одинаковый целочисленный тип результата.Тип результата выражения является тем же типом.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает значение, полученное при применении побитовой операции И к <paramref name="value1" /> и <paramref name="value2" />.</returns>
      <param name="value1">Выражение, задающее первый операнд.</param>
      <param name="value2">Выражение, задающее второй операнд.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="value1" /> или <paramref name="value2" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции BitwiseAnd не принимает аргументов с типами результата <paramref name="value1" /> и <paramref name="value2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseNot(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию BitwiseNot с заданным аргументом с целочисленным типом результата.Тип результата выражения является тем же типом.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает значение, полученное при применении побитовой операции НЕ к <paramref name="value" />.</returns>
      <param name="value">Выражение, задающее первый операнд.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="value" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции BitwiseNot не принимает аргументов с типами результата <paramref name="value" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseOr(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию BitwiseOr с заданными аргументами, которые должны иметь одинаковый целочисленный тип результата.Тип результата выражения является тем же типом.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает значение, полученное при применении побитовой операции ИЛИ к <paramref name="value1" /> и <paramref name="value2" />.</returns>
      <param name="value1">Выражение, задающее первый операнд.</param>
      <param name="value2">Выражение, задающее второй операнд.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="value1" /> или <paramref name="value2" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции BitwiseOr не принимает аргументов с типами результата <paramref name="value1" /> и <paramref name="value2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.BitwiseXor(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию BitwiseXor с заданными аргументами, которые должны иметь одинаковый целочисленный тип результата.Тип результата выражения является тем же типом.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает значение, полученное при применении побитовой операции ИСКЛЮЧАЮЩЕЕ ИЛИ к <paramref name="value1" /> и <paramref name="value2" />.</returns>
      <param name="value1">Выражение, задающее первый операнд.</param>
      <param name="value2">Выражение, задающее второй операнд.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="value1" /> или <paramref name="value2" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции BitwiseXor не принимает аргументов с типами результата <paramref name="value1" /> и <paramref name="value2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Ceiling(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию Ceiling с заданным аргументом, который должен иметь одинарный, двойной или десятичный тип результата.Тип результата выражения совпадает с типом результата <paramref name="value" />.</summary>
      <returns>Новое выражение DbFunctionExpression, возвращающее наименьшее целочисленное значение, которое не меньше <paramref name="value" />.</returns>
      <param name="value">Выражение, задающее числовое значение.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="value" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции Ceiling не принимает аргумент с типом результата <paramref name="value" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Concat(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию Concat с заданными аргументами, каждый из которых должен иметь строковый тип результата.Тип результата выражения — строка.</summary>
      <returns>Новое выражение DbFunctionExpression, создающее объединенную строку.</returns>
      <param name="string1">Выражение, задающее строку, которая должна оказаться первой в сцепленной результирующей строке.</param>
      <param name="string2">Выражение, задающее строку, которая должна оказаться второй в сцепленной результирующей строке.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="string1" /> или <paramref name="string2" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции Concat не принимает аргументов с типом результата <paramref name="string1" /> и <paramref name="string2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Contains(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию Contains с заданными аргументами, каждый из которых должен иметь строковый тип результата.Тип результата выражения — логический.</summary>
      <returns>Новое значение DbFunctionExpression, возвращающее логическое значение, указывающее, находится ли <paramref name="searchedForString" /> внутри экземпляра <paramref name="searchedString" />.</returns>
      <param name="searchedString">Выражение, задающее строку, в которой следует искать значение <paramref name="searchedForString" />.</param>
      <param name="searchedForString">Выражение, задающее строку, которую следует искать в строке <paramref name="searchedString" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="searchedString" /> или <paramref name="searchedForString" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции Contains не принимает аргументов с типом результата <paramref name="searchedString" /> и <paramref name="searchedForString" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Count(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию Count для заданной коллекции.Тип результата выражения — Edm.Int32.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает значение подсчета.</returns>
      <param name="collection">Выражение, задающее коллекцию, для которой должно быть вычислено значение.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="collection" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции Count не принимает аргумент с типом результата <paramref name="collection" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateDateTime(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию CreateDateTime с указанными аргументами.Аргумент <paramref name="second" /> должен иметь тип результата Edm.Double, а остальные аргументы должны иметь тип результата Edm.Int32.Тип результата выражения — Edm.DateTime.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает новый аргумент DateTime на основе указанных значений.</returns>
      <param name="year">Выражение, предоставляющее значение компонента года для нового экземпляра DateTime.</param>
      <param name="month">Выражение, предоставляющее значение компонента месяца для нового экземпляра DateTime.</param>
      <param name="day">Выражение, предоставляющее значение компонента дня для нового экземпляра DateTime.</param>
      <param name="hour">Выражение, предоставляющее значение компонента часа для нового экземпляра DateTime.</param>
      <param name="minute">Выражение, предоставляющее значение компонента минуты для нового экземпляра DateTime.</param>
      <param name="second">Выражение, предоставляющее значение компонента секунды для нового экземпляра DateTime.</param>
      <exception cref="T:System.ArgumentNullException">Значения параметров <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" />, <paramref name="second" /> равны null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции CreateDateTime не принимает аргументов с типами результата <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" /> и <paramref name="second" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateDateTimeOffset(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию CreateDateTimeOffset с указанными аргументами.Аргумент <paramref name="second" /> должен иметь тип результата Edm.Double, а остальные аргументы должны иметь тип результата Edm.Int32.Тип результата выражения — Edm.DateTimeOffset.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает новый аргумент DateTimeOffset на основе указанных значений.</returns>
      <param name="year">Выражение, представляющее значение компонента года для нового экземпляра DateTimeOffset.</param>
      <param name="month">Выражение, представляющее значение компонента месяца для нового экземпляра DateTimeOffset.</param>
      <param name="day">Выражение, представляющее значение компонента дня для нового экземпляра DateTimeOffset.</param>
      <param name="hour">Выражение, представляющее значение компонента часа для нового экземпляра DateTimeOffset.</param>
      <param name="minute">Выражение, представляющее значение компонента минут для нового экземпляра DateTimeOffset.</param>
      <param name="second">Выражение, представляющее значение компонента секунд для нового экземпляра DateTimeOffset.</param>
      <param name="timeZoneOffset">Выражение, представляющее число минут смещения часового пояса в качестве компонента значения для нового экземпляра DateTimeOffset.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" />, <paramref name="second" /> или <paramref name="timeZoneOffset" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции CreateDateTimeOffset не принимает аргументов с типом результата <paramref name="year" />, <paramref name="month" />, <paramref name="day" />, <paramref name="hour" />, <paramref name="minute" />, <paramref name="second" /> и <paramref name="timeZoneOffset" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CreateTime(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию CreateTime с указанными аргументами.Аргумент <paramref name="second" /> должен иметь тип результата Edm.Double, а остальные аргументы должны иметь тип результата Edm.Int32.Тип результата выражения — Edm.Time.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает новый аргумент Time на основе указанных значений.</returns>
      <param name="hour">Выражение, предоставляющее значение компонента часа для нового экземпляра DateTime.</param>
      <param name="minute">Выражение, предоставляющее значение компонента минуты для нового экземпляра DateTime.</param>
      <param name="second">Выражение, предоставляющее значение компонента секунды для нового экземпляра DateTime.</param>
      <exception cref="T:System.ArgumentNullException">Параметр <paramref name="hour" />, <paramref name="minute" /> или <paramref name="second" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Ни одно из переопределений канонической функции CreateTime не принимает аргументы с типом результата <paramref name="hour" />, <paramref name="minute" /> и <paramref name="second" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentDateTime">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию CurrentDateTime.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает текущую дату и время в виде экземпляра Edm.DateTime.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentDateTimeOffset">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию CurrentDateTimeOffset.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает текущую дату и время в виде экземпляра Edm.DateTimeOffset.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.CurrentUtcDateTime">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию CurrentUtcDateTime.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает текущую дату и время в формате UTC в виде экземпляра Edm.DateTime.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Day(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию Day с заданным аргументом, который должен иметь тип результата DateTime или DateTimeOffset.Тип результата выражения — Edm.Int32.</summary>
      <returns>Новое значение DbFunctionExpression, возвращающее целочисленное значение day из <paramref name="dateValue" />.</returns>
      <param name="dateValue">Выражение, задающее значение, из которого требуется извлечь значение дня.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="dateValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции Day не принимает аргументы с типом результата <paramref name="dateValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DayOfYear(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию DayOfYear с заданным аргументом, который должен иметь тип результата DateTime или DateTimeOffset.Тип результата выражения — Edm.Int32.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает целочисленное значение дня в году из <paramref name="dateValue" />.</returns>
      <param name="dateValue">Выражение, задающее значение, из которого требуется извлечь значение дня года.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="dateValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции DayOfYear не принимает аргументы с типом результата <paramref name="dateValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffDays(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию DiffDays с заданными аргументами, которые должны иметь тип результата DateTime или DateTimeOffset.Тип результата <paramref name="dateValue1" /> должен совпадать с типом результата <paramref name="dateValue2" />.Тип результата выражения — Edm.Int32.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает разницу в днях между <paramref name="dateValue1" /> и <paramref name="dateValue2" />.</returns>
      <param name="dateValue1">Выражение, задающее первое значение DateTime или DateTimeOffset.</param>
      <param name="dateValue2">Выражение, задающее значение DateTime или DateTimeOffset, для которого должна быть вычислена разница в днях со значением <paramref name="dateValue1" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="dateValue1" /> или <paramref name="dateValue2" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции DiffDays не принимает аргументов с типами результата <paramref name="dateValue1" /> и <paramref name="dateValue2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffHours(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию DiffHours с заданными аргументами, которые должны иметь тип результата DateTime, DateTimeOffset или Time.Тип результата <paramref name="timeValue1" /> должен совпадать с типом результата <paramref name="timeValue2" />.Тип результата выражения — Edm.Int32.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает разницу в часах между <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">Выражение, задающее первое значение DateTime, DateTimeOffset или Time.</param>
      <param name="timeValue2">Выражение, задающее значение DateTime, DateTimeOffset или Time, для которого должна быть вычислена разница в часах со значением <paramref name="timeValue1" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="timeValue1" /> или <paramref name="timeValue2" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции DiffHours не принимает аргументов с типами результата <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMicroseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию DiffMicroseconds с заданными аргументами, которые должны иметь тип результата DateTime, DateTimeOffset или Time.Тип результата <paramref name="timeValue1" /> должен совпадать с типом результата <paramref name="timeValue2" />.Тип результата выражения — Edm.Int32.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает разницу в микросекундах между <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">Выражение, задающее первое значение DateTime, DateTimeOffset или Time.</param>
      <param name="timeValue2">Выражение, задающее значение DateTime, DateTimeOffset или Time, для которого должна быть вычислена разница в микросекундах со значением <paramref name="timeValue1" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="timeValue1" /> или <paramref name="timeValue2" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одно из переопределений канонической функции DiffMicroseconds не принимает аргументы с типом результата <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMilliseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию DiffMilliseconds с заданными аргументами, которые должны иметь тип результата DateTime, DateTimeOffset или Time.Тип результата <paramref name="timeValue1" /> должен совпадать с типом результата <paramref name="timeValue2" />.Тип результата выражения — Edm.Int32.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает разницу в миллисекундах между <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">Выражение, задающее первое значение DateTime, DateTimeOffset или Time.</param>
      <param name="timeValue2">Выражение, задающее значение DateTime, DateTimeOffset или Time, для которого должна быть вычислена разница в миллисекундах со значением <paramref name="timeValue1" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="timeValue1" /> или <paramref name="timeValue2" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одно из переопределений канонической функции DiffMilliseconds не принимает аргументы с типом результата <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMinutes(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию DiffMinutes с заданными аргументами, которые должны иметь тип результата DateTime, DateTimeOffset или Time.Тип результата <paramref name="timeValue1" /> должен совпадать с типом результата <paramref name="timeValue2" />.Тип результата выражения — Edm.Int32.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает разницу в минутах между <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">Выражение, задающее первое значение DateTime, DateTimeOffset или Time.</param>
      <param name="timeValue2">Выражение, задающее значение DateTime, DateTimeOffset или Time, для которого должна быть вычислена разница в минутах со значением <paramref name="timeValue1" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="timeValue1" /> или <paramref name="timeValue2" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции DiffMinutes не принимает аргументов с типами результата <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffMonths(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию DiffMonths с заданными аргументами, которые должны иметь тип результата DateTime или DateTimeOffset.Тип результата <paramref name="dateValue1" /> должен совпадать с типом результата <paramref name="dateValue2" />.Тип результата выражения — Edm.Int32.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает разницу в месяцах между <paramref name="dateValue1" /> и <paramref name="dateValue2" />.</returns>
      <param name="dateValue1">Выражение, задающее первое значение DateTime или DateTimeOffset.</param>
      <param name="dateValue2">Выражение, задающее значение DateTime или DateTimeOffset, для которого должна быть вычислена разница в месяцах со значением <paramref name="dateValue1" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="dateValue1" /> или <paramref name="dateValue2" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции DiffMonths не принимает аргументов с типами результата <paramref name="dateValue1" /> и <paramref name="dateValue2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffNanoseconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию DiffNanoseconds с заданными аргументами, которые должны иметь тип результата DateTime, DateTimeOffset или Time.Тип результата <paramref name="timeValue1" /> должен совпадать с типом результата <paramref name="timeValue2" />.Тип результата выражения — Edm.Int32.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает разницу в наносекундах между <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">Выражение, задающее первое значение DateTime, DateTimeOffset или Time.</param>
      <param name="timeValue2">Выражение, задающее значение DateTime, DateTimeOffset или Time, для которого должна быть вычислена разница в наносекундах со значением <paramref name="timeValue1" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="timeValue1" /> или <paramref name="timeValue2" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одно из переопределений канонической функции DiffNanoseconds не принимает аргументы с типами результата <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffSeconds(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию DiffSeconds с заданными аргументами, которые должны иметь тип результата DateTime, DateTimeOffset или Time.Тип результата <paramref name="timeValue1" /> должен совпадать с типом результата <paramref name="timeValue2" />.Тип результата выражения — Edm.Int32.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает разницу в секундах между <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</returns>
      <param name="timeValue1">Выражение, задающее первое значение DateTime, DateTimeOffset или Time.</param>
      <param name="timeValue2">Выражение, задающее значение DateTime, DateTimeOffset или Time, для которого должна быть вычислена разница в секундах со значением <paramref name="timeValue1" />. </param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="timeValue1" /> или <paramref name="timeValue2" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции DiffSeconds не принимает аргументов с типами результата <paramref name="timeValue1" /> и <paramref name="timeValue2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.DiffYears(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию DiffYears с заданными аргументами, которые должны иметь тип результата DateTime или DateTimeOffset.Тип результата <paramref name="dateValue1" /> должен совпадать с типом результата <paramref name="dateValue2" />.Тип результата выражения — Edm.Int32.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает разницу в годах между <paramref name="dateValue1" /> и <paramref name="dateValue2" />.</returns>
      <param name="dateValue1">Выражение, задающее первое значение DateTime или DateTimeOffset.</param>
      <param name="dateValue2">Выражение, задающее значение DateTime или DateTimeOffset, для которого должна быть вычислена разница в годах со значением <paramref name="dateValue1" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="dateValue1" /> или <paramref name="dateValue2" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции DiffYears не принимает аргументов с типами результата <paramref name="dateValue1" /> и <paramref name="dateValue2" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.EndsWith(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию EndsWith с заданными аргументами, каждый из которых должен иметь строковый тип результата.Тип результата выражения — логический.</summary>
      <returns>Новое выражение DbFunctionExpression, которое указывает, оканчивается ли <paramref name="stringArgument" /> на <paramref name="suffix" />.</returns>
      <param name="stringArgument">Выражение, задающее строку, в которой следует искать заданное значение <paramref name="suffix" />.</param>
      <param name="suffix">Выражение, указывающее суффикс, для которого следует проверить <paramref name="stringArgument" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="stringArgument" /> или <paramref name="suffix" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции EndsWith не принимает аргументов с типами результата <paramref name="stringArgument" /> и <paramref name="suffix" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Floor(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию Floor с заданным аргументом, который должен иметь одинарный, двойной или десятичный тип результата.Тип результата выражения совпадает с типом результата <paramref name="value" />.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает наибольшее целое значение, не превышающее <paramref name="value" />.</returns>
      <param name="value">Выражение, задающее числовое значение.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="value" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции Floor не принимает аргумент с типом результата <paramref name="value" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.GetTotalOffsetMinutes(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию GetTotalOffsetMinutes с заданным аргументом, который должен иметь тип результата DateTimeOffset.Тип результата выражения — Edm.Int32.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает смещение <paramref name="dateTimeOffsetArgument" /> от GMT в минутах.</returns>
      <param name="dateTimeOffsetArgument">Выражение, задающее значение DateTimeOffset, из которого требуется извлечь смещение в минутах относительно времени по Гринвичу (GMT).</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="dateTimeOffsetArgument" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции GetTotalOffsetMinutes не принимает аргумента с типом результата <paramref name="dateTimeOffsetArgument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Hour(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию Hour с заданным аргументом, который должен иметь тип результата DateTime, DateTimeOffset или Time.Тип результата выражения — Edm.Int32.</summary>
      <returns>Новое значение DbFunctionExpression, возвращающее целочисленное значение hour из <paramref name="timeValue" />.</returns>
      <param name="timeValue">Выражение, задающее значение, из которого требуется извлечь значение часа.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="timeValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции Hours не принимает аргументы с типом результата <paramref name="timeValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.IndexOf(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию IndexOf с заданными аргументами, каждый из которых должен иметь строковый тип результата.Тип результата выражения — Edm.Int32.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает первый индекс <paramref name="stringToFind" /> в <paramref name="searchString" />.</returns>
      <param name="searchString">Выражение, задающее строку, которую следует искать в строке <paramref name="stringToFind" />.</param>
      <param name="stringToFind">Выражение, задающее строку, которую требуется обнаружить в строке <paramref name="searchString" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="searchString" /> или <paramref name="stringToFind" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции IndexOf не принимает аргументов с типами результата <paramref name="searchString" /> и <paramref name="stringToFind" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Left(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию Left с заданными аргументами, которые должны иметь строковый и целочисленный типы результатов.Тип результата выражения — строка.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает крайнюю левую подстроку длиной <paramref name="length" /> из <paramref name="stringArgument" />.</returns>
      <param name="stringArgument">Выражение, задающее строку, из которой требуется извлечь крайнюю левую подстроку.</param>
      <param name="length">Выражение, задающее длину крайней левой подстроки, которую требуется извлечь из <paramref name="stringArgument" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="stringArgument" /> или <paramref name="length" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции Left не принимает аргументы с типом результата <paramref name="stringArgument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Length(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию Length с заданным аргументом, который должен иметь строковый тип результата.Тип результата выражения также является строкой.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает длину <paramref name="stringArgument" />.</returns>
      <param name="stringArgument">Выражение, задающее строку, длину которой следует вычислить.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="stringArgument" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции Length не принимает аргумент с типом результата <paramref name="stringArgument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.LongCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию BigCount для заданной коллекции.Тип результата выражения — Edm.Int64.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает значение подсчета.</returns>
      <param name="collection">Выражение, задающее коллекцию, для которой должно быть вычислено значение.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="collection" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции BigCount не принимает аргумента с типом результата <paramref name="collection" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Max(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию Max для заданной коллекции.Тип результата выражения совпадает с типом элементов коллекции.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает максимальное значение.</returns>
      <param name="collection">Выражение, задающее коллекцию, для которой должно быть найдено максимальное значение.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="collection" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции Max не принимает аргумент с типом результата <paramref name="collection" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Millisecond(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию Millisecond с заданным аргументом, который должен иметь тип результата DateTime, DateTimeOffset или Time.Тип результата выражения — Edm.Int32.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает целочисленное значение миллисекунд из <paramref name="timeValue" />.</returns>
      <param name="timeValue">Выражение, задающее значение, из которого требуется извлечь значение миллисекунд.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="timeValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции Millisecond не принимает аргумента с типом результата <paramref name="timeValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Min(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию Min для заданной коллекции.Тип результата выражения совпадает с типом элементов коллекции.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает минимальное значение.</returns>
      <param name="collection">Выражение, задающее коллекцию, для которой должно быть найдено минимальное значение.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="collection" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции Min не принимает аргумент с типом результата <paramref name="collection" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Minute(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию Minute с заданным аргументом, который должен иметь тип результата DateTime, DateTimeOffset или Time.Тип результата выражения — Edm.Int32.</summary>
      <returns>Новое значение DbFunctionExpression, возвращающее целочисленное значение minute из <paramref name="timeValue" />.</returns>
      <param name="timeValue">Выражение, задающее значение, из которого требуется извлечь значение минут.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="timeValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции Minute не принимает аргумент с типом результата <paramref name="timeValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Month(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию Month с заданным аргументом, который должен иметь тип результата DateTime или DateTimeOffset.Тип результата выражения — Edm.Int32.</summary>
      <returns>Новое значение DbFunctionExpression, возвращающее целочисленное значение month из <paramref name="dateValue" />.</returns>
      <param name="dateValue">Выражение, задающее значение, из которого требуется извлечь значение месяца.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="dateValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции Month не принимает аргумент с типом результата <paramref name="dateValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.NewGuid">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию NewGuid.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает новое значение идентификатора GUID.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Power(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию Power с заданными аргументами, которые должны иметь числовые типы результатов.Тип результата выражения совпадает с типом результата <paramref name="baseArgument" />.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает значение <paramref name="baseArgument" />, возведенное в степень, заданную аргументом <paramref name="exponent" />.</returns>
      <param name="baseArgument">Выражение, задающее числовое значение, которое требуется возвести в заданную степень.</param>
      <param name="exponent">Выражение, задающее степень, в которую требуется возвести значение <paramref name="baseArgument" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="baseArgument" /> или <paramref name="exponent" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции Power не принимает аргументов с типами результата <paramref name="baseArgument" /> и <paramref name="exponent" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Replace(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию Replace с заданными аргументами, каждый из которых должен иметь строковый тип результата.Тип результата выражения также является строкой.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает новую строку на основе <paramref name="stringArgument" />, в которой каждое вхождение <paramref name="toReplace" /> заменяется на <paramref name="replacement" />.</returns>
      <param name="stringArgument">Выражение, задающее строку, в которой требуется выполнить операцию замены.</param>
      <param name="toReplace">Выражение, задающее строку, которую требуется заменить.</param>
      <param name="replacement">Выражение, задающее заменяющую строку.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" />, <paramref name="toReplace" /> или <paramref name="replacement" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции Replace не принимает аргументов с типами результата <paramref name="stringArgument" />, <paramref name="toReplace" /> и <paramref name="replacement" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Reverse(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию Reverse с заданным аргументом, который должен иметь строковый тип результата.Тип результата выражения также является строкой.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает обратное значение <paramref name="stringArgument" />.</returns>
      <param name="stringArgument">Выражение, задающее строку, порядок элементов которой нужно изменить на обратный.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="stringArgument" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции Reverse не принимает аргумент с типом результата <paramref name="stringArgument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Right(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию Right с заданными аргументами, которые должны иметь строковый и целочисленный типы результатов.Тип результата выражения — строка.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает крайнюю правую подстроку длиной <paramref name="length" /> из <paramref name="stringArgument" />.</returns>
      <param name="stringArgument">Выражение, задающее строку, из которой требуется извлечь крайнюю правую подстроку.</param>
      <param name="length">Выражение, задающее длину крайней правой подстроки, которую требуется извлечь из <paramref name="stringArgument" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="stringArgument" /> или <paramref name="length" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции Right не принимает аргумент с типом результата <paramref name="stringArgument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Round(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию Round с заданным аргументом, который должен иметь одинарный, двойной или десятичный тип результата.Тип результата выражения совпадает с типом результата <paramref name="value" />.</summary>
      <returns>Новое выражение DbFunctionExpression, которое округляет указанный аргумент до ближайшего целочисленного значения.</returns>
      <param name="value">Выражение, задающее числовое значение, которое требуется округлить.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="value" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции Round не принимает аргумент с типом результата <paramref name="value" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Round(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию Round с заданными аргументами, которые должны иметь одинарный, двойной или десятичный типы результатов.Тип результата выражения совпадает с типом результата <paramref name="value" />.</summary>
      <returns>Новое выражение DbFunctionExpression, которое округляет указанный аргумент до ближайшего целочисленного значения с точностью, указанной аргументом <paramref name="digits" />.</returns>
      <param name="value">Выражение, задающее числовое значение, которое требуется округлить.</param>
      <param name="digits">Выражение, задающее количество разрядов точности для округления.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="value" /> или <paramref name="digits" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции Round не принимает аргументов с типами результата <paramref name="value" /> и <paramref name="digits" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Second(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию Second с заданным аргументом, который должны иметь тип результата DateTime, DateTimeOffset или Time.Тип результата выражения — Edm.Int32.</summary>
      <returns>Новое значение DbFunctionExpression, возвращающее целочисленное значение second из <paramref name="timeValue" />.</returns>
      <param name="timeValue">Выражение, задающее значение, из которого требуется извлечь значение секунд.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="timeValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции Second не принимает аргумент с типом результата <paramref name="timeValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StartsWith(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию StartsWith с заданными аргументами, каждый из которых должен иметь строковый тип результата.Тип результата выражения — логический.</summary>
      <returns>Новое выражение DbFunctionExpression, которое указывает, начинается ли <paramref name="stringArgument" /> на <paramref name="prefix" />.</returns>
      <param name="stringArgument">Выражение, задающее строку, в которой следует искать заданное значение <paramref name="prefix" />.</param>
      <param name="prefix">Выражение, указывающее префикс, для которого следует проверить <paramref name="stringArgument" />.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="stringArgument" /> или <paramref name="prefix" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции StartsWith не принимает аргументов с типами результата <paramref name="stringArgument" /> и <paramref name="prefix" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDev(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию StDev для непустых элементов заданной коллекции.Тип результата выражения — Edm.Double.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает стандартное отклонение для ненулевых элементов коллекции.</returns>
      <param name="collection">Выражение, задающее коллекцию, для которой должно быть вычислено стандартное отклонение.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="collection" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции StDev не принимает аргумент с типом результата <paramref name="collection" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.StDevP(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию StDevP для заполнения заданной коллекции.Тип результата выражения — Edm.Double.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает стандартное отклонение.</returns>
      <param name="collection">Выражение, задающее коллекцию, для которой должно быть вычислено стандартное отклонение.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="collection" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции StDevP не принимает аргумент с типом результата <paramref name="collection" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Substring(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию Substring с заданными аргументами, которые должны иметь строковый и целочисленный типы результатов.Тип результата выражения — строка.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает крайнюю левую подстроку длиной <paramref name="length" /> из <paramref name="stringArgument" />, начиная с <paramref name="start" />.</returns>
      <param name="stringArgument">Выражение, задающее строку, из которой требуется извлечь подстроку.</param>
      <param name="start">Выражение, задающее индекс начала подстроки.</param>
      <param name="length">Выражение, задающее длину подстроки.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="stringArgument" />, <paramref name="start" /> или <paramref name="length" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции Substring не принимает аргументов с типами результата <paramref name="stringArgument" />, <paramref name="start" /> и <paramref name="length" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Sum(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию Sum для заданной коллекции.Тип результата выражения совпадает с типом элементов коллекции.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает сумму.</returns>
      <param name="collection">Выражение, задающее коллекцию, для которой должна быть вычислена сумма.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="collection" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции Sum не принимает аргумент с типом результата <paramref name="collection" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToLower(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию ToLower с заданным аргументом, который должен иметь строковый тип результата.Тип результата выражения также является строкой.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает значение строки <paramref name="stringArgument" />, в которой все символы преобразованы в символы нижнего регистра.</returns>
      <param name="stringArgument">Выражение, задающее строку, которую требуется перевести в нижний регистр.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="stringArgument" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции ToLower не принимает аргумент с типом результата <paramref name="stringArgument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.ToUpper(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию ToUpper с заданным аргументом, который должен иметь строковый тип результата.Тип результата выражения также является строкой.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает значение строки <paramref name="stringArgument" />, в которой все символы преобразованы в символы верхнего регистра.</returns>
      <param name="stringArgument">Выражение, задающее строку, которую требуется перевести в верхний регистр.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="stringArgument" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции ToUpper не принимает аргумент с типом результата <paramref name="stringArgument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Trim(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию Trim с заданным аргументом, который должен иметь строковый тип результата.Тип результата выражения также является строкой.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает строку <paramref name="stringArgument" />, из которой удалены начальные и конечные пробелы.</returns>
      <param name="stringArgument">Выражение, задающее строку, у которой должны быть удалены начальный и конечный пробелы.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="stringArgument" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции Trim не принимает аргумент с типом результата <paramref name="stringArgument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimEnd(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию RTrim с заданным аргументом, который должен иметь строковый тип результата.Тип результата выражения также является строкой.</summary>
      <returns>Новое выражение DbFunctionExpression, возвращающее строку <paramref name="stringArgument" />, из которой удалены конечные пробелы.</returns>
      <param name="stringArgument">Выражение, задающее строку, у которой должен быть удален конечный пробел.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="stringArgument" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции RTrim не принимает аргумент с типом результата <paramref name="stringArgument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TrimStart(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию LTrim с заданным аргументом, который должен иметь строковый тип результата.Тип результата выражения также является строкой.</summary>
      <returns>Новое выражение DbFunctionExpression, возвращающее строку <paramref name="stringArgument" />, из которой удалены начальные пробелы.</returns>
      <param name="stringArgument">Выражение, задающее строку, у которой должен быть удален начальный пробел.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="stringArgument" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции LTrim не принимает аргумент с типом результата <paramref name="stringArgument" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Truncate(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию Truncate с заданными аргументами, которые должны иметь одинарный, двойной или десятичный типы результатов.Тип результата выражения совпадает с типом результата <paramref name="value" />.</summary>
      <returns>Новое выражение DbFunctionExpression, которое усекает указанный аргумент до ближайшего целочисленного значения с точностью, указанной аргументом <paramref name="digits" />.</returns>
      <param name="value">Выражение, задающее числовое значение, которое требуется усечь.</param>
      <param name="digits">Выражение, задающее количество разрядов точности для усечения.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="value" /> или <paramref name="digits" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одно из переопределений канонической функции Truncate не принимает аргументы с типами результата <paramref name="value" /> и <paramref name="digits" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.TruncateTime(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию TruncateTime с заданным аргументом, который должен иметь тип результата DateTime, DateTimeOffset или Time.Тип результата выражения совпадает с типом результата <paramref name="dateValue" />.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает значение <paramref name="dateValue" /> со временем, равным нулю.</returns>
      <param name="dateValue">Выражение, задающее значение, для которого должен быть усечен компонент времени.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="dateValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции TruncateTime не принимает аргумента с типом результата <paramref name="dateValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Var(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию Var для непустых элементов заданной коллекции.Тип результата выражения — Edm.Double.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает значение статистической дисперсии для ненулевых элементов коллекции.</returns>
      <param name="collection">Выражение, задающее коллекцию, для которой должна быть вычислена статистическая дисперсия.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="collection" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции Var не принимает аргумент с типом результата <paramref name="collection" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.VarP(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию VarP для заполнения заданной коллекции.Тип результата выражения — Edm.Double.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает значение статистической дисперсии.</returns>
      <param name="collection">Выражение, задающее коллекцию, для которой должна быть вычислена статистическая дисперсия.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="collection" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции VarP не принимает аргумент с типом результата <paramref name="collection" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.EdmFunctions.Year(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию Year с заданным аргументом, который должен иметь тип результата DateTime или DateTimeOffset.Тип результата выражения — Edm.Int32.</summary>
      <returns>Новое значение DbFunctionExpression, возвращающее целочисленное значение year из <paramref name=" dateValue" />.</returns>
      <param name="dateValue">Выражение, задающее значение, из которого требуется извлечь значение года.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="dateValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Ни одна из перегрузок канонической функции Year не принимает аргумент с типом результата <paramref name="dateValue" />.</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row">
      <summary>Представляет класс Row, предназначенный для использования подобных конструктору средств вызова &lt;see cref="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.DbExpressionBuilder.NewRow(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}})" /&gt;.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row.#ctor(System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression},System.Collections.Generic.KeyValuePair{System.String,System.Data.Entity.Core.Common.CommandTrees.DbExpression}[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row" /> с применением указанного первого значения столбца и необязательных последующих значений столбца </summary>
      <param name="columnValue">Пара «ключ-значение», которая предоставляет первый столбец в новом экземпляре строки (обязательный аргумент).</param>
      <param name="columnValues">Пары «ключ-значение», которые предоставляют все последующие столбцы в новом экземпляре строки (необязательный аргумент).</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row.op_Implicit(System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row)~System.Data.Entity.Core.Common.CommandTrees.DbExpression">
      <summary>Преобразовывает объект Row в <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" /> представляет преобразованный объект Row.</returns>
      <param name="row">Объектом является строка.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Row.ToExpression">
      <summary>Создает новый объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbNewInstanceExpression" />, который конструирует новую строку на основе столбцов, содержащихся в этом экземпляре Row.</summary>
      <returns>Новое выражение DbNewInstanceExpression, которое создает строку с теми же именами столбцов и значениями DbExpression, как и в этом экземпляре Row.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions">
      <summary>Предоставляет API для конструирования <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, которые вызывают канонические пространственные функции модели EDM, а также при необходимости обеспечивает доступ к этому API как к методам расширения в самом типе выражения.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Area(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «Area» с заданным аргументом, который должен иметь тип результата Edm.Geography или Edm.Geometry.Тип результата выражения — Edm.Double.</summary>
      <returns>Новое значение DbFunctionExpression, возвращающее область spatialValue, либо значение NULL, если spatialValue не является поверхностью.</returns>
      <param name="spatialValue">Выражение, определяющее значение пространственной поверхности, для которой необходим расчет области.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «AsBinary» с заданным аргументом, который должен иметь тип результата Edm.Geography или Edm.Geometry.Тип результата выражения — Edm.Binary.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает представление spatialValue в известном двоичном формате.</returns>
      <param name="spatialValue">Выражение, определяющее пространственное значение, от которого производится известное двоичное представление.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «AsGml» с заданным аргументом, который должен иметь тип результата Edm.Geography или Edm.Geometry.Тип результата выражения — Edm.String.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает представление spatialValue в коде языка GML.</returns>
      <param name="spatialValue">Выражение, определяющее пространственное значение, из которого производится представление на языке GML.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.AsText(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «AsText» с заданным аргументом, который должен иметь тип результата Edm.Geography или Edm.Geometry.Тип результата выражения — Edm.String.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает представление spatialValue в известном формате.</returns>
      <param name="spatialValue">Выражение, определяющее пространственное значение, от которого производится известное текстовое представление.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Centroid(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию Centroid с заданным аргументом с типом результата Edm.Geometry.Тип результата выражения — Edm.Geometry.</summary>
      <returns>Новое значение DbFunctionExpression, возвращающее либо точку центроида geometryValue (которая не может находиться на самой поверхности), либо значение NULL, если geometryValue не является поверхностью.</returns>
      <param name="geometryValue">Выражение, определяющее значение геометрической поверхности, из которой должен быть получен центроид.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.CoordinateSystemId(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «CoordinateSystemId» с заданным аргументом, который должен иметь тип результата Edm.Geography или Edm.Geometry.Тип результата выражения — Edm.Int32.</summary>
      <returns>Новое значение DbFunctionExpression, возвращающее целочисленное значение SRID из spatialValue.</returns>
      <param name="spatialValue">Выражение, определяющее значение, из которого должен быть получен идентификатор системы координат (SRID).</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Distance(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «Distance» с заданными аргументами, каждый из которых должен иметь тип результата Edm.Geography или Edm.Geometry.Тип результата spatialValue1 должен соответствовать типу результата spatialValue2.Тип результата выражения — Edm.Double.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает расстояние между ближайшими точками в spatialValue1 и spatialValue1.</returns>
      <param name="spatialValue1">Выражение, задающее первое пространственное значение.</param>
      <param name="spatialValue2">Выражение, определяющее пространственное значение, от которого должно измеряться расстояние от spatialValue1.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Elevation(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «Elevation» с заданным аргументом, который должен иметь тип результата Edm.Geography или Edm.Geometry.Тип результата выражения — Edm.Double.</summary>
      <returns>Новое значение DbFunctionExpression, возвращающее либо значение высоты spatialValue, либо значение NULL, если spatialValue не является точкой.</returns>
      <param name="spatialValue">Выражение, определяющее пространственное значение точки, из которой должно быть получено значение Z (высота).</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.EndPoint(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «EndPoint» с заданным аргументом, который должен иметь тип результата Edm.Geography или Edm.Geometry.Тип результата тот же, что и у spatialValue.</summary>
      <returns>Новое значение DbFunctionExpression, возвращающее либо конечную точку spatialValue, либо значение NULL, если spatialValue не является кривой.</returns>
      <param name="spatialValue">Выражение, определяющее значение пространственной кривой, по которому должна быть получена конечная точка.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.ExteriorRing(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «ExteriorRing» с заданным аргументом с типом результата Edm.Geometry.Тип результата выражения — Edm.Geometry.</summary>
      <returns>Новое значение DbFunctionExpression, возвращающее либо внешнее кольцо полигона geometryValue, либо значение NULL, если geometryValue не является элементом polygon.</returns>
      <param name="geometryValue">Значение типа geometry.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyCollectionFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, которое вызывает каноническую функцию GeographyCollectionFromBinary с указанными аргументами.Аргумент geographyCollectionWellKnownBinaryValue должен иметь двоичный тип результата, а coordinateSystemId должен иметь целочисленный тип результата.Тип результата выражения — Edm.Geography.</summary>
      <returns>Новое значение DbFunctionExpression, которое возвращает новое значение коллекции значений geography на основе указанных значений.</returns>
      <param name="geographyCollectionWellKnownBinaryValue">Выражение, предоставляющее известное двоичное представление значения коллекции значений geography.</param>
      <param name="coordinateSystemId">Выражение, предоставляющее идентификатор системы координат (SRID) значения коллекции значений geography.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyCollectionFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, которое вызывает каноническую функцию GeographyCollectionFromText с указанными аргументами.Аргумент geographyCollectionWellKnownText должен иметь строковый тип результата, а coordinateSystemId должен иметь целочисленный тип результата.Тип результата выражения — Edm.Geography.</summary>
      <returns>Новое значение DbFunctionExpression, которое возвращает новое значение коллекции значений geography на основе указанных значений.</returns>
      <param name="geographyCollectionWellKnownText">Выражение, предоставляющее известное текстовое представление значения коллекции значений geography.</param>
      <param name="coordinateSystemId">Выражение, предоставляющее идентификатор системы координат (SRID) значения коллекции значений geography.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «GeographyFromBinary» с заданным аргументом, который должен иметь двоичный тип результата.Тип результата выражения — Edm.Geography.</summary>
      <returns>Новое значение DbFunctionExpression, возвращающее новое значение типа geography на основе указанного двоичного значения.</returns>
      <param name="wellKnownBinaryValue">Выражение, предоставляющее известное двоичное представление значения типа geography.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, которое вызывает каноническую функцию GeographyFromBinary с указанными аргументами.Значение wellKnownBinaryValue должно иметь двоичный тип результата, а значение coordinateSystemId — целочисленный тип результата.Тип результата выражения — Edm.Geography.</summary>
      <returns>Новое значение DbFunctionExpression, которое возвращает новое значение типа geography на основе указанных значений.</returns>
      <param name="wellKnownBinaryValue">Выражение, предоставляющее известное двоичное представление значения типа geography.</param>
      <param name="coordinateSystemId">Выражение, предоставляющее идентификатор системы координат (SRID) значения типа geography.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «GeographyFromGml» с заданным аргументом, который должен иметь строковый тип результата.Тип результата выражения — Edm.Geography.</summary>
      <returns>Новое значение DbFunctionExpression, возвращающее новое значение типа geography на основе указанного значения с идентификатором системы координат (SRID) по умолчанию для базового поставщика.</returns>
      <param name="geographyMarkup">Выражение, которое содержит представление значения типа geography на языке GML.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, которое вызывает каноническую функцию GeographyFromGml с указанными аргументами.Значение geographyMarkup должно иметь строковый тип результата, а значение coordinateSystemId — целочисленный тип результата.Тип результата выражения — Edm.Geography.</summary>
      <returns>Новое значение DbFunctionExpression, которое возвращает новое значение типа geography на основе указанных значений.</returns>
      <param name="geographyMarkup">Выражение, которое содержит представление значения типа geography на языке GML.</param>
      <param name="coordinateSystemId">Выражение, предоставляющее идентификатор системы координат (SRID) значения типа geography.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «GeographyFromText» с заданным аргументом, который должен иметь строковый тип результата.Тип результата выражения — Edm.Geography.Это значение имеет идентификатор системы координат (SRID) по умолчанию базового поставщика.</summary>
      <returns>Новое значение DbFunctionExpression, которое возвращает новое значение типа geography на основе указанного значения.</returns>
      <param name="wellKnownText">Выражение, предоставляющее известное текстовое представление значения типа geography.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, которое вызывает каноническую функцию GeographyFromText с указанными аргументами.Аргумент wellKnownText должен иметь строковый тип результата, а coordinateSystemId должен иметь целочисленный тип результата.Тип результата выражения — Edm.Geography.</summary>
      <returns>Новое значение DbFunctionExpression, которое возвращает новое значение типа geography на основе указанных значений.</returns>
      <param name="wellKnownText">Выражение, предоставляющее известное текстовое представление значения типа geography.</param>
      <param name="coordinateSystemId">Выражение, предоставляющее идентификатор системы координат (SRID) значения типа geography.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyLineFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, которое вызывает каноническую функцию GeographyLineFromBinary с указанными аргументами.Значение lineWellKnownBinaryValue должно иметь двоичный тип результата, а значение coordinateSystemId — целочисленный тип результата.Тип результата выражения — Edm.Geography.</summary>
      <returns>Новое значение DbFunctionExpression, которое возвращает новое значение линии типа geography на основе указанных значений.</returns>
      <param name="lineWellKnownBinaryValue">Выражение, предоставляющее известное двоичное представление значения линии типа geography.</param>
      <param name="coordinateSystemId">Выражение, предоставляющее идентификатор системы координат (SRID) значения линии типа geography.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyLineFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, которое вызывает каноническую функцию GeographyLineFromText с указанными аргументами.Аргумент lineWellKnownText должен иметь строковый тип результата, а coordinateSystemId — целочисленный тип результата.Тип результата выражения — Edm.Geography.</summary>
      <returns>Новое значение DbFunctionExpression, которое возвращает новое значение линии типа geography на основе указанных значений.</returns>
      <param name="lineWellKnownText">Выражение, предоставляющее известное текстовое представление значения линии типа geography.</param>
      <param name="coordinateSystemId">Выражение, предоставляющее идентификатор системы координат (SRID) значения линии типа geography.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiLineFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, которое вызывает каноническую функцию GeographyMultiLineFromBinary с указанными аргументами.Значение multiLineWellKnownBinaryValue должно иметь двоичный тип результата, а значение coordinateSystemId — целочисленный тип результата.Тип результата выражения — Edm.Geography.</summary>
      <returns>Новое значение DbFunctionExpression, которое возвращает новое значение мульти-ломаной типа geography на основе указанных значений.</returns>
      <param name="multiLineWellKnownBinaryValue">Выражение, предоставляющее известное двоичное представление значения мульти-ломаной типа geography.</param>
      <param name="coordinateSystemId">Выражение, предоставляющее идентификатор системы координат (SRID) значения мульти-ломаной типа geography.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiLineFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, которое вызывает каноническую функцию GeographyMultiLineFromText с указанными аргументами.Аргумент multiLineWellKnownText должен иметь строковый тип результата, а coordinateSystemId — целочисленный тип результата.Тип результата выражения — Edm.Geography.</summary>
      <returns>Новое значение DbFunctionExpression, которое возвращает новое значение мульти-ломаной типа geography на основе указанных значений.</returns>
      <param name="multiLineWellKnownText">Выражение, предоставляющее известное текстовое представление значения мульти-ломаной типа geography.</param>
      <param name="coordinateSystemId">Выражение, предоставляющее идентификатор системы координат (SRID) значения мульти-ломаной типа geography.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPointFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, которое вызывает каноническую функцию GeographyMultiPointFromBinary с указанными аргументами.Значение multiPointWellKnownBinaryValue должно иметь двоичный тип результата, а значение coordinateSystemId — целочисленный тип результата.Тип результата выражения — Edm.Geography.</summary>
      <returns>Новое значение DbFunctionExpression, которое возвращает новое мультиточечное значение типа geography на основе указанных значений.</returns>
      <param name="multiPointWellKnownBinaryValue">Выражение, предоставляющее известное двоичное представление мультиточечного значения типа geography.</param>
      <param name="coordinateSystemId">Выражение, предоставляющее идентификатор системы координат (SRID) мультиточечного значения типа geography.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPointFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, которое вызывает каноническую функцию GeographyMultiPointFromText с указанными аргументами.Аргумент multiPointWellKnownText должен иметь строковый тип результата, а coordinateSystemId — целочисленный тип результата.Тип результата выражения — Edm.Geography.</summary>
      <returns>Новое значение DbFunctionExpression, которое возвращает новое мультиточечное значение типа geography на основе указанных значений.</returns>
      <param name="multiPointWellKnownText">Выражение, предоставляющее известное текстовое представление мультиточечного значения типа geography.</param>
      <param name="coordinateSystemId">Выражение, предоставляющее идентификатор системы координат (SRID) мультиточечного значения типа geography.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPolygonFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, которое вызывает каноническую функцию GeographyMultiPolygonFromBinary с указанными аргументами.Значение multiPolygonWellKnownBinaryValue должно иметь двоичный тип результата, а значение coordinateSystemId — целочисленный тип результата.Тип результата выражения — Edm.Geography.</summary>
      <returns>Новое значение DbFunctionExpression, которое возвращает новое значение multi-polygon типа geography на основе указанных значений.</returns>
      <param name="multiPolygonWellKnownBinaryValue">Выражение, предоставляющее известное двоичное представление значения multi-polygon типа geography.</param>
      <param name="coordinateSystemId">Выражение, предоставляющее идентификатор системы координат (SRID) значения multi-polygon типа geography.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyMultiPolygonFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, которое вызывает каноническую функцию GeographyMultiPolygonFromText с указанными аргументами.Аргумент multiPolygonWellKnownText должен иметь строковый тип результата, а coordinateSystemId — целочисленный тип результата.Тип результата выражения — Edm.Geography.</summary>
      <returns>Новое значение DbFunctionExpression, которое возвращает новое значение multi-polygon типа geography на основе указанных значений.</returns>
      <param name="multiPolygonWellKnownText">Выражение, предоставляющее известное текстовое представление значения multi-polygon типа geography.</param>
      <param name="coordinateSystemId">Выражение, предоставляющее идентификатор системы координат (SRID) значения multi-polygon типа geography.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPointFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, которое вызывает каноническую функцию GeographyPointFromBinary с указанными аргументами.Значение pointWellKnownBinaryValue должно иметь двоичный тип результата, а значение coordinateSystemId — целочисленный тип результата.Тип результата выражения — Edm.Geography.</summary>
      <returns>Новое значение DbFunctionExpression, которое возвращает новое значение точки типа geography на основе указанных значений.</returns>
      <param name="pointWellKnownBinaryValue">Выражение, предоставляющее известное двоичное представление значения точки типа geography.</param>
      <param name="coordinateSystemId">Выражение, предоставляющее идентификатор системы координат (SRID) systempointWellKnownBinaryValue значения точки типа geography.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPointFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, которое вызывает каноническую функцию GeographyPointFromText с указанными аргументами.</summary>
      <returns>Каноническая функция GeographyPointFromText.</returns>
      <param name="pointWellKnownText">Выражение, предоставляющее известное текстовое представление значения точки типа geography.</param>
      <param name="coordinateSystemId">Выражение, предоставляющее идентификатор системы координат (SRID) значения systempointWellKnownTextValue точки типа geography.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPolygonFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, которое вызывает каноническую функцию GeographyPolygonFromBinary с указанными аргументами.Значение polygonWellKnownBinaryValue должно иметь двоичный тип результата, а значение coordinateSystemId — целочисленный тип результата.Тип результата выражения — Edm.Geography.</summary>
      <returns>Новое значение DbFunctionExpression, которое возвращает новое значение polygon типа geography на основе указанных значений.</returns>
      <param name="polygonWellKnownBinaryValue">Выражение, предоставляющее известное двоичное представление значения polygon типа geography.</param>
      <param name="coordinateSystemId">Выражение, предоставляющее идентификатор системы координат (SRID) значения polygon типа geography.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeographyPolygonFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, которое вызывает каноническую функцию GeographyPolygonFromText с указанными аргументами.Аргумент polygonWellKnownText должен иметь строковый тип результата, а coordinateSystemId — целочисленный тип результата.Тип результата выражения — Edm.Geography.</summary>
      <returns>Новое значение DbFunctionExpression, которое возвращает новое значение polygon типа geography на основе указанных значений.</returns>
      <param name="polygonWellKnownText">Выражение, предоставляющее известное текстовое представление значения polygon типа geography.</param>
      <param name="coordinateSystemId">Выражение, предоставляющее идентификатор системы координат (SRID) значения polygon типа geography.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryCollectionFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, которое вызывает каноническую функцию GeometryCollectionFromBinary с указанными аргументами.Аргумент geometryCollectionWellKnownBinaryValue должен иметь двоичный тип результата, а coordinateSystemId — целочисленный тип результата.Тип результата выражения — Edm.Geometry.</summary>
      <returns>Новое значение DbFunctionExpression, которое возвращает новое значение коллекции geometry на основе указанных значений.</returns>
      <param name="geometryCollectionWellKnownBinaryValue">Выражение, предоставляющее известное двоичное представление значения коллекции geometry.</param>
      <param name="coordinateSystemId">Выражение, предоставляющее идентификатор системы координат (SRID) значения коллекции geometry.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryCollectionFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, которое вызывает каноническую функцию GeometryCollectionFromText с указанными аргументами.Аргумент geometryCollectionWellKnownText должен иметь строковый тип результата, а coordinateSystemId — целочисленный тип результата.Тип результата выражения — Edm.Geometry.</summary>
      <returns>Новое значение DbFunctionExpression, которое возвращает новое значение коллекции geometry на основе указанных значений.</returns>
      <param name="geometryCollectionWellKnownText">Выражение, предоставляющее известное текстовое представление значения коллекции geometry.</param>
      <param name="coordinateSystemId">Выражение, предоставляющее идентификатор системы координат (SRID) значения коллекции geometry.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «GeometryFromBinary» с заданным аргументом, который должен иметь двоичный тип результата.Тип результата выражения — Edm.Geometry.</summary>
      <returns>Новое значение DbFunctionExpression, возвращающее новое значение типа geometry на основе указанного двоичного значения.</returns>
      <param name="wellKnownBinaryValue">Выражение, предоставляющее известное двоичное представление значения типа geometry.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, которое вызывает каноническую функцию GeometryFromBinary с указанными аргументами.Значение wellKnownBinaryValue должно иметь двоичный тип результата, а значение coordinateSystemId — целочисленный тип результата.Тип результата выражения — Edm.Geometry.</summary>
      <returns>Новое значение DbFunctionExpression, которое возвращает новое значение типа geometry на основе указанных значений.</returns>
      <param name="wellKnownBinaryValue">Выражение, предоставляющее известное двоичное представление значения типа geometry.</param>
      <param name="coordinateSystemId">Выражение, предоставляющее идентификатор системы координат (SRID) значения типа geometry.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «GeometryFromGml» с заданным аргументом, который должен иметь строковый тип результата.Тип результата выражения — Edm.Geometry.</summary>
      <returns>Новое значение DbFunctionExpression, возвращающее новое значение типа geometry на основе указанного значения с идентификатором системы координат (SRID) по умолчанию для базового поставщика.</returns>
      <param name="geometryMarkup">Выражение, которое содержит представление значения типа geometry на языке GML.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromGml(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, которое вызывает каноническую функцию GeometryFromGml с указанными аргументами.Значение geometryMarkup должно иметь строковый тип результата, а значение coordinateSystemId — целочисленный тип результата.Тип результата выражения — Edm.Geometry.</summary>
      <returns>Новое значение DbFunctionExpression, которое возвращает новое значение типа geometry на основе указанных значений.</returns>
      <param name="geometryMarkup">Выражение, которое содержит представление значения типа geometry на языке GML.</param>
      <param name="coordinateSystemId">Выражение, предоставляющее идентификатор системы координат (SRID) значения типа geometry.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «GeometryFromText» с заданным аргументом, который должен иметь строковый тип результата.Тип результата выражения — Edm.Geometry.Это значение имеет идентификатор системы координат (SRID) по умолчанию базового поставщика.</summary>
      <returns>Новое значение DbFunctionExpression, которое возвращает новое значение типа geometry на основе указанного значения.</returns>
      <param name="wellKnownText">Выражение, предоставляющее известное текстовое представление значения типа geometry.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, которое вызывает каноническую функцию GeometryFromText с указанными аргументами.Аргумент wellKnownText должен иметь строковый тип результата, а coordinateSystemId должен иметь целочисленный тип результата.Тип результата выражения — Edm.Geometry.</summary>
      <returns>Новое значение DbFunctionExpression, которое возвращает новое значение типа geometry на основе указанных значений.</returns>
      <param name="wellKnownText">Выражение, предоставляющее известное текстовое представление значения типа geometry.</param>
      <param name="coordinateSystemId">Выражение, предоставляющее идентификатор системы координат (SRID) значения типа geometry.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryLineFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, которое вызывает каноническую функцию GeometryLineFromBinary с указанными аргументами.Значение lineWellKnownBinaryValue должно иметь двоичный тип результата, а значение coordinateSystemId — целочисленный тип результата.Тип результата выражения — Edm.Geometry.</summary>
      <returns>Новое значение DbFunctionExpression, которое возвращает новое значение линии типа geometry на основе указанных значений.</returns>
      <param name="lineWellKnownBinaryValue">Выражение, предоставляющее известное двоичное представление значения линии типа geometry.</param>
      <param name="coordinateSystemId">Выражение, предоставляющее идентификатор системы координат (SRID) значения линии типа geometry.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryLineFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, которое вызывает каноническую функцию GeometryLineFromText с указанными аргументами.Аргумент lineWellKnownText должен иметь строковый тип результата, а coordinateSystemId — целочисленный тип результата.Тип результата выражения — Edm.Geometry.</summary>
      <returns>Новое значение DbFunctionExpression, которое возвращает новое значение линии типа geometry на основе указанных значений.</returns>
      <param name="lineWellKnownText">Выражение, предоставляющее известное текстовое представление значения линии типа geometry.</param>
      <param name="coordinateSystemId">Выражение, предоставляющее идентификатор системы координат (SRID) значения линии типа geometry.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiLineFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, которое вызывает каноническую функцию GeometryMultiLineFromBinary с указанными аргументами.Значение multiLineWellKnownBinaryValue должно иметь двоичный тип результата, а значение coordinateSystemId — целочисленный тип результата.Тип результата выражения — Edm.Geometry.</summary>
      <returns>Новое значение DbFunctionExpression, которое возвращает новое многострочного значения типа geometry на основе указанных значений.</returns>
      <param name="multiLineWellKnownBinaryValue">Выражение, предоставляющее известное двоичное представление многострочного значения типа geometry.</param>
      <param name="coordinateSystemId">Выражение, предоставляющее идентификатор системы координат (SRID) многострочного значения типа geometry.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiLineFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, которое вызывает каноническую функцию GeometryMultiLineFromText с указанными аргументами.Аргумент multiLineWellKnownText должен иметь строковый тип результата, а coordinateSystemId — целочисленный тип результата.Тип результата выражения — Edm.Geometry.</summary>
      <returns>Новое значение DbFunctionExpression, которое возвращает новое многострочного значения типа geometry на основе указанных значений.</returns>
      <param name="multiLineWellKnownText">Выражение, предоставляющее известное текстовое представление многострочного значения типа geometry.</param>
      <param name="coordinateSystemId">Выражение, предоставляющее идентификатор системы координат (SRID) многострочного значения типа geometry.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPointFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, которое вызывает каноническую функцию GeometryMultiPointFromBinary с указанными аргументами.Значение multiPointWellKnownBinaryValue должно иметь двоичный тип результата, а значение coordinateSystemId — целочисленный тип результата.Тип результата выражения — Edm.Geometry.</summary>
      <returns>Новое значение DbFunctionExpression, которое возвращает новое мультиточечное значение типа geometry на основе указанных значений.</returns>
      <param name="multiPointWellKnownBinaryValue">Выражение, предоставляющее известное двоичное представление мультиточечного значения типа geometry.</param>
      <param name="coordinateSystemId">Выражение, предоставляющее идентификатор системы координат (SRID) мультиточечного значения типа geometry.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPointFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, которое вызывает каноническую функцию GeometryMultiPointFromText с указанными аргументами.Аргумент multiPointWellKnownText должен иметь строковый тип результата, а coordinateSystemId — целочисленный тип результата.Тип результата выражения — Edm.Geometry.</summary>
      <returns>Новое значение DbFunctionExpression, которое возвращает новое мультиточечное значение типа geometry на основе указанных значений.</returns>
      <param name="multiPointWellKnownText">Выражение, предоставляющее известное текстовое представление мультиточечного значения типа geometry.</param>
      <param name="coordinateSystemId">Выражение, предоставляющее идентификатор системы координат (SRID) мультиточечного значения типа geometry.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPolygonFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, которое вызывает каноническую функцию GeometryMultiPolygonFromBinary с указанными аргументами.Значение multiPolygonWellKnownBinaryValue должно иметь двоичный тип результата, а значение coordinateSystemId — целочисленный тип результата.Тип результата выражения — Edm.Geometry.</summary>
      <returns>Новое значение DbFunctionExpression, которое возвращает новое значение multi-polygon типа geometry на основе указанных значений.</returns>
      <param name="multiPolygonWellKnownBinaryValue">Выражение, предоставляющее известное двоичное представление значения multi-polygon типа geometry.</param>
      <param name="coordinateSystemId">Выражение, предоставляющее идентификатор системы координат (SRID) значения multi-polygon типа geometry.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryMultiPolygonFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, которое вызывает каноническую функцию GeometryMultiPolygonFromText с указанными аргументами.Аргумент multiPolygonWellKnownText должен иметь строковый тип результата, а coordinateSystemId — целочисленный тип результата.Тип результата выражения — Edm.Geometry.</summary>
      <returns>Новое значение DbFunctionExpression, которое возвращает новое значение multi-polygon типа geometry на основе указанных значений.</returns>
      <param name="multiPolygonWellKnownText">Выражение, предоставляющее известное текстовое представление значения multi-polygon типа geometry.</param>
      <param name="coordinateSystemId">Выражение, предоставляющее идентификатор системы координат (SRID) значения multi-polygon типа geometry.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPointFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, которое вызывает каноническую функцию GeometryPointFromBinary с указанными аргументами.Значение pointWellKnownBinaryValue должно иметь двоичный тип результата, а значение coordinateSystemId — целочисленный тип результата.Тип результата выражения — Edm.Geometry.</summary>
      <returns>Новое значение DbFunctionExpression, которое возвращает новое значение точки типа geometry на основе указанных значений.</returns>
      <param name="pointWellKnownBinaryValue">Выражение, предоставляющее известное двоичное представление значения точки типа geometry.</param>
      <param name="coordinateSystemId">Выражение, предоставляющее идентификатор системы координат (SRID) значения точки типа geometry.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPointFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, которое вызывает каноническую функцию GeometryPointFromText с указанными аргументами.Аргумент pointWellKnownText должен иметь строковый тип результата, а coordinateSystemId — целочисленный тип результата.Тип результата выражения — Edm.Geometry.</summary>
      <returns>Новое значение DbFunctionExpression, которое возвращает новое значение точки типа geometry на основе указанных значений.</returns>
      <param name="pointWellKnownText">Выражение, предоставляющее известное текстовое представление значения точки типа geometry.</param>
      <param name="coordinateSystemId">Выражение, предоставляющее идентификатор системы координат (SRID) значения точки типа geometry.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPolygonFromBinary(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, которое вызывает каноническую функцию GeometryPolygonFromBinary с указанными аргументами.Значение polygonWellKnownBinaryValue должно иметь двоичный тип результата, а значение coordinateSystemId — целочисленный тип результата.Тип результата выражения — Edm.Geometry.</summary>
      <returns>Новое значение DbFunctionExpression, которое возвращает новое значение polygon типа geometry на основе указанных значений.</returns>
      <param name="polygonWellKnownBinaryValue">Выражение, предоставляющее известное двоичное представление значения polygon типа geometry.</param>
      <param name="coordinateSystemId">Выражение, предоставляющее идентификатор системы координат (SRID) значения polygon типа geometry.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.GeometryPolygonFromText(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает выражение <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, которое вызывает каноническую функцию GeometryPolygonFromText с указанными аргументами.Аргумент polygonWellKnownText должен иметь строковый тип результата, а coordinateSystemId — целочисленный тип результата.Тип результата выражения — Edm.Geometry.</summary>
      <returns>Новое значение DbFunctionExpression, которое возвращает новое значение polygon типа geometry на основе указанных значений.</returns>
      <param name="polygonWellKnownText">Выражение, предоставляющее известное текстовое представление значения polygon типа geometry.</param>
      <param name="coordinateSystemId">Выражение, предоставляющее идентификатор системы координат (SRID) значения polygon типа geometry.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.InteriorRingAt(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию InteriorRingAt с указанными аргументами.Первый аргумент должен иметь тип результата Edm.Geometry.Второй аргумент должен иметь целочисленные типы результата.Тип результата выражения — Edm.Geometry.</summary>
      <returns>Новое значение DbFunctionExpression, возвращающее либо внутреннее кольцо в позиции indexValue в geometryValue, либо значение NULL, если geometryValue не является элементом polygon.</returns>
      <param name="geometryValue">Значение типа geometry.</param>
      <param name="indexValue">Выражение, определяющее положение внутреннего кольца, извлекаемого из значения polygon.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.InteriorRingCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «InteriorRingCount» с заданным аргументом с типом результата Edm.Geometry.Тип результата выражения — Edm.Int32.</summary>
      <returns>Новое значение DbFunctionExpression, возвращающее либо число внутренних колец полигона geometryValue, либо значение NULL, если geometryValue не является элементом polygon.</returns>
      <param name="geometryValue">Значение типа geometry.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsClosedSpatial(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «IsClosedSpatial» с заданным аргументом, который должен иметь тип результата Edm.Geography или Edm.Geometry.Тип результата Edm.Boolean.</summary>
      <returns>Новое значение DbFunctionExpression, возвращающее либо логическое значение, указывающее, является ли spatialValue закрытым, либо значение NULL, если spatialValue не является кривой.</returns>
      <param name="spatialValue">Выражение, определяющее значение пространственной кривой, по которому должно быть получено значение IsClosedSpatial.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsEmptySpatial(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «IsEmptySpatial» с заданным аргументом, который должен иметь тип результата Edm.Geography или Edm.Geometry.Тип значения выражения Edm.Boolean.</summary>
      <returns>Новое значение DbFunctionExpression, возвращающее логическое значение, показывающее, пуста ли коллекция spatialValue.</returns>
      <param name="spatialValue">Выражение, определяющее значение пространственной кривой, по которому должно быть получено значение IsEmptySptiaal.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsRing(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «IsRing» с заданным аргументом с типом результата Edm.Geometry.Тип результата Edm.Boolean.</summary>
      <returns>Новое значение DbFunctionExpression, возвращающее либо логическое значение, указывающее, является ли geometryValue кольцом (как закрытым, так и простым), либо значение NULL, если geometryValue не является кривой.</returns>
      <param name="geometryValue">Выражение, определяющее значение геометрической кривой, по которому должно быть получено значение IsRing.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsSimpleGeometry(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «IsSimpleGeometry» с заданным аргументом с типом результата Edm.Geometry.Тип значения выражения Edm.Boolean.</summary>
      <returns>Новое значение DbFunctionExpression, возвращающее логическое значение, указывающее, является ли geometryValue простым объектом типа geometry.</returns>
      <param name="geometryValue">Значение типа geometry.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.IsValidGeometry(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «IsValidGeometry» с заданным аргументом с типом результата Edm.Geometry.Тип значения выражения Edm.Boolean.</summary>
      <returns>Новое значение DbFunctionExpression, возвращающее логическое значение, показывающее, является ли geometryValue допустимым объектом.</returns>
      <param name="geometryValue">Выражение, определяющее значение типа geometry, которое необходимо проверить на пространственную допустимость.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Latitude(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «Latitude» с заданным аргументом, который должен иметь тип результата Edm.Geography.Тип результата выражения — Edm.Double.</summary>
      <returns>Новое значение DbFunctionExpression, возвращающее либо значение широты geographyValue, либо значение NULL, если geographyValue не является точкой.</returns>
      <param name="geographyValue">Выражение, определяющее значение точки типа geography, для которого нужно получить значение широты.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Longitude(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «Longitude» с заданным аргументом, который должен иметь тип результата Edm.Geography.Тип результата выражения — Edm.Double.</summary>
      <returns>Новое значение DbFunctionExpression, возвращающее либо значение долготы geographyValue, либо значение NULL, если geographyValue не является точкой.</returns>
      <param name="geographyValue">Выражение, определяющее значение точки типа geography, для которого нужно получить значение долготы.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.Measure(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «Measure» с заданным аргументом, который должен иметь тип результата Edm.Geography или Edm.Geometry.Тип результата выражения — Edm.Double.</summary>
      <returns>Новое значение DbFunctionExpression, возвращающее либо меру spatialValue, либо значение NULL, если spatialValue не является точкой.</returns>
      <param name="spatialValue">Выражение, определяющее пространственное значение точки, из которой должно быть получено значение M (мера).</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointAt(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «PointAt» с указанными аргументами.Первый аргумент должен иметь тип результата Edm.Geography или Edm.Geometry.Второй аргумент должен иметь целочисленный тип результата.Тип значения выражения совпадает с типом spatialValue.</summary>
      <returns>Новое значение DbFunctionExpression, возвращающее либо точку в позиции indexValue в spatialValue, либо значение NULL, если spatialValue не является значением ломаной.</returns>
      <param name="spatialValue">Выражение, определяющее значение пространственной ломаной.</param>
      <param name="indexValue">Выражение, определяющее положение точки, получаемой из значения ломаной.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «PointCount» с заданным аргументом, который должен иметь тип результата Edm.Geography или Edm.Geometry.Тип результата выражения — Edm.Int32.</summary>
      <returns>Новое значение DbFunctionExpression, возвращающее либо число точек в spatialValue, либо значение NULL, если spatialValue не является значением ломаной.</returns>
      <param name="spatialValue">Выражение, определяющее значение пространственной ломаной, из которой должно быть извлечено количество точек.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.PointOnSurface(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «PointOnSurface» с заданным аргументом с типом результата Edm.Geometry.Тип результата выражения — Edm.Geometry.</summary>
      <returns>Новое значение DbFunctionExpression, возвращающее либо точку, гарантированно расположенную на поверхности geometryValue, либо значение NULL, если geometryValue не является поверхностью.</returns>
      <param name="geometryValue">Выражение, определяющее значение геометрической поверхности, из которой должна быть получена точка.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialBoundary(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «SpatialBoundary» с заданным аргументом с типом результата Edm.Geometry.Тип результата выражения — Edm.Geometry.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает границы для geometryValue.</returns>
      <param name="geometryValue">Выражение, определяющее значение геометрической кривой, по которому должно быть получено значение SpatialBoundary.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialBuffer(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, который вызывает каноническую функцию «SpatialBuffer» с указанными аргументами, которые должны иметь типы результата Edm.Geography или Edm.Geometry и Edm.Double.Тип результата выражения — Edm.Geometry.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает значение типа geometry, представляющее все точки, которые меньше расстояния от spatialValue или равны ему.</returns>
      <param name="spatialValue">Выражение, задающее пространственное значение.</param>
      <param name="distance">Выражение, задающее расстояние буфера.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialContains(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «SpatialContains» с заданными аргументами, каждый из которых должен иметь тип результата Edm.Geometry.Тип значения выражения Edm.Boolean.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает логическое значение, указывающее, содержит ли geometryValue1 пространственно geometryValue2.</returns>
      <param name="geometryValue1">Выражение, задающее первое значение типа geometry.</param>
      <param name="geometryValue2">Выражение, определяющее значение geometry, сравнимое с geometryValue1.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialConvexHull(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «SpatialConvexHull» с заданным аргументом с типом результата Edm.Geometry.Тип результата выражения — Edm.Geometry.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает выпуклую оболочку для geometryValue.</returns>
      <param name="geometryValue">Выражение, определяющее значение геометрической кривой, по которому должно быть получено значение выпуклой оболочки.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialCrosses(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «SpatialCrosses» с заданными аргументами, каждый из которых должен иметь тип результата Edm.Geometry.Тип значения выражения Edm.Boolean.</summary>
      <returns>Новое значение DbFunctionExpression, возвращающее логическое значение, которое указывает, имеет ли geometryValue1 пересечения с geometryValue2.</returns>
      <param name="geometryValue1">Выражение, задающее первое значение типа geometry.</param>
      <param name="geometryValue2">Выражение, определяющее значение geometry, сравнимое с geometryValue1.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDifference(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «SpatialDifference» с заданными аргументами, каждый из которых должен иметь тип результата Edm.Geography или Edm.Geometry.Тип результата spatialValue1 должен соответствовать типу результата spatialValue2.Тип результата выражения является таким же, как тип spatialValue1 и spatialValue2.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает значение типа geometry, представляющее разницу между spatialValue1 и spatialValue2.</returns>
      <param name="spatialValue1">Выражение, задающее первое пространственное значение.</param>
      <param name="spatialValue2">Выражение, значение которого задает пространственное значение, для которого необходимо вычислить разницу с spatialValue1.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDimension(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «SpatialDimension» с заданным аргументом, который должен иметь тип результата Edm.Geography или Edm.Geometry.Тип результата выражения — Edm.Int32.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает значение Dimension из spatialValue.</returns>
      <param name="spatialValue">Выражение, задающее значение, из которого требуется извлечь значение измерения.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialDisjoint(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «SpatialDisjoint» с заданными аргументами, каждый из которых должен иметь тип результата Edm.Geography или Edm.Geometry.Тип результата spatialValue1 должен соответствовать типу результата spatialValue2.Тип значения выражения Edm.Boolean.</summary>
      <returns>Новое значение DbFunctionExpression, возвращающее логическое значение, указывающее, имеют ли spatialValue1 и spatialValue2 пространственное перекрытие.</returns>
      <param name="spatialValue1">Выражение, задающее первое пространственное значение.</param>
      <param name="spatialValue2">Выражение, определяющее пространственное значение, сравнимое с spatialValue1 для отсутствия перекрытия.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialElementAt(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «SpatialElementAt» с указанными аргументами.Первый аргумент должен иметь тип результата Edm.Geography или Edm.Geometry.Второй аргумент должен иметь целочисленный тип результата.Тип значения выражения совпадает с типом spatialValue.</summary>
      <returns>Новое значение DbFunctionExpression, возвращающее либо элемент коллекции в позиции indexValue в spatialValue, либо значение NULL, если spatialValue не является коллекцией.</returns>
      <param name="spatialValue">Выражение, определяющее значение коллекции значений типа geography или типа geometry.</param>
      <param name="indexValue">Выражение, указывающее положение элемента, извлекаемого из коллекции значений типа geography или типа geometry.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialElementCount(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «SpatialElementCount» с заданным аргументом, который должен иметь тип результата Edm.Geography или Edm.Geometry.Тип результата выражения — Edm.Int32.</summary>
      <returns>Новое значение DbFunctionExpression, возвращающее либо число элементов в коллекции spatialValue, либо значение NULL, если spatialValue не является коллекцией.</returns>
      <param name="spatialValue">Выражение, определяющее значение коллекции значений типа geography или типа geometry, из которой необходимо получить число элементов.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialEnvelope(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «SpatialEnvelope» с заданным аргументом с типом результата Edm.Geometry.Тип результата выражения — Edm.Geometry.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает минимальный ограничивающий прямоугольник для geometryValue.</returns>
      <param name="geometryValue">Выражение, задающее значение, из которого требуется извлечь значение огибающей.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialEquals(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «SpatialEquals» с заданными аргументами, каждый из которых должен иметь тип результата Edm.Geography или Edm.Geometry.Тип результата spatialValue1 должен соответствовать типу результата spatialValue2.Тип значения выражения Edm.Boolean.</summary>
      <returns>Новое значение DbFunctionExpression, возвращающее логическое значение, указывающее, равны ли spatialValue1 и spatialValue2.</returns>
      <param name="spatialValue1">Выражение, задающее первое пространственное значение.</param>
      <param name="spatialValue2">Выражение, определяющее пространственное значение, сравниваемое с spatialValue1 на равенство.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialIntersection(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «SpatialIntersection» с заданными аргументами, каждый из которых должен иметь тип результата Edm.Geography или Edm.Geometry.Тип результата spatialValue1 должен соответствовать типу результата spatialValue2.Тип результата выражения является таким же, как тип spatialValue1 и spatialValue2.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает пространственное значение, представляющее пересечение spatialValue1 и spatialValue2.</returns>
      <param name="spatialValue1">Выражение, задающее первое пространственное значение.</param>
      <param name="spatialValue2">Выражение, значение которого задает пространственное значение, для которого необходимо вычислить пересечение с spatialValue1.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialIntersects(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «SpatialIntersects» с заданными аргументами, каждый из которых должен иметь тип результата Edm.Geography или Edm.Geometry.Тип результата spatialValue1 должен соответствовать типу результата spatialValue2.Тип значения выражения Edm.Boolean.</summary>
      <returns>Новое значение DbFunctionExpression, возвращающее логическое значение, указывающее, пересекаются ли spatialValue1 и spatialValue2.</returns>
      <param name="spatialValue1">Выражение, задающее первое пространственное значение.</param>
      <param name="spatialValue2">Выражение, определяющее пространственное значение, сравниваемое с spatialValue1 на предмет пересечения.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialLength(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «SpatialLength» с заданным аргументом, который должен иметь тип результата Edm.Geography или Edm.Geometry.Тип результата выражения — Edm.Double.</summary>
      <returns>Новое значение DbFunctionExpression, возвращающее либо длину spatialValue, либо значение NULL, если spatialValue не является кривой.</returns>
      <param name="spatialValue">Выражение, определяющее значение пространственной кривой, по которому должна быть получена длина.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialOverlaps(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «SpatialOverlaps» с заданными аргументами, каждый из которых должен иметь тип результата Edm.Geometry.Тип значения выражения Edm.Boolean.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает логическое значение, указывающее, перекрывается ли geometryValue1 с geometryValue2.</returns>
      <param name="geometryValue1">Выражение, задающее первое значение типа geometry.</param>
      <param name="geometryValue2">Выражение, определяющее значение geometry, сравнимое с geometryValue1.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialRelate(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «SpatialRelate» с заданными аргументами, каждый из которых должен иметь тип результата Edm.Geometry.Тип значения выражения Edm.Boolean.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает логическое значение, указывающее, связано ли geometryValue1 пространственно с geometryValue2 согласно пространственной связи, обозначенной с помощью intersectionPatternMatrix.</returns>
      <param name="geometryValue1">Выражение, задающее первое значение типа geometry.</param>
      <param name="geometryValue2">Выражение, определяющее значение geometry, сравнимое с geometryValue1.</param>
      <param name="intersectionPatternMatrix">Выражение, которое указывает текстовое представление шаблона пересечения DE-9IM, используемого для сравнения geometryValue1 и geometryValue2.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialSymmetricDifference(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «SpatialSymmetricDifference» с заданными аргументами, каждый из которых должен иметь тип результата Edm.Geography или Edm.Geometry.Тип результата spatialValue1 должен соответствовать типу результата spatialValue2.Тип результата выражения является таким же, как тип spatialValue1 и spatialValue2.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает значение типа geometry, представляющее симметрическую разницу между spatialValue1 и spatialValue2.</returns>
      <param name="spatialValue1">Выражение, задающее первое пространственное значение.</param>
      <param name="spatialValue2">Выражение, значение которого задает пространственное значение, для которого необходимо вычислить симметричную разницу с spatialValue1.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialTouches(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «SpatialTouches» с заданными аргументами, каждый из которых должен иметь тип результата Edm.Geometry.Тип значения выражения Edm.Boolean.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает логическое значение, указывающее, касаются ли друг друга geometryValue1 и geometryValue2.</returns>
      <param name="geometryValue1">Выражение, задающее первое значение типа geometry.</param>
      <param name="geometryValue2">Выражение, определяющее значение geometry, сравнимое с geometryValue1.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialTypeName(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «SpatialTypeName» с заданным аргументом, который должен иметь тип результата Edm.Geography или Edm.Geometry.Тип результата выражения — Edm.String.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает строковое имя типа geometry из spatialValue.</returns>
      <param name="spatialValue">Выражение, определяющее значение, из которого необходимо получить тип geometry.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialUnion(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «SpatialUnion» с заданными аргументами, каждый из которых должен иметь тип результата Edm.Geography или Edm.Geometry.Тип результата spatialValue1 должен соответствовать типу результата spatialValue2.Тип результата выражения является таким же, как тип spatialValue1 и spatialValue2.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает пространственное значение, представляющее объединение spatialValue1 и spatialValue2.</returns>
      <param name="spatialValue1">Выражение, задающее первое пространственное значение.</param>
      <param name="spatialValue2">Выражение, значение которого задает пространственное значение, для которого необходимо вычислить объединение с spatialValue1.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.SpatialWithin(System.Data.Entity.Core.Common.CommandTrees.DbExpression,System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «SpatialWithin» с заданными аргументами, каждый из которых должен иметь тип результата Edm.Geometry.Тип значения выражения Edm.Boolean.</summary>
      <returns>Новое выражение DbFunctionExpression, которое возвращает логическое значение, указывающее, содержит ли geometryValue2 пространственно geometryValue1.</returns>
      <param name="geometryValue1">Выражение, задающее первое значение типа geometry.</param>
      <param name="geometryValue2">Выражение, определяющее значение geometry, сравнимое с geometryValue1.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.StartPoint(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «StartPoint» с заданным аргументом, который должен иметь тип результата Edm.Geography или Edm.Geometry.Тип результата тот же, что и у spatialValue.</summary>
      <returns>Новое значение DbFunctionExpression, возвращающее либо начальную точку spatialValue, либо значение NULL, если spatialValue не является кривой.</returns>
      <param name="spatialValue">Выражение, определяющее значение пространственной кривой, по которому должна быть получена начальная точка.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.XCoordinate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «XCoordinate» с заданным аргументом с типом результата Edm.Geometry.Тип результата выражения — Edm.Double.</summary>
      <returns>Новое значение DbFunctionExpression, возвращающее либо значение координаты X для geometryValue, либо значение NULL, если geometryValue не является точкой.</returns>
      <param name="geometryValue">Выражение, определяющее значение точки типа geometry, из которой должна быть получена координата X.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.CommandTrees.ExpressionBuilder.Spatial.SpatialEdmFunctions.YCoordinate(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbFunctionExpression" />, вызывающий каноническую функцию «YCoordinate» с заданным аргументом с типом результата Edm.Geometry.Тип результата выражения — Edm.Double.</summary>
      <returns>Новое значение DbFunctionExpression, возвращающее либо значение координаты Y для geometryValue, либо значение NULL, если geometryValue не является точкой.</returns>
      <param name="geometryValue">Выражение, определяющее значение точки типа geometry, из которой должна быть получена координата Y.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.EntitySql.EntitySqlParser">
      <summary>Открытый класс средства синтаксического анализа Entity SQL.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Common.EntitySql.EntitySqlParser.Parse(System.String,System.Data.Entity.Core.Common.CommandTrees.DbParameterReferenceExpression[])">
      <summary>Проанализируйте указанный запрос с заданными параметрами.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.EntitySql.ParseResult" />, содержащий <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree" /> и сведения, описывающие определения встроенной функции, если они имеются.</returns>
      <param name="query">Запрос EntitySQL для синтаксического анализа.</param>
      <param name="parameters">Необязательные параметры запроса.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Common.EntitySql.EntitySqlParser.ParseLambda(System.String,System.Data.Entity.Core.Common.CommandTrees.DbVariableReferenceExpression[])">
      <summary>Проанализировать конкретный запрос с определенными заданными переменными и создать <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbLambda" />.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Common.EntitySql.ParseResult" />, содержащий <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbCommandTree" /> и сведения, описывающие определения встроенной функции, если они имеются.</returns>
      <param name="query">Запрос для синтаксического анализа.</param>
      <param name="variables">Необязательные переменные запроса.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition">
      <summary>Определение встроенной функции запроса Entity SQL, возвращаемое в составе <see cref="T:System.Data.Entity.Core.Common.EntitySql.ParseResult" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition.EndPosition">
      <summary>Конечное положение определения функции в тексте запроса Entity SQL.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition.Lambda">
      <summary>Текст и параметры функции.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition.Name">
      <summary>Имя функции.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition.StartPosition">
      <summary>Начальное положение определения функции в тексте запроса Entity SQL.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Common.EntitySql.ParseResult">
      <summary>Сведения о результатах синтаксического анализа Entity SQL.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.ParseResult.CommandTree">
      <summary>Дерево команд, сформированное во время синтаксического анализа.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Common.EntitySql.ParseResult.FunctionDefinitions">
      <summary>Список объектов <see cref="T:System.Data.Entity.Core.Common.EntitySql.FunctionDefinition" />, описывающих определения встроенных функций запроса.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityCommand">
      <summary>Класс, представляющий команду для концептуального уровня</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" />, используя указанные значения.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> с указанной инструкцией.</summary>
      <param name="statement">Текст команды.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.#ctor(System.String,System.Data.Entity.Core.EntityClient.EntityConnection)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> с указанными инструкцией и соединением.</summary>
      <param name="statement">Текст команды.</param>
      <param name="connection">Соединение с источником данных.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.#ctor(System.String,System.Data.Entity.Core.EntityClient.EntityConnection,System.Data.Entity.Core.EntityClient.EntityTransaction)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> с указанными инструкцией, соединением и транзакцией.</summary>
      <param name="statement">Текст команды.</param>
      <param name="connection">Соединение с источником данных.</param>
      <param name="transaction">Транзакция, в которой выполняется команда.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.#ctor(System.String,System.Data.Entity.Core.EntityClient.EntityConnection,System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>Создает объект EntityCommand с данной инструкцией eSQL и предназначенный для использования объект соединения</summary>
      <param name="statement">Текст команды eSQL, предназначенной для выполнения</param>
      <param name="connection">Объект соединения</param>
      <param name="resolver">Сопоставитель, используемый для разрешения в службах DbProviderServices</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.Cancel">
      <summary>Отменяет выполнение <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandText">
      <summary>Возвращает или задает инструкцию Entity SQL, которая определяет команду или хранимую процедуру, подлежащую выполнению.</summary>
      <returns>Инструкция Entity SQL, которая указывает команду или хранимую процедуру, подлежащую выполнению.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandTimeout">
      <summary>Возвращает или задает интервал времени, которое должно пройти до истечения времени ожидания.</summary>
      <returns>Время в секундах, в течение которого должно происходить ожидание выполнения команды.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandTree">
      <summary>Возвращает или задает дерево команд, подлежащее выполнению; могут быть заданы только дерево команд или текст команды, но не и то и другое.</summary>
      <returns>Выполняемое дерево команд.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandType">
      <summary>Возвращает или задает значение, которое указывает, как должно интерпретироваться свойство <see cref="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandText" />.</summary>
      <returns>Одно из значений перечисления <see cref="T:System.Data.CommandType" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.Connection">
      <summary>Возвращает или задает соединение <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />, используемое командой <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" />.</summary>
      <returns>Соединение, используемое командой сущности.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.CreateDbParameter">
      <summary>Создание и возврат нового объекта параметра, представляющего параметр в инструкции eSQL</summary>
      <returns>Объект параметра.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.CreateParameter">
      <summary>Создает новый экземпляр объекта <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</summary>
      <returns>Новый экземпляр объекта <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.DbConnection">
      <summary>Объект соединения, используемый для выполнения команды</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.DbParameterCollection">
      <summary>Коллекция параметров для этой команды</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.DbTransaction">
      <summary>Транзакция, в которой выполняется эта команда</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.DesignTimeVisible">
      <summary>Возвращает или задает значение, которое указывает, должен ли объект команды быть видимым в элементе управления конструктора Windows Form.</summary>
      <returns>Значение true, если объект команды должен быть видимым в элементе управления конструктором форм Windows; в противном случае — false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.EnablePlanCaching">
      <summary>Возвращает или задает значение, которое указывает, включено ли кэширование плана запроса.</summary>
      <returns>Значение true, если включено кэширование плана запроса; в противном случае — false.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteDbDataReader(System.Data.CommandBehavior)">
      <summary>Выполняет команду и возвращает модуль чтения данных для чтения результатов</summary>
      <returns>Объект DbDataReader</returns>
      <param name="behavior">Поведение, которое должно использоваться при выполнении этой команды</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteDbDataReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)">
      <summary>Выполняет в асинхронном режиме команду и возвращает модуль чтения данных для чтения результатов</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит объект DbDataReader.</returns>
      <param name="behavior">Поведение, которое должно использоваться при выполнении этой команды</param>
      <param name="cancellationToken">Токен, который необходимо отслеживать для обнаружения запросов отмены</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteNonQuery">
      <summary>Выполняет текущую команду.</summary>
      <returns>Число обработанных строк.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteNonQueryAsync(System.Threading.CancellationToken)">
      <summary>Выполняет в асинхронном режиме команду и отменяет все результаты, возвращенные командой</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит количество затронутых строк.</returns>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReader">
      <summary>Выполняет команду и возвращает модуль чтения данных.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" />, содержащий результаты.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReader(System.Data.CommandBehavior)">
      <summary>Компилирует <see cref="P:System.Data.Entity.Core.EntityClient.EntityCommand.CommandText" /> в дерево команд и передает базовому поставщику хранилища на выполнение, затем выполняет сборку <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> из сформированного результирующего набора с использованием указанного <see cref="T:System.Data.CommandBehavior" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" />, содержащий результаты.</returns>
      <param name="behavior">Одно из значений <see cref="T:System.Data.CommandBehavior" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReaderAsync">
      <summary>Выполняет в асинхронном режиме команду и возвращает модуль чтения данных для чтения результатов.Может вызываться только применительно к CommandType.CommandText (в противном случае следует использовать стандартные методы Execute*)</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит объект EntityDataReader.</returns>
      <exception cref="T:System.InvalidOperationException">Что касается команд хранимой процедуры, то при условии их вызова применительно к любому объекту, кроме результата коллекции сущностей</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReaderAsync(System.Data.CommandBehavior)">
      <summary>Выполняет в асинхронном режиме команду и возвращает модуль чтения данных для чтения результатов.Может вызываться только применительно к CommandType.CommandText (в противном случае следует использовать стандартные методы Execute*)</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит объект EntityDataReader.</returns>
      <param name="behavior">Поведение, которое должно использоваться при выполнении этой команды</param>
      <exception cref="T:System.InvalidOperationException">Что касается команд хранимой процедуры, то при условии их вызова применительно к любому объекту, кроме результата коллекции сущностей</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReaderAsync(System.Data.CommandBehavior,System.Threading.CancellationToken)">
      <summary>Выполняет в асинхронном режиме команду и возвращает модуль чтения данных для чтения результатов.Может вызываться только применительно к CommandType.CommandText (в противном случае следует использовать стандартные методы Execute*)</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит объект EntityDataReader.</returns>
      <param name="behavior">Поведение, которое должно использоваться при выполнении этой команды</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <exception cref="T:System.InvalidOperationException">Что касается команд хранимой процедуры, то при условии их вызова применительно к любому объекту, кроме результата коллекции сущностей</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteReaderAsync(System.Threading.CancellationToken)">
      <summary>Выполняет в асинхронном режиме команду и возвращает модуль чтения данных для чтения результатов.Может вызываться только применительно к CommandType.CommandText (в противном случае следует использовать стандартные методы Execute*)</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит объект EntityDataReader.</returns>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <exception cref="T:System.InvalidOperationException">Что касается команд хранимой процедуры, то при условии их вызова применительно к любому объекту, кроме результата коллекции сущностей</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ExecuteScalar">
      <summary>Выполняет команду и возвращает первый столбец первой строки из результирующего набора.Дополнительные столбцы или строки не обрабатываются.</summary>
      <returns>Первый столбец первой строки из результирующего набора или ссылка на объект NULL (Nothing в Visual Basic), если результирующий набор пуст.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.Parameters">
      <summary>Возвращает параметры инструкции Entity SQL или хранимой процедуры.</summary>
      <returns>Параметры инструкции Entity SQL или хранимой процедуры.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.Prepare">
      <summary>Компилирует команду уровня сущности и создает готовую версию команды.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityCommand.ToTraceString">
      <summary>Компилирует команду уровня сущности и возвращает текст команды хранилища.</summary>
      <returns>Текст команды хранилища.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.Transaction">
      <summary>Возвращает или задает транзакцию, в которой выполняется <see cref="T:System.Data.SqlClient.SqlCommand" />.</summary>
      <returns>Транзакция, в которой выполняется <see cref="T:System.Data.SqlClient.SqlCommand" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityCommand.UpdatedRowSource">
      <summary>Возвращает или задает способ применения результатов команды к изменяемым строкам.</summary>
      <returns>Одно из значений <see cref="T:System.Data.UpdateRowSource" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityConnection">
      <summary>Класс, представляющий соединение для концептуального уровня.Соединение сущности может быть инициализировано только один раз (путем открытия соединения).Впоследствии невозможно будет изменить строку подключения, присоединить новое соединение с хранилищем или изменить строку подключения с хранилищем.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Common.DbConnection)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> с заданными объектами <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> и <see cref="T:System.Data.Common.DbConnection" />.</summary>
      <param name="workspace">Рабочее пространство <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />, которое должно быть связано с этим соединением <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />.</param>
      <param name="connection">Базовое соединение с источником данных для этого объекта <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />.</param>
      <exception cref="T:System.ArgumentNullException">Рабочая область или параметр соединения имеет значение NULL.</exception>
      <exception cref="T:System.ArgumentException">В рабочем пространстве отсутствует концептуальная модель.-или-В рабочем пространстве отсутствует файл сопоставления.-или-В рабочем пространстве отсутствует модель хранения.-или-Соединение не находится в закрытом состоянии.</exception>
      <exception cref="T:System.Data.Entity.Core.ProviderIncompatibleException">Соединение не из поставщика, совместимого с Entity Framework ADO.NET.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace,System.Data.Common.DbConnection,System.Boolean)">
      <summary>Создает EntityConnection из метаданных, загруженных в память</summary>
      <param name="workspace">Рабочая область, содержащая информацию метаданных.</param>
      <param name="connection">Соединение хранилища.</param>
      <param name="entityConnectionOwnsStoreConnection">Если задано равным true, соединение с хранилищем уничтожается при уничтожении соединения с сущностью; в противном случае вызывающий объект должен уничтожить соединение с хранилищем.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> на основе строки подключения.</summary>
      <param name="connectionString">Строка соединения этого поставщика.</param>
      <exception cref="T:System.ArgumentException">Предоставлено недействительное ключевое слово строки подключения, или не предоставлено требуемое ключевое слово строки подключения.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.BeginDbTransaction(System.Data.IsolationLevel)">
      <summary>Запускает транзакцию базы данных</summary>
      <returns>Объект, представляющий новую транзакцию</returns>
      <param name="isolationLevel">Уровень изоляции транзакции</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.BeginTransaction">
      <summary>Начинает транзакцию с использованием базового поставщика.</summary>
      <returns>Новая транзакция <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" />.Возвращенный экземпляр <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" />, который позднее может быть связан с <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> для выполнения команды в этой транзакции.</returns>
      <exception cref="T:System.InvalidOperationException">Базовый поставщик неизвестен.-или-Вызов транзакции <see cref="M:System.Data.Entity.Core.EntityClient.EntityConnection.BeginTransaction" /> сделан применительно к соединению <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />, в котором уже имеется текущая транзакция.-или-Состояние соединения <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> отлично от <see cref="F:System.Data.ConnectionState.Open" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.BeginTransaction(System.Data.IsolationLevel)">
      <summary>Начинает транзакцию с указанного уровня изоляции с использованием базового поставщика.</summary>
      <returns>Новая транзакция <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" />.Возвращенный экземпляр <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" />, который позднее может быть связан с <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" /> для выполнения команды в этой транзакции.</returns>
      <param name="isolationLevel">Уровень изоляции транзакции.</param>
      <exception cref="T:System.InvalidOperationException">Базовый поставщик неизвестен.-или-Вызов транзакции <see cref="M:System.Data.Entity.Core.EntityClient.EntityConnection.BeginTransaction" /> сделан применительно к соединению <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />, в котором уже имеется текущая транзакция.-или-Состояние соединения <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> отлично от <see cref="F:System.Data.ConnectionState.Open" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.ChangeDatabase(System.String)">
      <summary>Не поддерживается.</summary>
      <param name="databaseName">Не поддерживается.</param>
      <exception cref="T:System.NotSupportedException">При вызове метода.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.Close">
      <summary>Закрывает соединение с базой данных.</summary>
      <exception cref="T:System.InvalidOperationException">При закрытии соединения произошла ошибка.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.ConnectionString">
      <summary>Возвращает или задает строку соединения <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />.</summary>
      <returns>Строка подключения, требуемая для установления начального соединения с источником данных.Значение по умолчанию — пустая строка.Для закрытого соединения возвращается текущее установленное значение.Если значение не было задано, возвращается пустая строка.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.ConnectionTimeout">
      <summary>Возвращает количество секунд ожидания при попытке установить соединение, прежде чем эта попытка будет окончена и сформирована ошибка.</summary>
      <returns>Время (в секундах), в течение которого должно производиться ожидание открытия соединения.Значением по умолчанию является стандартное время ожидания базового поставщика данных.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.CreateCommand">
      <summary>Создает новый экземпляр <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" />, в котором соединение <see cref="P:System.Data.Entity.Core.EntityClient.EntityCommand.Connection" /> установлено равным этому соединению <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" />.</returns>
      <exception cref="T:System.InvalidOperationException">Имя базового поставщика данных неизвестно.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.CreateDbCommand">
      <summary>Создание нового объекта команды, в котором используется этот объект соединения</summary>
      <returns>Объект команды.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.CurrentTransaction">
      <summary>Возвращает текущую транзакцию, в которую включено это подключение.Может иметь значение null.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.Database">
      <summary>Возвращает имя текущей базы данных или базы данных, которая будет использоваться после открытия соединения.</summary>
      <returns>Значение свойства Database базового поставщика данных.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.DataSource">
      <summary>Возвращает имя или сетевой адрес источника данных, с которым должно быть установлено соединение.</summary>
      <returns>Имя источника данных.Значение по умолчанию — пустая строка.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.DbProviderFactory">
      <summary>Возвращает фабрику поставщика, связанную с соединением EntityConnection</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.Dispose(System.Boolean)">
      <summary>Очищает этот объект соединения</summary>
      <param name="disposing">Значение true — освободить управляемые и неуправляемые ресурсы; значение false — освободить только неуправляемые ресурсы.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.EnlistTransaction(System.Transactions.Transaction)">
      <summary>Прикрепляет эту коллекцию <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> к указанной транзакции.</summary>
      <param name="transaction">Объект транзакции, предназначенный для прикрепления.</param>
      <exception cref="T:System.InvalidOperationException">Состоянием соединения <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> не является <see cref="F:System.Data.ConnectionState.Open" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.GetMetadataWorkspace">
      <summary>Возвращает рабочее пространство <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />, связанное с этим соединением <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />.</summary>
      <returns>Рабочее пространство <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />, связанное с этим соединением <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />.</returns>
      <exception cref="T:System.Data.Entity.Core.MetadataException">Встроенная строка подключения содержит недействительное значение ключевого слова Metadata.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.Open">
      <summary>Устанавливает соединение с источником данных, вызывая метод Open базового поставщика данных.</summary>
      <exception cref="T:System.InvalidOperationException">При открытии соединения произошла ошибка, или неизвестно имя базового поставщика данных.</exception>
      <exception cref="T:System.Data.Entity.Core.MetadataException">Встроенная строка подключения содержит недействительное значение ключевого слова Metadata.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnection.OpenAsync(System.Threading.CancellationToken)">
      <summary>Устанавливает в асинхронном режиме соединение с хранилищем данных путем вызова метода Open применительно к основополагающему поставщику данных</summary>
      <returns>Задача, представляющая асинхронную операцию.</returns>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.ServerVersion">
      <summary>Возвращает строку, содержащую версию источника данных, к которому подключен клиент.</summary>
      <returns>Версия источника данных, которая содержится в строке подключения поставщика.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.State">
      <summary>Получает состояние EntityConnection, которое задается для отслеживания состояния базового подключения базы данных, заключенного в оболочку EntityConnection.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnection.StoreConnection">
      <summary>Предоставляет доступ к базовому соединению с источником данных, которое используется объектом <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />.</summary>
      <returns>Соединение <see cref="T:System.Data.Common.DbConnection" /> для подключения к источнику данных.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder">
      <summary>Класс, представляющий построитель строки подключения для поставщика клиента сущности</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> с помощью указанной строки соединения.</summary>
      <param name="connectionString">Строка подключения к базовому источнику данных, зависящая от поставщика.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Clear">
      <summary>Удаляет содержимое экземпляра <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.ContainsKey(System.String)">
      <summary>Определяет, содержит ли объект <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> заданный ключ.</summary>
      <returns>Возвращает true, если модуль <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> содержит элемент, который имеет указанный ключ; в противном случае — false.</returns>
      <param name="keyword">Ключ для поиска в <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.IsFixedSize">
      <summary>Возвращает значение, которое указывает, имеет ли массив <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> постоянный размер.</summary>
      <returns>Возвращает true в любом случае, поскольку <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" /> задает коллекцию пар «ключ-значение» постоянного размера.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Item(System.String)">
      <summary>Возвращает или задает значение, связанное с указанным ключом.В языке C# это свойство является индексатором.</summary>
      <returns>Значение, связанное с указанным ключом.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Keys">
      <summary>Возвращает коллекцию <see cref="T:System.Collections.ICollection" />, которая содержит ключи в <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />.</summary>
      <returns>Коллекция <see cref="T:System.Collections.ICollection" />, которая содержит ключи в <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Metadata">
      <summary>Возвращает или задает расположение метаданных в строке соединения.</summary>
      <returns>Возвращает или задает расположение метаданных в строке соединения.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Name">
      <summary>Возвращает или задает имя раздела, заданное в файле конфигурации.</summary>
      <returns>Имя раздела, заданное в файле конфигурации.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Provider">
      <summary>Возвращает или задает имя основополагающего поставщика данных .NET Framework в строке подключения.</summary>
      <returns>Инвариантное имя базового поставщика данных .NET Framework.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.ProviderConnectionString">
      <summary>Возвращает или задает внутреннюю, специфичную для данного поставщика строку соединения.</summary>
      <returns>Внутренняя, специфичная для данного поставщика строка соединения.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.Remove(System.String)">
      <summary>Удаляет запись с указанным ключом из экземпляра <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />.</summary>
      <returns>Возвращает значение true, если ключ существовал в строке соединения и был удален; false, если такого ключа нет.</returns>
      <param name="keyword">Ключ пары «ключ-значение», которая должна быть удалена из строки подключения в этом модуле <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />.</param>
      <exception cref="T:System.ArgumentNullException">ключевым словом является NULL (Nothing в Visual Basic)</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder.TryGetValue(System.String,System.Object@)">
      <summary>Получает значение, соответствующее предоставленному ключу из этого модуля <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />.</summary>
      <returns>Возвращает значение true, если ключевое слово keyword было найдено в строке соединения, в противном случае — значение false.</returns>
      <param name="keyword">Ключ искомого элемента.</param>
      <param name="value">Значение, соответствующее ключу keyword.</param>
      <exception cref="T:System.ArgumentNullException">keyword содержит значение NULL (значение Nothing в языке Visual Basic).</exception>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityDataReader">
      <summary>Класс модуля чтения данных для поставщика клиента сущности</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.Close">
      <summary>Закрывает объект <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.DataRecordInfo">
      <summary>Возвращает коллекцию <see cref="T:System.Data.Entity.Core.Common.DataRecordInfo" /> для этой транзакции <see cref="T:System.Data.Entity.Core.IExtendedDataRecord" />.</summary>
      <returns>Информация из записи данных.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.Depth">
      <summary>Возвращает значение, показывающее глубину вложенности для текущей строки.</summary>
      <returns>Глубина вложенности для текущей строки.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.Dispose(System.Boolean)">
      <summary>Освобождает ресурсы, потребляемые этим модулем <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" />, и вызывает <see cref="M:System.Data.Entity.Core.EntityClient.EntityDataReader.Close" />.</summary>
      <param name="disposing">Значение true, если требуется освободить и управляемые и неуправляемые ресурсы; значение false, если требуется освободить только неуправляемые ресурсы.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.FieldCount">
      <summary>Возвращает число столбцов в текущей строке.</summary>
      <returns>Число столбцов в текущей строке.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetBoolean(System.Int32)">
      <summary>Возвращает значение указанного столбца в виде логического значения.</summary>
      <returns>Значение указанного столбца.</returns>
      <param name="ordinal">Порядковый номер столбца (от нуля).</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetByte(System.Int32)">
      <summary>Возвращает значение указанного столбца в виде байта.</summary>
      <returns>Значение указанного столбца.</returns>
      <param name="ordinal">Порядковый номер столбца (от нуля).</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>Считывает поток байтов из указанного столбца, начиная с местоположения, обозначенного dataIndex, в буфер, начинающийся в местоположении, обозначенном bufferIndex.</summary>
      <returns>Число фактически считанных байтов.</returns>
      <param name="ordinal">Порядковый номер столбца (от нуля).</param>
      <param name="dataOffset">Индекс в строке, с которого необходимо начать считывание.</param>
      <param name="buffer">Буфер, в который копируются данные.</param>
      <param name="bufferOffset">Индекс в буфере, куда будут копироваться данные.</param>
      <param name="length">Максимальное количество символов для чтения.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetChar(System.Int32)">
      <summary>Возвращает значение указанного столбца в виде одного символа.</summary>
      <returns>Значение указанного столбца.</returns>
      <param name="ordinal">Порядковый номер столбца (от нуля).</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>Считывает поток символов из указанного столбца, начиная с местоположения, обозначенного dataIndex, в буфер, начинающийся в местоположении, обозначенном bufferIndex.</summary>
      <returns>Число фактически считанных символов.</returns>
      <param name="ordinal">Порядковый номер столбца (от нуля).</param>
      <param name="dataOffset">Индекс в строке, с которого необходимо начать считывание.</param>
      <param name="buffer">Буфер, в который копируются данные.</param>
      <param name="bufferOffset">Индекс в буфере, куда будут копироваться данные.</param>
      <param name="length">Максимальное количество символов для чтения.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDataReader(System.Int32)">
      <summary>Возвращает вложенные модули чтения как объекты <see cref="T:System.Data.Common.DbDataReader" />.</summary>
      <returns>Вложенные модули чтения в виде объектов <see cref="T:System.Data.Common.DbDataReader" />.</returns>
      <param name="i">Порядковый номер столбца.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDataRecord(System.Int32)">
      <summary>Возвращает вложенную запись <see cref="T:System.Data.Common.DbDataRecord" />.</summary>
      <returns>Вложенная запись данных.</returns>
      <param name="i">Число записей DbDataRecord, которые необходимо возвратить.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDataTypeName(System.Int32)">
      <summary>Возвращает имя типа данных указанного столбца.</summary>
      <returns>Имя типа данных.</returns>
      <param name="ordinal">Порядковый номер столбца (от нуля).</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDateTime(System.Int32)">
      <summary>Возвращает значение указанного столбца в виде объекта <see cref="T:System.DateTime" />.</summary>
      <returns>Значение указанного столбца.</returns>
      <param name="ordinal">Порядковый номер столбца (от нуля).</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDbDataReader(System.Int32)">
      <summary>Возвращает объект <see cref="T:System.Data.Common.DbDataReader" /> для запрошенного порядкового номера столбца, который можно переопределить реализацией, зависящей от поставщика.</summary>
      <returns>Модуль чтения данных.</returns>
      <param name="ordinal">Порядковый номер столбца (от нуля).</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDecimal(System.Int32)">
      <summary>Возвращает значение указанного столбца в виде объекта <see cref="T:System.Decimal" />.</summary>
      <returns>Значение указанного столбца.</returns>
      <param name="ordinal">Порядковый номер столбца (от нуля).</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetDouble(System.Int32)">
      <summary>Возвращает значение заданного столбца в виде числа с плавающей запятой двойной точности.</summary>
      <returns>Значение указанного столбца.</returns>
      <param name="ordinal">Порядковый номер столбца (от нуля).</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetEnumerator">
      <summary>Возвращает перечислитель <see cref="T:System.Collections.IEnumerator" />, который может использоваться для просмотра строк в модуле чтения данных.</summary>
      <returns>Перечислитель <see cref="T:System.Collections.IEnumerator" />, который может использоваться для просмотра строк в модуле чтения данных.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetFieldType(System.Int32)">
      <summary>Возвращает тип данных заданного столбца.</summary>
      <returns>Тип данных заданного столбца.</returns>
      <param name="ordinal">Порядковый номер столбца (от нуля).</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetFloat(System.Int32)">
      <summary>Возвращает значение заданного столбца в виде числа с плавающей запятой одинарной точности.</summary>
      <returns>Значение указанного столбца.</returns>
      <param name="ordinal">Порядковый номер столбца (от нуля).</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetGuid(System.Int32)">
      <summary>Возвращает значение заданного столбца в виде глобально-уникального идентификатора GUID.</summary>
      <returns>Значение указанного столбца.</returns>
      <param name="ordinal">Порядковый номер столбца (от нуля).</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetInt16(System.Int32)">
      <summary>Возвращает значение указанного столбца в виде 16-разрядного целого числа со знаком.</summary>
      <returns>Значение указанного столбца.</returns>
      <param name="ordinal">Порядковый номер столбца (от нуля).</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetInt32(System.Int32)">
      <summary>Возвращает значение указанного столбца в виде 32-разрядного целого числа со знаком.</summary>
      <returns>Значение указанного столбца.</returns>
      <param name="ordinal">Порядковый номер столбца (от нуля).</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetInt64(System.Int32)">
      <summary>Возвращает значение указанного столбца в виде 64-разрядного целого числа со знаком.</summary>
      <returns>Значение указанного столбца.</returns>
      <param name="ordinal">Порядковый номер столбца (от нуля).</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetName(System.Int32)">
      <summary>Возвращает имя столбца, если известен его порядковый номер (от нуля).</summary>
      <returns>Имя заданного столбца.</returns>
      <param name="ordinal">Порядковый номер столбца (от нуля).</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetOrdinal(System.String)">
      <summary>Возвращает порядковый номер столбца, если известно его имя.</summary>
      <returns>Порядковый номер столбца (от нуля).</returns>
      <param name="name">Имя столбца.</param>
      <exception cref="T:System.IndexOutOfRangeException">Заданное имя недопустимо для имени столбца.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetProviderSpecificFieldType(System.Int32)">
      <summary>Возвращает тип поля заданного столбца, зависящий от поставщика.</summary>
      <returns>Объект <see cref="T:System.Type" />, описывающий тип данных указанного столбца.</returns>
      <param name="ordinal">Порядковый номер столбца (от нуля).</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetProviderSpecificValue(System.Int32)">
      <summary>Возвращает значение указанного столбца как экземпляра <see cref="T:System.Object" />.</summary>
      <returns>Значение указанного столбца.</returns>
      <param name="ordinal">Порядковый номер столбца (от нуля).</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetProviderSpecificValues(System.Object[])">
      <summary>Возвращает из коллекции все столбцы атрибутов, зависящие от поставщика, для текущей строки.</summary>
      <returns>Число экземпляров <see cref="T:System.Object" /> в массиве.</returns>
      <param name="values">Массив объектов <see cref="T:System.Object" />, в который необходимо скопировать столбцы атрибутов.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetSchemaTable">
      <summary>Возвращает таблицу <see cref="T:System.Data.DataTable" />, которая описывает метаданные столбца модуля <see cref="T:System.Data.Common.DbDataReader" />.</summary>
      <returns>Объект <see cref="T:System.Data.DataTable" />, описывающий метаданные столбцов.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetString(System.Int32)">
      <summary>Возвращает значение указанного столбца как экземпляра <see cref="T:System.String" />.</summary>
      <returns>Значение указанного столбца.</returns>
      <param name="ordinal">Порядковый номер столбца (от нуля).</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetValue(System.Int32)">
      <summary>Возвращает значение указанного столбца как экземпляра <see cref="T:System.Object" />.</summary>
      <returns>Значение указанного столбца.</returns>
      <param name="ordinal">Порядковый номер столбца (от нуля).</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.GetValues(System.Object[])">
      <summary>Заполняет массив объектов значениями столбца текущей строки.</summary>
      <returns>Число экземпляров <see cref="T:System.Object" /> в массиве.</returns>
      <param name="values">Массив объектов <see cref="T:System.Object" />, в который необходимо скопировать столбцы атрибутов.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.HasRows">
      <summary>Возвращает значение, указывающее на то, что в модуле чтения данных <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> содержится одна или несколько строк.</summary>
      <returns>Значение true, если модуль <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> содержит одну или несколько строк; в противном случае — false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.IsClosed">
      <summary>Возвращает значение, указывающее, закрыт ли модуль чтения <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" />.</summary>
      <returns>Значение true, если модуль <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" /> закрыт; в противном случае — false.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.IsDBNull(System.Int32)">
      <summary>Возвращает значение, указывающее, содержатся ли в столбце несуществующие или отсутствующие значения.</summary>
      <returns>Значение true, если указанный столбец эквивалентен <see cref="T:System.DBNull" />; в противном случае — false.</returns>
      <param name="ordinal">Порядковый номер столбца (от нуля).</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.Item(System.Int32)">
      <summary>Возвращает значение указанного столбца как экземпляра <see cref="T:System.Object" />.</summary>
      <returns>Значение указанного столбца.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.Item(System.String)">
      <summary>Возвращает значение указанного столбца как экземпляра <see cref="T:System.Object" />.</summary>
      <returns>Значение указанного столбца.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.NextResult">
      <summary>Перемещает модуль чтения данных к следующему результату при чтении результатов из пакета инструкций.</summary>
      <returns>Значение true, если имеется несколько результирующих наборов; в противном случае — false.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.NextResultAsync(System.Threading.CancellationToken)">
      <summary>Перемещает в асинхронном режиме модуль чтения на следующий результирующий набор при чтении пакета инструкций</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит значение true, если еще имеются результирующие наборы; в противном случае — значение false.</returns>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.Read">
      <summary>Перемещает модуль чтения к следующей записи в результирующем наборе.</summary>
      <returns>Значение true, если количество строк больше; в противном случае — false.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityDataReader.ReadAsync(System.Threading.CancellationToken)">
      <summary>Перемещает в асинхронном режиме модуль чтения на следующую строку текущего результирующего набора</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи — true, если количество строк больше; в противном случае — false.</returns>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.RecordsAffected">
      <summary>Возвращает число строк, которые были изменены, вставлены или удалены инструкцией SQL.</summary>
      <returns>Число измененных, вставленных или удаленных строк.Возвращает значение -1 для инструкций SELECT и значение 0, если строки не были затронуты или инструкция завершилась ошибкой.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityDataReader.VisibleFieldCount">
      <summary>Возвращает число не скрытых полей в <see cref="T:System.Data.Entity.Core.EntityClient.EntityDataReader" />.</summary>
      <returns>Число не скрытых полей.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityParameter">
      <summary>Класс, представляющий параметр, используемый в EntityCommand</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />, используя значения по умолчанию.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />, используя параметр с указанным именем и типом данных.</summary>
      <param name="parameterName">Имя параметра.</param>
      <param name="dbType">Одно из значений <see cref="T:System.Data.DbType" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType,System.Int32)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />, используя параметр с указанным именем, типом данных и размером.</summary>
      <param name="parameterName">Имя параметра.</param>
      <param name="dbType">Одно из значений <see cref="T:System.Data.DbType" />.</param>
      <param name="size">Размер параметра.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />, используя указанные свойства.</summary>
      <param name="parameterName">Имя параметра.</param>
      <param name="dbType">Одно из значений <see cref="T:System.Data.DbType" />.</param>
      <param name="size">Размер параметра.</param>
      <param name="direction">Одно из значений <see cref="T:System.Data.ParameterDirection" />.</param>
      <param name="isNullable">Значение true для указания на то, что параметр принимает значения NULL; в противном случае — false.</param>
      <param name="precision">Количество цифр, используемых для представления значения.</param>
      <param name="scale">Количество десятичных позиций, с которыми происходит разрешение значения.</param>
      <param name="sourceColumn">Имя исходного столбца.</param>
      <param name="sourceVersion">Одно из значений <see cref="T:System.Data.DataRowVersion" />.</param>
      <param name="value">Значение параметра.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.#ctor(System.String,System.Data.DbType,System.Int32,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />, используя указанные свойства.</summary>
      <param name="parameterName">Имя параметра.</param>
      <param name="dbType">Одно из значений <see cref="T:System.Data.DbType" />.</param>
      <param name="size">Размер параметра.</param>
      <param name="sourceColumn">Имя исходного столбца.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.DbType">
      <summary>Возвращает или устанавливает тип <see cref="T:System.Data.DbType" /> параметра.</summary>
      <returns>Одно из значений <see cref="T:System.Data.DbType" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.Direction">
      <summary>Возвращает или задает направление параметра.</summary>
      <returns>Одно из значений <see cref="T:System.Data.ParameterDirection" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.EdmType">
      <summary>Возвращает или задает тип параметра, представленного как EdmType.</summary>
      <returns>Тип параметра, выраженный как тип EdmType.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.IsNullable">
      <summary>Возвращает или задает значение, указывающее, принимает ли этот параметр значения NULL.</summary>
      <returns>Значение true, если значения NULL приняты; в противном случае — false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.ParameterName">
      <summary>Возвращает или задает имя параметра сущности.</summary>
      <returns>Имя параметра сущности.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.Precision">
      <summary>Возвращает или задает количество цифр, используемых для представления свойства <see cref="P:System.Data.Entity.Core.EntityClient.EntityParameter.Value" />.</summary>
      <returns>Количество цифр, используемых для представления значения.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.ResetDbType">
      <summary>Переустанавливает тип, связанный с <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.Scale">
      <summary>Возвращает или задает число десятичных разрядов, до которых вычисляется значение <see cref="P:System.Data.Entity.Core.EntityClient.EntityParameter.Value" />.</summary>
      <returns>Количество десятичных позиций, с которыми происходит разрешение значения.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.Size">
      <summary>Возвращает или задает максимальный размер данных в столбце.</summary>
      <returns>Максимальный размер данных в столбце.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.SourceColumn">
      <summary>Возвращает или задает имя исходного столбца, сопоставленного с <see cref="T:System.Data.DataSet" /> и используемого для загрузки или возврата <see cref="P:System.Data.Entity.Core.EntityClient.EntityParameter.Value" />.</summary>
      <returns>Имя исходного столбца, который сопоставляется с набором данных и используется для загрузки и возврата значения.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.SourceColumnNullMapping">
      <summary>Возвращает или задает значение, указывающее, допускает ли исходный столбец значение NULL.</summary>
      <returns>Значение true, если исходный столбец допускает значение NULL; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.SourceVersion">
      <summary>Возвращает или задает версию <see cref="T:System.Data.DataRowVersion" />, которая используется при загрузке значения.</summary>
      <returns>Одно из значений <see cref="T:System.Data.DataRowVersion" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameter.ToString">
      <summary>Возвращает строковое представление параметра.</summary>
      <returns>Строковое представление параметра.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameter.Value">
      <summary>Возвращает или задает значение параметра.</summary>
      <returns>Значение параметра.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection">
      <summary>Класс, представляющий коллекцию параметров, используемую в EntityCommand</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Add(System.Data.Entity.Core.EntityClient.EntityParameter)">
      <summary>Добавляет указанный объект <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> в коллекцию <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.</summary>
      <returns>Новый объект <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</returns>
      <param name="value">Значение <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />, предназначенное для добавления в коллекцию.</param>
      <exception cref="T:System.ArgumentException">Значение <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />, указанное в параметре, передаваемом по значению, уже добавлено в эту или другую коллекцию <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.</exception>
      <exception cref="T:System.InvalidCastException">Передан параметр, отличный от объекта <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр value имеет значение NULL.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Add(System.Object)">
      <summary>Добавляет указанный объект в коллекцию <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.</summary>
      <returns>Индекс нового объекта <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</returns>
      <param name="value">Объект <see cref="T:System.Object" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Add(System.String,System.Data.DbType)">
      <summary>Добавляет объект <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> в коллекцию <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> в соответствии с заданным именем и типом данных параметра.</summary>
      <returns>Новый объект <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</returns>
      <param name="parameterName">Имя параметра.</param>
      <param name="dbType">Одно из значений <see cref="T:System.Data.DbType" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Add(System.String,System.Data.DbType,System.Int32)">
      <summary>Добавляет объект <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> в коллекцию <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> в соответствии с заданным именем параметра, типом данных и длиной столбца.</summary>
      <returns>Новый объект <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</returns>
      <param name="parameterName">Имя параметра.</param>
      <param name="dbType">Одно из значений <see cref="T:System.Data.DbType" />.</param>
      <param name="size">Длина столбца.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.AddRange(System.Array)">
      <summary>Добавляет массив значений в конец коллекции <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.</summary>
      <param name="values">Добавляемые значения <see cref="T:System.Array" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.AddRange(System.Data.Entity.Core.EntityClient.EntityParameter[])">
      <summary>Добавляет массив значений <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> в конец коллекции <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.</summary>
      <param name="values">Добавляемые значения <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.AddWithValue(System.String,System.Object)">
      <summary>Добавляет значение в конец коллекции <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</returns>
      <param name="parameterName">Имя параметра.</param>
      <param name="value">Добавляемое значение.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Clear">
      <summary>Удаляет все объекты <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> из коллекции <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Contains(System.Object)">
      <summary>Определяет, находится ли указанное значение <see cref="T:System.Object" /> в этой коллекции <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.</summary>
      <returns>Значение true, если коллекция <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> содержит значение; в противном случае — false.</returns>
      <param name="value">Значение типа <see cref="T:System.Object" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Contains(System.String)">
      <summary>Определяет, находится ли указанное значение <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> в этой коллекции <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.</summary>
      <returns>Значение true, если коллекция <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> содержит значение; в противном случае — false.</returns>
      <param name="parameterName">Значение типа <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.CopyTo(System.Array,System.Int32)">
      <summary>Копирует все элементы текущей коллекции <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> в указанный одномерный массив <see cref="T:System.Array" />, начиная с указанного индекса в массиве <see cref="T:System.Array" />.</summary>
      <param name="array">Одномерный массив <see cref="T:System.Array" />, который представляет собой назначение элементов, копируемых из текущей коллекции <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.</param>
      <param name="index">32-разрядное целое число, представляющее индекс в массиве <see cref="T:System.Array" />, с которого начинается копирование.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.CopyTo(System.Data.Entity.Core.EntityClient.EntityParameter[],System.Int32)">
      <summary>Копирует все элементы текущей коллекции <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> в указанную коллекцию <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />, начиная с указанного индекса в коллекции назначения.</summary>
      <param name="array">Коллекция <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />, которая является назначением элементов, скопированных из текущей коллекции <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.</param>
      <param name="index">32-разрядное целое число, представляющее индекс в массиве <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />, с которого начинается копирование.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Count">
      <summary>Возвращает значение Integer, которое содержит количество элементов в коллекции <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.</summary>
      <returns>Число элементов в коллекции <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> является значением типа Integer.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.GetEnumerator">
      <summary>Возвращает перечислитель, который выполняет итерации по коллекции <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.</summary>
      <returns>Перечислитель <see cref="T:System.Collections.IEnumerator" /> для коллекции <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IndexOf(System.Data.Entity.Core.EntityClient.EntityParameter)">
      <summary>Возвращает положение заданного объекта <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> в коллекции.</summary>
      <returns>Местоположение с отсчетом от нуля указанного объекта <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />, который является значением <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> в коллекции.Возвращает -1, если этот объект не существует в коллекции <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.</returns>
      <param name="value">Искомый объект <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IndexOf(System.Object)">
      <summary>Возвращает положение заданного объекта <see cref="T:System.Object" /> в коллекции.</summary>
      <returns>Местоположение с отсчетом от нуля указанного объекта <see cref="T:System.Object" />, который является значением <see cref="T:System.Object" /> в коллекции.Возвращает -1, если этот объект не существует в коллекции <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.</returns>
      <param name="value">Искомый объект <see cref="T:System.Object" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IndexOf(System.String)">
      <summary>Возвращает положение заданного объекта <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> с указанным именем.</summary>
      <returns>Положение (отсчет с нуля) указанного объекта <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> с заданным именем с учетом регистра.Возвращает -1, если этот объект не существует в коллекции <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.</returns>
      <param name="parameterName">Имя искомого объекта <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> с учетом регистра.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Insert(System.Int32,System.Data.Entity.Core.EntityClient.EntityParameter)">
      <summary>Вставляет объект <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> в коллекцию <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> по указанному индексу.</summary>
      <param name="index">Индекс (отсчет с нуля), по которому необходимо вставить значение.</param>
      <param name="value">Объект <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />, который должен быть вставлен в коллекцию <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Insert(System.Int32,System.Object)">
      <summary>Вставляет объект <see cref="T:System.Object" /> в коллекцию <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> по указанному индексу.</summary>
      <param name="index">Индекс (отсчет с нуля), по которому необходимо вставить значение.</param>
      <param name="value">Объект <see cref="T:System.Object" /> для вставки в коллекцию <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IsFixedSize">
      <summary>Возвращает значение, которое указывает, имеет ли массив <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> постоянный размер.</summary>
      <returns>Возвращает true, если коллекция <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> имеет постоянный размер; в противном случае — false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IsReadOnly">
      <summary>Возвращает значение, которое указывает, допускает ли коллекция <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> только чтение.</summary>
      <returns>Возвращает true, если коллекция <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> доступна только для чтения; в противном случае — false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.IsSynchronized">
      <summary>Возвращает значение, которое определяет, является ли коллекция <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> синхронизированной.</summary>
      <returns>Возвращает true, если коллекция <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" /> синхронизирована; в противном случае — false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Item(System.Int32)">
      <summary>Возвращает объект <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> по указанному индексу.</summary>
      <returns>Значение <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> по указанному индексу.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Item(System.String)">
      <summary>Возвращает объект <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> с указанным именем.</summary>
      <returns>Параметр <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> с указанным именем.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Remove(System.Data.Entity.Core.EntityClient.EntityParameter)">
      <summary>Удаляет указанный объект <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> из коллекции.</summary>
      <param name="value">Объект <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />, который должен быть удален из коллекции.</param>
      <exception cref="T:System.InvalidCastException">Параметр не является объектом <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</exception>
      <exception cref="T:System.SystemException">Параметр отсутствует в коллекции.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.Remove(System.Object)">
      <summary>Удаляет указанный параметр из коллекции.</summary>
      <param name="value">Объект <see cref="T:System.Object" />, который должен быть удален из коллекции.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.RemoveAt(System.Int32)">
      <summary>Удаляет объект <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> с указанным индексом из коллекции <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.</summary>
      <param name="index">Индекс (отсчет с нуля) удаляемого объекта <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityParameterCollection.RemoveAt(System.String)">
      <summary>Удаляет объект <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" /> с указанным именем из коллекции <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.</summary>
      <param name="parameterName">Имя удаляемого объекта <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityParameterCollection.SyncRoot">
      <summary>Возвращает объект, который может использоваться для синхронизации доступа к коллекции <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.</summary>
      <returns>Объект, который может использоваться для синхронизации доступа к коллекции <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameterCollection" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityProviderFactory">
      <summary>Класс, представляющий фабрику поставщиков для поставщика клиента сущности</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateCommand">
      <summary>Возвращает новый экземпляр класса поставщика, который реализует класс <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" />.</summary>
      <returns>Новый экземпляр <see cref="T:System.Data.Entity.Core.EntityClient.EntityCommand" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateCommandBuilder">
      <summary>Создает исключение <see cref="T:System.NotSupportedException" />.Этот метод в настоящее время не поддерживается.</summary>
      <returns>Этот метод в настоящее время не поддерживается.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateConnection">
      <summary>Возвращает новый экземпляр класса поставщика, который реализует класс <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />.</summary>
      <returns>Новый экземпляр <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateConnectionStringBuilder">
      <summary>Возвращает новый экземпляр класса поставщика, который реализует класс <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />.</summary>
      <returns>Новый экземпляр <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnectionStringBuilder" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateDataAdapter">
      <summary>Создает исключение <see cref="T:System.NotSupportedException" />.Этот метод в настоящее время не поддерживается.</summary>
      <returns>Этот метод в настоящее время не поддерживается.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreateParameter">
      <summary>Возвращает новый экземпляр класса поставщика, который реализует класс <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</summary>
      <returns>Новый экземпляр <see cref="T:System.Data.Entity.Core.EntityClient.EntityParameter" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.CreatePermission(System.Security.Permissions.PermissionState)">
      <summary>Создает исключение <see cref="T:System.NotSupportedException" />.Этот метод в настоящее время не поддерживается.</summary>
      <returns>Этот метод в настоящее время не поддерживается.</returns>
      <param name="state">Этот метод в настоящее время не поддерживается.</param>
    </member>
    <member name="F:System.Data.Entity.Core.EntityClient.EntityProviderFactory.Instance">
      <summary>Одноэлементный объект для объекта фабрики поставщика клиента сущности.Остается открытым полем (не свойством), поскольку DbProviderFactory ожидает поле.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityProviderFactory.System#IServiceProvider#GetService(System.Type)">
      <summary>Возвращает запрошенный класс <see cref="T:System.IServiceProvider" />.</summary>
      <returns>Новый экземпляр <see cref="T:System.IServiceProvider" />.Поддерживаемыми типами являются <see cref="T:System.Data.Entity.Core.Common.DbProviderServices" />, <see cref="T:System.Data.Entity.Core.Common.DbCommandDefinitionBuilder" /> и <see cref="T:System.Data.IEntityAdapter" />.Возвращает NULL (или Nothing в Visual Basic) для всех прочих типов.</returns>
      <param name="serviceType">Возвращаемое значение <see cref="T:System.Type" />.</param>
    </member>
    <member name="T:System.Data.Entity.Core.EntityClient.EntityTransaction">
      <summary>Класс, представляющий транзакцию для концептуального уровня</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityTransaction.Commit">
      <summary>Фиксирует базовую транзакцию.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityTransaction.Connection">
      <summary>Возвращает коллекцию <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> для этой транзакции <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" />.</summary>
      <returns>Экземпляр типа <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" /> для базового источника данных.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityTransaction.DbConnection">
      <summary>Объект соединения, владеющий этим объектом транзакции</summary>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityTransaction.Dispose(System.Boolean)">
      <summary>Очищает этот объект транзакции</summary>
      <param name="disposing">Значение true — освободить управляемые и неуправляемые ресурсы; значение false — освободить только неуправляемые ресурсы.</param>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityTransaction.IsolationLevel">
      <summary>Возвращает уровень изоляции этой транзакции <see cref="T:System.Data.Entity.Core.EntityClient.EntityTransaction" />.</summary>
      <returns>Значение перечисления <see cref="T:System.Data.IsolationLevel" />, которое представляет уровень изоляции базовой транзакции.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.EntityClient.EntityTransaction.Rollback">
      <summary>Откатывает базовую транзакцию.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.EntityClient.EntityTransaction.StoreTransaction">
      <summary>Возвращает значение DbTransaction для основной транзакции поставщика.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.AssociationSetMapping">
      <summary>Представляет метаданные Mapping для AssociationSet в пространстве CS.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.AssociationSetMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.AssociationSet,System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Mapping.EntityContainerMapping)">
      <summary>Инициализирует новый экземпляр AssociationSetMapping.</summary>
      <param name="associationSet">Сопоставляемый набор ассоциаций.</param>
      <param name="storeEntitySet">Сопоставляемый набор сущностей в хранилище.</param>
      <param name="containerMapping">Сопоставление родительского контейнера.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.AssociationSetMapping.AddCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>Добавляет условие сопоставления свойства.</summary>
      <param name="condition">Условие для добавления.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.AssociationSet">
      <summary>Возвращает сопоставленный набор ассоциаций.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.AssociationTypeMapping">
      <summary>Возвращает сопоставление содержащегося типа ассоциации.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.Conditions">
      <summary>Возвращает условия сопоставления свойств.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.ModificationFunctionMapping">
      <summary>Возвращает или задает соответствующее сопоставление функций.Может принимать значение NULL.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.AssociationSetMapping.RemoveCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>Удаляет условие сопоставления свойства.</summary>
      <param name="condition">Условие сопоставления свойства для удаления.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.SourceEndMapping">
      <summary>Возвращает или задает сопоставление свойства элемента источника.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.StoreEntitySet">
      <summary>Возвращает сопоставленный набор сущностей в хранилище</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetMapping.TargetEndMapping">
      <summary>Возвращает или задает сопоставления свойства цели.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping">
      <summary>Описывает сопоставления функции изменения для набора ассоциаций.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.AssociationSet,System.Data.Entity.Core.Mapping.ModificationFunctionMapping,System.Data.Entity.Core.Mapping.ModificationFunctionMapping)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping" />.</summary>
      <param name="associationSet">Набор ассоциаций.</param>
      <param name="deleteFunctionMapping">Сопоставление функций удаления.</param>
      <param name="insertFunctionMapping">Сопоставление функций вставки.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping.AssociationSet">
      <summary>Возвращает набор ассоциаций.</summary>
      <returns>Набор ассоциаций.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping.DeleteFunctionMapping">
      <summary>Возвращает сопоставление функций удаления.</summary>
      <returns>Сопоставление функций удаления.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping.InsertFunctionMapping">
      <summary>Возвращает сопоставление функций вставки.</summary>
      <returns>Сопоставление функций вставки.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.AssociationSetModificationFunctionMapping.ToString">
      <summary>Конвертирует значение этого экземпляра в эквивалентного строкового представления.</summary>
      <returns>Строковое представление значения этого экземпляра.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.AssociationTypeMapping">
      <summary>Представляет метаданные сопоставления для сопоставления типа ассоциации в пространстве CS.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.AssociationTypeMapping.#ctor(System.Data.Entity.Core.Mapping.AssociationSetMapping)">
      <summary>Создает экземпляр AssociationTypeMapping.</summary>
      <param name="associationSetMapping">Объект AssociationSetMapping, содержащий данный AssociationTypeMapping.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationTypeMapping.AssociationSetMapping">
      <summary>Возвращает объект AssociationSetMapping, содержащий данный AssociationTypeMapping.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationTypeMapping.AssociationType">
      <summary>Возвращает сопоставляемый тип ассоциации.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.AssociationTypeMapping.MappingFragment">
      <summary>Возвращает один фрагмент сопоставления.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ComplexPropertyMapping">
      <summary>Метаданные сопоставления для сложных свойств.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexPropertyMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>Создает новый объект сопоставления сложного свойства</summary>
      <param name="property">Объект MemberMetadata, представляющий данный сложный элемент</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexPropertyMapping.AddTypeMapping(System.Data.Entity.Core.Mapping.ComplexTypeMapping)">
      <summary>Добавляет сопоставление типа, соответствующее вложенному сложному типу.</summary>
      <param name="typeMapping">Добавляемое сопоставление сложного типа.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexPropertyMapping.RemoveTypeMapping(System.Data.Entity.Core.Mapping.ComplexTypeMapping)">
      <summary>Удаляет сопоставление типа, соответствующее вложенному сложному типу.</summary>
      <param name="typeMapping">Удаляемое сопоставление сложного типа.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ComplexPropertyMapping.TypeMappings">
      <summary>Получает коллекции только для чтения сопоставлений типов, соответствующих вложенным сложным типам.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ComplexTypeMapping">
      <summary>Метаданные сопоставления для сложных типов.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexTypeMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.ComplexType)">
      <summary>Создает экземпляр ComplexTypeMapping.</summary>
      <param name="complexType">Сопоставляемый тип ComplexType.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexTypeMapping.AddCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>Добавляет условие сопоставления свойства.</summary>
      <param name="condition">Условие сопоставления свойства для добавления.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexTypeMapping.AddPropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
      <summary>Добавляет сопоставление свойства.</summary>
      <param name="propertyMapping">Сопоставление свойства для добавления.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ComplexTypeMapping.ComplexType">
      <summary>Возвращает сопоставляемый тип ComplexType.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ComplexTypeMapping.Conditions">
      <summary>Возвращает коллекцию только для чтения, содержащую условия сопоставления свойств.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ComplexTypeMapping.PropertyMappings">
      <summary>Возвращает коллекцию только для чтения, содержащую сопоставления свойств.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexTypeMapping.RemoveCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>Удаляет условие сопоставления свойства.</summary>
      <param name="condition">Условие сопоставления свойства для удаления.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ComplexTypeMapping.RemovePropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
      <summary>Удаляет сопоставление свойства.</summary>
      <param name="propertyMapping">Сопоставление свойства для удаления.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ConditionPropertyMapping">
      <summary>Метаданные сопоставления для сопоставления условного свойства для типа.Сопоставление свойства условия определяет условие на стороне C или стороне S.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ConditionPropertyMapping.Column">
      <summary>Возвращает EdmProperty, которое определяет сопоставляемый столбец.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ConditionPropertyMapping.Property">
      <summary>Возвращает EdmProperty, которое определяет сопоставляемое свойство.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EndPropertyMapping">
      <summary>Метаданные сопоставления для свойства End ассоциации.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EndPropertyMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.AssociationEndMember)">
      <summary>Создает сопоставление свойства элемента ассоциации.</summary>
      <param name="associationEnd">AssociationEndMember, определяющий сопоставляемый элемент ассоциации.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EndPropertyMapping.AddPropertyMapping(System.Data.Entity.Core.Mapping.ScalarPropertyMapping)">
      <summary>Добавляет сопоставление дочернего свойства-столбца.</summary>
      <param name="propertyMapping">ScalarPropertyMapping, определяющее добавляемое сопоставление свойства-столбца.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EndPropertyMapping.AssociationEnd">
      <summary>Возвращает AssociationEndMember, определяющий сопоставляемый элемент ассоциации.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EndPropertyMapping.PropertyMappings">
      <summary>Возвращает коллекцию ReadOnlyCollection элементов ScalarPropertyMapping, которые определяют дочерние элементы сопоставлений свойств ассоциации.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EndPropertyMapping.RemovePropertyMapping(System.Data.Entity.Core.Mapping.ScalarPropertyMapping)">
      <summary>Удаляет сопоставление дочернего свойства-столбца.</summary>
      <param name="propertyMapping">Удаляемый элемент ScalarPropertyMapping, определяющий добавляемое сопоставление свойства-столбца.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntityContainerMapping">
      <summary>Представляет метаданные сопоставления для сопоставления EntityContainer в пространстве CS.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EntityContainer,System.Data.Entity.Core.Metadata.Edm.EntityContainer,System.Data.Entity.Core.Mapping.StorageMappingItemCollection,System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Mapping.EntityContainerMapping" />.</summary>
      <param name="conceptualEntityContainer">Контейнер сущностей концептуальной модели для сопоставления.</param>
      <param name="storeEntityContainer">Контейнер сущностей в хранилище для сопоставления.</param>
      <param name="mappingItemCollection">Коллекция элементов сопоставления с родительским объектом.</param>
      <param name="generateUpdateViews">Флажок, указывающий, следует ли формировать обновления представлений.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.AddFunctionImportMapping(System.Data.Entity.Core.Mapping.FunctionImportMapping)">
      <summary>Добавляет сопоставление импорта функции.</summary>
      <param name="functionImportMapping">Сопоставление импорта функции для добавления.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.AddSetMapping(System.Data.Entity.Core.Mapping.AssociationSetMapping)">
      <summary>Добавляет сопоставление набора ассоциаций.</summary>
      <param name="setMapping">Сопоставление набора ассоциаций для добавления.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.AddSetMapping(System.Data.Entity.Core.Mapping.EntitySetMapping)">
      <summary>Добавляет сопоставление набора сущностей.</summary>
      <param name="setMapping">Сопоставление набора сущностей для добавления.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.AssociationSetMappings">
      <summary>Возвращает сопоставления набора ассоциаций.</summary>
      <returns>Сопоставления набора ассоциаций.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.BuiltInTypeKind">
      <summary>Возвращает вид типа для этого элемента.</summary>
      <returns>Вид типа для этого элемента.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.ConceptualEntityContainer">
      <summary>Возвращает контейнер сущностей концептуальной модели.</summary>
      <returns>Контейнер концептуальных сущностей.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.EntitySetMappings">
      <summary>Возвращает сопоставления набора сущностей.</summary>
      <returns>Сопоставления наборов сущностей.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.FunctionImportMappings">
      <summary>Возвращает сопоставления импорта функции.</summary>
      <returns>Сопоставления импорта функции.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.GenerateUpdateViews">
      <summary>Возвращает флажок, указывающий, следует ли формировать обновления представлений.</summary>
      <returns>Значение true, чтобы создать представления обновления; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.MappingItemCollection">
      <summary>Возвращает коллекцию элементов сопоставления с родительским объектом.</summary>
      <returns>Коллекция элементов сопоставления с родительским объектом.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.RemoveFunctionImportMapping(System.Data.Entity.Core.Mapping.FunctionImportMapping)">
      <summary>Удаляет сопоставление импорта функции.</summary>
      <param name="functionImportMapping">Сопоставление импорта функции для удаления.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.RemoveSetMapping(System.Data.Entity.Core.Mapping.AssociationSetMapping)">
      <summary>Удаляет сопоставление набора ассоциаций.</summary>
      <param name="setMapping">Сопоставление набора ассоциаций для удаления.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityContainerMapping.RemoveSetMapping(System.Data.Entity.Core.Mapping.EntitySetMapping)">
      <summary>Удаляет сопоставление набора ассоциаций.</summary>
      <param name="setMapping">Сопоставление набора ассоциаций для удаления.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityContainerMapping.StoreEntityContainer">
      <summary>Возвращает контейнер сущностей в хранилище.</summary>
      <returns>Контейнер сущностей в хранилище.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntitySetBaseMapping">
      <summary>Представляет метаданные Mapping для Extent в пространстве CS.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntitySetBaseMapping.ContainerMapping">
      <summary>Возвращает сопоставление родительского контейнера.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntitySetBaseMapping.QueryView">
      <summary>Возвращает или задает представление запроса, связанное с данным сопоставлением.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntitySetMapping">
      <summary>Представляет метаданные сопоставления для EntitySet в пространстве CS.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntitySetMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Mapping.EntityContainerMapping)">
      <summary>Инициализирует новый экземпляр EntitySetMapping.</summary>
      <param name="entitySet">Сопоставляемый набор сущностей.</param>
      <param name="containerMapping">Сопоставление родительского контейнера.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntitySetMapping.AddModificationFunctionMapping(System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping)">
      <summary>Добавляет сопоставление функции.</summary>
      <param name="modificationFunctionMapping">Добавляемое сопоставление функции.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntitySetMapping.AddTypeMapping(System.Data.Entity.Core.Mapping.EntityTypeMapping)">
      <summary>Добавляет сопоставление типов.</summary>
      <param name="typeMapping">Добавляемое сопоставление типа.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntitySetMapping.EntitySet">
      <summary>Возвращает сопоставляемый набор сущностей.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntitySetMapping.EntityTypeMappings">
      <summary>Возвращает содержащиеся сопоставления типов сущностей.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntitySetMapping.ModificationFunctionMappings">
      <summary>Возвращает соответствующие сопоставления функций.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntitySetMapping.RemoveModificationFunctionMapping(System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping)">
      <summary>Удаляет сопоставление функции.</summary>
      <param name="modificationFunctionMapping">Удаляемое сопоставление функции.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntitySetMapping.RemoveTypeMapping(System.Data.Entity.Core.Mapping.EntityTypeMapping)">
      <summary>Удаляет сопоставление типов.</summary>
      <param name="typeMapping">Сопоставление типов для удаления.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntityTypeMapping">
      <summary>Метаданные сопоставления для типа сущности.Если EntitySet представляет более одного типа сущностей, то имеется более одного сопоставления EntityTypeMapping для EntitySet (например, если экстент сущностей PersonSet представляет сущности типов Person и Customer, то будут существовать два сопоставления EntityType, относящиеся к сопоставлению для PersonSet).</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.#ctor(System.Data.Entity.Core.Mapping.EntitySetMapping)">
      <summary>Создает экземпляр EntityTypeMapping.</summary>
      <param name="entitySetMapping">Объект EntitySetMapping, содержащий данный EntityTypeMapping.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.AddFragment(System.Data.Entity.Core.Mapping.MappingFragment)">
      <summary>Добавляет фрагмент сопоставления.</summary>
      <param name="fragment">Добавляемый фрагмент сопоставления.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.AddIsOfType(System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>Добавляет в сопоставление иерархию типов сущностей.Иерархия представлена указанным типом корневой сущности.</summary>
      <param name="type">Корневой EntityType добавляемой иерархии.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.AddType(System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>Добавляет тип сущности в сопоставление.</summary>
      <param name="type">Добавляемый EntityType.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.EntitySetMapping">
      <summary>Возвращает объект EntitySetMapping, содержащий данный EntityTypeMapping.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.EntityType">
      <summary>Возвращает один сопоставляемый EntityType.Вызывает исключение в случае сопоставления типа иерархии.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.EntityTypes">
      <summary>Возвращает сопоставленные типы сущностей.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.Fragments">
      <summary>Получает коллекцию фрагментов сопоставления только для чтения.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.IsHierarchyMapping">
      <summary>Возвращает флаг, указывающий, является ли данный тип сопоставлением иерархии.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeMapping.IsOfEntityTypes">
      <summary>Возвращает сопоставленные базовые типы для сопоставления иерархии.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.RemoveFragment(System.Data.Entity.Core.Mapping.MappingFragment)">
      <summary>Удаляет фрагмент сопоставления.</summary>
      <param name="fragment">Удаляемый фрагмент сопоставления.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.RemoveIsOfType(System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>Удаляет иерархию типов сущностей из сопоставления.Иерархия представлена указанным типом корневой сущности.</summary>
      <param name="type">Корневой EntityType удаляемой иерархии.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeMapping.RemoveType(System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>Удаляет тип сущности из сопоставления.</summary>
      <param name="type">Удаляемый экземпляр EntityType.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping">
      <summary>Описывает сопоставления функции изменения для типа сущности в наборе сущностей.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Mapping.ModificationFunctionMapping,System.Data.Entity.Core.Mapping.ModificationFunctionMapping,System.Data.Entity.Core.Mapping.ModificationFunctionMapping)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping" />.</summary>
      <param name="entityType">Тип сущности EDM.</param>
      <param name="deleteFunctionMapping">Сопоставление для удаления функции.</param>
      <param name="insertFunctionMapping">Сопоставление для вставки функции.</param>
      <param name="updateFunctionMapping">Сопоставление для обновления функции.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.DeleteFunctionMapping">
      <summary>Получает сопоставление для удаления функции.</summary>
      <returns>Сопоставление для удаления функции.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.EntityType">
      <summary>Получает тип сущности EDM.</summary>
      <returns>Тип сущности EDM.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.InsertFunctionMapping">
      <summary>Получает сопоставление для вставки функции.</summary>
      <returns>Сопоставление для вставки функции.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.ToString">
      <summary>Возвращает строковое представление объекта <see cref="T:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping" />.</summary>
      <returns>Строковое представление объекта <see cref="T:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityTypeModificationFunctionMapping.UpdateFunctionMapping">
      <summary>Получает сопоставление для обновления функции.</summary>
      <returns>Сопоставление для обновления функции.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntityViewContainer">
      <summary>Базовый класс для типа, создаваемого во время разработки для хранения созданных представлений.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityViewContainer.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Mapping.EntityViewContainer" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewContainer.EdmEntityContainerName">
      <summary>Возвращает или задает имя объекта <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />.</summary>
      <returns>Имя контейнера.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityViewContainer.GetViewAt(System.Int32)">
      <summary>Возвращает пару «ключ-значение» по указанному индексу, который содержит представление и его ключ.</summary>
      <returns>Пара «ключ-значение» по указанному индексу, которая содержит представление и ключ.</returns>
      <param name="index">Индекс представления.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewContainer.HashOverAllExtentViews">
      <summary>Хэш-значение представлений.</summary>
      <returns>Хэш-значение.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewContainer.HashOverMappingClosure">
      <summary>Хэш-значение.</summary>
      <returns>Хэш-значение.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewContainer.StoreEntityContainerName">
      <summary>Возвращает или задает объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> в схеме хранения.</summary>
      <returns>Имя контейнера.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewContainer.ViewCount">
      <summary>Возвращает или задает число представлений.</summary>
      <returns>Число представлений.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.EntityViewGenerationAttribute">
      <summary>Атрибут для разметки сборок, содержащих тип созданных представлений.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.EntityViewGenerationAttribute.#ctor(System.Type)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Mapping.EntityViewGenerationAttribute" />.</summary>
      <param name="viewGenerationType">Тип представления.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.EntityViewGenerationAttribute.ViewGenerationType">
      <summary>Возвращает свойство типа T:System.Type для представления.</summary>
      <returns>Свойство типа T:System.Type для представления.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportComplexTypeMapping">
      <summary>Представляет сопоставление сложного типа для результата импорта функции.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportComplexTypeMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.ComplexType,System.Collections.ObjectModel.Collection{System.Data.Entity.Core.Mapping.FunctionImportReturnTypePropertyMapping})">
      <summary>Инициализирует новый экземпляр FunctionImportComplexTypeMapping.</summary>
      <param name="returnType">Возвращаемый тип.</param>
      <param name="properties">Сопоставления свойств для результирующего типа импорта функции.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportComplexTypeMapping.ReturnType">
      <summary>Получает возвращаемый тип.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping">
      <summary>Представляет сопоставление типа сущности импорта функции.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping.#ctor(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EntityType},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EntityType},System.Collections.ObjectModel.Collection{System.Data.Entity.Core.Mapping.FunctionImportReturnTypePropertyMapping},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingCondition})">
      <summary>Инициализирует новый экземпляр FunctionImportEntityTypeMapping.</summary>
      <param name="isOfTypeEntityTypes">Типы сущностей в основании иерархии типов для сопоставления.</param>
      <param name="entityTypes">Типы сущности для сопоставления.</param>
      <param name="properties">Сопоставления свойств для результирующих типов импорта функции.</param>
      <param name="conditions">Условия сопоставления.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping.Conditions">
      <summary>Возвращает условия сопоставления.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping.EntityTypes">
      <summary>Возвращает сопоставляемые типы сущностей.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMapping.IsOfTypeEntityTypes">
      <summary>Возвращает типы сущностей в основании сопоставляемой иерархии.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingCondition">
      <summary>Представляет условие сопоставления для результата импорта функции.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingCondition.ColumnName">
      <summary>Возвращает имя столбца базы данных, используемого для вычисления условия.</summary>
      <returns>Имя столбца базы данных, используемого для вычисления условия.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingCondition.ToString">
      <summary>Конвертирует значение текущего экземпляра в эквивалентное строковое представление.</summary>
      <returns>Строковое представление текущего экземпляра.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionIsNull">
      <summary>Представляет условие сопоставления для результата импорта функции, которое вычисляется проверкой на значение null или его отсутствие.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionIsNull.#ctor(System.String,System.Boolean)">
      <summary>Инициализирует новый экземпляр FunctionImportEntityTypeMappingConditionIsNull.</summary>
      <param name="columnName">Имя столбца базы данных, используемого для вычисления условия.</param>
      <param name="isNull">Флаг, указывающий, следует ли выполнять проверку на значение null или его отсутствие.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionIsNull.IsNull">
      <summary>Возвращает флаг, указывающий, следует ли выполнять проверку на значение null или его отсутствие.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionValue">
      <summary>Представляет условие сопоставления для результата импорта функции, которое вычисляется при сравнении с указанным значением.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionValue.#ctor(System.String,System.Object)">
      <summary>Инициализирует новый экземпляр FunctionImportEntityTypeMappingConditionValue.</summary>
      <param name="columnName">Имя столбца базы данных, используемого для вычисления условия.</param>
      <param name="value">Значение для сравнения.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportEntityTypeMappingConditionValue.Value">
      <summary>Возвращает значение, используемое при сравнении.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportMapping">
      <summary>Представляет сопоставление между импортом функции модели и составляемой или несоставляемой функцией хранилища.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportMapping.FunctionImport">
      <summary>Возвращает функцию модели (или источник сопоставления)</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportMapping.TargetFunction">
      <summary>Возвращает функцию хранилища (или целевой объект сопоставления)</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportMappingComposable">
      <summary>Представляет сопоставление между импортом функции модели и составляемой функцией хранилища.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportMappingComposable.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Mapping.FunctionImportResultMapping,System.Data.Entity.Core.Mapping.EntityContainerMapping)">
      <summary>Инициализирует новый экземпляр класса FunctionImportMappingComposable.</summary>
      <param name="functionImport">Импорт функции модели.</param>
      <param name="targetFunction">Составляемая функция хранилища.</param>
      <param name="resultMapping">Сопоставление результатов для импорта функции.</param>
      <param name="containerMapping">Сопоставление родительского контейнера.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportMappingComposable.ResultMapping">
      <summary>Возвращает сопоставление результатов для импорта функции.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportMappingNonComposable">
      <summary>Представляет сопоставление между импортом функции модели и несоставляемой функцией хранилища.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportMappingNonComposable.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Mapping.FunctionImportResultMapping},System.Data.Entity.Core.Mapping.EntityContainerMapping)">
      <summary>Инициализирует новый экземпляр FunctionImportMappingNonComposable.</summary>
      <param name="functionImport">Импорт функции модели.</param>
      <param name="targetFunction">Несоставляемая функция хранилища</param>
      <param name="resultMappings">Сопоставление результатов импорта функции.</param>
      <param name="containerMapping">Сопоставление родительского контейнера.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportMappingNonComposable.ResultMappings">
      <summary>Возвращает сопоставления результатов импорта функции.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportResultMapping">
      <summary>Представляет сопоставление результатов для импорта функции.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportResultMapping.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Mapping.FunctionImportResultMapping" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportResultMapping.AddTypeMapping(System.Data.Entity.Core.Mapping.FunctionImportStructuralTypeMapping)">
      <summary>Добавляет сопоставление типов.</summary>
      <param name="typeMapping">Добавляемое сопоставление типа.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportResultMapping.RemoveTypeMapping(System.Data.Entity.Core.Mapping.FunctionImportStructuralTypeMapping)">
      <summary>Удаляет сопоставление типов.</summary>
      <param name="typeMapping">Сопоставление типов для удаления.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportResultMapping.TypeMappings">
      <summary>Возвращает сопоставления типов.</summary>
      <returns>Сопоставления типов.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportReturnTypePropertyMapping">
      <summary>Базовый класс для сопоставления свойства возвращаемого типа импорта функции.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportReturnTypeScalarPropertyMapping">
      <summary>Сопоставляет свойство возвращаемого типа импорта функции со столбцом таблицы.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.FunctionImportReturnTypeScalarPropertyMapping.#ctor(System.String,System.String)">
      <summary>Инициализирует новый экземпляр класса FunctionImportReturnTypeScalarPropertyMapping.</summary>
      <param name="propertyName">Имя сопоставленного свойства.</param>
      <param name="columnName">Имя сопоставленного столбца.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportReturnTypeScalarPropertyMapping.ColumnName">
      <summary>Возвращает имя сопоставленного столбца.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportReturnTypeScalarPropertyMapping.PropertyName">
      <summary>Возвращает имя сопоставленного свойства.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.FunctionImportStructuralTypeMapping">
      <summary>Задает сопоставление структурного типа импорта функции.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.FunctionImportStructuralTypeMapping.PropertyMappings">
      <summary>Возвращает сопоставления свойств для результирующего типа импорта функции.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.IsNullConditionMapping">
      <summary>Указывает условие сопоставления, которое вычисляется проверкой, содержит ли свойство или столбец значение null.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.IsNullConditionMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Boolean)">
      <summary>Создает экземпляр IsNullConditionMapping.</summary>
      <param name="propertyOrColumn">EdmProperty, которое определяет свойство или столбец.</param>
      <param name="isNull">Логическое значение, указывающее, следует ли выполнять проверку на значение null.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.IsNullConditionMapping.IsNull">
      <summary>Возвращает логическое значение, указывающее, вычисляется ли условие проверкой на значение null.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.MappingBase">
      <summary>Представляет базовый класс элементов для всех метаданных сопоставлений</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.MappingFragment">
      <summary>Представляет метаданные для фрагмента сопоставления.Набор сопоставлений (EntitySet, AssociationSet или CompositionSet) состоит из фрагментов сопоставлений. Каждый фрагмент сопоставления предоставляет сопоставления для свойств типа, которые сопоставляются с одной таблицей.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.MappingFragment.#ctor(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Mapping.TypeMapping,System.Boolean)">
      <summary>Создает экземпляр MappingFragment.</summary>
      <param name="storeEntitySet">EntitySet, соответствующий сопоставляемой таблице или представлению.</param>
      <param name="typeMapping">TypeMapping, содержащий данный MappingFragment.</param>
      <param name="makeColumnsDistinct">Флажок, который указывает, следует ли включать DISTINCT в запросы при их формировании.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.MappingFragment.AddCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>Добавляет условие сопоставления свойства.</summary>
      <param name="condition">Условие сопоставления свойства для добавления.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.MappingFragment.AddPropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
      <summary>Добавляет сопоставление свойства.</summary>
      <param name="propertyMapping">Сопоставление свойства для добавления.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.MappingFragment.Conditions">
      <summary>Возвращает коллекцию только для чтения, содержащую условия сопоставления свойств.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.MappingFragment.MakeColumnsDistinct">
      <summary>Возвращает флажок, который указывает, следует ли включать DISTINCT в запросы при их формировании.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.MappingFragment.PropertyMappings">
      <summary>Возвращает коллекцию только для чтения, содержащую сопоставления свойств.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.MappingFragment.RemoveCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>Удаляет условие сопоставления свойства.</summary>
      <param name="condition">Условие сопоставления свойства для удаления.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.MappingFragment.RemovePropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
      <summary>Удаляет сопоставление свойства.</summary>
      <param name="propertyMapping">Сопоставление свойства для удаления.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.MappingFragment.StoreEntitySet">
      <summary>Возвращает EntitySet, соответствующий сопоставляемой таблице или представлению.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.MappingFragment.TypeMapping">
      <summary>Возвращает TypeMapping, содержащий данный MappingFragment.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.MappingItem">
      <summary>Представляет базовый класс для элементов в пространстве сопоставления (DataSpace.CSSpace).</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.MappingItem.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Mapping.MappingItem" />.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.MappingItemCollection">
      <summary>Класс, представляющий коллекцию элементов сопоставления в пространстве модели EDM.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ModificationFunctionMapping">
      <summary>Описывает привязку функции модификации для изменения обработки сущностей или ассоциаций.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EntitySetBase,System.Data.Entity.Core.Metadata.Edm.EntityTypeBase,System.Data.Entity.Core.Metadata.Edm.EdmFunction,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding},System.Data.Entity.Core.Metadata.Edm.FunctionParameter,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Mapping.ModificationFunctionMapping" />.</summary>
      <param name="entitySet">Набор сущностей или ассоциаций.</param>
      <param name="entityType">Тип сущности или ассоциации.</param>
      <param name="function">Метаданные функции, к которой производится привязка.</param>
      <param name="parameterBindings">Привязки для параметров функции.</param>
      <param name="rowsAffectedParameter">Выходной параметр, куда возвращается число обработанных строк.</param>
      <param name="resultBindings">Привязки для результатов вычисления функции.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.Function">
      <summary>Возвращает метаданные функции, к которой производится привязка.</summary>
      <returns>Метаданные функции, к которой производится привязка.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.ParameterBindings">
      <summary>Возвращает привязки для параметров функции.</summary>
      <returns>Привязки для параметров функции.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.ResultBindings">
      <summary>Возвращает привязки для результатов вычисления функции.</summary>
      <returns>Привязки для результатов вычисления функции.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.RowsAffectedParameter">
      <summary>Получает выходной параметр, куда возвращается число обработанных строк.Может иметь значение null.</summary>
      <returns>Выходной параметр, куда возвращается число обработанных строк.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionMapping.ToString">
      <summary>Конвертирует значение этого экземпляра в эквивалентного строкового представления.</summary>
      <returns>Строковое представление этого экземпляра.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath">
      <summary>Описывает местоположение элемента в структуре типов сущностей или связей.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath.#ctor(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember},System.Data.Entity.Core.Metadata.Edm.AssociationSet)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath" />.</summary>
      <param name="members">Элементы в пути от конечного (привязываемого) элемента до корневого элемента структуры.</param>
      <param name="associationSet">Набор ассоциаций, к которым можно перейти через этот элемент.Если это значение равно null, то это не путь элемента навигации.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath.AssociationSetEnd">
      <summary>Возвращает набор ассоциаций, к которым можно перейти через этот элемент.Если это значение равно null, то это не путь элемента навигации.</summary>
      <returns>Набор ассоциаций, к которым можно перейти через этот элемент.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath.Members">
      <summary>Возвращает элементы в пути от конечного (привязываемого) элемента до корневого элемента структуры.</summary>
      <returns>Элементы в пути от конечного (привязываемого) элемента до корневого элемента структуры.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath.ToString">
      <summary>Конвертирует значение этого экземпляра в эквивалентного строкового представления.</summary>
      <returns>Строковое представление значения этого экземпляра.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding">
      <summary>Представляет привязку параметра функции модификации к элементу изменяемой сущности или ассоциации.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding.#ctor(System.Data.Entity.Core.Metadata.Edm.FunctionParameter,System.Data.Entity.Core.Mapping.ModificationFunctionMemberPath,System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding" />.</summary>
      <param name="parameter">Параметр, принимающий значение.</param>
      <param name="memberPath">Путь к элементу сущности или ассоциации, который определяет значение.</param>
      <param name="isCurrent">Значение true, если нужно привязать текущее или исходное значение элемента; в противном случае — значение false.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding.IsCurrent">
      <summary>Возвращает флаг, указывающий, привязано ли текущее или исходное значение элемента.</summary>
      <returns>Значение true, выполняется привязка текущего или исходного значения элемента; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding.MemberPath">
      <summary>Возвращает путь к элементу сущности или ассоциации, который определяет значение.</summary>
      <returns>Путь к элементу сущности или ассоциации, который определяет значение.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding.Parameter">
      <summary>Возвращает параметр, принимающий значение.</summary>
      <returns>Параметр, принимающий значение.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionParameterBinding.ToString">
      <summary>Конвертирует значение этого экземпляра в эквивалентного строкового представления при помощи заданного формата.</summary>
      <returns>Строковое представление значения этого экземпляра в соответствующем формате.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding">
      <summary>Определяет привязку от столбца именованного результирующего набора к элементу, принимающему значение.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding.#ctor(System.String,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding" />.</summary>
      <param name="columnName">Имя столбца, к которому выполняется привязка от результирующего набора функции.</param>
      <param name="property">Имя свойства, задаваемого в сущности.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding.ColumnName">
      <summary>Возвращает имя столбца, к которому выполняется привязка от результирующего набора функции.</summary>
      <returns>Имя столбца, к которому выполняется привязка от результирующего набора функции.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding.Property">
      <summary>Возвращает имя свойства, задаваемого в сущности.</summary>
      <returns>Имя свойства, задаваемого в сущности.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ModificationFunctionResultBinding.ToString">
      <summary>Конвертирует значение этого экземпляра в эквивалентного строкового представления.</summary>
      <returns>Строковое представление значения этого экземпляра.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.PropertyMapping">
      <summary>Метаданные сопоставления для всех типов сопоставлений свойств.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.PropertyMapping.Property">
      <summary>Возвращает EdmProperty, которое определяет сопоставляемое свойство.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ScalarPropertyMapping">
      <summary>Метаданные сопоставления для скалярных свойств.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ScalarPropertyMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>Создает сопоставление между простым свойством и столбцом.</summary>
      <param name="property">Сопоставляемое свойство.</param>
      <param name="column">Сопоставляемый столбец.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ScalarPropertyMapping.Column">
      <summary>Возвращает EdmProperty, которое определяет сопоставляемый столбец.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection">
      <summary>Представляет коллекцию элементов в пространстве сопоставления хранилища (CS Mapping).</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmItemCollection,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection,System.Collections.Generic.IEnumerable{System.Xml.XmlReader})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection" />, используя указанные объекты <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" />, <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> и модули чтения XML.</summary>
      <param name="edmCollection">Коллекция <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" />, которая должна использоваться этим сопоставлением.</param>
      <param name="storeCollection">Коллекция <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />, которая должна использоваться этим сопоставлением.</param>
      <param name="xmlReaders">Модули чтения XML, которые должны использоваться этим сопоставлением.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmItemCollection,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection,System.String[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection" /> на основе предоставленных объектов <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" />, <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> и коллекции строк, содержащие пути к файлам метаданных.</summary>
      <param name="edmCollection">Коллекция <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" />, которая должна использоваться этим сопоставлением.</param>
      <param name="storeCollection">Коллекция <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />, которая должна использоваться этим сопоставлением.</param>
      <param name="filePaths">Пути к файлам, которые должно использовать это сопоставление.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.ComputeMappingHashValue">
      <summary>Вычисляет хэш-значение для одного сопоставления контейнера из коллекции.</summary>
      <returns>Строковое значение, задающее вычисляемое хэш-значение.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.ComputeMappingHashValue(System.String,System.String)">
      <summary>Вычисляет хэш-значение для одного сопоставления, заданного именами сопоставленных контейнеров.</summary>
      <returns>Строковое значение, задающее вычисляемое хэш-значение.</returns>
      <param name="conceptualModelContainerName">Имя контейнера в концептуальной модели.</param>
      <param name="storeModelContainerName">Имя контейнера в модели хранения.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.Create(System.Data.Entity.Core.Metadata.Edm.EdmItemCollection,System.Data.Entity.Core.Metadata.Edm.StoreItemCollection,System.Collections.Generic.IEnumerable{System.Xml.XmlReader},System.Collections.Generic.IList{System.String},System.Collections.Generic.IList{System.Data.Entity.Core.Metadata.Edm.EdmSchemaError}@)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection" />.</summary>
      <returns>Экземпляр <see cref="P:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.EdmItemCollection" />, если ошибки не обнаружены.В противном случае равно null.</returns>
      <param name="edmItemCollection">Коллекция метаданных модели EDM, которая должна быть сопоставлена.Не должно быть равно null.</param>
      <param name="storeItemCollection">Коллекция метаданных хранилища, предназначенная для сопоставления.Не должно быть равно null.</param>
      <param name="xmlReaders">Артефакты языка MSL, предназначенные для загрузки.Не должно быть равно null.</param>
      <param name="filePaths">Пути к артефактам языка MSL.Используется в сообщениях об ошибке.Может быть равно null, и в этом случае в качестве пути используется базовый URI модуля XmlReader.</param>
      <param name="errors">Коллекция ошибок, обнаруженных во время загрузки.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.GenerateViews(System.Collections.Generic.IList{System.Data.Entity.Core.Metadata.Edm.EdmSchemaError})">
      <summary>Создает словарь (экстент, сформированное представление) для одного сопоставления контейнеров в коллекции.</summary>
      <returns>Словарь (<see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" />, <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView" />), определяющий сформированные представления.</returns>
      <param name="errors">Список, в котором собираются потенциальные ошибки.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.GenerateViews(System.String,System.String,System.Collections.Generic.IList{System.Data.Entity.Core.Metadata.Edm.EdmSchemaError})">
      <summary>Создает словарь (экстент, сформированное представление) для одного сопоставления контейнеров, заданного именами контейнеров.</summary>
      <returns>Словарь (<see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" />, <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView" />), определяющий сформированные представления.</returns>
      <param name="conceptualModelContainerName">Имя контейнера в концептуальной модели.</param>
      <param name="storeModelContainerName">Имя контейнера в модели хранения.</param>
      <param name="errors">Список, в котором собираются потенциальные ошибки.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.MappingVersion">
      <summary>Возвращает версию, представленную данной коллекцией <see cref="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection" />.</summary>
      <returns>Версия, представленная данной коллекцией <see cref="T:System.Data.Entity.Core.Mapping.StorageMappingItemCollection" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.StorageMappingItemCollection.MappingViewCacheFactory">
      <summary>Возвращает или задает <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory" /> для создания экземпляров <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" />, которые используются для получения сформированных заранее представлений сопоставления.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory" /> для создания экземпляров <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" />, которые используются для получения сформированных заранее представлений сопоставления.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.StructuralTypeMapping">
      <summary>Указывает структурное сопоставление типов.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StructuralTypeMapping.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Mapping.StructuralTypeMapping" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StructuralTypeMapping.AddCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>Добавляет условие сопоставления свойства.</summary>
      <param name="condition">Условие сопоставления свойства для добавления.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StructuralTypeMapping.AddPropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
      <summary>Добавляет сопоставление свойства.</summary>
      <param name="propertyMapping">Сопоставление свойства для добавления.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.StructuralTypeMapping.Conditions">
      <summary>Возвращает коллекцию только для чтения, содержащую условия сопоставления свойств.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.StructuralTypeMapping.PropertyMappings">
      <summary>Возвращает коллекцию только для чтения, содержащую сопоставления свойств.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StructuralTypeMapping.RemoveCondition(System.Data.Entity.Core.Mapping.ConditionPropertyMapping)">
      <summary>Удаляет условие сопоставления свойства.</summary>
      <param name="condition">Условие сопоставления свойства для удаления.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.StructuralTypeMapping.RemovePropertyMapping(System.Data.Entity.Core.Mapping.PropertyMapping)">
      <summary>Удаляет сопоставление свойства.</summary>
      <param name="propertyMapping">Сопоставление свойства для удаления.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.TypeMapping">
      <summary>Представляет метаданные Mapping для сопоставления типов в пространстве CS.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Mapping.ValueConditionMapping">
      <summary>Указывает условие сопоставления, которое вычисляется сравнением значения свойства с данным значением.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Mapping.ValueConditionMapping.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Object)">
      <summary>Создает экземпляр ValueConditionMapping.</summary>
      <param name="propertyOrColumn">EdmProperty, которое определяет свойство или столбец.</param>
      <param name="value">Объект, который указывает значение для сравнения.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Mapping.ValueConditionMapping.Value">
      <summary>Возвращает объект, который указывает значение для проверки.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember">
      <summary>Представляет конец типа ассоциации</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember.BuiltInTypeKind">
      <summary>Возвращает встроенный вариант для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember.Create(System.String,System.Data.Entity.Core.Metadata.Edm.RefType,System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity,System.Data.Entity.Core.Metadata.Edm.OperationAction,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Создает экземпляр AssociationEndMember, доступный только для чтения.</summary>
      <returns>Созданный экземпляр AssociationEndMember.</returns>
      <param name="name">Имя конечного элемента ассоциации.</param>
      <param name="endRefType">Ссылочный тип для конечного элемента.</param>
      <param name="multiplicity">Кратность конечного элемента.</param>
      <param name="deleteAction">Флаг, указывающий на поведение конечного элемента при удалении.</param>
      <param name="metadataProperties">Свойства метаданных, которые необходимо связать с экземпляром.</param>
      <exception cref="T:System.ArgumentException">Указанное имя содержит пустое значение или значение null.</exception>
      <exception cref="T:System.ArgumentNullException">Указан ссылочный тип со значением null.</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet">
      <summary>Класс, представляющий набор ассоциаций</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSet.AssociationSetEnds">
      <summary>Возвращает элементы этого набора ассоциаций <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" />.</summary>
      <returns>Коллекция типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" />, содержащая элементы этого набора ассоциаций <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSet.BuiltInTypeKind">
      <summary>Возвращает встроенный вариант для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для этого набора <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.AssociationSet.Create(System.String,System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Создает доступный только для чтения экземпляр элемента AssociationSet из указанных параметров.</summary>
      <returns>Только что созданный экземпляр AssociationSet.</returns>
      <param name="name">Имя набора ассоциаций.</param>
      <param name="type">Тип ассоциации элементов в наборе ассоциаций.</param>
      <param name="sourceSet">Набор сущностей для конечной точки набора ассоциаций источника.</param>
      <param name="targetSet">Набор сущностей для конечной точки набора ассоциаций цели.</param>
      <param name="metadataProperties">Свойства метаданных, которые необходимо связать с экземпляром.</param>
      <exception cref="T:System.ArgumentException">Указанное имя содержит пустое значение или значение null.</exception>
      <exception cref="T:System.ArgumentNullException">Указан тип ассоциации NULL.</exception>
      <exception cref="T:System.ArgumentException">Тип сущности одной конечной точки заданного типа ассоциации не соответствует типу сущности связанной конечной точки набора сущностей.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSet.ElementType">
      <summary>Возвращает ассоциацию, связанную с этим набором ассоциаций <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" />, представляющий ассоциацию, связанную с этим набором ассоциаций <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd">
      <summary>Класс, представляющий конечный элемент AssociationSet</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.BuiltInTypeKind">
      <summary>Возвращает встроенный вариант для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.CorrespondingAssociationEndMember">
      <summary>Возвращает элемент End, которому соответствует этот объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationEndMember" />, представляющий элемент End, которому соответствует этот объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.EntitySet">
      <summary>Возвращает набор сущностей, на который ссылается эта роль End.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />, представляющий набор сущностей, на который ссылается эта роль End.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.Name">
      <summary>Возвращает имя элемента <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />.</summary>
      <returns>Имя элемента <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.ParentAssociationSet">
      <summary>Возвращает родительский набор ассоциаций этого элемента <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSet" />, который представляет родительский набор ассоциаций этого элемента <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.Role">
      <summary>Возвращает имя роли End для этого элемента <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />.</summary>
      <returns>Имя роли End для этого <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd.ToString">
      <summary>Возвращает имя роли End для этого элемента <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />.</summary>
      <returns>Имя роли End для этого <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationSetEnd" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.AssociationType">
      <summary>Описывает сопоставление или связь между двумя сущностями в концептуальной модели или связь по внешнему ключу между двумя таблицами в модели хранения.В концептуальной модели для зависимого класса свойство внешнего ключа может быть, а может и не быть определено.Если внешний ключ определен, свойство <see cref="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.IsForeignKey" /> будет иметь значение true, а свойство <see cref="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.Constraint" /> будет содержать подробности для внешних ключей.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.AssociationEndMembers">
      <summary>Возвращает список элементов для ассоциации типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" />.</summary>
      <returns>Коллекция типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" />, содержащая список элементов для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.BuiltInTypeKind">
      <summary>Возвращает встроенный вариант для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.Constraint">
      <summary>Возвращает или задает справочное ограничение.</summary>
      <returns>Справочное ограничение.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.AssociationType.Create(System.String,System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Создает доступный только для чтения экземпляр элемента AssociationType из указанных параметров.</summary>
      <returns>Созданный экземпляр AssociationType.</returns>
      <param name="name">Имя типа ассоциации.</param>
      <param name="namespaceName">Пространство имен типа ассоциации.</param>
      <param name="foreignKey">Флаг, указывающий на связь с внешним ключом (FK).</param>
      <param name="dataSpace">Пространство данных для типа ассоциации.</param>
      <param name="sourceEnd">Исходный конечный элемент ассоциации.</param>
      <param name="targetEnd">Целевой конечный элемент ассоциации.</param>
      <param name="constraint">Справочное ограничение.</param>
      <param name="metadataProperties">Свойства метаданных, которые необходимо связать с экземпляром.</param>
      <exception cref="T:System.ArgumentException">Указанное имя содержит пустое значение или значение null.</exception>
      <exception cref="T:System.ArgumentException">Указанное пространство имен пусто или имеет значение NULL.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.IsForeignKey">
      <summary>Возвращает логическое значение свойства, указывающее на то, является ли столбец внешним ключом.</summary>
      <returns>Логическое значение, указывающее на то, является ли столбец внешним ключом.Если значение равно true, столбец является внешним ключом.Если значение равно false (по умолчанию), столбец не является внешним ключом.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.AssociationType.ReferentialConstraints">
      <summary>Возвращает список ограничений для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" />.</summary>
      <returns>Коллекция типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" />, содержащая список ограничений для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.AssociationType" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind">
      <summary>Список всех встроенных типов</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.AssociationEndMember">
      <summary>Тип вида ассоциации</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.AssociationSet">
      <summary>Вид AssociationSet</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.AssociationSetEnd">
      <summary>Вид AssociationSetEnd</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.AssociationType">
      <summary>Тип вида ассоциации</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.CollectionKind">
      <summary>Вид коллекции</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.CollectionType">
      <summary>Вид типа коллекции</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.ComplexType">
      <summary>Вид сложного типа</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.Documentation">
      <summary>Вид документации</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EdmFunction">
      <summary>Вид EdmFunction</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EdmMember">
      <summary>Вид типа EdmMember</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EdmProperty">
      <summary>Вид типа EdmProperty</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EdmType">
      <summary>Вид типа модели EDM</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EntityContainer">
      <summary>Вид контейнера сущностей</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EntitySet">
      <summary>Вид набора сущностей</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EntitySetBase">
      <summary>Вид EntitySetBase</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EntityType">
      <summary>Вид типа сущности</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EntityTypeBase">
      <summary>Базовый вид типа сущности</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EnumMember">
      <summary>Вид элемента перечисления</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.EnumType">
      <summary>Вид типа перечисления</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.Facet">
      <summary>Вид аспекта</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.FunctionParameter">
      <summary>Вид параметра функции</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.GlobalItem">
      <summary>Вид типа глобального элемента</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.MetadataItem">
      <summary>Вид типа элемента метаданных</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.MetadataProperty">
      <summary>Вид свойства метаданных</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.NavigationProperty">
      <summary>Вид свойства навигации</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.OperationAction">
      <summary>Вид типа DeleteAction</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.ParameterMode">
      <summary>Вид режима параметра</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.PrimitiveType">
      <summary>Вид типа-примитива</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.PrimitiveTypeKind">
      <summary>Вид типа-примитива</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.ProviderManifest">
      <summary>Вид типа ProviderManifest</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.ReferentialConstraint">
      <summary>Вид типа справочного ограничения</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RefType">
      <summary>Вид ссылочного типа</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RelationshipEndMember">
      <summary>Вид типа RelationshipEnd</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RelationshipMultiplicity">
      <summary>Вид типа кратности связи</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RelationshipSet">
      <summary>Вид типа набора связей</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RelationshipType">
      <summary>Тип связи</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.RowType">
      <summary>Вид типа строки</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.SimpleType">
      <summary>Вид простого типа</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.StructuralType">
      <summary>Вид структурного типа</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind.TypeUsage">
      <summary>Вид сведений о типе</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.CollectionKind">
      <summary>Вид коллекции (применяется к свойствам)</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.CollectionKind.Bag">
      <summary>Коллекция обладает семантикой контейнера (элементы неупорядочены, повторы допускаются)</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.CollectionKind.List">
      <summary>Коллекция обладает семантикой списка (порядок элементов детерминирован, повторы допускаются)</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.CollectionKind.None">
      <summary>Свойство не является коллекцией</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.CollectionType">
      <summary>Представляет тип коллекции модели EDM</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.CollectionType.BuiltInTypeKind">
      <summary>Возвращает встроенный вариант для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.CollectionType.TypeUsage">
      <summary>Возвращает экземпляр класса <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />, который содержит тип элемента, включаемого текущим объектом <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" />, и аспекты для этого типа.</summary>
      <returns>Экземпляр класса <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />, который содержит тип элемента, включаемого текущим объектом <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" />, и аспекты для этого типа.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ComplexType">
      <summary>Представляет сложный тип модели EDM.Его можно использовать для конфигурации сложных типов из основанного на модели соглашения концептуального пространства.Сложные типы в модели хранения не поддерживаются.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ComplexType.BuiltInTypeKind">
      <summary>Возвращает встроенный вариант для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ComplexType.Create(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Создает новый экземпляр типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" />.</summary>
      <returns>Новый экземпляр типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" />.</returns>
      <param name="name">Имя сложного типа.</param>
      <param name="namespaceName">Пространство имен сложного типа.</param>
      <param name="dataSpace">Пространство данных, к которому принадлежит сложный тип.</param>
      <param name="members">Элементы сложного типа.</param>
      <param name="metadataProperties">Свойства метаданных, которые необходимо связать с экземпляром.</param>
      <exception cref="T:System.ArgumentNullException">Вызывается, если аргумент name, namespace или members имеет значение null.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ComplexType.Properties">
      <summary>Возвращает список свойств для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" />.</summary>
      <returns>Коллекция типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" />, содержащая список свойств для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.ComplexType" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ConcurrencyMode">
      <summary>Режим параллелизма для свойств.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ConcurrencyMode.Fixed">
      <summary>Фиксированный режим параллелизма: свойство всегда проверяется в процессе записи</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ConcurrencyMode.None">
      <summary>Режим параллелизма по умолчанию: свойство никогда не проверяется в процессе записи</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.CsdlSerializer">
      <summary>Сериализует модель <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel" />, которая соответствует ограничениям одного файла CSDL-схемы, в модуль записи XML.Модель для сериализации должна содержать один элемент <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.CsdlSerializer.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Metadata.Edm.CsdlSerializer" />.</summary>
    </member>
    <member name="E:System.Data.Entity.Core.Metadata.Edm.CsdlSerializer.OnError">
      <summary>Возникает при обнаружении ошибки во время сериализации модели.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.CsdlSerializer.Serialize(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.Xml.XmlWriter,System.String)">
      <summary>Сериализовать объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel" /> в XmlWriter.</summary>
      <returns>Значение true, если сущность допустима; в противном случае — значение false.</returns>
      <param name="model">Модель EdmModel, подлежащая сериализации.</param>
      <param name="xmlWriter">XmlWriter, в который выполняется сериализация.</param>
      <param name="modelNamespace">Пространство имен сериализованной модели.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs">
      <summary>Представляет сведения об ошибке, возникшей во время обработки модели Entity Framework.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs.ErrorMessage">
      <summary>Возвращает необязательное сообщение, описывающее возникающую ошибку.</summary>
      <returns>Необязательное сообщение, описывающее возникающую ошибку.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs.Item">
      <summary>Возвращает значение, показывающее объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataItem" />, вызвавший возникающее событие.</summary>
      <returns>Значение true, если объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataItem" /> вызвал возникающее событие; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.DataModelErrorEventArgs.PropertyName">
      <summary>Возвращает необязательное значение, которое указывает свойство исходного элемента, вызвавшего возникающее событие.</summary>
      <returns>Необязательное значение, которое указывает свойство исходного элемента, вызвавшего возникающее событие.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.DataSpace">
      <summary>DataSpace</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.CSpace">
      <summary>CSpace указывает на элемент в CSpace — типы-примитивы + типы моделей EDM, определенные в языке CSDL</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.CSSpace">
      <summary>Сопоставление между CSpace и SSpace</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.OCSpace">
      <summary>Сопоставление между OSpace и CSpace</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.OSpace">
      <summary>OSpace указывает на элемент в пространстве CLR</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.SSpace">
      <summary>SSpace указывает на элемент в SSpace</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.DbModelExtensions">
      <summary>Методы расширения для <see cref="T:System.Data.Entity.Infrastructure.DbModel" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.DbModelExtensions.GetConceptualModel(System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter)">
      <summary>Возвращает концептуальную модель из указанной модели DbModel.</summary>
      <returns>Экземпляр EdmModel, который представляет концептуальную модель.</returns>
      <param name="model">Экземпляр класса, который реализует интерфейс IEdmModelAdapter (например,DbModel).</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.DbModelExtensions.GetStoreModel(System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter)">
      <summary>Возвращает модель хранения из указанной модели DbModel.</summary>
      <returns>Экземпляр EdmModel, который представляет модель хранения.</returns>
      <param name="model">Экземпляр класса, который реализует интерфейс IEdmModelAdapter (например,DbModel).</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.Documentation">
      <summary>Класс, представляющий объект Documentation, связанный с элементом</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.Documentation.#ctor(System.String,System.String)">
      <summary>Инициализирует новый экземпляр Documentation.</summary>
      <param name="summary">Строка сводки.</param>
      <param name="longDescription">Строка длинного описания.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Documentation.BuiltInTypeKind">
      <summary>Возвращает встроенный вариант для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Documentation.IsEmpty">
      <summary>Возвращает значение, указывающее на то, содержит ли этот объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> только значение NULL или пустое значение <see cref="P:System.Data.Entity.Core.Metadata.Edm.Documentation.Summary" /> и <see cref="P:System.Data.Entity.Core.Metadata.Edm.Documentation.Longdescription" />.</summary>
      <returns>Возвращает значение true, если объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" /> содержит только значение NULL или пустое значение <see cref="P:System.Data.Entity.Core.Metadata.Edm.Documentation.Summary" /> и <see cref="P:System.Data.Entity.Core.Metadata.Edm.Documentation.LongDescription" />; в противном случае возвращает значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Documentation.LongDescription">
      <summary>Возвращает подробное описание для этой документации <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" />.</summary>
      <returns>Подробное описание для этой документации <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Documentation.Summary">
      <summary>Возвращает сводку для документации <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" />.</summary>
      <returns>Сводка для документации <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.Documentation.ToString">
      <summary>Возвращает сводку для документации <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" />.</summary>
      <returns>Сводка для документации <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmError">
      <summary>Этот класс инкапсулирует сведения об ошибке для универсальной ошибки модели EDM.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmError.Message">
      <summary>Возвращает сообщение об ошибке.</summary>
      <returns>Сообщение об ошибке.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction">
      <summary>Класс для представления функции</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmFunction.AddParameter(System.Data.Entity.Core.Metadata.Edm.FunctionParameter)">
      <summary>Добавляет параметр к этой функции.</summary>
      <param name="functionParameter">Добавляемый параметр.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.AggregateAttribute">
      <summary>Возвращает агрегатный атрибут этой функции.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.BuiltInAttribute">
      <summary>Возвращает значение, указывающее, включен ли встроенный атрибут в эту функцию.</summary>
      <returns>Значение true, если атрибут включен; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.BuiltInTypeKind">
      <summary>Возвращает встроенный вариант для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />.</summary>
      <returns>Одно из значений перечисления <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.CommandTextAttribute">
      <summary>Возвращает запрос на языке, который используется системой управления базой данных или моделью хранения.</summary>
      <returns>Строковое значение в синтаксисе, используемом системой управления базой данных или моделью хранения, которое содержит инструкцию запроса или обновления объекта <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmFunction.Create(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Фабричный метод для создания объекта <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />.</summary>
      <returns>Новый экземпляр типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />, доступный только для чтения.</returns>
      <param name="name">Имя функции.</param>
      <param name="namespaceName">Пространство имен функции.</param>
      <param name="dataSpace">Пространство имен, к которому принадлежит функция.</param>
      <param name="payload">Дополнительные атрибуты и свойства функции.</param>
      <param name="metadataProperties">Свойства метаданных, которые будут добавлены к функции.Может принимать значение NULL.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.FullName">
      <summary>Возвращает полное имя этого типа (пространство имен и имя).</summary>
      <returns>Полное имя типа.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.IsComposableAttribute">
      <summary>Возвращает значение, указывающее, сопоставлен ли данный экземпляр с функцией или с хранимой процедурой.</summary>
      <returns>Значение true, если этот экземпляр сопоставлен с функцией; значение false, если этот экземпляр сопоставлен с хранимой процедурой.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.IsFromProviderManifest">
      <summary>Возвращает значение, указывающее, получен ли этот экземпляр из манифеста поставщика.</summary>
      <returns>Значение true, если экземпляр получен из манифеста поставщика; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.NiladicFunctionAttribute">
      <summary>Возвращает значение, указывающее функцию без параметров (не принимающую аргументы).</summary>
      <returns>Значение true, если функция не имеет параметров; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.Parameters">
      <summary>Возвращает параметры этой функции <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />.</summary>
      <returns>Коллекция типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" />, содержащая параметры этой функции <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.ParameterTypeSemanticsAttribute">
      <summary>Возвращает атрибут семантики типа параметра этой функции.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.ReturnParameter">
      <summary>Возвращает выходной параметр этой функции <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" />, представляющий выходной параметр этой функции <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.ReturnParameters">
      <summary>Возвращает выходные параметры этой функции <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />.</summary>
      <returns>Коллекция типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" />, представляющая выходные параметры этой функции <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.Schema">
      <summary>Возвращает или задает схему, связанную с функцией.</summary>
      <returns>Схема, связанная с функцией.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunction.StoreFunctionNameAttribute">
      <summary>Возвращает атрибут имени функции хранения.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload">
      <summary>Содержит дополнительные атрибуты и свойства функции <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" /></summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.CommandText">
      <summary>Возвращает или задает текст команды, связанный с функцией.</summary>
      <returns>Текст команды, связанный с функцией.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.EntitySets">
      <summary>Возвращает или задает наборы сущностей для функции.</summary>
      <returns>Наборы сущностей для функции.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsAggregate">
      <summary>Возвращает значение, указывающее, является ли функция агрегатной.</summary>
      <returns>Значение true, если данная функция является агрегатной; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsBuiltIn">
      <summary>Возвращает или задает значение, указывающее, является ли эта функция встроенной.</summary>
      <returns>Значение true, если эта функция является встроенной; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsCachedStoreFunction">
      <summary>Возвращает или задает значение, указывающее, является ли функция кэшируемой функцией хранилища.</summary>
      <returns>Значение true, если функция является кэшируемой функцией хранилища; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsComposable">
      <summary>Возвращает или задает значение, указывающее, является ли эта функция сложной.</summary>
      <returns>Значение true, если функция является сложной; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsFromProviderManifest">
      <summary>Возвращает или задает значение, указывающее, находится ли функция в манифесте поставщика.</summary>
      <returns>Значение true, если эта функция находится в манифесте поставщика; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsFunctionImport">
      <summary>Возвращает или задает значение, указывающее, является ли эта функция импортируемой.</summary>
      <returns>Значение true, если эта функция является импортируемой; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.IsNiladic">
      <summary>Возвращает или задает значение, указывающее, содержит ли эта функция аргументы.</summary>
      <returns>Значение true, если функция не содержит аргументов; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.Parameters">
      <summary>Возвращает или задает параметры функции.</summary>
      <returns>Параметры функции.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.ParameterTypeSemantics">
      <summary>Возвращает или задает семантику типа параметра.</summary>
      <returns>Семантика типа параметра.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.ReturnParameters">
      <summary>Возвращает или задает возвращаемые параметры.</summary>
      <returns>Возвращаемые параметры.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.Schema">
      <summary>Возвращает или задает схему функции.</summary>
      <returns>Схема функции.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmFunctionPayload.StoreFunctionName">
      <summary>Возвращает или задает имя функции хранилища.</summary>
      <returns>Имя функции хранилища.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection">
      <summary>Класс для представления коллекции элементов в пространстве модели Edm.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.#ctor(System.Collections.Generic.IEnumerable{System.Xml.XmlReader})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" />, используя коллекцию объектов XMLReader, где существуют файлы языка CSDL.</summary>
      <param name="xmlReaders">Коллекция объектов XMLReader, где существуют CSDL-файлы.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmModel)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" />.</summary>
      <param name="model">Модель EDM.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.#ctor(System.String[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" />, используя пути, по которым расположены CSDL-файлы.</summary>
      <param name="filePaths">Пути, по которым расположены CSDL-файлы.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.Create(System.Collections.Generic.IEnumerable{System.Xml.XmlReader},System.Collections.ObjectModel.ReadOnlyCollection{System.String},System.Collections.Generic.IList{System.Data.Entity.Core.Metadata.Edm.EdmSchemaError}@)">
      <summary>Фабричный метод, который создает <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" />.</summary>
      <returns>Экземпляр <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection" />, если не обнаружены ошибки.В противном случае имеет значение null.</returns>
      <param name="xmlReaders">Артефакты языка CSDL, предназначенные для загрузки.Не должно быть равно null.</param>
      <param name="filePaths">Пути к артефактам языка CSDL.Используется в сообщениях об ошибке.Может быть равно null, и в этом случае в качестве пути используется базовый URI модуля XmlReader.</param>
      <param name="errors">Коллекция ошибок, обнаруженных во время загрузки.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.EdmVersion">
      <summary>Возвращает версию концептуальной модели для этой коллекции.</summary>
      <returns>Версия концептуальной модели для этой коллекции.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.GetPrimitiveTypes">
      <summary>Возвращает коллекцию объектов <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />.</summary>
      <returns>Объект ReadOnlyCollection, представляющий коллекцию объектов <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmItemCollection.GetPrimitiveTypes(System.Double)">
      <summary>Возвращает коллекцию объектов <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" /> с указанной версией концептуальной модели.</summary>
      <returns>Объект ReadOnlyCollection, представляющий коллекцию объектов <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />.</returns>
      <param name="edmVersion">Версия концептуальной модели.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmMember">
      <summary>Представляет класс элемента модели EDM</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmMember.DeclaringType">
      <summary>Возвращает тип, который имеет данный элемент.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />, представляющий тип, который имеет данный элемент.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmMember.IsStoreGeneratedComputed">
      <summary>Указывает, отмечен ли этот элемент как вычисляемый элемент в определении модели EDM.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmMember.IsStoreGeneratedIdentity">
      <summary>Указывает, отмечен ли созданный хранилищем этого элемента шаблон как идентификатор в определении модели EDM</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmMember.Name">
      <summary>Возвращает или задает имя свойства.Если задать это свойство из соглашения модели пространства хранения, будет изменено имя столбца базы данных для этого свойства.В концептуальной модели оно должно согласоваться с соответствующим свойством класса сущности и не должно изменяться.</summary>
      <returns>Имя данного элемента.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmMember.ToString">
      <summary>Возвращает имя данного элемента.</summary>
      <returns>Имя данного элемента.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmMember.TypeUsage">
      <summary>Возвращает экземпляр класса <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />, содержащий тип элемента и аспекты этого типа.</summary>
      <returns>Объект класса <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />, содержащий тип элемента и аспекты этого типа.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmModel">
      <summary>Представляет концептуальную модель или модель хранения.Этот класс можно использовать для доступа к информации о форме модели и способе ее конфигурации.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.AddItem(System.Data.Entity.Core.Metadata.Edm.AssociationType)">
      <summary>Добавляет тип ассоциации в модель.</summary>
      <param name="item">Добавляемый экземпляр AssociationType.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.AddItem(System.Data.Entity.Core.Metadata.Edm.ComplexType)">
      <summary>Добавляет сложный тип в модель.</summary>
      <param name="item">Добавляемый экземпляр ComplexType.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.AddItem(System.Data.Entity.Core.Metadata.Edm.EdmFunction)">
      <summary>Добавляет функцию в модель.</summary>
      <param name="item">Добавляемый экземпляр EdmFunction.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.AddItem(System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>Добавляет тип сущности в модель.</summary>
      <param name="item">Добавляемый экземпляр EntityType.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.AddItem(System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>Добавляет тип перечисления в модель.</summary>
      <param name="item">Добавляемый экземпляр EnumType.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.AssociationTypes">
      <summary>Возвращает типы ассоциации в модели.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.BuiltInTypeKind">
      <summary>Возвращает вид встроенного типа для этого типа.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для этого типа.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.ComplexTypes">
      <summary>Возвращает сложные типы в модели.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.Container">
      <summary>Возвращает контейнер, в котором хранятся наборы сущностей и ассоциаций, а также импорты функций.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.DataSpace">
      <summary>Возвращает пространство данных, связанное с моделью, которое указывает, является ли модель концептуальной (DataSpace.CSpace) или моделью хранения (DataSpace.SSpace).</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.EntityTypes">
      <summary>Возвращает типы сущности в модели.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.EnumTypes">
      <summary>Возвращает типы перечисления в модели.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.Functions">
      <summary>Возвращает функции в модели.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmModel.GlobalItems">
      <summary>Возвращает глобальные элементы, связанные с моделью.</summary>
      <returns>Глобальные элементы, связанные с моделью.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.RemoveItem(System.Data.Entity.Core.Metadata.Edm.AssociationType)">
      <summary>Удаляет тип ассоциации из модели.</summary>
      <param name="item">Удаляемый экземпляр AssociationType.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.RemoveItem(System.Data.Entity.Core.Metadata.Edm.ComplexType)">
      <summary>Удаляет сложный тип из модели.</summary>
      <param name="item">Удаляемый экземпляр ComplexType.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.RemoveItem(System.Data.Entity.Core.Metadata.Edm.EdmFunction)">
      <summary>Удаляет функцию из модели.</summary>
      <param name="item">Удаляемый экземпляр EdmFunction.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.RemoveItem(System.Data.Entity.Core.Metadata.Edm.EntityType)">
      <summary>Удаляет тип сущности из модели.</summary>
      <param name="item">Удаляемый экземпляр EntityType.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmModel.RemoveItem(System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>Удаляет тип перечисления из модели.</summary>
      <param name="item">Удаляемый экземпляр EnumType.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty">
      <summary>В концептуальном пространстве EdmProperty представляет свойство сущности.В пространстве хранения EdmProperty представляет столбец в таблице.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.BuiltInTypeKind">
      <summary>Возвращает встроенный вариант для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.CollectionKind">
      <summary>Возвращает или задает вид коллекции для этой модели.</summary>
      <returns>Вид коллекции для этой модели.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.ComplexType">
      <summary>Возвращает сведения о сложном типе для этого свойства.</summary>
      <returns>Сведения о сложном типе для этого свойства.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.ConcurrencyMode">
      <summary>Возвращает или задает режим параллелизма для свойства.</summary>
      <returns>Режим параллелизма для свойства.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmProperty.Create(System.String,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Создает новый экземпляр типа EdmProperty.</summary>
      <returns>Новый экземпляр типа EdmProperty</returns>
      <param name="name">Имя свойства.</param>
      <param name="typeUsage">Свойство <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /></param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmProperty.CreateComplex(System.String,System.Data.Entity.Core.Metadata.Edm.ComplexType)">
      <summary>Создает новое сложное свойство.</summary>
      <returns>Вновь созданное свойство.</returns>
      <param name="name">Имя свойства.</param>
      <param name="complexType">Тип свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmProperty.CreateEnum(System.String,System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>Создает новое свойство перечисления.</summary>
      <returns>Вновь созданное свойство.</returns>
      <param name="name">Имя свойства.</param>
      <param name="enumType">Тип свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmProperty.CreatePrimitive(System.String,System.Data.Entity.Core.Metadata.Edm.PrimitiveType)">
      <summary>Создает новое примитивное свойство.</summary>
      <returns>Вновь созданное свойство.</returns>
      <param name="name">Имя свойства.</param>
      <param name="primitiveType">Тип свойства.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.DefaultValue">
      <summary>Возвращает значение по умолчанию для свойства <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" />.</summary>
      <returns>Значение по умолчанию для свойства <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.EnumType">
      <summary>Возвращает сведения о типе перечисления для этого свойства.</summary>
      <returns>Сведения о типе перечисления для этого свойства.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsCollectionType">
      <summary>Возвращает значение, указывающее, является ли свойство свойством типа коллекции.</summary>
      <returns>Значение true, если свойство является свойством типа коллекции; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsComplexType">
      <summary>Возвращает значение, указывающее, является ли это свойство свойством сложного типа.</summary>
      <returns>Значение true, если свойство является свойством сложного типа; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsEnumType">
      <summary>Возвращает значение, указывающее, является ли это свойство свойством типа перечисления.</summary>
      <returns>Значение true, если свойство является свойством типа перечисления; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsFixedLength">
      <summary>Возвращает или задает значение, указывающее, является ли фиксированной длина этого свойства.</summary>
      <returns>Значение true, если длина свойства фиксированная; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsFixedLengthConstant">
      <summary>Возвращает значение, указывающее, является ли аспект фиксированной длины константой для поставщика базы данных.</summary>
      <returns>Значение true, если этот аспект является константой; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsMaxLength">
      <summary>Возвращает или задает значение, указывающее, использует ли это свойство максимальную длину, поддерживаемую поставщиком.</summary>
      <returns>Значение true, указывающее, использует ли это свойство максимальную длину, поддерживаемую поставщиком. В противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsMaxLengthConstant">
      <summary>Возвращает значение, указывающее, является ли аспект максимальной длины константой для поставщика базы данных.</summary>
      <returns>Значение true, если этот аспект является константой; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsPrecisionConstant">
      <summary>Возвращает значение, указывающее, является ли аспект точности константой для поставщика базы данных.</summary>
      <returns>Значение true, если этот аспект является константой; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsPrimitiveType">
      <summary>Возвращает значение, указывающее, является ли это свойство типом-примитивом.</summary>
      <returns>Значение true, если свойство является типом-примитивом; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsScaleConstant">
      <summary>Возвращает значение, указывающее, является ли аспект масштаба константой для поставщика базы данных.</summary>
      <returns>Значение true, если этот аспект является константой; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsUnderlyingPrimitiveType">
      <summary>Возвращает значение, указывающее, является ли свойство базовым типом-примитивом.</summary>
      <returns>Значение true, если свойство является базовым типом-примитивом; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsUnicode">
      <summary>Возвращает или задает значение, указывающее, является ли это свойство свойством в Юникоде.</summary>
      <returns>Значение true, если свойство является свойством в Юникоде; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.IsUnicodeConstant">
      <summary>Возвращает значение, указывающее, является ли аспект Юникода константой для поставщика базы данных.</summary>
      <returns>Значение true, если этот аспект является константой; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.MaxLength">
      <summary>Возвращает или задает максимальную длину свойства.</summary>
      <returns>Максимальная длина свойства.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.Nullable">
      <summary>Возвращает значение, указывающее, допускает ли свойство <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" /> значения NULL.</summary>
      <returns>Возвращает значение true, если свойство <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" /> допускает значения NULL; в противном случае возвращает значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.Precision">
      <summary>Возвращает или задает точность свойства.</summary>
      <returns>Точность свойства.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.PrimitiveType">
      <summary>Возвращает сведения о типе-примитиве для этого свойства.</summary>
      <returns>Сведения о типе-примитиве для этого свойства.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.Scale">
      <summary>Возвращает или задает масштаб свойства.</summary>
      <returns>Масштаб свойства.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmProperty.SetMetadataProperties(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Задает свойства метаданных.</summary>
      <param name="metadataProperties">Устанавливаемые свойства метаданных.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.StoreGeneratedPattern">
      <summary>Возвращает или задает метод создания базы данных для столбца базы данных, связанного с этим свойством.</summary>
      <returns>Созданный в хранилище шаблон для свойства.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.TypeName">
      <summary>Возвращает имя типа свойства.</summary>
      <returns>Имя типа свойства.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmProperty.UnderlyingPrimitiveType">
      <summary>Возвращает сведения о базовом типе-примитиве для этого свойства.</summary>
      <returns>Сведения о базовом типе-примитиве для этого свойства.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError">
      <summary>Этот класс инкапсулирует сведения о возникшей ошибке схемы.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.#ctor(System.String,System.Int32,System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity)">
      <summary>Создает объект EdmSchemaError.</summary>
      <param name="message">Описание ошибки.</param>
      <param name="errorCode">Код, с которым связана ошибка.</param>
      <param name="severity">Серьезность ошибки.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.Column">
      <summary>Возвращает столбец, в котором произошла ошибка.</summary>
      <returns>Столбец, в котором произошла ошибка.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.ErrorCode">
      <summary>Возвращает код ошибки.</summary>
      <returns>Код ошибки.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.Line">
      <summary>Возвращает номер строки, в которой произошла ошибка.</summary>
      <returns>Номер строки, в которой произошла ошибка.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.SchemaLocation">
      <summary>Возвращает расположение схемы, содержащей ошибку.В конце этой строки содержится имя схемы.</summary>
      <returns>Расположение схемы, содержащей ошибку.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.SchemaName">
      <summary>Возвращает имя схемы, содержащей ошибку.</summary>
      <returns>Имя схемы, содержащей ошибку.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.Severity">
      <summary>Возвращает степень серьезности ошибки.</summary>
      <returns>Одно из значений <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity" />.Значение по умолчанию — <see cref="F:System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity.Warning" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.StackTrace">
      <summary>Возвращает строковое представление трассировки стека при возникновении ошибки.</summary>
      <returns>Строковое представление трассировки стека при возникновении ошибки.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmSchemaError.ToString">
      <summary>Возвращает сообщение ошибки.</summary>
      <returns>Сообщение об ошибке.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity">
      <summary>Определяет различные степени серьезности ошибок, которые могут возникнуть при проверке модели Entity Framework.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity.Error">
      <summary>Ошибка, которая препятствует использованию модели.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.EdmSchemaErrorSeverity.Warning">
      <summary>Предупреждение, которое не препятствует использованию модели.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EdmType">
      <summary>Базовый класс EdmType для всех типов моделей</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmType.Abstract">
      <summary>Возвращает значение, указывающее, является ли тип абстрактным.</summary>
      <returns>Значение true, если тип абстрактный, в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmType.BaseType">
      <summary>Возвращает базовый тип этого типа.</summary>
      <returns>Базовый тип этого типа.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmType.FullName">
      <summary>Возвращает полное имя этого типа.</summary>
      <returns>Полное имя этого типа.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmType.GetCollectionType">
      <summary>Возвращает экземпляр <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" />, элементы которого имеют этот тип.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.CollectionType" />, элементы которого имеют этот тип.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmType.Name">
      <summary>Возвращает имя этого типа.</summary>
      <returns>Имя этого типа.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EdmType.NamespaceName">
      <summary>Возвращает пространство имен этого типа.</summary>
      <returns>Пространство имен этого типа.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EdmType.ToString">
      <summary>Возвращает полное имя этого типа.</summary>
      <returns>Полное имя этого типа.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer">
      <summary>Класс для представления контейнера сущностей</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.#ctor(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>Создает контейнер сущностей с указанным именем и пространством данных.</summary>
      <param name="name">Имя контейнера сущностей.</param>
      <param name="dataSpace">Пространство данных контейнера сущностей.</param>
      <exception cref="T:System.ArgumentNullException">Возникает, если аргумент name равен null.</exception>
      <exception cref="T:System.ArgumentException">Возникает, если аргумент name является пустой строкой.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.AddEntitySetBase(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
      <summary>Добавляет указанный набор сущностей в контейнер.</summary>
      <param name="entitySetBase">Добавляемый набор сущностей.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.AddFunctionImport(System.Data.Entity.Core.Metadata.Edm.EdmFunction)">
      <summary>Добавляет импорт функции в контейнер.</summary>
      <param name="function">Добавляемый импорт функции.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.AssociationSets">
      <summary>Возвращает наборы ассоциаций для этого контейнера сущностей.</summary>
      <returns>Наборы ассоциаций для этого контейнера сущностей.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.BaseEntitySets">
      <summary>Возвращает список наборов сущностей и наборов ассоциаций, входящих в этот контейнер <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" />, содержащий список наборов сущностей и наборов ассоциаций, входящих в этот контейнер <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.BuiltInTypeKind">
      <summary>Возвращает встроенный вариант для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.Create(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EntitySetBase},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmFunction},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Фабричный метод для создания объекта EntityContainer.</summary>
      <returns>Объект EntityContainer.</returns>
      <param name="name">Имя создаваемого контейнера сущностей.</param>
      <param name="dataSpace">Пространство данных, которому принадлежит этот контейнер сущностей.</param>
      <param name="entitySets">Наборы сущностей, которые будут включены в новый контейнер.Может принимать значение NULL.</param>
      <param name="functionImports">Функции, которые будут включены в новый контейнер.Может принимать значение NULL.</param>
      <param name="metadataProperties">Свойства метаданных, которые необходимо связать с экземпляром.</param>
      <exception cref="T:System.ArgumentException">Вызывается, если аргумент имени имеет значение NULL или является пустой строкой.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.EntitySets">
      <summary>Возвращает наборы сущностей для этого контейнера сущностей.</summary>
      <returns>Наборы сущностей для этого контейнера сущностей.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.FunctionImports">
      <summary>Задает коллекцию элементов <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />.Каждая функция содержит подробные сведения о хранимой процедуре, которая существует в базе данных, или эквивалентном объекте CommandText, который сопоставлен с сущностью и ее свойствами.</summary>
      <returns>Коллекция <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" />, содержащая элементы <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.GetEntitySetByName(System.String,System.Boolean)">
      <summary>Возвращает объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> с использованием заданного имени для набора сущностей.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />, представляющий набор сущностей с указанным именем.</returns>
      <param name="name">Имя искомого набора сущностей.</param>
      <param name="ignoreCase">Задайте значение true, чтобы выполнить поиск без учета регистра, и значение false — в противном случае.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.GetRelationshipSetByName(System.String,System.Boolean)">
      <summary>Возвращает объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> с использованием заданного имени для набора связей.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" />, представляющий набор связей с указанным именем.</returns>
      <param name="name">Имя искомого набора связей.</param>
      <param name="ignoreCase">Задайте значение true, чтобы выполнить поиск без учета регистра, и значение false — в противном случае.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityContainer.Name">
      <summary>Возвращает имя этого свойства <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />.</summary>
      <returns>Имя этого свойства <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.RemoveEntitySetBase(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
      <summary>Удаляет определенный набор сущностей из контейнера.</summary>
      <param name="entitySetBase">Удаляемый набор сущностей.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.ToString">
      <summary>Возвращает имя этого параметра <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />.</summary>
      <returns>Имя этого свойства <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.TryGetEntitySetByName(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.EntitySet@)">
      <summary>Возвращает объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> с использованием заданного имени для набора сущностей.</summary>
      <returns>Принимает значение true, если существует набор сущностей, соответствующий критерию поиска, и значение false — в противном случае.</returns>
      <param name="name">Имя искомого набора сущностей.</param>
      <param name="ignoreCase">Задайте значение true, чтобы выполнить поиск без учета регистра, и значение false — в противном случае.</param>
      <param name="entitySet">Если метод возвращает значение, этот параметр содержит объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />.Если набор сущностей отсутствует, этот выходной параметр содержит значение NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityContainer.TryGetRelationshipSetByName(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.RelationshipSet@)">
      <summary>Возвращает объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" /> с использованием заданного имени для набора связей.</summary>
      <returns>Принимает значение true, если существует набор связей, соответствующий критерию поиска, и значение false — в противном случае.</returns>
      <param name="name">Имя искомого набора связей.</param>
      <param name="ignoreCase">Задайте значение true, чтобы выполнить поиск без учета регистра, и значение false — в противном случае.</param>
      <param name="relationshipSet">Если этот метод возвращает значение, содержит объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" />.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EntitySet">
      <summary>Представляет конкретное использование структуры, определенной в EntityType.В концептуальной модели представляет набор, который запрашивает и сохраняет сущности.В модели хранения представляет таблицу.Из соглашения модели пространства хранения может использоваться для конфигурации имени таблицы через свойство <see cref="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.Table" /> и схемы таблицы через свойство <see cref="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.Schema" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySet.BuiltInTypeKind">
      <summary>Возвращает встроенный вариант для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntitySet.Create(System.String,System.String,System.String,System.String,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Фабричный метод для создания объекта EntitySet.</summary>
      <returns>Объект EntitySet.</returns>
      <param name="name">Имя объекта EntitySet.</param>
      <param name="schema">Схема БД.Может принимать значение NULL.</param>
      <param name="table">Таблица БД.Может принимать значение NULL.</param>
      <param name="definingQuery">Специфичный для поставщика запрос, который должен использоваться для получения данных для этого EntitySet.Может принимать значение NULL.</param>
      <param name="entityType">Тип для сущностей, содержащихся в этом типе набора сущностей.</param>
      <param name="metadataProperties">Свойства метаданных, которые будут добавлены к только что созданному EntitySet.Может принимать значение NULL.</param>
      <exception cref="T:System.ArgumentException">Вызывается, если аргумент имени имеет значение NULL или является пустой строкой.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySet.ElementType">
      <summary>Возвращает тип сущности этого объекта <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />, представляющий тип сущности этого объекта <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase">
      <summary>Класс для представления набора сущностей</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.BuiltInTypeKind">
      <summary>Возвращает встроенный вариант для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.DefiningQuery">
      <summary>Возвращает экранированный запрос SQL для поставщика с описанием этого набора сущностей.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.ElementType">
      <summary>Возвращает тип сущности этого объекта <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase" />, представляющий тип сущности этого объекта <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.EntityContainer">
      <summary>Возвращает контейнер сущностей текущей сущности или набора связей.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> контейнера сущностей текущей сущности или набора связей.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.Name">
      <summary>Возвращает или задает имя текущей сущности или набора связей.Если это свойство изменено из пространства хранения, следует также обновить уровень сопоставления, чтобы он учитывал новое имя.Для изменения имени таблицы для <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> пространства хранения используйте свойство Table.</summary>
      <returns>Имя текущей сущности или набора связей.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.Schema">
      <summary>Возвращает или задает схему базы данных для этого набора сущностей.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.Table">
      <summary>Возвращает или задает имя таблицы базы данных для этого набора сущностей.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntitySetBase.ToString">
      <summary>Возвращает имя текущей сущности или набора связей.</summary>
      <returns>Имя текущей сущности или набора связей.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EntityType">
      <summary>Представляет структуру <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />.В концептуальной модели представляет форму и структуру сущности.В модели хранения представляет структуру таблицы.Для изменения схемы и имени таблицы используйте метод EntitySet.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityType.AddNavigationProperty(System.Data.Entity.Core.Metadata.Edm.NavigationProperty)">
      <summary>Добавляет указанное свойство навигации в элементы этого типа.Свойство навигации добавляется независимо от флага доступа только для чтения.</summary>
      <param name="property">Свойство навигации, которое нужно добавить.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.BuiltInTypeKind">
      <summary>Возвращает встроенный вариант для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityType.Create(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Фабричный метод для создания объекта EntityType.</summary>
      <returns>Объект EntityType.</returns>
      <param name="name">Имя типа сущности.</param>
      <param name="namespaceName">Пространство имен типа сущности.</param>
      <param name="dataSpace">Пространство данных, которому принадлежит EntityType.</param>
      <param name="keyMemberNames">Имя основных элементов типа.</param>
      <param name="members">Элементы типа сущности (примитив и свойства навигации).</param>
      <param name="metadataProperties">Свойства метаданных, которые необходимо связать с экземпляром.</param>
      <exception cref="T:System.ArgumentException">Вызывается, если аргумент name или namespace имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityType.Create(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmMember},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Фабричный метод для создания объекта EntityType.</summary>
      <returns>Объект EntityType.</returns>
      <param name="name">Имя типа сущности.</param>
      <param name="namespaceName">Пространство имен типа сущности.</param>
      <param name="dataSpace">Пространство данных, которому принадлежит EntityType.</param>
      <param name="baseType">Базовый тип.</param>
      <param name="keyMemberNames">Имя основных элементов типа.</param>
      <param name="members">Элементы типа сущности (примитив и свойства навигации).</param>
      <param name="metadataProperties">Свойства метаданных, которые необходимо связать с экземпляром.</param>
      <exception cref="T:System.ArgumentException">Вызывается, если аргумент name или namespace имеет значение null.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.DeclaredMembers">
      <summary>Возвращает коллекцию объявленных элементов для типа сущности.</summary>
      <returns>Коллекция объявленных элементов для типа сущности.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.DeclaredNavigationProperties">
      <summary>Возвращает объявленные свойства навигации, связанные с типом сущности.</summary>
      <returns>Объявленные свойства навигации, связанные с типом сущности.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.DeclaredProperties">
      <summary>Возвращает список объявленных свойств для типа сущности.</summary>
      <returns>Объявленные свойства для типа сущности.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityType.GetReferenceType">
      <summary>Возвращает объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" />, ссылающийся на этот тип <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" />, ссылающийся на этот тип <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.NavigationProperties">
      <summary>Возвращает свойства навигации этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />.</summary>
      <returns>Коллекция типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" />, содержащая список свойств навигации для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityType.Properties">
      <summary>Возвращает список свойств для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />.</summary>
      <returns>Коллекция типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" />, содержащая список свойств для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase">
      <summary>Представляет тип сущности</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase.AddKeyMember(System.Data.Entity.Core.Metadata.Edm.EdmMember)">
      <summary>Добавляет указанное свойство к списку ключей для текущей сущности.</summary>
      <param name="member">Добавляемое свойство.</param>
      <exception cref="T:System.ArgumentNullException">если аргумент member имеет значение null</exception>
      <exception cref="T:System.InvalidOperationException">Вызывается, если базовый тип EntityType — это базовый тип другого EntityTypeBase.В этом случае KeyMembers следует добавить к базовому типу</exception>
      <exception cref="T:System.InvalidOperationException">Если экземпляр EntityType в состоянии только для чтения</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase.KeyMembers">
      <summary>Возвращает список всех ключевых элементов для текущего типа сущности или связи.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" />, который представляет список ключевых элементов для текущего типа сущности или связи.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase.KeyProperties">
      <summary>Возвращает список всех свойств ключа для данного типа сущности.</summary>
      <returns>Список всех свойств ключа для данного типа сущности.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase.RemoveMember(System.Data.Entity.Core.Metadata.Edm.EdmMember)">
      <summary>Удаляет указанный элемент ключа из коллекции.</summary>
      <param name="member">Удаляемый элемент ключа.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EnumMember">
      <summary>Представляет элемент перечисления.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumMember.BuiltInTypeKind">
      <summary>Возвращает вид этого типа.</summary>
      <returns>Вид типа.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.Create(System.String,System.Byte,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Создает экземпляр EnumMember, доступный только для чтения.</summary>
      <returns>Только что созданный экземпляр EnumMember.</returns>
      <param name="name">Имя члена перечисления.</param>
      <param name="value">Значение члена перечисления.</param>
      <param name="metadataProperties">Свойства метаданных, которые необходимо связать с членом перечисления.</param>
      <exception cref="T:System.ArgumentException">имя имеет значение NULL или пустое.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.Create(System.String,System.Int16,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Создает экземпляр EnumMember, доступный только для чтения.</summary>
      <returns>Только что созданный экземпляр EnumMember.</returns>
      <param name="name">Имя члена перечисления.</param>
      <param name="value">Значение члена перечисления.</param>
      <param name="metadataProperties">Свойства метаданных, которые необходимо связать с членом перечисления.</param>
      <exception cref="T:System.ArgumentException">имя имеет значение NULL или пустое.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.Create(System.String,System.Int32,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Создает экземпляр EnumMember, доступный только для чтения.</summary>
      <returns>Только что созданный экземпляр EnumMember.</returns>
      <param name="name">Имя члена перечисления.</param>
      <param name="value">Значение члена перечисления.</param>
      <param name="metadataProperties">Свойства метаданных, которые необходимо связать с членом перечисления.</param>
      <exception cref="T:System.ArgumentException">имя имеет значение NULL или пустое.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.Create(System.String,System.Int64,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Создает экземпляр EnumMember, доступный только для чтения.</summary>
      <returns>Только что созданный экземпляр EnumMember.</returns>
      <param name="name">Имя члена перечисления.</param>
      <param name="value">Значение члена перечисления.</param>
      <param name="metadataProperties">Свойства метаданных, которые необходимо связать с членом перечисления.</param>
      <exception cref="T:System.ArgumentException">имя имеет значение NULL или пустое.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.Create(System.String,System.SByte,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Создает экземпляр EnumMember, доступный только для чтения.</summary>
      <returns>Только что созданный экземпляр EnumMember.</returns>
      <param name="name">Имя члена перечисления.</param>
      <param name="value">Значение члена перечисления.</param>
      <param name="metadataProperties">Свойства метаданных, которые необходимо связать с членом перечисления.</param>
      <exception cref="T:System.ArgumentException">имя имеет значение NULL или пустое.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumMember.Name">
      <summary>Возвращает имя этого элемента перечисления.</summary>
      <returns>Имя данного члена перечисления.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumMember.ToString">
      <summary>Переопределение System.Object.ToString для улучшенного строкового представления этого типа.</summary>
      <returns>Имя данного члена перечисления.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumMember.Value">
      <summary>Возвращает значение этого элемента перечисления.</summary>
      <returns>Значение элемента перечисления.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.EnumType">
      <summary>Представляет тип перечисления.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumType.BuiltInTypeKind">
      <summary>Возвращает вид типа</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.EnumType.Create(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Boolean,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EnumMember},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Создает экземпляр EnumType, доступный только для чтения.</summary>
      <returns>Только что созданный экземпляр EnumType.</returns>
      <param name="name">Имя типа перечисления.</param>
      <param name="namespaceName">Пространство имен типа перечисления.</param>
      <param name="underlyingType">Базовый тип типа перечисления.</param>
      <param name="isFlags">Указывает, можно ли обрабатывать тип перечисления как битовое поле; то есть набор флагов.</param>
      <param name="members">Элементы типа перечисления.</param>
      <param name="metadataProperties">Свойства метаданных, которые необходимо связать с типом перечисления.</param>
      <exception cref="T:System.ArgumentNullException">underlyingType равно NULL.</exception>
      <exception cref="T:System.ArgumentException">имя имеет значение NULL или пустое.-или- namespaceName имеет значение NULL или пустое.-или- underlyingType не является поддерживаемым базовым типом.-или- Указанные члены не имеют уникальных имен.-или- Значение указанного члена не входит в диапазон базового типа.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumType.IsFlags">
      <summary>Возвращает значение, указывающее, определен ли тип enum как флаги (т. е. он может обрабатываться как битовое поле)</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumType.Members">
      <summary>Возвращает коллекцию элементов перечисления для этого типа перечисления.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.EnumType.UnderlyingType">
      <summary>Возвращает базовый тип этого типа перечисления.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.Facet">
      <summary>Класс для представления объекта Facet. Данный объект неизменяем (не просто доступен только для чтения), а некоторые компоненты системы зависят от этого поведения</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.BuiltInTypeKind">
      <summary>Возвращает встроенный вариант для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.Description">
      <summary>Возвращает описание этого аспекта <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.FacetDescription" />, представляющий описание этого аспекта <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.FacetType">
      <summary>Возвращает тип этого аспекта <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />, представляющий тип этого аспекта <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.IsUnbounded">
      <summary>Возвращает значение, показывающее, является ли значения аспекта неограниченным.</summary>
      <returns>Принимает значение true, если значение аспекта не ограничено, и значение false — в противном случае.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.Name">
      <summary>Возвращает имя этого свойства <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />.</summary>
      <returns>Имя этого свойства <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.Facet.ToString">
      <summary>Возвращает имя этого параметра <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />.</summary>
      <returns>Имя этого свойства <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.Facet.Value">
      <summary>Возвращает значение этого свойства <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />.</summary>
      <returns>Значение этого свойства <see cref="T:System.Data.Entity.Core.Metadata.Edm.Facet" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.FacetDescription">
      <summary>Класс для представления объекта FacetDescription</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.DefaultValue">
      <summary>Возвращает значение аспекта по умолчанию с этим описанием аспекта.</summary>
      <returns>Значение аспекта по умолчанию с этим описанием аспекта.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.FacetName">
      <summary>Возвращает имя этого аспекта.</summary>
      <returns>Имя этого аспекта.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.FacetType">
      <summary>Возвращает тип этого аспекта.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />, представляющий тип этого аспекта.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.IsConstant">
      <summary>Возвращает значение, указывающее, является ли значение этого аспекта константой.</summary>
      <returns>Значение true, если этот аспект является константой; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.IsRequired">
      <summary>Возвращает значение, указывающее, является ли этот аспект обязательным.</summary>
      <returns>Принимает значение true, если этот аспект является обязательным; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.MaxValue">
      <summary>Возвращает максимальное значение для этого аспекта.</summary>
      <returns>Максимальное значение для этого аспекта.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FacetDescription.MinValue">
      <summary>Возвращает минимальное значение для этого аспекта.</summary>
      <returns>Минимальное значение для этого аспекта.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.FacetDescription.ToString">
      <summary>Возвращает имя этого аспекта.</summary>
      <returns>Имя этого аспекта.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter">
      <summary>Класс, представляющий параметр функции</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.BuiltInTypeKind">
      <summary>Возвращает встроенный вариант для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.Create(System.String,System.Data.Entity.Core.Metadata.Edm.EdmType,System.Data.Entity.Core.Metadata.Edm.ParameterMode)">
      <summary>Фабричный метод для создания объекта <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" />.</summary>
      <returns>Новый экземпляр типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />, доступный только для чтения.</returns>
      <param name="name">Имя параметра.</param>
      <param name="edmType">Тип EdmType параметра.</param>
      <param name="parameterMode">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.ParameterMode" /> для параметра.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.DeclaringFunction">
      <summary>Возвращает функцию <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />, в которой объявлен этот параметр.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmFunction" />, представляющий функцию, в которой объявлен этот параметр.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.IsMaxLength">
      <summary>Возвращает значение, указывающее, использует ли этот параметр максимальную длину, поддерживаемую поставщиком базы данных.</summary>
      <returns>Значение true, если параметр использует максимальную длину, поддерживаемую поставщиком базы данных. В противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.IsMaxLengthConstant">
      <summary>Возвращает значение, указывающее, является ли аспект максимальной длины константой для поставщика базы данных.</summary>
      <returns>Значение true, если этот аспект является константой; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.IsPrecisionConstant">
      <summary>Возвращает значение, указывающее, является ли аспект точности константой для поставщика базы данных.</summary>
      <returns>Значение true, если этот аспект является константой; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.IsScaleConstant">
      <summary>Возвращает значение, указывающее, является ли аспект масштаба константой для поставщика базы данных.</summary>
      <returns>Значение true, если этот аспект является константой; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.MaxLength">
      <summary>Возвращает максимально допустимую длину параметра.</summary>
      <returns>Максимальная длина параметра.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.Mode">
      <summary>Возвращает режим этого параметра <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" />.</summary>
      <returns>Одно из значений <see cref="T:System.Data.Entity.Core.Metadata.Edm.ParameterMode" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.Name">
      <summary>Возвращает имя этого свойства <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" />.</summary>
      <returns>Имя этого свойства <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.Precision">
      <summary>Возвращает значение точности параметра.</summary>
      <returns>Значение точности параметра.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.Scale">
      <summary>Возвращает значение масштаба параметра.</summary>
      <returns>Значение масштаба параметра.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.ToString">
      <summary>Возвращает имя этого параметра <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" />.</summary>
      <returns>Имя этого свойства <see cref="T:System.Data.Entity.Core.Metadata.Edm.FunctionParameter" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.TypeName">
      <summary>Возвращает имя типа данного параметра.</summary>
      <returns>Имя типа данного параметра.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.FunctionParameter.TypeUsage">
      <summary>Возвращает экземпляр класса <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />, который содержит тип параметра и аспекты для этого типа.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />, содержащий тип параметра и аспекты для этого типа.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem">
      <summary>Представляет базовый класс элементов для всех метаданных</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter">
      <summary>Интерфейс, который обеспечивает получение базового хранилища и концептуальной модели для <see cref="T:System.Data.Entity.Infrastructure.DbModel" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter.ConceptualModel">
      <summary>Возвращает концептуальную модель.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.IEdmModelAdapter.StoreModel">
      <summary>Возвращает модель хранения.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ItemCollection">
      <summary>Класс для представления коллекции элементов.Основная часть реализации для фактического обслуживания коллекции выполняется классом MetadataCollection</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ItemCollection.DataSpace">
      <summary>Возвращает модель данных, связанную с этой коллекцией элементов.</summary>
      <returns>Модель данных, связанная с этой коллекцией элементов.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetEntityContainer(System.String)">
      <summary>Возвращает объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> с использованием заданного имени для контейнера сущностей.</summary>
      <returns>Если контейнер сущностей отсутствует, этот метод возвращает значение NULL. В противном случае он возвращает первый контейнер сущностей.</returns>
      <param name="name">Имя контейнера сущностей.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetEntityContainer(System.String,System.Boolean)">
      <summary>Возвращает объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> с использованием заданного имени для контейнера сущностей.</summary>
      <returns>Если контейнер сущностей отсутствует, этот метод возвращает значение NULL. В противном случае он возвращает первый контейнер сущностей.</returns>
      <param name="name">Имя контейнера сущностей.</param>
      <param name="ignoreCase">Задайте значение true, чтобы выполнить поиск без учета регистра, и значение false — в противном случае.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetFunctions(System.Collections.Generic.Dictionary{System.String,System.Collections.ObjectModel.ReadOnlyCollection{System.Data.Entity.Core.Metadata.Edm.EdmFunction}},System.String,System.Boolean)">
      <summary>Возвращает все случаи перегрузки функций с использованием указанного имени из этой коллекции элементов.</summary>
      <returns>Коллекция типа ReadOnlyCollection, содержащая все функции с заданным именем.</returns>
      <param name="functionCollection">Словарь функций.</param>
      <param name="functionName">Полное имя функции.</param>
      <param name="ignoreCase">Задайте значение true, чтобы выполнить поиск без учета регистра, и значение false — в противном случае.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetFunctions(System.String)">
      <summary>Возвращает все случаи перегрузки функций с использованием указанного имени из этой коллекции элементов.</summary>
      <returns>Коллекция типа <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, содержащая все функции с заданным именем.</returns>
      <param name="functionName">Полное имя функции.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetFunctions(System.String,System.Boolean)">
      <summary>Возвращает все случаи перегрузки функций с использованием указанного имени из этой коллекции элементов.</summary>
      <returns>Коллекция типа <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, содержащая все функции с заданным именем.</returns>
      <param name="functionName">Полное имя функции.</param>
      <param name="ignoreCase">Задайте значение true, чтобы выполнить поиск без учета регистра, и значение false — в противном случае.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetItem``1(System.String)">
      <summary>Возвращает строго типизированный объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" /> по указанному идентификатору.</summary>
      <returns>Элемент, заданный идентификатором.</returns>
      <param name="identity">Идентификатор элемента.</param>
      <typeparam name="T">Тип, возвращаемый методом.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetItem``1(System.String,System.Boolean)">
      <summary>Возвращает строго типизированный объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" /> по указанному идентификатору. Возможен поиск с учетом регистра или без учета регистра.</summary>
      <returns>Элемент, заданный идентификатором.</returns>
      <param name="identity">Идентификатор элемента.</param>
      <param name="ignoreCase">Задайте значение true, чтобы выполнить поиск без учета регистра, и значение false — в противном случае.</param>
      <typeparam name="T">Тип, возвращаемый методом.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetItems``1">
      <summary>Возвращает все элементы указанного типа из этой коллекции элементов.</summary>
      <returns>Коллекция типа <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, содержащая все элементы указанного типа.</returns>
      <typeparam name="T">Тип, возвращаемый методом.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetType(System.String,System.String)">
      <summary>Возвращает объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> с использованием заданного имени типа и имени пространства имен в этой коллекции элементов.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />, представляющий тип, который соответствует заданному имени типа и имени пространства имен в этой коллекции элементов.Если нет соответствующих типов, этот метод возвращает значение NULL.</returns>
      <param name="name">Имя типа.</param>
      <param name="namespaceName">Пространство имен типа.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.GetType(System.String,System.String,System.Boolean)">
      <summary>Возвращает объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> с использованием заданного имени типа и имени пространства имен из этой коллекции элементов.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />, представляющий тип, который соответствует заданному имени типа и имени пространства имен в этой коллекции элементов.Если нет соответствующих типов, этот метод возвращает значение NULL.</returns>
      <param name="name">Имя типа.</param>
      <param name="namespaceName">Пространство имен типа.</param>
      <param name="ignoreCase">Задайте значение true, чтобы выполнить поиск без учета регистра, и значение false — в противном случае.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetEntityContainer(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.EntityContainer@)">
      <summary>Возвращает объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> с использованием заданного имени для контейнера сущностей.Если контейнер сущностей отсутствует, этот выходной параметр содержит значение NULL. В противном случае он содержит первый контейнер сущностей.</summary>
      <returns>Принимает значение true, если существует контейнер сущностей, соответствующий критерию поиска, и значение false — в противном случае.</returns>
      <param name="name">Имя контейнера сущностей.</param>
      <param name="ignoreCase">Задайте значение true, чтобы выполнить поиск без учета регистра, и значение false — в противном случае.</param>
      <param name="entityContainer">Если этот метод возвращает значение, он содержит объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />.Если контейнер сущностей отсутствует, этот выходной параметр содержит значение NULL. В противном случае он содержит первый контейнер сущностей.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetEntityContainer(System.String,System.Data.Entity.Core.Metadata.Edm.EntityContainer@)">
      <summary>Возвращает объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> с использованием заданного имени для контейнера сущностей.Если контейнер сущностей отсутствует, выходной параметр содержит значение NULL. В противном случае он содержит первый контейнер сущностей.</summary>
      <returns>Принимает значение true, если существует контейнер сущностей, соответствующий критерию поиска, и значение false — в противном случае.</returns>
      <param name="name">Имя контейнера сущностей.</param>
      <param name="entityContainer">Если этот метод возвращает значение, он содержит объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />.Если контейнер сущностей отсутствует, этот выходной параметр содержит значение NULL. В противном случае он содержит первый контейнер сущностей.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetItem``1(System.String,System.Boolean,``0@)">
      <summary>Возвращает строго типизированный объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" /> с использованием указанного идентификатора из этой коллекции элементов.</summary>
      <returns>Принимает значение true, если существует элемент, соответствующий критерию поиска, и значение false — в противном случае.</returns>
      <param name="identity">Идентификатор элемента.</param>
      <param name="ignoreCase">Задайте значение true, чтобы выполнить поиск без учета регистра, и значение false — в противном случае.</param>
      <param name="item">Если этот метод возвращает значение, выходной параметр содержит объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" />.Если в коллекции элементов отсутствует глобальный элемент с заданным идентификатором, этот выходной параметр содержит значение NULL.</param>
      <typeparam name="T">Тип, возвращаемый методом.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetItem``1(System.String,``0@)">
      <summary>Возвращает строго типизированный объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" /> с использованием указанного идентификатора из этой коллекции элементов.</summary>
      <returns>Принимает значение true, если существует элемент, соответствующий критерию поиска, и значение false — в противном случае.</returns>
      <param name="identity">Идентификатор элемента.</param>
      <param name="item">Если этот метод возвращает значение, выходной параметр содержит объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.GlobalItem" />.Если в коллекции элементов отсутствует глобальный элемент с заданным идентификатором, этот выходной параметр содержит значение NULL.</param>
      <typeparam name="T">Тип, возвращаемый методом.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetType(System.String,System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.EdmType@)">
      <summary>Возвращает объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> с использованием заданного имени типа и имени пространства имен из этой коллекции элементов.</summary>
      <returns>Принимает значение true, если существует тип, соответствующий критерию поиска, и значение false — в противном случае.</returns>
      <param name="name">Имя типа.</param>
      <param name="namespaceName">Пространство имен типа.</param>
      <param name="ignoreCase">Задайте значение true, чтобы выполнить поиск без учета регистра, и значение false — в противном случае.</param>
      <param name="type">Если этот метод возвращает значение, данный выходной параметр содержит объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />.При отсутствии типа с заданным именем и именем пространства имен в этой коллекции элементов данный выходной параметр содержит значение NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ItemCollection.TryGetType(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.EdmType@)">
      <summary>Возвращает объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> с использованием заданного имени типа и имени пространства имен из этой коллекции элементов.</summary>
      <returns>Принимает значение true, если существует тип, соответствующий критерию поиска, и значение false — в противном случае.</returns>
      <param name="name">Имя типа.</param>
      <param name="namespaceName">Пространство имен типа.</param>
      <param name="type">Если этот метод возвращает значение, данный выходной параметр содержит объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />.При отсутствии типа с заданным именем и именем пространства имен в этой коллекции элементов данный выходной параметр содержит значение NULL.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.MetadataItem">
      <summary>Представляет базовый класс элементов для всех метаданных</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataItem.AddAnnotation(System.String,System.Object)">
      <summary>Добавляет или обновляет заметку с указанным именем и значением.</summary>
      <param name="name">Имя свойства заметки.</param>
      <param name="value">Значение свойства заметки.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataItem.BuiltInTypeKind">
      <summary>Возвращает вид встроенного типа для этого типа.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для этого типа.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataItem.Documentation">
      <summary>Возвращает или задает документацию, связанную с этим типом.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.Documentation" />, представляющий документацию по этому типу.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataItem.GetBuiltInType(System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind)">
      <summary>Возвращает встроенный тип концептуальной модели, соответствующий одному из значений <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />, представляющий встроенный тип в модели EDM.</returns>
      <param name="builtInTypeKind">Одно из значений <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataItem.GetGeneralFacetDescriptions">
      <summary>Возвращает список общих описаний аспектов для указанного типа.</summary>
      <returns>Объект <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, представляющий список общих описаний аспектов для указанного типа.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataItem.MetadataProperties">
      <summary>Возвращает список свойств текущего типа.</summary>
      <returns>Коллекция типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" />, содержащая список свойств текущего типа.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataItem.RemoveAnnotation(System.String)">
      <summary>Удаляет заметку с указанным именем.</summary>
      <returns>Возвращает значение true, если заметка успешно удалена, в противном случае — значение false.</returns>
      <param name="name">Имя свойства заметки.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty">
      <summary>Класс, представляющий атрибут метаданных для элемента</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.BuiltInTypeKind">
      <summary>Возвращает встроенный вариант для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.Create(System.String,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Object)">
      <summary>Фабричный метод для создания объекта MetadataProperty.</summary>
      <returns>Объект MetadataProperty.</returns>
      <param name="name">Имя свойства метаданных.</param>
      <param name="typeUsage">Использование типа свойства метаданных.</param>
      <param name="value">Значение свойства метаданных.</param>
      <exception cref="T:System.NullReferenceException">Выданное <paramref name="typeUsage" /> имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.CreateAnnotation(System.String,System.Object)">
      <summary>Создает заметку к метаданным с указанным именем и значением.</summary>
      <returns>Экземпляр MetadataProperty, представляющий созданную заметку.</returns>
      <param name="name">Имя заметки.</param>
      <param name="value">Значение заметки.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.IsAnnotation">
      <summary>Возвращает логическое значение, указывающее, представляет ли собой свойство метаданных заметку.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.Name">
      <summary>Возвращает имя этого свойства <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" />.</summary>
      <returns>Имя этого свойства <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.PropertyKind">
      <summary>Возвращает значение этого свойства <see cref="T:System.Data.Entity.Core.Metadata.Edm.PropertyKind" />.</summary>
      <returns>Значение этого свойства <see cref="T:System.Data.Entity.Core.Metadata.Edm.PropertyKind" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.TypeUsage">
      <summary>Возвращает экземпляр класса <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />, который содержит тип этого свойства <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> и аспекты для этого типа.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />, содержащий тип этого свойства <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" /> и аспекты для этого типа.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataProperty.Value">
      <summary>Возвращает значение этого свойства <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" />.</summary>
      <returns>Значение этого свойства <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace">
      <summary>Рабочая область метаданных среды выполнения</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />, используя указанные пути и сборки.</summary>
      <param name="paths">Пути к метаданным рабочей области.</param>
      <param name="assembliesToConsider">Имена сборок, используемых при создании рабочей области.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.#ctor(System.Func{System.Data.Entity.Core.Metadata.Edm.EdmItemCollection},System.Func{System.Data.Entity.Core.Metadata.Edm.StoreItemCollection},System.Func{System.Data.Entity.Core.Mapping.StorageMappingItemCollection})">
      <summary>Формирует <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> с загрузчиками для всех коллекций элементов (<see cref="T:System.Data.Entity.Core.Metadata.Edm.ItemCollection" />), полученных из традиционного сопоставления EDMX.Можно использовать коллекции сопоставления o-space и o/c по умолчанию.Выполнение делегатов этой коллекции элементов откладывается, если данная коллекция используется в первый раз.Можно передать делегат, который возвращает значение NULL, если коллекция никогда не будет использоваться. Но это происходит редко, а любая попытка EF использовать коллекцию в таких ситуациях приводит к возникновению исключения.</summary>
      <param name="cSpaceLoader">Делегат для возвращения коллекции элемента пространства С (CSDL).</param>
      <param name="sSpaceLoader">Делегат для возвращения коллекции элемента пространства S (SSDL).</param>
      <param name="csMappingLoader">Делегат для возвращения коллекции элемента сопоставления C/S (MSL).</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.#ctor(System.Func{System.Data.Entity.Core.Metadata.Edm.EdmItemCollection},System.Func{System.Data.Entity.Core.Metadata.Edm.StoreItemCollection},System.Func{System.Data.Entity.Core.Mapping.StorageMappingItemCollection},System.Func{System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection})">
      <summary>Формирует <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" /> с загрузчиками для всех коллекций элементов (<see cref="T:System.Data.Entity.Core.Metadata.Edm.ItemCollection" />), требуемых для EF, кроме сопоставления o/c, которое создается автоматически на основе заданных загрузчиков o-space и c-space.Выполнение делегатов этой коллекции элементов откладывается, если данная коллекция используется в первый раз.Можно передать делегат, который возвращает значение NULL, если коллекция никогда не будет использоваться. Но это происходит редко, а любая попытка EF использовать коллекцию в таких ситуациях приводит к возникновению исключения.</summary>
      <param name="cSpaceLoader">Делегат для возвращения коллекции элемента пространства С (CSDL).</param>
      <param name="sSpaceLoader">Делегат для возвращения коллекции элемента пространства S (SSDL).</param>
      <param name="csMappingLoader">Делегат для возвращения коллекции элемента сопоставления C/S (MSL).</param>
      <param name="oSpaceLoader">Делегат для возвращения коллекции элемента пространства О.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.ClearCache">
      <summary>Удаляет все записи из кэша метаданных.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.CreateEntitySqlParser">
      <summary>Создает анализатор <see cref="T:System.Data.Entity.Core.Common.EntitySql.EntitySqlParser" />, настроенный для использования пространства данных <see cref="F:System.Data.Entity.Core.Metadata.Edm.DataSpace.CSpace" />.</summary>
      <returns>Созданный объект средства синтаксического анализатора.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.CreateQueryCommandTree(System.Data.Entity.Core.Common.CommandTrees.DbExpression)">
      <summary>Создает новое дерево команд <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree" />, привязанное к данной рабочей области метаданных и основанное на указанном выражении запроса.</summary>
      <returns>Новый объект <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree" /> с указанным выражением в качестве свойства <see cref="P:System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree.Query" />.</returns>
      <param name="query">Дерево команд <see cref="T:System.Data.Entity.Core.Common.CommandTrees.DbExpression" />, которое определяет запрос.</param>
      <exception cref="T:System.ArgumentNullException">Если параметр <paramref name="query" /> имеет значение NULL</exception>
      <exception cref="T:System.ArgumentException">Если <paramref name="query" /> содержит метаданные, которые нельзя разрешить в этой рабочей области метаданных</exception>
      <exception cref="T:System.ArgumentException">Если <paramref name="query" /> не является структурно допустимым, так как содержит неразрешимые ссылки на переменные</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetEdmSpaceType(System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>Возвращает объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />, представляющий тип <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />, который соответствует типу, заданному параметром objectSpaceType.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />, представляющий <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />.Если нет соответствующих типов, этот метод возвращает значение NULL.</returns>
      <param name="objectSpaceType">Объект <see cref="T:System.Data.Metadata.Edm.EnumlType" />, представляющий тип в пространстве объектов.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetEdmSpaceType(System.Data.Entity.Core.Metadata.Edm.StructuralType)">
      <summary>Возвращает объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />, представляющий тип <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />, который соответствует типу, заданному параметром objectSpaceType.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />, представляющий <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />.Если нет соответствующих типов, этот метод возвращает значение NULL.</returns>
      <param name="objectSpaceType">Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />, представляющий тип в пространстве объектов.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetEntityContainer(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>Возвращает объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> с использованием заданного имени для контейнера сущностей и модели данных.</summary>
      <returns>Если контейнер сущностей отсутствует, этот метод возвращает значение NULL. В противном случае он возвращает первый контейнер сущностей.</returns>
      <param name="name">Имя контейнера сущностей.</param>
      <param name="ignoreCase">Задайте значение true, чтобы выполнить поиск без учета регистра, и значение false — в противном случае.</param>
      <param name="dataSpace">Концептуальная модель, в которой производится поиск контейнера сущностей.</param>
      <exception cref="T:System.ArgumentException">Вызывается, если пространство является недопустимым.Допустимое пространство: C, O, CS или OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetEntityContainer(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>Возвращает объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> с использованием заданного имени для контейнера сущностей и модели данных.</summary>
      <returns>Если контейнер сущностей отсутствует, этот метод возвращает значение NULL. В противном случае он возвращает первый контейнер сущностей.</returns>
      <param name="name">Имя контейнера сущностей.</param>
      <param name="dataSpace">Концептуальная модель, в которой производится поиск контейнера сущностей.</param>
      <exception cref="T:System.ArgumentException">Вызывается, если пространство является недопустимым.Допустимое пространство: C, O, CS или OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetFunctions(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>Возвращает все случаи перегрузки функций с использованием указанного имени, имени пространства имен и модели данных.</summary>
      <returns>Коллекция типа <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, содержащая все функции с заданным именем из указанного пространства имен и модели данных.</returns>
      <param name="name">Имя функции.</param>
      <param name="namespaceName">Пространство имен функции.</param>
      <param name="dataSpace">Концептуальная модель, в которой производится поиск функций.</param>
      <exception cref="T:System.ArgumentException">Вызывается, если пространство является недопустимым.Допустимое пространство: C, O, CS или OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetFunctions(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Boolean)">
      <summary>Возвращает все случаи перегрузки функций с использованием указанного имени, имени пространства имен и модели данных.</summary>
      <returns>Коллекция типа <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, содержащая все функции с заданным именем из указанного пространства имен и модели данных.</returns>
      <param name="name">Имя функции.</param>
      <param name="namespaceName">Пространство имен функции.</param>
      <param name="dataSpace">Концептуальная модель, в которой производится поиск функций.</param>
      <param name="ignoreCase">Задайте значение true, чтобы выполнить поиск без учета регистра, и значение false — в противном случае.</param>
      <exception cref="T:System.ArgumentException">Вызывается, если пространство является недопустимым.Допустимое пространство: C, O, CS или OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetItem``1(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>Возвращает элемент с использованием заданного идентификатора и модели данных.</summary>
      <returns>Элемент, соответствующий указанному идентификатору в заданной модели данных.</returns>
      <param name="identity">Идентификатор элемента.</param>
      <param name="ignoreCase">Задайте значение true, чтобы выполнить поиск без учета регистра, и значение false — в противном случае.</param>
      <param name="dataSpace">Концептуальная модель, в которой производится поиск элемента.</param>
      <typeparam name="T">Тип, возвращаемый методом.</typeparam>
      <exception cref="T:System.ArgumentException">Вызывается, если пространство является недопустимым.Допустимое пространство: C, O, CS или OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetItem``1(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>Возвращает элемент с использованием заданного идентификатора и модели данных.</summary>
      <returns>Элемент, соответствующий указанному идентификатору в заданной модели данных.</returns>
      <param name="identity">Идентификатор элемента.</param>
      <param name="dataSpace">Концептуальная модель, в которой производится поиск элемента.</param>
      <typeparam name="T">Тип, возвращаемый методом.</typeparam>
      <exception cref="T:System.ArgumentException">Вызывается, если пространство является недопустимым.Допустимое пространство: C, O, CS или OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetItemCollection(System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>Получает элементы <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />.</summary>
      <returns>Элементы <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />.</returns>
      <param name="dataSpace">Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.DataSpace" />, из которого извлекаются элементы.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetItems(System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>Возвращает все элементы в заданной модели данных.</summary>
      <returns>Коллекция типа <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, содержащая все элементы в заданной модели данных.</returns>
      <param name="dataSpace">Концептуальная модель, для которой необходим список элементов.</param>
      <exception cref="T:System.ArgumentException">Вызывается, если пространство является недопустимым.Допустимое пространство: C, O, CS или OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetItems``1(System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>Возвращает все элементы в заданной модели данных.</summary>
      <returns>Коллекция типа <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, содержащая все элементы в заданной модели данных.</returns>
      <param name="dataSpace">Концептуальная модель, для которой необходим список элементов.</param>
      <typeparam name="T">Тип, возвращаемый методом.</typeparam>
      <exception cref="T:System.ArgumentException">Вызывается, если пространство является недопустимым.Допустимое пространство: C, O, CS или OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetObjectSpaceType(System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>Возвращает объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />, представляющий тип пространства объектов, который соответствует типу, заданному параметром edmSpaceType.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />, представляющий тип пространства объектов.Если нет соответствующих типов, этот метод возвращает значение NULL.</returns>
      <param name="edmSpaceType">Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" />, представляющий <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetObjectSpaceType(System.Data.Entity.Core.Metadata.Edm.StructuralType)">
      <summary>Возвращает объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />, представляющий тип пространства объектов, который соответствует типу, заданному параметром edmSpaceType.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />, представляющий тип пространства объектов.Если нет соответствующих типов, этот метод возвращает значение NULL.</returns>
      <param name="edmSpaceType">Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />, представляющий <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetPrimitiveTypes(System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>Возвращает список типов-примитивов в указанной модели данных.</summary>
      <returns>Коллекция типа <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, содержащая все типы-примитивы в заданной модели данных.</returns>
      <param name="dataSpace">Модель данных, для которой необходим список типов-примитивов.</param>
      <exception cref="T:System.ArgumentException">Вызывается, если пространство является недопустимым.Допустимое пространство: C, O, CS или OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetRelevantMembersForUpdate(System.Data.Entity.Core.Metadata.Edm.EntitySetBase,System.Data.Entity.Core.Metadata.Edm.EntityTypeBase,System.Boolean)">
      <summary>Возвращает элементы заданного <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> или <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />, для которого требуются исходные значения при изменении сущности.</summary>
      <returns>Элементы <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmMember" />, для которых требуется исходное значение.</returns>
      <param name="entitySet">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />, принадлежащий пространству C.</param>
      <param name="entityType">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityType" />, участвующий в данном <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />.</param>
      <param name="partialUpdateSupported">Значение true, если сущности можно частично обновить. В противном случае — значение false.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetRequiredOriginalValueMembers(System.Data.Entity.Core.Metadata.Edm.EntitySetBase,System.Data.Entity.Core.Metadata.Edm.EntityTypeBase)">
      <summary>Возвращает элементы исходных значений из набора сущностей и типа сущности.</summary>
      <returns>Элементы исходных значений из набора сущностей и типа сущности.</returns>
      <param name="entitySet">Набор сущностей, из которого извлекаются исходные значения.</param>
      <param name="entityType">Тип сущности, из которого извлекаются исходные значения.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetType(System.String,System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>Возвращает объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> с использованием заданных имени типа, имени пространства имен и модели данных.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />.</returns>
      <param name="name">Имя типа.</param>
      <param name="namespaceName">Пространство имен типа.</param>
      <param name="ignoreCase">Задайте значение true, чтобы выполнить поиск без учета регистра, и значение false — в противном случае.</param>
      <param name="dataSpace">Концептуальная модель, в которой производится поиск типа.</param>
      <exception cref="T:System.ArgumentException">Вызывается, если пространство является недопустимым.Допустимое пространство: C, O, CS или OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.GetType(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace)">
      <summary>Возвращает объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> с использованием заданных имени типа, имени пространства имен и модели данных.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />, представляющий тип, который соответствует заданному имени типа и имени пространства имен в этой модели данных.Если нет соответствующих типов, этот метод возвращает значение NULL.</returns>
      <param name="name">Имя типа.</param>
      <param name="namespaceName">Пространство имен типа.</param>
      <param name="dataSpace">Концептуальная модель, в которой производится поиск типа.</param>
      <exception cref="T:System.ArgumentException">Вызывается, если пространство является недопустимым.Допустимое пространство: C, O, CS или OCSpace</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.LoadFromAssembly(System.Reflection.Assembly)">
      <summary>Загружает метаданные из заданной сборки.</summary>
      <param name="assembly">Сборка, из которой будут загружаться метаданные.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.LoadFromAssembly(System.Reflection.Assembly,System.Action{System.String})">
      <summary>Загружает метаданные из заданной сборки.</summary>
      <param name="assembly">Сборка, из которой будут загружаться метаданные.</param>
      <param name="logLoadMessage">Делегат для ведения журнала сообщений о загрузке.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.MaximumEdmVersionSupported">
      <summary>Максимальная версия модели EDM, которая будет поддерживаться средой выполнения.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.RegisterItemCollection(System.Data.Entity.Core.Metadata.Edm.ItemCollection)">
      <summary>Регистрирует коллекцию элементов в каждой связанной с ней модели данных.</summary>
      <param name="collection">Коллекция выходных параметров, которую нужно заполнить.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetEdmSpaceType(System.Data.Entity.Core.Metadata.Edm.EnumType,System.Data.Entity.Core.Metadata.Edm.EnumType@)">
      <summary>Возвращает объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> через выходной параметр edmSpaceType, представляющий собой тип <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />, который соответствует типу, передаваемому параметром objectSpaceType.</summary>
      <returns>Значение true, если операция выполнена успешно; в противном случае — значение false.</returns>
      <param name="objectSpaceType">Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" />, представляющий тип пространства объектов.</param>
      <param name="edmSpaceType">Если этот метод возвращает значение, содержит объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" />, представляющий <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />.Этот параметр передается неинициализированным.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetEdmSpaceType(System.Data.Entity.Core.Metadata.Edm.StructuralType,System.Data.Entity.Core.Metadata.Edm.StructuralType@)">
      <summary>Возвращает объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> через выходной параметр edmSpaceType, представляющий собой тип <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />, который соответствует типу, передаваемому параметром objectSpaceType.</summary>
      <returns>Принимает значение true, если существует тип, соответствующий критерию поиска, и значение false — в противном случае.</returns>
      <param name="objectSpaceType">Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />, представляющий тип пространства объектов.</param>
      <param name="edmSpaceType">Если этот метод возвращает значение, содержит объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />, представляющий <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />.Этот параметр передается неинициализированным.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetEntityContainer(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EntityContainer@)">
      <summary>Возвращает объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> с использованием заданного имени для контейнера сущностей и модели данных.</summary>
      <returns>Принимает значение true, если существует контейнер сущностей, соответствующий критерию поиска, и значение false — в противном случае.</returns>
      <param name="name">Имя контейнера сущностей.</param>
      <param name="ignoreCase">Задайте значение true, чтобы выполнить поиск без учета регистра, и значение false — в противном случае.</param>
      <param name="dataSpace">Концептуальная модель, в которой производится поиск контейнера сущностей.</param>
      <param name="entityContainer">Если метод возвращает значение, этот параметр содержит объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />.Если контейнер сущностей отсутствует, этот выходной параметр содержит значение NULL. В противном случае он возвращает первый контейнер сущностей.Этот параметр передается неинициализированным.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetEntityContainer(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EntityContainer@)">
      <summary>Возвращает объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" /> с использованием заданного имени для контейнера сущностей и модели данных.</summary>
      <returns>Принимает значение true, если существует контейнер сущностей, соответствующий критерию поиска, и значение false — в противном случае.</returns>
      <param name="name">Имя контейнера сущностей.</param>
      <param name="dataSpace">Концептуальная модель, в которой производится поиск контейнера сущностей.</param>
      <param name="entityContainer">Если метод возвращает значение, этот параметр содержит объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityContainer" />.Если контейнер сущностей отсутствует, этот выходной параметр содержит значение NULL. В противном случае он возвращает первый контейнер сущностей.Этот параметр передается неинициализированным.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetItem``1(System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace,``0@)">
      <summary>Возвращает элемент с использованием заданного идентификатора и модели данных.</summary>
      <returns>Принимает значение true, если существует элемент, соответствующий критерию поиска, и значение false — в противном случае.</returns>
      <param name="identity">Концептуальная модель, в которой производится поиск элемента.</param>
      <param name="ignoreCase">Задайте значение true, чтобы выполнить поиск без учета регистра, и значение false — в противном случае.</param>
      <param name="dataSpace">Концептуальная модель, в которой производится поиск элемента.</param>
      <param name="item">Если этот метод возвращает значение, содержит объект <see cref="T:System.Data.Metadata.Edm.GlobalIem" />.Этот параметр передается неинициализированным.</param>
      <typeparam name="T">Тип, возвращаемый методом.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetItem``1(System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,``0@)">
      <summary>Возвращает элемент с использованием заданного идентификатора и модели данных.</summary>
      <returns>Принимает значение true, если существует элемент, соответствующий критерию поиска, и значение false — в противном случае.</returns>
      <param name="identity">Концептуальная модель, в которой производится поиск элемента.</param>
      <param name="space">Концептуальная модель, в которой производится поиск элемента.</param>
      <param name="item">Если этот метод возвращает значение, содержит объект <see cref="T:System.Data.Metadata.Edm.GlobalIem" />.Этот параметр передается неинициализированным.</param>
      <typeparam name="T">Тип, возвращаемый методом.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetItemCollection(System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.ItemCollection@)">
      <summary>Проверяет получение <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />.</summary>
      <returns>Значение true, если операция выполнена успешно; в противном случае — значение false.</returns>
      <param name="dataSpace">Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.DataSpace" />, из которого производится попытка получения <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />.</param>
      <param name="collection">Если метод возвращает значение, содержит коллекцию элементов.Этот параметр передается неинициализированным.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetObjectSpaceType(System.Data.Entity.Core.Metadata.Edm.EnumType,System.Data.Entity.Core.Metadata.Edm.EnumType@)">
      <summary>Возвращает объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" /> через выходной параметр objectSpaceType, представляющий собой тип, который соответствует типу <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />, передаваемому параметром edmSpaceType.</summary>
      <returns>Принимает значение true, если существует тип, соответствующий критерию поиска, и значение false — в противном случае.</returns>
      <param name="edmSpaceType">Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" />, представляющий <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />.</param>
      <param name="objectSpaceType">Если этот метод возвращает значение, содержит объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EnumType" />, представляющий тип пространства объектов.Этот параметр передается неинициализированным.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetObjectSpaceType(System.Data.Entity.Core.Metadata.Edm.StructuralType,System.Data.Entity.Core.Metadata.Edm.StructuralType@)">
      <summary>Возвращает объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" /> через выходной параметр objectSpaceType, представляющий собой тип, который соответствует типу <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />, передаваемому параметром edmSpaceType.</summary>
      <returns>Принимает значение true, если существует тип, соответствующий критерию поиска, и значение false — в противном случае.</returns>
      <param name="edmSpaceType">Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />, представляющий <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />.</param>
      <param name="objectSpaceType">Если этот метод возвращает значение, содержит объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />, представляющий тип пространства объектов.Этот параметр передается неинициализированным.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetType(System.String,System.String,System.Boolean,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EdmType@)">
      <summary>Возвращает объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> с использованием заданных имени типа, имени пространства имен и модели данных.</summary>
      <returns>Принимает значение true, если существует тип, соответствующий критерию поиска, и значение false — в противном случае.</returns>
      <param name="name">Имя типа.</param>
      <param name="namespaceName">Пространство имен типа.</param>
      <param name="ignoreCase">Задайте значение true, чтобы выполнить поиск без учета регистра, и значение false — в противном случае.</param>
      <param name="dataSpace">Концептуальная модель, в которой производится поиск типа.</param>
      <param name="type">Если метод возвращает значение, этот параметр содержит объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />.Этот параметр передается неинициализированным.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace.TryGetType(System.String,System.String,System.Data.Entity.Core.Metadata.Edm.DataSpace,System.Data.Entity.Core.Metadata.Edm.EdmType@)">
      <summary>Возвращает объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> с использованием заданных имени типа, имени пространства имен и модели данных.</summary>
      <returns>Принимает значение true, если существует тип, соответствующий критерию поиска, и значение false — в противном случае.</returns>
      <param name="name">Имя типа.</param>
      <param name="namespaceName">Пространство имен типа.</param>
      <param name="dataSpace">Концептуальная модель, в которой производится поиск типа.</param>
      <param name="type">Если метод возвращает значение, этот параметр содержит объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />.Этот параметр передается неинициализированным.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.NavigationProperty">
      <summary>Представляет класс свойства навигации модели EDM</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.BuiltInTypeKind">
      <summary>Возвращает встроенный вариант для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.NavigationProperty" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.NavigationProperty" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.Create(System.String,System.Data.Entity.Core.Metadata.Edm.TypeUsage,System.Data.Entity.Core.Metadata.Edm.RelationshipType,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Создает экземпляр NavigationProperty с указанными параметрами</summary>
      <returns>Созданный экземпляр NavigationProperty.</returns>
      <param name="name">Имя свойства навигации.</param>
      <param name="typeUsage">Указывает тип свойства навигации и его аспекты.</param>
      <param name="relationshipType">Тип связи для навигации.</param>
      <param name="from">Исходный конечный элемент навигации.</param>
      <param name="to">Целевой конечный элемент навигации.</param>
      <param name="metadataProperties">Свойства метаданных свойства навигации.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.FromEndMember">
      <summary>Возвращает последний элемент «начального» объекта связи для данного перемещения.</summary>
      <returns>Последний элемент «начального» объекта связи для данного перемещения.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.GetDependentProperties">
      <summary>Если данное свойство навигации установлено в зависимом конечном элементе справочного ограничения, возвращаются свойства внешнего ключа.В противном случае возвращается пустой набор.Элементы возвращаются в порядке ключевых свойств основного конечного элемента.</summary>
      <returns>Коллекция свойств внешнего ключа.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.RelationshipType">
      <summary>Возвращает тип связи, с которым работает данное свойство навигации.</summary>
      <returns>Тип связи, с которым работает данное свойство навигации.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.NavigationProperty.ToEndMember">
      <summary>Возвращает последний элемент «конечного» объекта связи для данного перемещения.</summary>
      <returns>Последний элемент «конечного» объекта связи для данного перемещения.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection">
      <summary>Класс для представления коллекции элементов для уровня объектов.Основная часть реализации для фактического обслуживания коллекции выполняется классом ItemCollection</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.GetClrType(System.Data.Entity.Core.Metadata.Edm.EnumType)">
      <summary>Этот метод возвращает базовый тип CLR для указанного аргумента типа OSpace.Если DataSpace параметра отличается от OSpace, вызывается исключение ArgumentException.</summary>
      <returns>Тип CLR аргумента OSpace.</returns>
      <param name="objectSpaceType">Искомый тип OSpace.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.GetClrType(System.Data.Entity.Core.Metadata.Edm.StructuralType)">
      <summary>Возвращает тип CLR, соответствующий объекту <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />, переданному в параметре objectSpaceType.</summary>
      <returns>Тип CLR аргумента OSpace.</returns>
      <param name="objectSpaceType">Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />, представляющий тип пространства объектов.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.GetItems``1">
      <summary>Возвращает все элементы указанного типа из этой коллекции элементов.</summary>
      <returns>Коллекция типа <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, содержащая все элементы указанного типа.</returns>
      <typeparam name="T">Тип, возвращаемый методом.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.GetPrimitiveTypes">
      <summary>Возвращает коллекцию объектов типа-примитива.</summary>
      <returns>Коллекция объектов типов-примитивов.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.LoadFromAssembly(System.Reflection.Assembly)">
      <summary>Загружает метаданные из заданной сборки.</summary>
      <param name="assembly">Сборка, из которой будут загружаться метаданные.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.LoadFromAssembly(System.Reflection.Assembly,System.Data.Entity.Core.Metadata.Edm.EdmItemCollection)">
      <summary>Загружает метаданные из указанной сборки.</summary>
      <param name="assembly">Сборка, из которой будут загружаться метаданные.</param>
      <param name="edmItemCollection">Источник метаданных модели EDM для метаданных объектного пространства.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.LoadFromAssembly(System.Reflection.Assembly,System.Data.Entity.Core.Metadata.Edm.EdmItemCollection,System.Action{System.String})">
      <summary>Загружает метаданные из заданной сборки.</summary>
      <param name="assembly">Сборка, из которой будут загружаться метаданные.</param>
      <param name="edmItemCollection">Источник метаданных модели EDM для метаданных объектного пространства.</param>
      <param name="logLoadMessage">Делегат, которому отправляются сообщения журнала.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.TryGetClrType(System.Data.Entity.Core.Metadata.Edm.EnumType,System.Type@)">
      <summary>Возвращает базовый тип CLR для указанного аргумента типа перечисления OSpace.Если DataSpace параметра отличается от OSpace, метод возвращает значение false и устанавливает для выходного параметра значение null.</summary>
      <returns>Значение true, если операция выполнена успешно; в противном случае — значение false</returns>
      <param name="objectSpaceType">Тип перечисления OSpace, который нужно искать</param>
      <param name="clrType">Тип перечисления CLR аргумента OSpace</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ObjectItemCollection.TryGetClrType(System.Data.Entity.Core.Metadata.Edm.StructuralType,System.Type@)">
      <summary>Возвращает тип CLR, соответствующий объекту <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />, переданному в параметре objectSpaceType.</summary>
      <returns>Принимает значение true, если существует тип, соответствующий критерию поиска, и значение false — в противном случае.</returns>
      <param name="objectSpaceType">Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.StructuralType" />, представляющий тип пространства объектов.</param>
      <param name="clrType">Тип CLR.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.OperationAction">
      <summary>Представляет список возможных действий для операции удаления</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.OperationAction.Cascade">
      <summary>Каскадный переход к другим конечным элементам</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.OperationAction.None">
      <summary>никаких действий</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ParameterMode">
      <summary>Перечисление, определяющее режим параметра</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterMode.In">
      <summary>Входной параметр</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterMode.InOut">
      <summary>Входной и выходной параметр</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterMode.Out">
      <summary>Выходной параметр</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterMode.ReturnValue">
      <summary>Возвращаемый параметр</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ParameterTypeSemantics">
      <summary>Перечисление, определяющее семантику типа, которая используется для разрешения перегрузок функций.Эти флаги определяются в манифесте поставщика для каждого определения функции.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterTypeSemantics.AllowImplicitConversion">
      <summary>Разрешить неявное преобразование между данными типами аргументов и формальными типами аргументов (по умолчанию).</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterTypeSemantics.AllowImplicitPromotion">
      <summary>Разрешить повышение типов между данными типами аргументов и формальными типами аргументов.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.ParameterTypeSemantics.ExactMatchOnly">
      <summary>Использовать только строгую эквивалентность.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType">
      <summary>Класс, представляющий тип-примитив</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.BuiltInTypeKind">
      <summary>Возвращает встроенный вариант для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.ClrEquivalentType">
      <summary>Возвращает эквивалентный типу среды CLR тип <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />.Следует отметить, что свойство <see cref="P:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.ClrEquivalentType" /> всегда возвращает значение типа, не допускающего значений NULL.</summary>
      <returns>Объект <see cref="T:System.Type" />, который представляет эквивалентный типу среды CLR тип <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.FacetDescriptions">
      <summary>Возвращает список описаний аспектов для типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />.</summary>
      <returns>Коллекция типа <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, содержащая список описаний аспектов для типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.GetEdmPrimitiveType">
      <summary>Возвращает эквивалент <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" /> типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />, который является эквивалентом типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.GetEdmPrimitiveType(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind)">
      <summary>Возвращает тип <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />, эквивалентный типу <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />, являющийся эквивалентом указанного типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />.</returns>
      <param name="primitiveTypeKind">Значение типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.GetEdmPrimitiveTypes">
      <summary>Возвращает список типов-примитивов.</summary>
      <returns>Коллекция типа <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, содержащая список типов-примитивов.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.PrimitiveType.PrimitiveTypeKind">
      <summary>Возвращает значение перечисления <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind" />, которое указывает тип-примитив <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />.</summary>
      <returns>Значение перечисления <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind" />, которое указывает тип-примитив <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind">
      <summary>Типы-примитивы, определяемые моделью EDM</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Binary">
      <summary>Вид типа Binary</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Boolean">
      <summary>Вид типа Boolean</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Byte">
      <summary>Вид типа Byte</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.DateTime">
      <summary>Вид типа DateTime</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.DateTimeOffset">
      <summary>Вид типа DateTimeOffset</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Decimal">
      <summary>Вид типа Decimal</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Double">
      <summary>Вид типа Double</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Geography">
      <summary>Вид типа Geography</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyCollection">
      <summary>Вид типа Geographic collection</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyLineString">
      <summary>Вид типа Geographic linestring</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyMultiLineString">
      <summary>Вид типа Geographic multi-linestring</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyMultiPoint">
      <summary>Вид типа Geographic multi-point</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyMultiPolygon">
      <summary>Вид типа Geographic multi-polygon</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyPoint">
      <summary>Вид типа Geographic point</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeographyPolygon">
      <summary>Вид типа Geographic polygon</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Geometry">
      <summary>Вид типа Geometry</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryCollection">
      <summary>Вид типа Geometric collection</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryLineString">
      <summary>Вид типа Geometric linestring</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryMultiLineString">
      <summary>Вид типа Geometric multi-linestring</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryMultiPoint">
      <summary>Вид типа Geometric multi-point</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryMultiPolygon">
      <summary>Вид типа Geometric multi-polygon</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryPoint">
      <summary>Вид типа Geometric point</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.GeometryPolygon">
      <summary>Вид типа Geometric polygon</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Guid">
      <summary>Вид типа идентификатора Guid</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Int16">
      <summary>Вид типа Int16</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Int32">
      <summary>Вид типа Int32</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Int64">
      <summary>Вид типа Int64</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.SByte">
      <summary>Вид типа SByte</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Single">
      <summary>Вид типа Single</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.String">
      <summary>Вид типа String</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind.Time">
      <summary>Вид типа Time</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.PropertyKind">
      <summary>Задает типы атрибутов элемента в концептуальной модели.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PropertyKind.Extended">
      <summary>Элемент перечисления, показывающий, что атрибут элемента является расширенным.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.PropertyKind.System">
      <summary>Элемент перечисления, показывающий, что атрибут элемента является системным.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1">
      <summary>Класс, представляющий доступную только для чтения оболочку MetadataCollection</summary>
      <typeparam name="T">Тип элементов в этой коллекции</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Contains(System.String)">
      <summary>Определяет, содержит ли коллекция элемент с указанным идентификатором.</summary>
      <returns>Принимает значение true, если в коллекции содержится искомый элемент, и значение false — в противном случае.Значение по умолчанию — false.</returns>
      <param name="identity">Идентификатор элемента.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.GetEnumerator">
      <summary>Возвращает перечислитель для просмотра этой коллекции.</summary>
      <returns>Перечислитель <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator" />, который предназначен для итерации по этой коллекции <see cref="T:System.Data.Metadata.Edm.ReadOnlyMetadataCollection" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.GetValue(System.String,System.Boolean)">
      <summary>Получает элемент из этой коллекции с использованием заданного идентификатора.</summary>
      <returns>Элемент из этой коллекции.</returns>
      <param name="identity">Идентификатор искомого элемента.</param>
      <param name="ignoreCase">Задайте значение true, чтобы выполнить поиск без учета регистра, и значение false — в противном случае.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.IndexOf(`0)">
      <summary>Возвращает индекс указанного значения в этой коллекции.</summary>
      <returns>Индекс указанного значения в этой коллекции.</returns>
      <param name="value">Искомое значение.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.IsReadOnly">
      <summary>Возвращает значение, которое определяет, является ли коллекция доступной только для чтения.</summary>
      <returns>Принимает значение true, если коллекция доступна только для чтения, и значение false — в противном случае.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Item(System.String)">
      <summary>Возвращает элемент из этой коллекции с использованием заданного идентификатора.</summary>
      <returns>Элемент из этой коллекции.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.TryGetValue(System.String,System.Boolean,`0@)">
      <summary>Получает элемент из этой коллекции с использованием заданного идентификатора.</summary>
      <returns>Принимает значение true, если существует элемент, соответствующий критерию поиска, и значение false — в противном случае.</returns>
      <param name="identity">Идентификатор искомого элемента.</param>
      <param name="ignoreCase">Задайте значение true, чтобы выполнить поиск без учета регистра, и значение false — в противном случае.</param>
      <param name="item">Если этот метод возвращает значение, данный выходной параметр содержит элемент из коллекции.Если искомый элемент отсутствует, этот выходной параметр содержит значение NULL.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator">
      <summary>Перечислитель для MetadataCollection</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Current">
      <summary>Возвращает элемент в текущей позиции.</summary>
      <returns>Элемент в текущей позиции.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Dispose">
      <summary>Освобождает этот перечислитель.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.MoveNext">
      <summary>Переходит к следующему элементу в коллекции с типом <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator" />.</summary>
      <returns>Значение true, если перечислитель перемещается в коллекции с типом <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.EnumeratortaCollection" />. В противном случае возвращает значение false.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.Reset">
      <summary>Помещает перечислитель перед первой позицией в коллекции с типом <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1.Enumerator.System#Collections#IEnumerator#Current">
      <summary>Возвращает элемент в текущей позиции</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint">
      <summary>Этот класс представляет справочное ограничение между двумя сущностями, задающими концы связи to и from.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.#ctor(System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmProperty},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmProperty})">
      <summary>Создает новое ограничение связи</summary>
      <param name="fromRole">роль, из которой исходит связь</param>
      <param name="toRole">роли, на которую связь нацелена</param>
      <param name="fromProperties">свойства типа сущности конечной роли, принимающие участие в ограничении</param>
      <param name="toProperties">свойства типа сущности исходной роли, принимающие участие в ограничении</param>
      <exception cref="T:System.ArgumentNullException">Исключение «Аргумент со значением null», если значение какого-либо из аргументов равно null.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.BuiltInTypeKind">
      <summary>Возвращает встроенный вариант для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.FromProperties">
      <summary>Возвращает список свойств для «исходной роли», на которой определено это ограничение <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" />.</summary>
      <returns>Коллекция типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" />, содержащая список свойств для «исходной роли», на которой определено это ограничение <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.FromRole">
      <summary>Возвращает «исходную роль», участвующую в этом ограничении <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember" />, представляющий «исходную роль», участвующую в этом ограничении <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.ToProperties">
      <summary>Возвращает список свойств для «целевой роли», на которой определено это ограничение <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" />.</summary>
      <returns>Коллекция типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" />, содержащая список свойств для «целевой роли», на которой определено это ограничение <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.ToRole">
      <summary>Возвращает «целевую роль», участвующую в этом ограничении <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember" />, представляющий «целевую роль», участвующую в этом ограничении <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.ToString">
      <summary>Возвращает сочетание имен <see cref="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.FromRole" /> и <see cref="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.ToRole" />.</summary>
      <returns>Сочетание имен <see cref="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.FromRole" /> и <see cref="P:System.Data.Entity.Core.Metadata.Edm.ReferentialConstraint.ToRole" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RefType">
      <summary>Представляет класс для ссылочного типа.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RefType.BuiltInTypeKind">
      <summary>Возвращает встроенный вариант для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RefType.ElementType">
      <summary>Возвращает тип сущности, на которую ссылается объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntityTypeBase" />, представляющий тип сущности, на которую ссылается <see cref="T:System.Data.Entity.Core.Metadata.Edm.RefType" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.RefType.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему элементу.</summary>
      <returns>Значение true, если заданный объект равен текущему экземпляру. В противном случае — значение false.</returns>
      <param name="obj">Сравниваемый объект.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.RefType.GetHashCode">
      <summary>Возвращает хэш-код текущего экземпляра.</summary>
      <returns>Хэш-код для текущего экземпляра.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember">
      <summary>Инициализирует новый экземпляр класса RelationshipEndMember</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember.DeleteBehavior">
      <summary>Возвращает рабочие характеристики члена элемента связи.</summary>
      <returns>Одно из значений <see cref="T:System.Data.Entity.Core.Metadata.Edm.OperationAction" />.Значение по умолчанию — <see cref="P:System.Data.Entity.Core.Metadata.Edm.OperationAction.None" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember.GetEntityType">
      <summary>Обращается к типу сущности EntityType конечного элемента EndMember в ассоциации.</summary>
      <returns>Тип сущности EntityType конечного элемента EndMember в ассоциации.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RelationshipEndMember.RelationshipMultiplicity">
      <summary>Возвращает кратность члена элемента связи.</summary>
      <returns>Одно из значений <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity">
      <summary>Представляет сведения о кратности конечного элемента типа связи</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.Many">
      <summary>Нижняя граница диапазона — 0, а верхняя граница имеет значение null</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.One">
      <summary>Верхняя и нижняя граница равны 1</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne">
      <summary>Нижняя граница диапазона — 0, а верхняя граница — 1.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet">
      <summary>Класс для представления набора связей</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RelationshipSet.BuiltInTypeKind">
      <summary>Возвращает встроенный вариант для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RelationshipSet.ElementType">
      <summary>Возвращает тип связи для этого набора <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipType" />, представляющий тип связи для этого набора <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RelationshipType">
      <summary>Представляет тип связи</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RelationshipType.RelationshipEndMembers">
      <summary>Возвращает список элементов для этого типа связи.</summary>
      <returns>Коллекция типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" />, содержащая список элементов для этого типа связи.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.RowType">
      <summary>Представляет тип строки модели EDM</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RowType.BuiltInTypeKind">
      <summary>Возвращает встроенный вариант для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.RowType.Create(System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmProperty},System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.MetadataProperty})">
      <summary>Фабричный метод для создания объекта <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" />.</summary>
      <returns>Новый экземпляр объекта <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" />, доступный только для чтения.</returns>
      <param name="properties">Свойства объекта типа строки.</param>
      <param name="metadataProperties">Свойства метаданных, которые будут добавлены к функции.Может принимать значение NULL.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RowType.DeclaredProperties">
      <summary>Возвращает коллекцию свойств, определенных текущим типом.</summary>
      <returns>Коллекция свойств, определенных текущим типом.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.RowType.Properties">
      <summary>Возвращает список свойств для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" />.</summary>
      <returns>Коллекция типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" />, содержащая список свойств для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.RowType" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.SimpleType">
      <summary>Класс, представляющий простой тип</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer">
      <summary>Предоставляет методы сериализации раздела хранилища (базы данных) <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel" /> в XML.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer" />.</summary>
    </member>
    <member name="E:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer.OnError">
      <summary>Возникает при обнаружении ошибки во время сериализации модели.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer.Serialize(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.String,System.String,System.String,System.Xml.XmlWriter,System.Boolean)">
      <summary>Сериализует объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel" /> в <see cref="T:System.Xml.XmlWriter" /></summary>
      <returns>Значение true, если сериализация модели возможна; в противном случае — значение false.</returns>
      <param name="dbDatabase">Модель EdmModel, подлежащая сериализации.</param>
      <param name="namespaceName">Имя пространства имен для элемента схемы.</param>
      <param name="provider">Сведения о поставщике элемента схемы.</param>
      <param name="providerManifestToken">Сведения ProviderManifestToken элемента схемы.</param>
      <param name="xmlWriter">XmlWriter, в который выполняется сериализация.</param>
      <param name="serializeDefaultNullability">Значение, указывающее, следует ли сериализовать атрибуты, допускающие значение null, если для них задано значение по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.SsdlSerializer.Serialize(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.String,System.String,System.Xml.XmlWriter,System.Boolean)">
      <summary>Сериализует объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmModel" /> в <see cref="T:System.Xml.XmlWriter" /></summary>
      <returns>Значение true, если сериализация модели возможна; в противном случае — значение false.</returns>
      <param name="dbDatabase">Модель EdmModel, подлежащая сериализации.</param>
      <param name="provider">Сведения о поставщике элемента схемы.</param>
      <param name="providerManifestToken">Сведения ProviderManifestToken элемента схемы.</param>
      <param name="xmlWriter">XmlWriter, в который выполняется сериализация.</param>
      <param name="serializeDefaultNullability">Значение, указывающее, следует ли сериализовать атрибуты, допускающие значение null, если для них задано значение по умолчанию.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.StoreGeneratedPattern">
      <summary>Шаблон для созданных сервером свойств.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.StoreGeneratedPattern.Computed">
      <summary>Значение формируется как при операции INSERT и UPDATE.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.StoreGeneratedPattern.Identity">
      <summary>Значение формируется при операции INSERT и остается неизменным после обновления.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Metadata.Edm.StoreGeneratedPattern.None">
      <summary>Не свойство, созданное сервером.Это значение по умолчанию.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection">
      <summary>Класс для представления коллекции элементов в пространстве Store.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.#ctor(System.Collections.Generic.IEnumerable{System.Xml.XmlReader})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> с указанным модулем чтения XML.</summary>
      <param name="xmlReaders">XMLReader, используемый для создания метаданных.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.#ctor(System.Data.Entity.Core.Metadata.Edm.EdmModel)">
      <summary>Инициализирует новые экземпляры класса <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />.</summary>
      <param name="model">Модель коллекции <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.#ctor(System.String[])">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />, используя заданные пути к файлам.</summary>
      <param name="filePaths">Пути к файлам, используемые для создания метаданных.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.Create(System.Collections.Generic.IEnumerable{System.Xml.XmlReader},System.Collections.ObjectModel.ReadOnlyCollection{System.String},System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Collections.Generic.IList{System.Data.Entity.Core.Metadata.Edm.EdmSchemaError}@)">
      <summary>Фабричный метод, который создает <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />.</summary>
      <returns>Экземпляр <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />, если не обнаружены ошибки.В противном случае имеет значение null.</returns>
      <param name="xmlReaders">Артефакты языка SSDL, предназначенные для загрузки.Не должно быть равно null.</param>
      <param name="filePaths">Пути к артефактам языка SSDL.Используется в сообщениях об ошибке.Может быть равно null, и в этом случае в качестве пути используется базовый URI модуля XmlReader.</param>
      <param name="resolver">Пользовательский сопоставитель.В настоящее время используется для разрешения реализации DbProviderServices.Если значение равно null, то будет использоваться сопоставитель по умолчанию.</param>
      <param name="errors">Коллекция ошибок, обнаруженных во время загрузки.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.GetPrimitiveTypes">
      <summary>Возвращает коллекцию объектов <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />.</summary>
      <returns>Объект <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />, представляющий коллекцию объектов <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.ProviderFactory">
      <summary>Возвращает фабрику поставщика StoreItemCollection.</summary>
      <returns>Фабрика поставщика StoreItemCollection.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.ProviderInvariantName">
      <summary>Возвращает неизменяемое имя StoreItemCollection.</summary>
      <returns>Неизменяемое имя StoreItemCollection.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.ProviderManifest">
      <summary>Возвращает манифест поставщика StoreItemCollection.</summary>
      <returns>Манифест поставщика StoreItemCollection.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.ProviderManifestToken">
      <summary>Возвращает токен манифеста StoreItemCollection.</summary>
      <returns>Токен манифеста StoreItemCollection.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection.StoreSchemaVersion">
      <summary>Возвращает версию схемы хранения для этой коллекции.</summary>
      <returns>Версия схемы хранения для этой коллекции.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.StructuralType">
      <summary>Представляет структурный тип</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StructuralType.AddMember(System.Data.Entity.Core.Metadata.Edm.EdmMember)">
      <summary>Добавляет элемент в этот тип</summary>
      <param name="member">Добавляемый элемент</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.StructuralType.Members">
      <summary>Возвращает список элементов для этого типа.</summary>
      <returns>Коллекция типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" />, содержащая набор элементов для этого типа.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.StructuralType.RemoveMember(System.Data.Entity.Core.Metadata.Edm.EdmMember)">
      <summary>Удаляет элемент из этого типа.</summary>
      <param name="member">Удаляемый элемент.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage">
      <summary>Класс, представляющий сведения о типе для элемента</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.TypeUsage.BuiltInTypeKind">
      <summary>Возвращает встроенный вариант для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.BuiltInTypeKind" />, представляющий вид встроенного типа для этого типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.Create(System.Data.Entity.Core.Metadata.Edm.EdmType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.Facet})">
      <summary>Фабричный метод создания объекта TypeUsage с заданным EdmType и аспектами</summary>
      <returns>новый экземпляр TypeUsage</returns>
      <param name="edmType">EdmType, для которого создается использование типа</param>
      <param name="facets">аспекты, которые будут скопированы в новый объект TypeUsage</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateBinaryTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Boolean)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> для описания двоичного типа с помощью указанных значений аспектов.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />, описывающий двоичный тип с помощью указанных значений аспектов.</returns>
      <param name="primitiveType">Тип <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />, для которого создается объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.</param>
      <param name="isFixedLength">Укажите значение true, чтобы задать фиксированную длину двоичного типа, и значение false — в противном случае.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateBinaryTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Boolean,System.Int32)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> для описания двоичного типа с помощью указанных значений аспектов.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />, описывающий двоичный тип с помощью указанных значений аспектов.</returns>
      <param name="primitiveType">Тип <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />, для которого создается объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.</param>
      <param name="isFixedLength">Укажите значение true, чтобы задать фиксированную длину двоичного типа, и значение false — в противном случае.</param>
      <param name="maxLength">Максимальная длина двоичного типа.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateDateTimeOffsetTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Nullable{System.Byte})">
      <summary>Создает объект <see cref="T:System.Data.Metadata.Edm.DateTimeOffsetTypeUsage" /> типа, который описывают параметры.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.DateTimeOffsetTypeUsage" />.</returns>
      <param name="primitiveType">Простой тип, определяющий единицы измерения смещения.</param>
      <param name="precision">Степень детализации объекта <see cref="T:System." /> DateTimeOffset в долях секунды в зависимости от поддерживаемого числа десятичных разрядов.Например, степень детализации 3 означает, что поддерживаются значения с точностью до миллисекунд.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateDateTimeTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Nullable{System.Byte})">
      <summary>Создает объект <see cref="T:System.Data.Metadata.Edm.DateTimeTypeUsage" /> типа, который описывают параметры.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.DateTimeTypeUsage" />.</returns>
      <param name="primitiveType">Простой тип, определяющий единицы измерения объекта <see cref="T:System." /> DateTime.</param>
      <param name="precision">Степень детализации объекта <see cref="T:System." /> DateTimeOffset в долях секунды в зависимости от поддерживаемого числа десятичных разрядов.Например, степень детализации 3 означает, что поддерживаются значения с точностью до миллисекунд.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateDecimalTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> для описания десятичного типа с неограниченными значениями аспектов точности и масштаба.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> для описания десятичного типа с неограниченными значениями аспектов точности и масштаба.</returns>
      <param name="primitiveType">Тип <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />, для которого создается объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateDecimalTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Byte,System.Byte)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> для описания десятичного типа с помощью указанных значений аспектов.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />, описывающий десятичный тип с помощью указанных значений аспектов.</returns>
      <param name="primitiveType">Тип <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />, для которого создается объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.</param>
      <param name="precision">Точность десятичного типа в виде типа <see cref="T:System.Byte" />.</param>
      <param name="scale">Масштаб десятичного типа в виде типа <see cref="T:System.Byte" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateDefaultTypeUsage(System.Data.Entity.Core.Metadata.Edm.EdmType)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> с заданным типом концептуальной модели.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> со значениями аспектов по умолчанию для указанного типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />.</returns>
      <param name="edmType">Тип <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />, для которого создается объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateStringTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Boolean,System.Boolean)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> для описания строкового типа с помощью указанных значений аспектов и неограниченного параметра MaxLength.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> для описания строкового типа с помощью указанных значений аспектов и неограниченного параметра MaxLength.</returns>
      <param name="primitiveType">Тип <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />, для которого создается объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.</param>
      <param name="isUnicode">Укажите значение true, чтобы задать для строкового типа стандартную кодировку Юникод, и значение false — в противном случае.</param>
      <param name="isFixedLength">Укажите значение true, чтобы задать фиксированную длину строкового типа, и значение false — в противном случае.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateStringTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Boolean,System.Boolean,System.Int32)">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> для описания строкового типа с помощью указанных значений аспектов.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />, описывающий строковый тип с помощью указанных значений аспектов.</returns>
      <param name="primitiveType">Тип <see cref="T:System.Data.Entity.Core.Metadata.Edm.PrimitiveType" />, для которого создается объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.</param>
      <param name="isUnicode">Укажите значение true, чтобы задать для строкового типа стандартную кодировку Юникод, и значение false — в противном случае.</param>
      <param name="isFixedLength">Укажите значение true, чтобы задать для строкового типа стандартную кодировку Юникод, и значение false — в противном случае.</param>
      <param name="maxLength">Укажите значение true, чтобы задать фиксированную длину строкового типа, и значение false — в противном случае.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.CreateTimeTypeUsage(System.Data.Entity.Core.Metadata.Edm.PrimitiveType,System.Nullable{System.Byte})">
      <summary>Создает объект <see cref="T:System.Data.Metadata.Edm.TimeTypeUsage" /> типа, который описывают параметры.</summary>
      <returns>Объект <see cref="T:System.Data.Metadata.Edm.TimeTypeUsage" />.</returns>
      <param name="primitiveType">Простой тип, определяющий единицы измерения объекта <see cref="T:System." /> DateTime.</param>
      <param name="precision">Степень детализации объекта <see cref="T:System." /> DateTimeOffset в долях секунды в зависимости от поддерживаемого числа десятичных разрядов.Например, степень детализации 3 означает, что поддерживаются значения с точностью до миллисекунд.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.TypeUsage.EdmType">
      <summary>Возвращает сведения о типе, описанные в этой сущности <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmType" />, представляющий сведения о типе, описанные в этой сущности <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.TypeUsage.Facets">
      <summary>Возвращает список аспектов для типа, который описан этой сущностью <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.</summary>
      <returns>Коллекция типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.ReadOnlyMetadataCollection`1" />, содержащая список аспектов для типа, описанного этой сущностью <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.IsSubtypeOf(System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Проверяет, является ли этот объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> подтипом указанного типа <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.</summary>
      <returns>Принимает значение true, если этот объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> является подтипом указанного объекта <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />, и значение false — в противном случае.</returns>
      <param name="typeUsage">Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" /> для проверки.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Metadata.Edm.TypeUsage.ModelTypeUsage">
      <summary>Возвращает использование типа модели для типа поставщика</summary>
      <returns>Использование типа модели (CSpace)</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Metadata.Edm.TypeUsage.ToString">
      <summary>Возвращает полное имя типа, описанного в этой сущности <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />.</summary>
      <returns>Полное имя типа, описанного данным объектом <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />, в виде строки.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.CompiledQuery">
      <summary>Кэширует запрос ELinq</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`10" />, универсальный делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg1 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg2 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg3 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg4 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg5 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg6 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg7">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg7 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg8">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg8 должен быть типом-примитивом.</typeparam>
      <typeparam name="TResult">Тип T результатов запроса, возвращаемых путем выполнения делегата, который получен из метода <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``10(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`11" />, универсальный делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg1 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg2 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg3 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg4 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg5 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg6 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg7">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg7 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg8">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg8 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg9">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg9 должен быть типом-примитивом.</typeparam>
      <typeparam name="TResult">Тип T результатов запроса, возвращаемых путем выполнения делегата, который получен из метода <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``11(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`12" />, универсальный делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg1 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg2 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg3 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg4 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg5 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg6 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg7">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg7 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg8">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg8 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg9">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg9 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg10">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg10 должен быть типом-примитивом.</typeparam>
      <typeparam name="TResult">Тип T результатов запроса, возвращаемых путем выполнения делегата, который получен из метода <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``12(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`13" />, универсальный делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg1 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg2 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg3 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg4 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg5 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg6 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg7">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg7 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg8">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg8 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg9">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg9 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg10">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg10 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg11">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg11 должен быть типом-примитивом.</typeparam>
      <typeparam name="TResult">Тип T результатов запроса, возвращаемых путем выполнения делегата, который получен из метода <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``13(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`14" />, универсальный делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg1 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg2 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg3 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg4 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg5 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg6 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg7">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg7 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg8">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg8 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg9">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg9 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg10">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg10 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg11">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg11 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg12">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg12 должен быть типом-примитивом.</typeparam>
      <typeparam name="TResult">Тип T результатов запроса, возвращаемых путем выполнения делегата, который получен из метода <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``14(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`15" />, универсальный делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg1 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg2 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg3 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg4 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg5 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg6 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg7">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg7 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg8">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg8 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg9">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg9 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg10">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg10 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg11">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg11 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg12">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg12 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg13">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg13 должен быть типом-примитивом.</typeparam>
      <typeparam name="TResult">Тип T результатов запроса, возвращаемых путем выполнения делегата, который получен из метода <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``15(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`16" />, универсальный делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg1 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg2 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg3 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg4 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg5 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg6 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg7">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg7 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg8">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg8 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg9">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg9 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg10">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg10 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg11">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg11 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg12">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg12 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg13">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg13 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg14">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg14 должен быть типом-примитивом.</typeparam>
      <typeparam name="TResult">Тип T результатов запроса, возвращаемых путем выполнения делегата, который получен из метода <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``16(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``17(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`17" />, универсальный делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg1 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg2 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg3 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg4 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg5 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg6 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg7">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg7 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg8">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg8 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg9">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg9 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg10">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg10 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg11">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg11 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg12">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg12 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg13">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg13 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg14">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg14 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg15">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg15 должен быть типом-примитивом.</typeparam>
      <typeparam name="TResult">Тип T результатов запроса, возвращаемых путем выполнения делегата, который получен из метода <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``17(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8,``9,``10,``11,``12,``13,``14,``15,``16}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`2" />, универсальный делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TResult">Тип T результатов запроса, возвращаемых путем выполнения делегата, который получен из метода <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`3" />, универсальный делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg1 должен быть типом-примитивом.</typeparam>
      <typeparam name="TResult">Тип T результатов запроса, возвращаемых путем выполнения делегата, который получен из метода <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`4" />, универсальный делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg1 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg2 должен быть типом-примитивом.</typeparam>
      <typeparam name="TResult">Тип T результатов запроса, возвращаемых путем выполнения делегата, который получен из метода <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`5" />, универсальный делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg1 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg2 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg3 должен быть типом-примитивом.</typeparam>
      <typeparam name="TResult">Тип T результатов запроса, возвращаемых путем выполнения делегата, который получен из метода <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`6" />, универсальный делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg1 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg2 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg3 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg4 должен быть типом-примитивом.</typeparam>
      <typeparam name="TResult">Тип T результатов запроса, возвращаемых путем выполнения делегата, который получен из метода <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``6(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`7" />, универсальный делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg1 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg2 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg3 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg4 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg5 должен быть типом-примитивом.</typeparam>
      <typeparam name="TResult">Тип T результатов запроса, возвращаемых путем выполнения делегата, который получен из метода <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``7(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`8" />, универсальный делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg1 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg2 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg3 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg4 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg5 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg6 должен быть типом-примитивом.</typeparam>
      <typeparam name="TResult">Тип T результатов запроса, возвращаемых путем выполнения делегата, который получен из метода <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``8(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7}})" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})">
      <summary>Создает новый делегат, представляющий скомпилированный запрос LINQ to Entities.</summary>
      <returns>
        <see cref="T:System.Func`9" />, универсальный делегат, представляющий скомпилированный запрос LINQ to Entities.</returns>
      <param name="query">Лямбда-выражение, предназначенное для компиляции.</param>
      <typeparam name="TArg0">Тип, производный от <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</typeparam>
      <typeparam name="TArg1">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg1 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg2">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg2 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg3">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg3 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg4">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg4 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg5">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg5 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg6">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg6 должен быть типом-примитивом.</typeparam>
      <typeparam name="TArg7">Представляет тип параметра, который необходимо передать во время выполнения делегата, возвращенного данным методом.Тип TArg7 должен быть типом-примитивом.</typeparam>
      <typeparam name="TResult">Тип T результатов запроса, возвращаемых путем выполнения делегата, который получен из метода <see cref="M:System.Data.Entity.Core.Objects.CompiledQuery.Compile``9(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4,``5,``6,``7,``8}})" />.</typeparam>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.CurrentValueRecord">
      <summary>Текущие значения свойств сущности.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DbUpdatableDataRecord">
      <summary>Предоставляет доступ к исходным значениям данных объекта.Объект DbUpdatableDataRecord реализует методы, позволяющие обновлять исходные значения объекта.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.DataRecordInfo">
      <summary>Возвращает сведения о записи данных.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Common.DataRecordInfo" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.FieldCount">
      <summary>Возвращает количество полей в записи.</summary>
      <returns>Целочисленное значение, представляющее число полей.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetBoolean(System.Int32)">
      <summary>Получает значение поля типа Boolean.</summary>
      <returns>Значение поля типа Boolean.</returns>
      <param name="i">Порядковый номер поля.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetByte(System.Int32)">
      <summary>Получает значение поля типа byte.</summary>
      <returns>Значение поля типа byte.</returns>
      <param name="i">Порядковый номер поля.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
      <summary>Получает значение поля как байтовый массив.</summary>
      <returns>Скопированное число байт.</returns>
      <param name="i">Порядковый номер поля.</param>
      <param name="dataIndex">Индекс, с которого начинается копирование данных.</param>
      <param name="buffer">Буфер назначения, куда копируются данные.</param>
      <param name="bufferIndex">Индекс в буфере назначения, с которого начинается копирование.</param>
      <param name="length">Число байт для копирования.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetChar(System.Int32)">
      <summary>Получает значение поля как символ.</summary>
      <returns>Значение поля в виде символа.</returns>
      <param name="i">Порядковый номер поля.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
      <summary>Получает значение поля как массив символов.</summary>
      <returns>Количество скопированных символов.</returns>
      <param name="i">Порядковый номер поля.</param>
      <param name="dataIndex">Индекс, с которого начинается копирование данных.</param>
      <param name="buffer">Буфер назначения, куда копируются данные.</param>
      <param name="bufferIndex">Индекс в буфере назначения, с которого начинается копирование.</param>
      <param name="length">Число копируемых символов.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDataReader(System.Int32)">
      <summary>Получает значение поля как тип <see cref="T:System.Common.DbDataReader" />.</summary>
      <returns>Значение поля в виде <see cref="T:System.Data.Common.DbDataReader" />.</returns>
      <param name="i">Порядковый номер поля.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDataRecord(System.Int32)">
      <summary>Получает значение поля в виде <see cref="T:System.Data.Common.DbDataRecord" />.</summary>
      <returns>Значение поля в виде <see cref="T:System.Data.Common.DbDataRecord" />.</returns>
      <param name="i">Порядковый номер поля.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDataTypeName(System.Int32)">
      <summary>Получает имя типа данных поля.</summary>
      <returns>Имя типа данных поля.</returns>
      <param name="i">Порядковый номер поля.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDateTime(System.Int32)">
      <summary>Получает значение поля как тип <see cref="T:System.DateTime" />.</summary>
      <returns>Значение поля в виде <see cref="T:System.DateTime" />.</returns>
      <param name="i">Порядковый номер поля.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDbDataReader(System.Int32)">
      <summary>Получает значение поля как тип <see cref="T:System.Common.DbDataReader" />.</summary>
      <returns>Значение поля в виде <see cref="T:System.Data.Common.DbDataReader" />.</returns>
      <param name="i">Порядковый номер поля.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDecimal(System.Int32)">
      <summary>Получает значение поля как тип decimal.</summary>
      <returns>Значение поля в десятичном формате.</returns>
      <param name="i">Порядковый номер поля.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetDouble(System.Int32)">
      <summary>Получает значение поля типа double.</summary>
      <returns>Значение поля типа double.</returns>
      <param name="i">Порядковый номер поля.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetFieldType(System.Int32)">
      <summary>Получает тип поля.</summary>
      <returns>Тип поля.</returns>
      <param name="i">Порядковый номер поля.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetFloat(System.Int32)">
      <summary>Получает значение поля типа float.</summary>
      <returns>Значение поля типа float.</returns>
      <param name="i">Порядковый номер поля.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetGuid(System.Int32)">
      <summary>Получает значение поля как тип <see cref="T:System.Guid" />.</summary>
      <returns>Значение поля в виде <see cref="T:System.Guid" />.</returns>
      <param name="i">Порядковый номер поля.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetInt16(System.Int32)">
      <summary>Получает значение поля как тип <see cref="T:System.Int16" />.</summary>
      <returns>Значение поля типа <see cref="T:System.Int16" />.</returns>
      <param name="i">Порядковый номер поля.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetInt32(System.Int32)">
      <summary>Получает значение поля как тип <see cref="T:System.Int32" />.</summary>
      <returns>Значение поля типа <see cref="T:System.Int32" />.</returns>
      <param name="i">Порядковый номер поля.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetInt64(System.Int32)">
      <summary>Получает значение поля как тип <see cref="T:System.Int64" />.</summary>
      <returns>Значение поля типа <see cref="T:System.Int64" />.</returns>
      <param name="i">Порядковый номер поля.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetName(System.Int32)">
      <summary>Получает имя поля.</summary>
      <returns>Имя поля.</returns>
      <param name="i">Порядковый номер поля.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetOrdinal(System.String)">
      <summary>Извлекает порядковый номер поля с использованием имени поля.</summary>
      <returns>Порядковый номер поля.</returns>
      <param name="name">Имя поля.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetRecordValue(System.Int32)">
      <summary>Возвращает значение поля.</summary>
      <returns>Значение поля.</returns>
      <param name="ordinal">Порядковый номер поля.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetString(System.Int32)">
      <summary>Получает значение поля типа string.</summary>
      <returns>Значение поля.</returns>
      <param name="i">Порядковый номер поля.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetValue(System.Int32)">
      <summary>Возвращает значение поля.</summary>
      <returns>Значение поля.</returns>
      <param name="i">Порядковый номер поля.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.GetValues(System.Object[])">
      <summary>Заполняет массив объектов значениями полей текущей записи.</summary>
      <returns>Число возвращенных значений полей.</returns>
      <param name="values">Массив объектов для хранения значений полей.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.IsDBNull(System.Int32)">
      <summary>Возвращает логическое значение, показывающее, имеет ли указанное поле значение <see cref="T:System.DBNull" />.</summary>
      <returns>Значение true, если поле имеет значение <see cref="T:System.DBNull" />, в противном случае — значение false.</returns>
      <param name="i">Порядковый номер поля.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.Item(System.Int32)">
      <summary>Возвращает значение с заданным порядковым номером поля.</summary>
      <returns>Значение с заданным порядковым номером поля.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.Item(System.String)">
      <summary>Получает значение с заданным именем поля.</summary>
      <returns>Значение поля.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetBoolean(System.Int32,System.Boolean)">
      <summary>Задает значение поля в записи.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="value">Значение поля.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetByte(System.Int32,System.Byte)">
      <summary>Задает значение поля в записи.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="value">Значение поля.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetChar(System.Int32,System.Char)">
      <summary>Задает значение поля в записи.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="value">Значение поля.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetDataRecord(System.Int32,System.Data.IDataRecord)">
      <summary>Задает значение поля в записи.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="value">Значение поля.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetDateTime(System.Int32,System.DateTime)">
      <summary>Задает значение поля в записи.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="value">Значение поля.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetDBNull(System.Int32)">
      <summary>Задает для поля значение <see cref="T:System.DBNull" />.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetDecimal(System.Int32,System.Decimal)">
      <summary>Задает значение поля в записи.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="value">Значение поля.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetDouble(System.Int32,System.Double)">
      <summary>Задает значение поля в записи.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="value">Значение поля.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetFloat(System.Int32,System.Single)">
      <summary>Задает значение поля в записи.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="value">Значение поля.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetGuid(System.Int32,System.Guid)">
      <summary>Задает значение поля в записи.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="value">Значение поля.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetInt16(System.Int32,System.Int16)">
      <summary>Задает значение поля в записи.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="value">Значение поля.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetInt32(System.Int32,System.Int32)">
      <summary>Задает значение поля в записи.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="value">Значение поля.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetInt64(System.Int32,System.Int64)">
      <summary>Задает значение поля в записи.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="value">Значение поля.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetRecordValue(System.Int32,System.Object)">
      <summary>Задает значение поля в записи.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="value">Значение поля.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetString(System.Int32,System.String)">
      <summary>Задает значение поля в записи.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="value">Значение поля.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetValue(System.Int32,System.Object)">
      <summary>Задает значение поля в записи.</summary>
      <param name="ordinal">Порядковый номер поля.</param>
      <param name="value">Значение поля.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.SetValues(System.Object[])">
      <summary>Задает значения полей в записи.</summary>
      <returns>Число полей, для которых были заданы значения.</returns>
      <param name="values">Значения поля.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DbUpdatableDataRecord.System#Data#IDataRecord#GetData(System.Int32)">
      <summary>Получает значение поля как тип <see cref="T:System.Data.IDataReader" />.</summary>
      <returns>Значение поля типа <see cref="T:System.Data.IDataReader" />.</returns>
      <param name="ordinal">Порядковый номер поля.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.EntityFunctions">
      <summary>Предоставляет методы среды CLR, которые обеспечивают доступ к каноническим функциям модели EDM, применяемым в запросах <see cref="T:System.Data.Entity.DbContext" /> или <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> LINQ to Entities.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddDays(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddDays для добавления заданного количества суток к значению даты-/времени.</summary>
      <returns>Результирующие дата-время.</returns>
      <param name="dateValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число дней.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddDays для добавления заданного количества суток к значению даты-/времени.</summary>
      <returns>Результирующие дата-время.</returns>
      <param name="dateValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число дней.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddHours(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddHours для добавления заданного количества часов к значению даты-времени.</summary>
      <returns>Результирующие дата-время.</returns>
      <param name="timeValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число часов.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddHours для добавления заданного количества часов к значению даты-времени.</summary>
      <returns>Результирующие дата-время.</returns>
      <param name="timeValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число часов.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddHours(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddHours для добавления заданного количества часов к интервалу времени.</summary>
      <returns>Результирующий интервал времени.</returns>
      <param name="timeValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число часов.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddMicroseconds для добавления заданного количества микросекунд к значению даты-времени.</summary>
      <returns>Результирующие дата-время.</returns>
      <param name="timeValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число микросекунд.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddMicroseconds для добавления заданного количества микросекунд к значению даты-времени.</summary>
      <returns>Результирующие дата-время.</returns>
      <param name="timeValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число микросекунд.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddMicroseconds для добавления заданного количества микросекунд к интервалу времени.</summary>
      <returns>Результирующий интервал времени.</returns>
      <param name="timeValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число микросекунд.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddMilliseconds для добавления заданного количества миллисекунд к значению даты-времени.</summary>
      <returns>Результирующие дата-время.</returns>
      <param name="timeValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число миллисекунд.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddMilliseconds для добавления заданного количества миллисекунд к значению даты-времени.</summary>
      <returns>Результирующие дата-время.</returns>
      <param name="timeValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число миллисекунд.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddMilliseconds для добавления заданного количества миллисекунд к интервалу времени.</summary>
      <returns>Результирующий интервал времени.</returns>
      <param name="timeValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число миллисекунд.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMinutes(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddMinutes для добавления заданного количества минут к значению даты-времени.</summary>
      <returns>Результирующие дата-время.</returns>
      <param name="timeValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число минут.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddMinutes для добавления заданного количества минут к значению даты-времени.</summary>
      <returns>Результирующие дата-время.</returns>
      <param name="timeValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число минут.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddMinutes для добавления заданного количества минут к интервалу времени.</summary>
      <returns>Результирующий интервал времени.</returns>
      <param name="timeValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число минут.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMonths(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddMonths для добавления заданного количества месяцев к значению даты-времени.</summary>
      <returns>Результирующие дата-время.</returns>
      <param name="dateValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число месяцев.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddMonths для добавления заданного количества месяцев к значению даты-времени.</summary>
      <returns>Результирующие дата-время.</returns>
      <param name="dateValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число месяцев.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddNanoseconds для добавления заданного количества наносекунд к значению даты-времени.</summary>
      <returns>Результирующие дата-время.</returns>
      <param name="timeValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число наносекунд.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddNanoseconds для добавления заданного количества наносекунд к значению даты-времени.</summary>
      <returns>Результирующие дата-время.</returns>
      <param name="timeValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число наносекунд.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddNanoseconds для добавления заданного количества наносекунд к интервалу времени.</summary>
      <returns>Результирующий интервал времени.</returns>
      <param name="timeValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число наносекунд.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddSeconds(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddSeconds для добавления заданного количества секунд к значению даты-времени.</summary>
      <returns>Результирующие дата-время.</returns>
      <param name="timeValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число секунд.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddSeconds для добавления заданного количества секунд к значению даты-времени.</summary>
      <returns>Результирующие дата-время.</returns>
      <param name="timeValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число секунд.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddSeconds для добавления заданного количества секунд к интервалу времени.</summary>
      <returns>Результирующий интервал времени.</returns>
      <param name="timeValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число секунд.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddYears(System.Nullable{System.DateTime},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddYears для добавления заданного количества лет к значению даты-времени.</summary>
      <returns>Результирующие дата-время.</returns>
      <param name="dateValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число лет.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AddYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM AddYears для добавления заданного количества лет к значению даты-времени.</summary>
      <returns>Результирующие дата-время.</returns>
      <param name="dateValue">Ввод даты-времени.</param>
      <param name="addValue">Добавляемое число лет.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AsNonUnicode(System.String)">
      <summary>При использовании в составе запроса LINQ to Entities этот метод действует в качестве оператора, который гарантирует, что входные данные рассматриваются как строка, отличная от Юникода.</summary>
      <returns>Входная строка как строка не в юникоде.</returns>
      <param name="value">Входная строка.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.AsUnicode(System.String)">
      <summary>При использовании в составе запроса LINQ to Entities этот метод действует в качестве оператора, который гарантирует, что входные данные рассматриваются как строка в Юникоде.</summary>
      <returns>Входная строка, как строка в юникоде.</returns>
      <param name="value">Входная строка.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.CreateDateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM CreateDateTime для создания нового объекта <see cref="T:System.DateTime" />.</summary>
      <returns>Новые значения даты-времени.</returns>
      <param name="year">Год.</param>
      <param name="month">Месяц (1).</param>
      <param name="day">День (1).</param>
      <param name="hour">Часы.</param>
      <param name="minute">Минуты.</param>
      <param name="second">Секунды, включая частичные доли секунды при необходимости.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.CreateDateTimeOffset(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM CreateDateTimeOffset для создания нового объекта <see cref="T:System.DateTimeOffset" />.</summary>
      <returns>Новые значения даты-времени.</returns>
      <param name="year">Год.</param>
      <param name="month">Месяц (1).</param>
      <param name="day">День (1).</param>
      <param name="hour">Часы.</param>
      <param name="minute">Минуты.</param>
      <param name="second">Секунды, включая частичные доли секунды при необходимости.</param>
      <param name="timeZoneOffset">Часть новой даты, содержащая часовой пояс.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.CreateTime(System.Nullable{System.Int32},System.Nullable{System.Int32},System.Nullable{System.Double})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM CreateTime для создания нового объекта <see cref="T:System.TimeSpan" />.</summary>
      <returns>Новый интервал времени.</returns>
      <param name="hour">Часы.</param>
      <param name="minute">Минуты.</param>
      <param name="second">Секунды, включая частичные доли секунды при необходимости.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffDays(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffDays для вычисления количества дней между двумя значениями даты-времени.</summary>
      <returns>Количество дней между первым и вторым значением даты-времени.</returns>
      <param name="dateValue1">Первое значение даты-времени.</param>
      <param name="dateValue2">Второе значение даты-времени.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffDays(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffDays для вычисления количества дней между двумя значениями даты-времени.</summary>
      <returns>Количество дней между первым и вторым значением даты-времени.</returns>
      <param name="dateValue1">Первое значение даты-времени.</param>
      <param name="dateValue2">Второе значение даты-времени.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffHours(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffHours для вычисления количества часов между двумя значениями даты-времени.</summary>
      <returns>Количество часов между первым и вторым значением даты-времени.</returns>
      <param name="timeValue1">Первое значение даты-времени.</param>
      <param name="timeValue2">Второе значение даты-времени.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffHours(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffHours для вычисления количества часов между двумя значениями даты-времени.</summary>
      <returns>Количество часов между первым и вторым значением даты-времени.</returns>
      <param name="timeValue1">Первое значение даты-времени.</param>
      <param name="timeValue2">Второе значение даты-времени.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffHours(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffHours для вычисления количества часов между двумя интервалами времени.</summary>
      <returns>Количество часов между первым и вторым значением интервала времени.</returns>
      <param name="timeValue1">Первый интервал времени.</param>
      <param name="timeValue2">Второй интервал времени.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffMicroseconds для вычисления количества микросекунд между двумя значениями даты-времени.</summary>
      <returns>Количество микросекунд между первым и вторым значением даты-времени.</returns>
      <param name="timeValue1">Первое значение даты-времени.</param>
      <param name="timeValue2">Второе значение даты-времени.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffMicroseconds для вычисления количества микросекунд между двумя значениями даты-времени.</summary>
      <returns>Количество микросекунд между первым и вторым значением даты-времени.</returns>
      <param name="timeValue1">Первое значение даты-времени.</param>
      <param name="timeValue2">Второе значение даты-времени.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMicroseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffMicroseconds для вычисления количества микросекунд между двумя интервалами времени.</summary>
      <returns>Число микросекунд между первым и вторым интервалом времени.</returns>
      <param name="timeValue1">Первый интервал времени.</param>
      <param name="timeValue2">Второй интервал времени.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffMilliseconds для вычисления количества миллисекунд между двумя значениями даты-времени.</summary>
      <returns>Количество миллисекунд между первым и вторым значением даты-времени.</returns>
      <param name="timeValue1">Первое значение даты-времени.</param>
      <param name="timeValue2">Второе значение даты-времени.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffMilliseconds для вычисления количества миллисекунд между двумя значениями даты-времени.</summary>
      <returns>Количество миллисекунд между первым и вторым значением даты-времени.</returns>
      <param name="timeValue1">Первое значение даты-времени.</param>
      <param name="timeValue2">Второе значение даты-времени.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMilliseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffMilliseconds для вычисления количества миллисекунд между двумя интервалами времени.</summary>
      <returns>Число миллисекунд между первым и вторым интервалом времени.</returns>
      <param name="timeValue1">Первый интервал времени.</param>
      <param name="timeValue2">Второй интервал времени.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffMinutes для вычисления количества минут между двумя значениями даты-времени.</summary>
      <returns>Количество минут между первым и вторым значением даты-времени.</returns>
      <param name="timeValue1">Первое значение даты-времени.</param>
      <param name="timeValue2">Второе значение даты-времени.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffMinutes для вычисления количества минут между двумя значениями даты-времени.</summary>
      <returns>Количество минут между первым и вторым значением даты-времени.</returns>
      <param name="timeValue1">Первое значение даты-времени.</param>
      <param name="timeValue2">Второе значение даты-времени.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMinutes(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffMinutes для вычисления количества минут между двумя интервалами времени.</summary>
      <returns>Количество минут между первым и вторым интервалом времени.</returns>
      <param name="timeValue1">Первый интервал времени.</param>
      <param name="timeValue2">Второй интервал времени.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMonths(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffMonths для вычисления количества месяцев между двумя значениями даты-времени.</summary>
      <returns>Количество месяцев между первым и вторым значением даты-времени.</returns>
      <param name="dateValue1">Первое значение даты-времени.</param>
      <param name="dateValue2">Второе значение даты-времени.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffMonths(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffMonths для вычисления количества месяцев между двумя значениями даты-времени.</summary>
      <returns>Количество месяцев между первым и вторым значением даты-времени.</returns>
      <param name="dateValue1">Первое значение даты-времени.</param>
      <param name="dateValue2">Второе значение даты-времени.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffNanoseconds для вычисления количества наносекунд между двумя значениями даты-времени.</summary>
      <returns>Количество наносекунд между первым и вторым значением даты-времени.</returns>
      <param name="timeValue1">Первое значение даты-времени.</param>
      <param name="timeValue2">Второе значение даты-времени.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffNanoseconds для вычисления количества наносекунд между двумя значениями даты-времени.</summary>
      <returns>Количество наносекунд между первым и вторым значением даты-времени.</returns>
      <param name="timeValue1">Первое значение даты-времени.</param>
      <param name="timeValue2">Второе значение даты-времени.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffNanoseconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffNanoseconds для вычисления количества наносекунд между двумя интервалами времени.</summary>
      <returns>Число наносекунд между первым и вторым интервалом времени.</returns>
      <param name="timeValue1">Первый интервал времени.</param>
      <param name="timeValue2">Второй интервал времени.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffSeconds для вычисления количества секунд между двумя значениями даты-времени.</summary>
      <returns>Количество секунд между первым и вторым значением даты-времени.</returns>
      <param name="timeValue1">Первое значение даты-времени.</param>
      <param name="timeValue2">Второе значение даты-времени.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffSeconds для вычисления количества секунд между двумя значениями даты-времени.</summary>
      <returns>Количество секунд между первым и вторым значением даты-времени.</returns>
      <param name="timeValue1">Первое значение даты-времени.</param>
      <param name="timeValue2">Второе значение даты-времени.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffSeconds(System.Nullable{System.TimeSpan},System.Nullable{System.TimeSpan})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffSeconds для вычисления количества секунд между двумя интервалами времени.</summary>
      <returns>Число секунд между первым и вторым интервалом времени.</returns>
      <param name="timeValue1">Первый интервал времени.</param>
      <param name="timeValue2">Второй интервал времени.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffYears(System.Nullable{System.DateTime},System.Nullable{System.DateTime})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffYears для вычисления количества лет между двумя значениями даты-времени.</summary>
      <returns>Количество лет между первым и вторым значением даты-времени.</returns>
      <param name="dateValue1">Первое значение даты-времени.</param>
      <param name="dateValue2">Второе значение даты-времени.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.DiffYears(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM DiffYears для вычисления количества лет между двумя значениями даты-времени.</summary>
      <returns>Количество лет между первым и вторым значением даты-времени.</returns>
      <param name="dateValue1">Первое значение даты-времени.</param>
      <param name="dateValue2">Второе значение даты-времени.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.GetTotalOffsetMinutes(System.Nullable{System.DateTimeOffset})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM GetTotalOffsetMinutes для определения количества минут, на которое заданное значение даты-времени отстоит от времени в формате UTC.Это значение обычно находится в пределах от +780 до -780 (+13 или -13 часов).</summary>
      <returns>Смещение ввода относительно времени в формате UTC.</returns>
      <param name="dateTimeOffsetArgument">Значение даты и времени, которое должно использоваться.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Left(System.String,System.Nullable{System.Int64})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM Left для получения заданного количества крайних левых символов в строке.</summary>
      <returns>Строка, содержащая требуемое число символов слева от строки ввода.</returns>
      <param name="stringArgument">Входная строка.</param>
      <param name="length">Число возвращаемых знаков.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Reverse(System.String)">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM Reverse для получения заданной строки с обратным порядком расположения символов.</summary>
      <returns>Входная строка с обратным порядком символов.</returns>
      <param name="stringArgument">Входная строка.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Right(System.String,System.Nullable{System.Int64})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM Right для получения заданного количества крайних правых символов в строке.</summary>
      <returns>Строка, содержащая требуемое число символов справа от строки ввода.</returns>
      <param name="stringArgument">Входная строка.</param>
      <param name="length">Число возвращаемых знаков.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM StDev для вычисления стандартного отклонения коллекции.</summary>
      <returns>Стандартное отклонение.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM StDev для вычисления стандартного отклонения коллекции.</summary>
      <returns>Стандартное отклонение.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM StDev для вычисления стандартного отклонения коллекции.</summary>
      <returns>Стандартное отклонение.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM StDev для вычисления стандартного отклонения коллекции.</summary>
      <returns>Стандартное отклонение.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM StDev для вычисления стандартного отклонения коллекции.</summary>
      <returns>Стандартное отклонение.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM StDev для вычисления стандартного отклонения коллекции.</summary>
      <returns>Стандартное отклонение.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM StDev для вычисления стандартного отклонения коллекции.</summary>
      <returns>Стандартное отклонение.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviation(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM StDev для вычисления стандартного отклонения коллекции.</summary>
      <returns>Стандартное отклонение.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM StDevP для вычисления стандартного отклонения совокупности.</summary>
      <returns>Стандартное отклонение для заполнения.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM StDevP для вычисления стандартного отклонения совокупности.</summary>
      <returns>Стандартное отклонение для заполнения.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM StDevP для вычисления стандартного отклонения совокупности.</summary>
      <returns>Стандартное отклонение для заполнения.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM StDevP для вычисления стандартного отклонения совокупности.</summary>
      <returns>Стандартное отклонение для заполнения.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM StDevP для вычисления стандартного отклонения совокупности.</summary>
      <returns>Стандартное отклонение для заполнения.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM StDevP для вычисления стандартного отклонения совокупности.</summary>
      <returns>Стандартное отклонение для заполнения.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM StDevP для вычисления стандартного отклонения совокупности.</summary>
      <returns>Стандартное отклонение для заполнения.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.StandardDeviationP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM StDevP для вычисления стандартного отклонения совокупности.</summary>
      <returns>Стандартное отклонение для заполнения.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Truncate(System.Nullable{System.Decimal},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM Truncate для усечения заданного значения до указанного количества цифр.</summary>
      <returns>Усеченное значение.</returns>
      <param name="value">Усеченное значение.</param>
      <param name="digits">Число цифр, которое требуется сохранить.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Truncate(System.Nullable{System.Double},System.Nullable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM Truncate для усечения заданного значения до указанного количества цифр.</summary>
      <returns>Усеченное значение.</returns>
      <param name="value">Усеченное значение.</param>
      <param name="digits">Число цифр, которое требуется сохранить.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.TruncateTime(System.Nullable{System.DateTime})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM TruncateTime для возврата заданной даты с очищенной частью времени.</summary>
      <returns>Входные данные без части, содержащей время.</returns>
      <param name="dateValue">Значение даты и времени, которое должно использоваться.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.TruncateTime(System.Nullable{System.DateTimeOffset})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM TruncateTime для возврата заданной даты с очищенной частью времени.</summary>
      <returns>Входные данные без части, содержащей время.</returns>
      <param name="dateValue">Значение даты и времени, которое должно использоваться.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM Var для вычисления дисперсии коллекции.</summary>
      <returns>Дисперсия.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM Var для вычисления дисперсии коллекции.</summary>
      <returns>Дисперсия.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM Var для вычисления дисперсии коллекции.</summary>
      <returns>Дисперсия.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM Var для вычисления дисперсии коллекции.</summary>
      <returns>Дисперсия.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM Var для вычисления дисперсии коллекции.</summary>
      <returns>Дисперсия.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM Var для вычисления дисперсии коллекции.</summary>
      <returns>Дисперсия.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM Var для вычисления дисперсии коллекции.</summary>
      <returns>Дисперсия.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.Var(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM Var для вычисления дисперсии коллекции.</summary>
      <returns>Дисперсия.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Decimal})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM VarP для вычисления дисперсии совокупности.</summary>
      <returns>Дисперсия для заполнения.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Double})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM VarP для вычисления дисперсии совокупности.</summary>
      <returns>Дисперсия для заполнения.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int32})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM VarP для вычисления дисперсии совокупности.</summary>
      <returns>Дисперсия для заполнения.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Int64})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM VarP для вычисления дисперсии совокупности.</summary>
      <returns>Дисперсия для заполнения.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM VarP для вычисления дисперсии совокупности.</summary>
      <returns>Дисперсия для заполнения.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM VarP для вычисления дисперсии совокупности.</summary>
      <returns>Дисперсия для заполнения.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM VarP для вычисления дисперсии совокупности.</summary>
      <returns>Дисперсия для заполнения.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.EntityFunctions.VarP(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})">
      <summary>При использовании в составе запроса LINQ to Entities этот метод вызывает каноническую функцию EDM VarP для вычисления дисперсии совокупности.</summary>
      <returns>Дисперсия для заполнения.</returns>
      <param name="collection">Коллекция для выполнения вычисления.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ExecutionOptions">
      <summary>Представляет параметры для выполнения запроса.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.#ctor(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Создает новый экземпляр <see cref="T:System.Data.Entity.Core.Objects.ExecutionOptions" />.</summary>
      <param name="mergeOption">Параметр слияния, используемый для результатов сущности.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.#ctor(System.Data.Entity.Core.Objects.MergeOption,System.Boolean)">
      <summary>Создает новый экземпляр <see cref="T:System.Data.Entity.Core.Objects.ExecutionOptions" />.</summary>
      <param name="mergeOption">Параметр слияния, используемый для результатов сущности.</param>
      <param name="streaming">Значение true, если запрос находится в потоке или в буфере. В противном случае — значение false.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту.</summary>
      <returns>Значение true, если заданный объект равен текущему объекту. В противном случае — значение false.</returns>
      <param name="obj">Объект, который требуется сравнить с текущим объектом.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа.</summary>
      <returns>Хэш-код для текущего объекта.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ExecutionOptions.MergeOption">
      <summary>Получает параметр слияния, используемый для результатов сущности.</summary>
      <returns>Параметр слияния, используемый для результатов сущности.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.op_Equality(System.Data.Entity.Core.Objects.ExecutionOptions,System.Data.Entity.Core.Objects.ExecutionOptions)">
      <summary>Определяет, равны ли два указанных объекта.</summary>
      <returns>Значение true, если два объекта равны. В противном случае — значение false.</returns>
      <param name="left">Объект с левой стороны для сравнения.</param>
      <param name="right">Объект с правой стороны для сравнения.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ExecutionOptions.op_Inequality(System.Data.Entity.Core.Objects.ExecutionOptions,System.Data.Entity.Core.Objects.ExecutionOptions)">
      <summary>Определяет, равны ли два указанных объекта.</summary>
      <returns>Значение true, если два объекта не равны. В противном случае — значение false.</returns>
      <param name="left">Объект с левой стороны для сравнения.</param>
      <param name="right">Объект с правой стороны для сравнения.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ExecutionOptions.Streaming">
      <summary>Получает значение, указывающее, находится запрос в потоке или в буфере.</summary>
      <returns>Значение true, если запрос является отличным; в противном случае — значение false.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.IObjectSet`1">
      <summary>Определяет поведение для реализаций IQueryable, которые позволяют вносить изменения в членство результирующего набора.</summary>
      <typeparam name="TEntity">Тип сущностей, возвращаемых из запрашиваемого объекта.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.IObjectSet`1.AddObject(`0)">
      <summary>Уведомляет набор, что к набору нужно добавить объект, представляющий новую сущность.</summary>
      <param name="entity">Новый объект для добавления в набор.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.IObjectSet`1.Attach(`0)">
      <summary>Уведомляет набор, что к набору нужно добавить объект, представляющий существующую сущность.</summary>
      <param name="entity">Существующий объект для добавления в набор.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.IObjectSet`1.DeleteObject(`0)">
      <summary>Уведомляет набор о том, что из набора нужно удалить объект, представляющий имеющуюся сущность.</summary>
      <param name="entity">Существующий объект для удаления из набора.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.IObjectSet`1.Detach(`0)">
      <summary>Уведомляет набор о том, что от него нужно отсоединить объект, представляющий имеющуюся сущность.</summary>
      <param name="entity">Объект, который необходимо отсоединить от набора.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.MergeOption">
      <summary>Различные способы слияния новых объектов, загруженных из базы данных, с существующими объектами, размещенными в памяти.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly">
      <summary>Добавляет только новые строки (уникальные на верхнем уровне).Это поведение установлено по умолчанию.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking">
      <summary>Не будет изменять кэш.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.MergeOption.OverwriteChanges">
      <summary>То же поведение, что и в методе LoadOption.OverwriteChanges.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.MergeOption.PreserveChanges">
      <summary>То же поведение, что и в методе LoadOption.PreserveChanges.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectContext">
      <summary>ObjectContext — это объект верхнего уровня, который инкапсулирует соединение между CLR и базой данных и служит в качестве шлюза для операций Create, Read, Update и Delete.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.#ctor(System.Data.Entity.Core.EntityClient.EntityConnection)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> с данным соединением.Во время построения рабочая область метаданных извлекается из объекта <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />.</summary>
      <param name="connection">Объект <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />, содержащий ссылки на модель и подключение к источнику данных.</param>
      <exception cref="T:System.ArgumentNullException">Параметр connection имеет значение NULL.</exception>
      <exception cref="T:System.ArgumentException">Недопустимое соединение или недопустимая рабочая область метаданных.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.#ctor(System.Data.Entity.Core.EntityClient.EntityConnection,System.Boolean)">
      <summary>Создает контекст ObjectContext с заданным соединением и рабочей областью метаданных.</summary>
      <param name="connection">подключение к хранилищу</param>
      <param name="contextOwnsConnection">Если задано значение true, соединение освобождается при освобождении контекста. В противном случае за освобождение соединения отвечает вызывающая сторона.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.#ctor(System.Data.Entity.Core.EntityClient.EntityConnection,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> с данным соединением и именем контейнера сущностей.</summary>
      <param name="connection">Объект <see cref="T:System.Data.Entity.Core.EntityClient.EntityConnection" />, содержащий ссылки на модель и подключение к источнику данных.</param>
      <param name="defaultContainerName">Имя контейнера сущностей по умолчанию.Если параметр defaultContainerName задается с помощью этого метода, свойство становится доступным только для чтения.</param>
      <exception cref="T:System.ArgumentNullException">Параметр connection имеет значение NULL.</exception>
      <exception cref="T:System.ArgumentException">Недопустимый параметр connection, defaultContainerName или неправильная рабочая область метаданных.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> с данной строкой подключения и именем контейнера сущностей.</summary>
      <param name="connectionString">Строка соединения, которая также предоставляет доступ к метаданным.</param>
      <exception cref="T:System.ArgumentNullException">Параметр connectionString имеет значение NULL.</exception>
      <exception cref="T:System.ArgumentException">Недопустимый параметр connectionString или недопустимая рабочая область метаданных.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.#ctor(System.String,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> с данной строкой соединения и именем контейнера сущностей.</summary>
      <param name="connectionString">Строка соединения, которая также предоставляет доступ к метаданным.</param>
      <param name="defaultContainerName">Имя контейнера сущностей по умолчанию.Если параметр defaultContainerName задается с помощью этого метода, свойство становится доступным только для чтения.</param>
      <exception cref="T:System.ArgumentNullException">Параметр connectionString имеет значение NULL.</exception>
      <exception cref="T:System.ArgumentException">Недопустимый параметр connectionString, defaultContainerName или рабочая область метаданных.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.AcceptAllChanges">
      <summary>Принимает все изменения, внесенные в объекты в данном контексте объекта.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.AddObject(System.String,System.Object)">
      <summary>Добавляет объект в контекст объекта.</summary>
      <param name="entitySetName">Представляет имя набора сущностей, которое можно уточнить именем контейнера сущностей (необязательно).</param>
      <param name="entity">Добавляемый объект <see cref="T:System.Object" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр entity равен null или не подходит entitySetName.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ApplyCurrentValues``1(System.String,``0)">
      <summary>Копирует скалярные значения из указанного объекта в объект в контексте <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />, который содержит тот же ключ.</summary>
      <returns>Обновленный объект.</returns>
      <param name="entitySetName">Имя набора сущностей, к которому принадлежит объект.</param>
      <param name="currentEntity">Отсоединенный объект имеет обновления свойств, которые нужно применить к исходному объекту.Ключ сущности currentEntity должен совпадать со свойством <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntityKey" /> вхождения в <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</param>
      <typeparam name="TEntity">Тип сущности объекта.</typeparam>
      <exception cref="T:System.ArgumentNullException">entitySetName или current равны null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> из entitySetName не совпадает с <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> объекта <see cref="T:System.Data.Entity.Core.EntityKey" />, или объекта нет в <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />, или он имеет состояние <see cref="F:System.Data.Entity.EntityState.Detached" />, или ключ сущности предоставленного объекта имеет недопустимое значение.</exception>
      <exception cref="T:System.ArgumentException">entitySetName — пустая строка.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ApplyOriginalValues``1(System.String,``0)">
      <summary>Копирует скалярные значения из переданного объекта в набор исходных значений для объекта в <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />, имеющего тот же ключ.</summary>
      <returns>Обновленный объект.</returns>
      <param name="entitySetName">Имя набора сущностей, к которому принадлежит объект.</param>
      <param name="originalEntity">Отсоединенный объект, имеющий исходные значения, применяемые к данному объекту.Ключ сущности originalEntity должен совпадать со свойством <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntityKey" /> элемента в <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</param>
      <typeparam name="TEntity">Тип объекта сущности.</typeparam>
      <exception cref="T:System.ArgumentNullException">entitySetName или original равны null.</exception>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> из entitySetName не совпадает с <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> объекта <see cref="T:System.Data.Entity.Core.EntityKey" />, или <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> для объекта нет в <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />, или объект имеет состояние <see cref="F:System.Data.Entity.EntityState.Added" /> или <see cref="F:System.Data.Entity.EntityState.Detached" />, или ключ сущности предоставленного объекта имеет недопустимое значение или изменения в свойствах.</exception>
      <exception cref="T:System.ArgumentException">entitySetName — пустая строка.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ApplyPropertyChanges(System.String,System.Object)">
      <summary>Применяет изменения свойств из отсоединенного объекта к объекту, который уже присоединен к контексту объекта.</summary>
      <param name="entitySetName">Имя набора сущностей, к которому принадлежит объект.</param>
      <param name="changed">Отсоединенный объект имеет обновления свойств, которые нужно применить к исходному объекту.</param>
      <exception cref="T:System.ArgumentNullException">Когда параметр entitySetName имеет значение null или является пустой строкой либо если параметр changed равен null.</exception>
      <exception cref="T:System.InvalidOperationException">Когда <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> из entitySetName не совпадает с набором <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> ключа <see cref="T:System.Data.Entity.Core.EntityKey" /> объекта, или когда сущность имеет состояние отличное от <see cref="F:System.Data.Entity.EntityState.Modified" /> или<see cref="F:System.Data.Entity.EntityState.Unchanged" />, или исходный объект не присоединен к контексту.</exception>
      <exception cref="T:System.ArgumentException">Тип объекта changed отличается от типа исходного объекта.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Attach(System.Data.Entity.Core.Objects.DataClasses.IEntityWithKey)">
      <summary>Присоединяет объект или граф объектов к контексту объекта, если объект имеет ключ сущности.</summary>
      <param name="entity">Присоединяемый объект.</param>
      <exception cref="T:System.ArgumentNullException">Параметр entity имеет значение NULL.</exception>
      <exception cref="T:System.InvalidOperationException">Недопустимый ключ сущности.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.AttachTo(System.String,System.Object)">
      <summary>Присоединяет объект или граф объектов к контексту объекта в конкретном наборе сущностей.</summary>
      <param name="entitySetName">Представляет имя набора сущностей, которое можно уточнить именем контейнера сущностей (необязательно).</param>
      <param name="entity">Присоединяемый объект <see cref="T:System.Object" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр entity имеет значение NULL.</exception>
      <exception cref="T:System.InvalidOperationException">Недопустимый набор сущностей или объект имеет временный ключ, или объект имеет <see cref="T:System.Data.Entity.Core.EntityKey" />, и <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> не совпадает с набором, переданным в метод, или объект не имеет <see cref="T:System.Data.Entity.Core.EntityKey" />, и не предоставлен набор сущностей, или какой-то объект из графа объектов имеет временный <see cref="T:System.Data.Entity.Core.EntityKey" />, или какой-то объект из графа объектов имеет недопустимый <see cref="T:System.Data.Entity.Core.EntityKey" /> (например, значения в ключе не совпадают со значениями в объекте), или набор сущностей не может быть найден по заданному entitySetName и имени контейнера сущностей, или какой-то объект из графа уже присутствует в другом диспетчере состояний.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.CommandTimeout">
      <summary>Возвращает или задает значение времени ожидания (в секундах) для всех операций контекста объекта.Значение NULL указывает, что будет использоваться значение по умолчанию базового поставщика.</summary>
      <returns>Значение <see cref="T:System.Int32" />, которое является значением времени ожидания (в секундах).</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.Connection">
      <summary>Возвращает соединение, используемое контекстом объекта.</summary>
      <returns>Объект <see cref="T:System.Data.Common.DbConnection" />, который является соединением.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.ContextOptions">
      <summary>Возвращает экземпляр <see cref="T:System.Data.Entity.Core.Objects.ObjectContextOptions" />, содержащий параметры, которые влияют на поведение <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</summary>
      <returns>Экземпляр <see cref="T:System.Data.Entity.Core.Objects.ObjectContextOptions" />, содержащий параметры, которые влияют на поведение <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateDatabase">
      <summary>Создает базу данных, используя текущее подключение к источнику данных и метаданные в коллекции <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateDatabaseScript">
      <summary>Формирует DDL-скрипт, создающий объекты схемы (таблицы, первичные ключи, внешние ключи) для метаданных в коллекции <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />.Класс <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" /> загружает метаданные из SSDL-файлов.</summary>
      <returns>DDL-скрипт, создающий объекты схемы для метаданных в <see cref="T:System.Data.Entity.Core.Metadata.Edm.StoreItemCollection" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateEntityKey(System.String,System.Object)">
      <summary>Создает ключ сущности для определенного объекта или возвращает ключ сущности, если он уже существует.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.EntityKey" /> объекта.</returns>
      <param name="entitySetName">Полное имя набора сущностей, к которому принадлежит объект сущности.</param>
      <param name="entity">Объект, для которого получается ключ сущности.</param>
      <exception cref="T:System.ArgumentNullException">Один из параметров имеет значение NULL.</exception>
      <exception cref="T:System.ArgumentException">Когда имя entitySetName пусто, или когда тип объекта сущности не существует в наборе, или когда имя entitySetName не указано полностью.</exception>
      <exception cref="T:System.InvalidOperationException">Ключ сущности невозможно построить на основе предоставленных параметров.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateObject``1">
      <summary>Создает и возвращает экземпляр запрашиваемого типа.</summary>
      <returns>Экземпляр запрашиваемого типа T или экземпляр производного типа, позволяющий использовать T с Entity Framework.Возвращаемый объект является экземпляром запрашиваемого типа или экземпляром производного типа, который позволяет использовать запрашиваемый тип с Entity Framework.</returns>
      <typeparam name="T">Тип объекта, который должен быть возвращен.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateObjectSet``1">
      <summary>Создает новый экземпляр <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />, используемый для запроса, добавления, изменения и удаления объектов указанного типа сущности.</summary>
      <returns>Новый экземпляр <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />.</returns>
      <typeparam name="TEntity">Тип сущности запрошенного объекта <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />.</typeparam>
      <exception cref="T:System.InvalidOperationException">Свойство <see cref="P:System.Data.Entity.Core.Objects.ObjectContext.DefaultContainerName" /> не задано в <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />, или указанный тип относится к более чем одному набору сущностей.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateObjectSet``1(System.String)">
      <summary>Создает новый экземпляр <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />, используемый для запроса, добавления, изменения и удаления объектов указанного типа с заданным именем набора сущностей.</summary>
      <returns>Новый экземпляр <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />.</returns>
      <param name="entitySetName">Имя набора сущностей для возвращенного объекта <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />.Если свойство <see cref="P:System.Data.Entity.Core.Objects.ObjectContext.DefaultContainerName" /> не задано в контексте <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />, строка определяется именем контейнера по умолчанию.</param>
      <typeparam name="TEntity">Тип сущности запрошенного объекта <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />.</typeparam>
      <exception cref="T:System.InvalidOperationException">
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> из entitySetName не совпадает с <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> ключа <see cref="T:System.Data.Entity.Core.EntityKey" /> объекта, или свойство <see cref="P:System.Data.Entity.Core.Objects.ObjectContext.DefaultContainerName" /> не задано в <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />, и имя не определено как часть параметра entitySetName, или указанный тип принадлежит более чем одному набору сущностей.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateProxyTypes(System.Collections.Generic.IEnumerable{System.Type})">
      <summary>Создает эквивалентный тип, который можно использовать с Entity Framework для каждого типа в предоставленном перечислении.</summary>
      <param name="types">Перечисление объектов <see cref="T:System.Type" />, представляющих пользовательские классы данных, которые сопоставляются с концептуальной моделью.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.CreateQuery``1(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Создает объект <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> в контексте текущего объекта с помощью указанной строки запроса.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> указанного типа.</returns>
      <param name="queryString">Выполняемая строка запроса.</param>
      <param name="parameters">Параметры для передачи запросу.</param>
      <typeparam name="T">Тип сущности возвращаемого объекта <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр queryString или parameters имеет значение NULL.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.DatabaseExists">
      <summary>Проверяет, существует ли для этого хранилища база данных, которая указана как база данных в текущем соединении с хранилищем.Большая часть работы фактически выполняется реализацией DbProviderServices для текущего соединения с хранилищем.</summary>
      <returns>Значение true, если база данных существует, в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.DefaultContainerName">
      <summary>Возвращает или задает имя контейнера по умолчанию.</summary>
      <returns>Объект <see cref="T:System.String" />, который является именем контейнера по умолчанию.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.DeleteDatabase">
      <summary>Удаляет базу данных, указанную в качестве базы данных в текущем подключении к источнику данных.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.DeleteObject(System.Object)">
      <summary>Помечает объект для удаления.</summary>
      <param name="entity">Объект, указывающий удаляемую сущность.Объект может находиться в любом состоянии, кроме <see cref="F:System.Data.Entity.EntityState.Detached" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Detach(System.Object)">
      <summary>Удаляет объект из контекста объекта.</summary>
      <param name="entity">Отсоединяемый объект.Удаляется только сущность. При наличии каких-либо связанных объектов, которые отслеживаются тем же <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />, они не отсоединяются автоматически.</param>
      <exception cref="T:System.ArgumentNullException">Параметр entity имеет значение NULL.</exception>
      <exception cref="T:System.InvalidOperationException">Сущность не ассоциирована с этим контекстом <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> (например, она только что была создана и еще не ассоциирована с каким-либо контекстом, или была получена через какой-либо другой контекст, или уже была отсоединена).</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.DetectChanges">
      <summary>Обеспечивает синхронизацию изменений объекта <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> с изменениями во всех объектах, отслеживаемых посредством объекта <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Dispose">
      <summary>Освобождает ресурсы, используемые контекстом объекта.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Dispose(System.Boolean)">
      <summary>Освобождает ресурсы, используемые контекстом объекта.</summary>
      <param name="disposing">Значение true задает освобождение как управляемых, так и неуправляемых ресурсов; значение false задает освобождение только неуправляемых ресурсов.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Выполняет данную функцию для контейнера по умолчанию.</summary>
      <returns>Объект, представляющий результат выполнения функции.</returns>
      <param name="functionName">Имя функции.Может содержать контейнер (т. е.ContainerName.FunctionName) или только имя функции, если известно имя DefaultContainerName.</param>
      <param name="executionOptions">Параметры, предназначенные для выполнения этой функции.</param>
      <param name="parameters">Значения параметров, которые должны использоваться для этой функции.Если используются выходные параметры, их значения не будут доступны до полного прочтения результатов.Это происходит вследствие базового поведения DbDataReader, дополнительные сведения см. на сайте http://go.microsoft.com/fwlink/?LinkID=398589.</param>
      <typeparam name="TElement">Тип элемента для результатов функции.</typeparam>
      <exception cref="T:System.ArgumentException">Если функция имеет значение NULL или пуста</exception>
      <exception cref="T:System.InvalidOperationException">Если функция недействительна (неправильный синтаксис, не существует, ссылается на функцию с возвращаемым типом, несовместимым с T)</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Entity.Core.Objects.MergeOption,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Выполняет данную хранимую процедуру или функцию, определенную в источнике данных и выраженную в концептуальной модели (с применением указанных параметров и команды слияния).Возвращает типизированный объект <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> для данных, возвращенных хранимой процедурой.</returns>
      <param name="functionName">Имя хранимой процедуры или функции.Имя может включать имя контейнера, например, &amp;lt;Имя контейнера&amp;gt;.&amp;lt;Имя функции&amp;gt;.Если имя контейнера по умолчанию известно, требуется только имя функции.</param>
      <param name="mergeOption">Параметр <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> для использования при выполнении запроса.</param>
      <param name="parameters">Массив объектов <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" />.Если используются выходные параметры, их значения не будут доступны до полного прочтения результатов.Это происходит вследствие базового поведения DbDataReader, дополнительные сведения см. на сайте http://go.microsoft.com/fwlink/?LinkID=398589.</param>
      <typeparam name="TElement">Тип сущности объекта <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />, возвращаемого при выполнении функции в отношении источника данных.Данный тип должен реализовывать <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithChangeTracker" />.</typeparam>
      <exception cref="T:System.ArgumentException">Функция равна null, пуста либо не найдена.</exception>
      <exception cref="T:System.InvalidOperationException">Модуль чтения сущностей не поддерживает данную функцию или наблюдается несовпадение типов в модуле чтения и функции.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteFunction``1(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Выполняет хранимую процедуру или функцию, определенную в источнике данных и сопоставленную в концептуальной модели (с применением указанных параметров).Возвращает типизированный объект <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> для данных, возвращенных хранимой процедурой.</returns>
      <param name="functionName">Имя хранимой процедуры или функции.Имя может включать имя контейнера, например, &amp;lt;Имя контейнера&amp;gt;.&amp;lt;Имя функции&amp;gt;.Если имя контейнера по умолчанию известно, требуется только имя функции.</param>
      <param name="parameters">Массив объектов <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" />.Если используются выходные параметры, их значения не будут доступны до полного прочтения результатов.Это происходит вследствие базового поведения DbDataReader, дополнительные сведения см. на сайте http://go.microsoft.com/fwlink/?LinkID=398589.</param>
      <typeparam name="TElement">Тип сущности объекта <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />, возвращаемого при выполнении функции в отношении источника данных.Данный тип должен реализовывать <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithChangeTracker" />.</typeparam>
      <exception cref="T:System.ArgumentException">Функция равна null, пуста либо не найдена.</exception>
      <exception cref="T:System.InvalidOperationException">Модуль чтения сущностей не поддерживает данную функцию или наблюдается несовпадение типов в модуле чтения и функции.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteFunction(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Выполняет хранимую процедуру или функцию, определенную в источнике данных и выраженную в концептуальной модели; отменяет любые результаты, возвращенные функцией; возвращает количество строк, обработанных при выполнении команды.</summary>
      <returns>Число обработанных строк.</returns>
      <param name="functionName">Имя хранимой процедуры или функции.Имя может включать имя контейнера, например, &amp;lt;Имя контейнера&amp;gt;.&amp;lt;Имя функции&amp;gt;.Если имя контейнера по умолчанию известно, требуется только имя функции.</param>
      <param name="parameters">Массив объектов <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" />.Если используются выходные параметры, их значения не будут доступны до полного прочтения результатов.Это происходит вследствие базового поведения DbDataReader, дополнительные сведения см. на сайте http://go.microsoft.com/fwlink/?LinkID=398589.</param>
      <exception cref="T:System.ArgumentException">Функция равна null, пуста либо не найдена.</exception>
      <exception cref="T:System.InvalidOperationException">Модуль чтения сущностей не поддерживает данную функцию или наблюдается несовпадение типов в модуле чтения и функции.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommand(System.Data.Entity.TransactionalBehavior,System.String,System.Object[])">
      <summary>Выполняет произвольную команду непосредственно в отношении источника данных с помощью существующего подключения.Команда задана с использованием собственного языка запросов сервера, такого как SQL.Как и для любого API, принимающего SQL, важно параметризовать все пользовательские входные данные для защиты от атаки путем внедрения кода SQL.Можно включать в строку SQL-запроса местозаполнители параметров и затем предоставлять значения параметров как дополнительные аргументы.Все предоставляемые значения параметров будут автоматически преобразовываться в DbParameter.context.ExecuteStoreCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); также можно создать DbParameter и предоставить его в SqlQuery.Это позволяет использовать в строке запроса SQL именованные параметры.context.ExecuteStoreCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Число обработанных строк.</returns>
      <param name="transactionalBehavior">Контролирует создание транзакции для этой команды.</param>
      <param name="commandText">Команда задана на собственном языке запросов сервера.</param>
      <param name="parameters">Значения параметров, которые должны использоваться для этого запроса.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommand(System.String,System.Object[])">
      <summary>Выполняет произвольную команду непосредственно в отношении источника данных с помощью существующего подключения.Команда задана с использованием собственного языка запросов сервера, такого как SQL.Как и для любого API, принимающего SQL, важно параметризовать все пользовательские входные данные для защиты от атаки путем внедрения кода SQL.Можно включать в строку SQL-запроса местозаполнители параметров и затем предоставлять значения параметров как дополнительные аргументы.Все предоставляемые значения параметров будут автоматически преобразовываться в DbParameter.context.ExecuteStoreCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); также можно создать DbParameter и предоставить его в SqlQuery.Это позволяет использовать в строке запроса SQL именованные параметры.context.ExecuteStoreCommand("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Число обработанных строк.</returns>
      <param name="commandText">Команда задана на собственном языке запросов сервера.</param>
      <param name="parameters">Значения параметров, которые должны использоваться для этого запроса.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommandAsync(System.Data.Entity.TransactionalBehavior,System.String,System.Object[])">
      <summary>Асинхронно выполняет произвольную команду непосредственно в отношении источника данных с помощью существующего подключения.Команда задана с использованием собственного языка запросов сервера, такого как SQL.Как и для любого API, принимающего SQL, важно параметризовать все пользовательские входные данные для защиты от атаки путем внедрения кода SQL.Можно включать в строку SQL-запроса местозаполнители параметров и затем предоставлять значения параметров как дополнительные аргументы.Все предоставляемые значения параметров будут автоматически преобразовываться в DbParameter.context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); также можно создать DbParameter и предоставить его в SqlQuery.Это позволяет использовать в строке запроса SQL именованные параметры.context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит количество затронутых строк.</returns>
      <param name="transactionalBehavior">Контролирует создание транзакции для этой команды.</param>
      <param name="commandText">Команда задана на собственном языке запросов сервера.</param>
      <param name="parameters">Значения параметров, которые должны использоваться для этого запроса.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommandAsync(System.Data.Entity.TransactionalBehavior,System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>Асинхронно выполняет произвольную команду непосредственно в отношении источника данных с помощью существующего подключения.Команда задана с использованием собственного языка запросов сервера, такого как SQL.Как и для любого API, принимающего SQL, важно параметризовать все пользовательские входные данные для защиты от атаки путем внедрения кода SQL.Можно включать в строку SQL-запроса местозаполнители параметров и затем предоставлять значения параметров как дополнительные аргументы.Все предоставляемые значения параметров будут автоматически преобразовываться в DbParameter.context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); также можно создать DbParameter и предоставить его в SqlQuery.Это позволяет использовать в строке запроса SQL именованные параметры.context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит количество затронутых строк.</returns>
      <param name="transactionalBehavior">Контролирует создание транзакции для этой команды.</param>
      <param name="commandText">Команда задана на собственном языке запросов сервера.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <param name="parameters">Значения параметров, которые должны использоваться для этого запроса.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommandAsync(System.String,System.Object[])">
      <summary>Асинхронно выполняет произвольную команду непосредственно в отношении источника данных с помощью существующего подключения.Команда задана с использованием собственного языка запросов сервера, такого как SQL.Как и для любого API, принимающего SQL, важно параметризовать все пользовательские входные данные для защиты от атаки путем внедрения кода SQL.Можно включать в строку SQL-запроса местозаполнители параметров и затем предоставлять значения параметров как дополнительные аргументы.Все предоставляемые значения параметров будут автоматически преобразовываться в DbParameter.context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); также можно создать DbParameter и предоставить его в SqlQuery.Это позволяет использовать в строке запроса SQL именованные параметры.context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит количество затронутых строк.</returns>
      <param name="commandText">Команда задана на собственном языке запросов сервера.</param>
      <param name="parameters">Значения параметров, которые должны использоваться для этого запроса.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreCommandAsync(System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>Асинхронно выполняет произвольную команду непосредственно в отношении источника данных с помощью существующего подключения.Команда задана с использованием собственного языка запросов сервера, такого как SQL.Как и для любого API, принимающего SQL, важно параметризовать все пользовательские входные данные для защиты от атаки путем внедрения кода SQL.Можно включать в строку SQL-запроса местозаполнители параметров и затем предоставлять значения параметров как дополнительные аргументы.Все предоставляемые значения параметров будут автоматически преобразовываться в DbParameter.context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @p0", userSuppliedAuthor); также можно создать DbParameter и предоставить его в SqlQuery.Это позволяет использовать в строке запроса SQL именованные параметры.context.ExecuteStoreCommandAsync("UPDATE dbo.Posts SET Rating = 5 WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит количество затронутых строк.</returns>
      <param name="commandText">Команда задана на собственном языке запросов сервера.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <param name="parameters">Значения параметров, которые должны использоваться для этого запроса.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Object[])">
      <summary>Выполняет запрос непосредственно на источнике данных и возвращает последовательность типизированных результатов.Запрос задан с использованием собственного языка запросов сервера, такого как SQL.Результаты не отслеживаются контекстом, используйте перегрузку, указывающую имя набора сущностей для отслеживания результатов.Как и для любого API, принимающего SQL, важно параметризовать все пользовательские входные данные для защиты от атаки путем внедрения кода SQL.Можно включать в строку SQL-запроса местозаполнители параметров и затем предоставлять значения параметров как дополнительные аргументы.Все предоставляемые значения параметров будут автоматически преобразовываться в DbParameter.context.ExecuteStoreQuery&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); также можно создать DbParameter и передать его в SqlQuery.Это позволяет использовать в строке запроса SQL именованные параметры.context.ExecuteStoreQuery&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Перечисление объектов типа <paramref name="TElement" />.</returns>
      <param name="commandText">Запрос задан на собственном языке запросов сервера.</param>
      <param name="executionOptions">Параметры, предназначенные для выполнения этого запроса.</param>
      <param name="parameters">Значения параметров, которые должны использоваться для этого запроса.Если используются выходные параметры, их значения не будут доступны до полного прочтения результатов.Это происходит вследствие базового поведения DbDataReader, дополнительные сведения см. на сайте http://go.microsoft.com/fwlink/?LinkID=398589.</param>
      <typeparam name="TElement">Тип элемента последовательности результатов.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.Object[])">
      <summary>Выполняет запрос непосредственно на источнике данных и возвращает последовательность типизированных результатов.Запрос задан с использованием собственного языка запросов сервера, такого как SQL.Результаты не отслеживаются контекстом, используйте перегрузку, указывающую имя набора сущностей для отслеживания результатов.Как и для любого API, принимающего SQL, важно параметризовать все пользовательские входные данные для защиты от атаки путем внедрения кода SQL.Можно включать в строку SQL-запроса местозаполнители параметров и затем предоставлять значения параметров как дополнительные аргументы.Все предоставляемые значения параметров будут автоматически преобразовываться в DbParameter.context.ExecuteStoreQuery&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); также можно создать DbParameter и передать его в SqlQuery.Это позволяет использовать в строке запроса SQL именованные параметры.context.ExecuteStoreQuery&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Перечисление объектов типа <paramref name="TElement" />.</returns>
      <param name="commandText">Запрос задан на собственном языке запросов сервера.</param>
      <param name="parameters">Значения параметров, которые должны использоваться для этого запроса.Если используются выходные параметры, их значения не будут доступны до полного прочтения результатов.Это происходит вследствие базового поведения DbDataReader, дополнительные сведения см. на сайте http://go.microsoft.com/fwlink/?LinkID=398589.</param>
      <typeparam name="TElement">Тип элемента последовательности результатов.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Object[])">
      <summary>Выполняет запрос непосредственно на источнике данных и возвращает последовательность типизированных результатов.Запрос задан с использованием собственного языка запросов сервера, такого как SQL.Если указано имя набора сущностей, результаты отслеживаются контекстом.Как и для любого API, принимающего SQL, важно параметризовать все пользовательские входные данные для защиты от атаки путем внедрения кода SQL.Можно включать в строку SQL-запроса местозаполнители параметров и затем предоставлять значения параметров как дополнительные аргументы.Все предоставляемые значения параметров будут автоматически преобразовываться в DbParameter.context.ExecuteStoreQuery&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); также можно создать DbParameter и передать его в SqlQuery.Это позволяет использовать в строке запроса SQL именованные параметры.context.ExecuteStoreQuery&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Перечисление объектов типа <paramref name="TElement" />.</returns>
      <param name="commandText">Запрос задан на собственном языке запросов сервера.</param>
      <param name="entitySetName">Набор сущностей типа TResult.Без указания имени набора сущностей отслеживания результатов не будет.</param>
      <param name="executionOptions">Параметры, предназначенные для выполнения этого запроса.</param>
      <param name="parameters">Значения параметров, которые должны использоваться для этого запроса.Если используются выходные параметры, их значения не будут доступны до полного прочтения результатов.Это происходит вследствие базового поведения DbDataReader, дополнительные сведения см. на сайте http://go.microsoft.com/fwlink/?LinkID=398589.</param>
      <typeparam name="TElement">Тип элемента последовательности результатов.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQuery``1(System.String,System.String,System.Data.Entity.Core.Objects.MergeOption,System.Object[])">
      <summary>Выполняет запрос непосредственно на источнике данных и возвращает последовательность типизированных результатов.Запрос задан с использованием собственного языка запросов сервера, такого как SQL.Если указано имя набора сущностей, результаты отслеживаются контекстом.Как и для любого API, принимающего SQL, важно параметризовать все пользовательские входные данные для защиты от атаки путем внедрения кода SQL.Можно включать в строку SQL-запроса местозаполнители параметров и затем предоставлять значения параметров как дополнительные аргументы.Все предоставляемые значения параметров будут автоматически преобразовываться в DbParameter.context.ExecuteStoreQuery&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); также можно создать DbParameter и передать его в SqlQuery.Это позволяет использовать в строке запроса SQL именованные параметры.context.ExecuteStoreQuery&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Перечисление объектов типа <paramref name="TElement" />.</returns>
      <param name="commandText">Запрос задан на собственном языке запросов сервера.</param>
      <param name="entitySetName">Набор сущностей типа TResult.Без указания имени набора сущностей отслеживания результатов не будет.</param>
      <param name="mergeOption">Параметр <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> для использования при выполнении запроса.Значение по умолчанию — <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />.</param>
      <param name="parameters">Значения параметров, которые должны использоваться для этого запроса.Если используются выходные параметры, их значения не будут доступны до полного прочтения результатов.Это происходит вследствие базового поведения DbDataReader, дополнительные сведения см. на сайте http://go.microsoft.com/fwlink/?LinkID=398589.</param>
      <typeparam name="TElement">Тип элемента последовательности результатов.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Object[])">
      <summary>Асинхронно выполняет запрос непосредственно на источнике данных и возвращает последовательность типизированных результатов.Запрос задан с использованием собственного языка запросов сервера, такого как SQL.Результаты не отслеживаются контекстом, используйте перегрузку, указывающую имя набора сущностей для отслеживания результатов.Как и для любого API, принимающего SQL, важно параметризовать все пользовательские входные данные для защиты от атаки путем внедрения кода SQL.Можно включать в строку SQL-запроса местозаполнители параметров и затем предоставлять значения параметров как дополнительные аргументы.Все предоставляемые значения параметров будут автоматически преобразовываться в DbParameter.context.ExecuteStoreQueryAsync&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); также можно создать DbParameter и передать его в SqlQuery.Это позволяет использовать в строке запроса SQL именованные параметры.context.ExecuteStoreQueryAsync&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит перечисление объектов типа <paramref name="TElement" />.</returns>
      <param name="commandText">Запрос задан на собственном языке запросов сервера.</param>
      <param name="executionOptions">Параметры, предназначенные для выполнения этого запроса.</param>
      <param name="parameters">Значения параметров, которые должны использоваться для этого запроса.Если используются выходные параметры, их значения не будут доступны до полного прочтения результатов.Это происходит вследствие базового поведения DbDataReader, дополнительные сведения см. на сайте http://go.microsoft.com/fwlink/?LinkID=398589.</param>
      <typeparam name="TElement">Тип элемента последовательности результатов.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Threading.CancellationToken,System.Object[])">
      <summary>Асинхронно выполняет запрос непосредственно на источнике данных и возвращает последовательность типизированных результатов.Запрос задан с использованием собственного языка запросов сервера, такого как SQL.Результаты не отслеживаются контекстом, используйте перегрузку, указывающую имя набора сущностей для отслеживания результатов.Как и для любого API, принимающего SQL, важно параметризовать все пользовательские входные данные для защиты от атаки путем внедрения кода SQL.Можно включать в строку SQL-запроса местозаполнители параметров и затем предоставлять значения параметров как дополнительные аргументы.Все предоставляемые значения параметров будут автоматически преобразовываться в DbParameter.context.ExecuteStoreQueryAsync&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); также можно создать DbParameter и передать его в SqlQuery.Это позволяет использовать в строке запроса SQL именованные параметры.context.ExecuteStoreQueryAsync&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит перечисление объектов типа <paramref name="TElement" />.</returns>
      <param name="commandText">Запрос задан на собственном языке запросов сервера.</param>
      <param name="executionOptions">Параметры, предназначенные для выполнения этого запроса.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <param name="parameters">Значения параметров, которые должны использоваться для этого запроса.Если используются выходные параметры, их значения не будут доступны до полного прочтения результатов.Это происходит вследствие базового поведения DbDataReader, дополнительные сведения см. на сайте http://go.microsoft.com/fwlink/?LinkID=398589.</param>
      <typeparam name="TElement">Тип элемента последовательности результатов.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.Object[])">
      <summary>Асинхронно выполняет запрос непосредственно на источнике данных и возвращает последовательность типизированных результатов.Запрос задан с использованием собственного языка запросов сервера, такого как SQL.Результаты не отслеживаются контекстом, используйте перегрузку, указывающую имя набора сущностей для отслеживания результатов.Как и для любого API, принимающего SQL, важно параметризовать все пользовательские входные данные для защиты от атаки путем внедрения кода SQL.Можно включать в строку SQL-запроса местозаполнители параметров и затем предоставлять значения параметров как дополнительные аргументы.Все предоставляемые значения параметров будут автоматически преобразовываться в DbParameter.context.ExecuteStoreQueryAsync&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); также можно создать DbParameter и передать его в SqlQuery.Это позволяет использовать в строке запроса SQL именованные параметры.context.ExecuteStoreQueryAsync&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит перечисление объектов типа <paramref name="TElement" />.</returns>
      <param name="commandText">Запрос задан на собственном языке запросов сервера.</param>
      <param name="parameters">Значения параметров, которые должны использоваться для этого запроса.Если используются выходные параметры, их значения не будут доступны до полного прочтения результатов.Это происходит вследствие базового поведения DbDataReader, дополнительные сведения см. на сайте http://go.microsoft.com/fwlink/?LinkID=398589.</param>
      <typeparam name="TElement">Тип элемента последовательности результатов.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Object[])">
      <summary>Асинхронно выполняет запрос непосредственно на источнике данных и возвращает последовательность типизированных результатов.Запрос задан с использованием собственного языка запросов сервера, такого как SQL.Если указано имя набора сущностей, результаты отслеживаются контекстом.Как и для любого API, принимающего SQL, важно параметризовать все пользовательские входные данные для защиты от атаки путем внедрения кода SQL.Можно включать в строку SQL-запроса местозаполнители параметров и затем предоставлять значения параметров как дополнительные аргументы.Все предоставляемые значения параметров будут автоматически преобразовываться в DbParameter.context.ExecuteStoreQueryAsync&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); также можно создать DbParameter и передать его в SqlQuery.Это позволяет использовать в строке запроса SQL именованные параметры.context.ExecuteStoreQueryAsync&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит перечисление объектов типа <paramref name="TElement" />.</returns>
      <param name="commandText">Запрос задан на собственном языке запросов сервера.</param>
      <param name="entitySetName">Набор сущностей типа TResult.Без указания имени набора сущностей отслеживания результатов не будет.</param>
      <param name="executionOptions">Параметры, предназначенные для выполнения этого запроса.</param>
      <param name="parameters">Значения параметров, которые должны использоваться для этого запроса.Если используются выходные параметры, их значения не будут доступны до полного прочтения результатов.Это происходит вследствие базового поведения DbDataReader, дополнительные сведения см. на сайте http://go.microsoft.com/fwlink/?LinkID=398589.</param>
      <typeparam name="TElement">Тип элемента последовательности результатов.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.String,System.Data.Entity.Core.Objects.ExecutionOptions,System.Threading.CancellationToken,System.Object[])">
      <summary>Асинхронно выполняет запрос непосредственно на источнике данных и возвращает последовательность типизированных результатов.Запрос задан с использованием собственного языка запросов сервера, такого как SQL.Если указано имя набора сущностей, результаты отслеживаются контекстом.Как и для любого API, принимающего SQL, важно параметризовать все пользовательские входные данные для защиты от атаки путем внедрения кода SQL.Можно включать в строку SQL-запроса местозаполнители параметров и затем предоставлять значения параметров как дополнительные аргументы.Все предоставляемые значения параметров будут автоматически преобразовываться в DbParameter.context.ExecuteStoreQueryAsync&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); также можно создать DbParameter и передать его в SqlQuery.Это позволяет использовать в строке запроса SQL именованные параметры.context.ExecuteStoreQueryAsync&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит перечисление объектов типа <paramref name="TElement" />.</returns>
      <param name="commandText">Запрос задан на собственном языке запросов сервера.</param>
      <param name="entitySetName">Набор сущностей типа TResult.Без указания имени набора сущностей отслеживания результатов не будет.</param>
      <param name="executionOptions">Параметры, предназначенные для выполнения этого запроса.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <param name="parameters">Значения параметров, которые должны использоваться для этого запроса.Если используются выходные параметры, их значения не будут доступны до полного прочтения результатов.Это происходит вследствие базового поведения DbDataReader, дополнительные сведения см. на сайте http://go.microsoft.com/fwlink/?LinkID=398589.</param>
      <typeparam name="TElement">Тип элемента последовательности результатов.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.ExecuteStoreQueryAsync``1(System.String,System.Threading.CancellationToken,System.Object[])">
      <summary>Асинхронно выполняет запрос непосредственно на источнике данных и возвращает последовательность типизированных результатов.Запрос задан с использованием собственного языка запросов сервера, такого как SQL.Результаты не отслеживаются контекстом, используйте перегрузку, указывающую имя набора сущностей для отслеживания результатов.Как и для любого API, принимающего SQL, важно параметризовать все пользовательские входные данные для защиты от атаки путем внедрения кода SQL.Можно включать в строку SQL-запроса местозаполнители параметров и затем предоставлять значения параметров как дополнительные аргументы.Все предоставляемые значения параметров будут автоматически преобразовываться в DbParameter.context.ExecuteStoreQueryAsync&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @p0", userSuppliedAuthor); также можно создать DbParameter и передать его в SqlQuery.Это позволяет использовать в строке запроса SQL именованные параметры.context.ExecuteStoreQueryAsync&amp;amp;lt;Post&amp;amp;gt;("SELECT * FROM dbo.Posts WHERE Author = @author", new SqlParameter("@author", userSuppliedAuthor));</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит перечисление объектов типа <paramref name="TElement" />.</returns>
      <param name="commandText">Запрос задан на собственном языке запросов сервера.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <param name="parameters">Значения параметров, которые должны использоваться для этого запроса.Если используются выходные параметры, их значения не будут доступны до полного прочтения результатов.Это происходит вследствие базового поведения DbDataReader, дополнительные сведения см. на сайте http://go.microsoft.com/fwlink/?LinkID=398589.</param>
      <typeparam name="TElement">Тип элемента последовательности результатов.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Finalize">
      <summary>Финализирует экземпляр класса <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.GetKnownProxyTypes">
      <summary>Возвращает все существующие типы прокси.</summary>
      <returns>Перечисление <see cref="T:System.Collections.Generic.IEnumerable`1" /> всех существующих типов прокси.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.GetObjectByKey(System.Data.Entity.Core.EntityKey)">
      <summary>Возвращает объект, имеющий указанный ключ сущности.</summary>
      <returns>Объект <see cref="T:System.Object" />, который является экземпляром типа сущности.</returns>
      <param name="key">Ключ искомого объекта.</param>
      <exception cref="T:System.ArgumentNullException">Параметр key имеет значение null.</exception>
      <exception cref="T:System.Data.Entity.Core.ObjectNotFoundException">Объект не найден ни в объекте <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />, ни в источнике данных.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.GetObjectType(System.Type)">
      <summary>Возвращает тип сущности POCO, связанной с прокси-объектом заданного типа.</summary>
      <returns>Тип <see cref="T:System.Type" /> связанной сущности POCO.</returns>
      <param name="type">Объект <see cref="T:System.Type" /> прокси-объекта.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.InterceptionContext">
      <summary>Возвращает объект <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext" />, используемый для этого контекста.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.LoadProperty(System.Object,System.String)">
      <summary>Явным образом загружает объект, связанный с предоставленным объектом, посредством заданного свойства навигации и параметра слияния по умолчанию.</summary>
      <param name="entity">Сущность, для которой необходимо загрузить связанные объекты.</param>
      <param name="navigationProperty">Имя свойства навигации, возвращающего связанные объекты для загрузки.</param>
      <exception cref="T:System.InvalidOperationException">Сущность имеет состояние <see cref="F:System.Data.Entity.EntityState.Detached" />, <see cref="F:System.Data.Entity.EntityState.Added," /> или <see cref="F:System.Data.Entity.EntityState.Deleted" />, либо же сущность присоединена к другому экземпляру <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.LoadProperty(System.Object,System.String,System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Явным образом загружает объект, связанный с предоставленным объектом, посредством заданного свойства навигации и указанного параметра слияния.</summary>
      <param name="entity">Сущность, для которой необходимо загрузить связанные объекты.</param>
      <param name="navigationProperty">Имя свойства навигации, возвращающего связанные объекты для загрузки.</param>
      <param name="mergeOption">Значение <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />, используемое при загрузке связанных объектов.</param>
      <exception cref="T:System.InvalidOperationException">Сущность имеет состояние <see cref="F:System.Data.Entity.EntityState.Detached" />, <see cref="F:System.Data.Entity.EntityState.Added," /> или <see cref="F:System.Data.Entity.EntityState.Deleted" />, либо же сущность присоединена к другому экземпляру <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
      <summary>Явным образом загружает объект, связанный с предоставленным объектом, посредством заданного запроса LINQ и параметра слияния по умолчанию.</summary>
      <param name="entity">Исходный объект, для которого необходимо загрузить связанные объекты.</param>
      <param name="selector">Выражение LINQ, определяющее связанные объекты для загрузки.</param>
      <typeparam name="TEntity">Тип сущности.</typeparam>
      <exception cref="T:System.ArgumentException">Селектор не предоставил допустимый входной параметр.</exception>
      <exception cref="T:System.ArgumentNullException">Селектор равен null.</exception>
      <exception cref="T:System.InvalidOperationException">Сущность имеет состояние <see cref="F:System.Data.Entity.EntityState.Detached" />, <see cref="F:System.Data.Entity.EntityState.Added," /> или <see cref="F:System.Data.Entity.EntityState.Deleted" />, либо же сущность присоединена к другому экземпляру <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.LoadProperty``1(``0,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Явным образом загружает объект, связанный с предоставленным объектом, посредством заданного запроса LINQ и указанного параметра слияния.</summary>
      <param name="entity">Исходный объект, для которого необходимо загрузить связанные объекты.</param>
      <param name="selector">Выражение LINQ, определяющее связанные объекты для загрузки.</param>
      <param name="mergeOption">Значение <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />, используемое при загрузке связанных объектов.</param>
      <typeparam name="TEntity">Тип сущности.</typeparam>
      <exception cref="T:System.ArgumentException">Селектор не предоставил допустимый входной параметр.</exception>
      <exception cref="T:System.ArgumentNullException">Селектор равен null.</exception>
      <exception cref="T:System.InvalidOperationException">Сущность имеет состояние <see cref="F:System.Data.Entity.EntityState.Detached" />, <see cref="F:System.Data.Entity.EntityState.Added," /> или <see cref="F:System.Data.Entity.EntityState.Deleted" />, либо же сущность присоединена к другому экземпляру <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.MetadataWorkspace">
      <summary>Возвращает рабочую область метаданных, используемую контекстом объекта.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />, ассоциированный с этим контекстом <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</returns>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.ObjectContext.ObjectMaterialized">
      <summary>Возникает при создании нового объекта сущности на основании данных в источнике данных в составе операции загрузки или запроса.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.ObjectStateManager">
      <summary>Возвращает диспетчер состояния объекта, используемый контекстом объекта, чтобы отслеживать изменения объекта.</summary>
      <returns>Диспетчер <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />, используемый этим классом <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.QueryProvider">
      <summary>Возвращает поставщик запроса LINQ, связанный с этим контекстом объекта.</summary>
      <returns>Экземпляр <see cref="T:System.Linq.IQueryProvider" />, используемый контекстом данного объекта.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Refresh(System.Data.Entity.Core.Objects.RefreshMode,System.Collections.IEnumerable)">
      <summary>Обновляет коллекцию объектов в контексте объекта, используя данные из базы данных.</summary>
      <param name="refreshMode">Значение <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" />, которое указывает, перезаписаны ли изменения свойств в контексте объекта значениями свойств из базы данных.</param>
      <param name="collection">Обновляемая коллекция объектов <see cref="T:System.Collections.IEnumerable" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр collection имеет значение NULL.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Недопустимое значение параметра refreshMode.</exception>
      <exception cref="T:System.ArgumentException">Коллекция пуста или объект не присоединен к тому же контексту.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Refresh(System.Data.Entity.Core.Objects.RefreshMode,System.Object)">
      <summary>Обновляет объект в контексте объекта, используя данные из базы данных.</summary>
      <param name="refreshMode">Значение <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" />, которое указывает, перезаписаны ли изменения свойств в контексте объекта значениями свойств из базы данных.</param>
      <param name="entity">Обновляемый объект.</param>
      <exception cref="T:System.ArgumentNullException">Объект entity имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Недопустимое значение параметра refreshMode.</exception>
      <exception cref="T:System.ArgumentException">Сущность не присоединена к этому контексту.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.RefreshAsync(System.Data.Entity.Core.Objects.RefreshMode,System.Collections.IEnumerable)">
      <summary>Асинхронно обновляет коллекцию объектов в контексте объекта, используя данные из базы данных.</summary>
      <returns>Задача, представляющая асинхронную операцию.</returns>
      <param name="refreshMode">Значение <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" />, которое указывает, перезаписаны ли изменения свойств в контексте объекта значениями свойств из базы данных.</param>
      <param name="collection">Обновляемая коллекция объектов <see cref="T:System.Collections.IEnumerable" />.</param>
      <exception cref="T:System.ArgumentNullException">Параметр collection имеет значение NULL.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Недопустимое значение параметра refreshMode.</exception>
      <exception cref="T:System.ArgumentException">Коллекция пуста или объект не присоединен к тому же контексту.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.RefreshAsync(System.Data.Entity.Core.Objects.RefreshMode,System.Collections.IEnumerable,System.Threading.CancellationToken)">
      <summary>Асинхронно обновляет коллекцию объектов в контексте объекта, используя данные из базы данных.</summary>
      <returns>Задача, представляющая асинхронную операцию.</returns>
      <param name="refreshMode">Значение <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" />, которое указывает, перезаписаны ли изменения свойств в контексте объекта значениями свойств из базы данных.</param>
      <param name="collection">Обновляемая коллекция объектов <see cref="T:System.Collections.IEnumerable" />.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <exception cref="T:System.ArgumentNullException">Параметр collection имеет значение NULL.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Недопустимое значение параметра refreshMode.</exception>
      <exception cref="T:System.ArgumentException">Коллекция пуста или объект не присоединен к тому же контексту.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.RefreshAsync(System.Data.Entity.Core.Objects.RefreshMode,System.Object)">
      <summary>Асинхронно обновляет объект в контексте объекта, используя данные из базы данных.</summary>
      <returns>Задача, представляющая асинхронную операцию.</returns>
      <param name="refreshMode">Значение <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" />, которое указывает, перезаписаны ли изменения свойств в контексте объекта значениями свойств из базы данных.</param>
      <param name="entity">Обновляемый объект.</param>
      <exception cref="T:System.ArgumentNullException">Объект entity имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Недопустимое значение параметра refreshMode.</exception>
      <exception cref="T:System.ArgumentException">Сущность не присоединена к этому контексту.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.RefreshAsync(System.Data.Entity.Core.Objects.RefreshMode,System.Object,System.Threading.CancellationToken)">
      <summary>Асинхронно обновляет объект в контексте объекта, используя данные из базы данных.</summary>
      <returns>Задача, представляющая асинхронную операцию.</returns>
      <param name="refreshMode">Значение <see cref="T:System.Data.Entity.Core.Objects.RefreshMode" />, которое указывает, перезаписаны ли изменения свойств в контексте объекта значениями свойств из базы данных.</param>
      <param name="entity">Обновляемый объект.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <exception cref="T:System.ArgumentNullException">Объект entity имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Недопустимое значение параметра refreshMode.</exception>
      <exception cref="T:System.ArgumentException">Сущность не присоединена к этому контексту.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges">
      <summary>Сохраняет все обновления в базе данных и сбрасывает отслеживание изменений в контексте объекта.</summary>
      <returns>Число объектов в состоянии <see cref="F:System.Data.Entity.EntityState.Added" />, <see cref="F:System.Data.Entity.EntityState.Modified" /> или <see cref="F:System.Data.Entity.EntityState.Deleted" /> на момент вызова метода <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" />.</returns>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">Возник конфликт оптимистичного параллелизма при сохранении изменений.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges(System.Boolean)">
      <summary>Сохраняет все обновления в базе данных и (необязательно) сбрасывает отслеживание изменений в контексте объекта.</summary>
      <returns>Число объектов в состоянии <see cref="F:System.Data.Entity.EntityState.Added" />, <see cref="F:System.Data.Entity.EntityState.Modified" /> или <see cref="F:System.Data.Entity.EntityState.Deleted" /> на момент вызова метода <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" />.</returns>
      <param name="acceptChangesDuringSave">Этот параметр необходим для поддержки транзакций на стороне клиента.Если имеет значение true, отслеживание изменений по всем объектам сбрасывается после завершения <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges(System.Boolean)" />.Если он имеет значение false, необходимо вызвать метод <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.AcceptAllChanges" /> после метода <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges(System.Boolean)" />.</param>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">Возник конфликт оптимистичного параллелизма при сохранении изменений.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges(System.Data.Entity.Core.Objects.SaveOptions)">
      <summary>Сохраняет все обновления в базе данных и (необязательно) сбрасывает отслеживание изменений в контексте объекта.</summary>
      <returns>Число объектов в состоянии <see cref="F:System.Data.Entity.EntityState.Added" />, <see cref="F:System.Data.Entity.EntityState.Modified" /> или <see cref="F:System.Data.Entity.EntityState.Deleted" /> на момент вызова метода <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" />.</returns>
      <param name="options">Значение <see cref="T:System.Data.Entity.Core.Objects.SaveOptions" />, определяющее поведение операции.</param>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">Возник конфликт оптимистичного параллелизма при сохранении изменений.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChangesAsync">
      <summary>Асинхронно сохраняет все обновления в базе данных и сбрасывает отслеживание изменений в контексте объекта.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит число объектов в состоянии <see cref="F:System.Data.Entity.EntityState.Added" />, <see cref="F:System.Data.Entity.EntityState.Modified" /> или <see cref="F:System.Data.Entity.EntityState.Deleted" /> на момент вызова метода <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" />.</returns>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">Возник конфликт оптимистичного параллелизма при сохранении изменений.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChangesAsync(System.Data.Entity.Core.Objects.SaveOptions)">
      <summary>Асинхронно сохраняет все обновления в базе данных и (дополнительно) сбрасывает отслеживание изменений в контексте объекта.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит число объектов в состоянии <see cref="F:System.Data.Entity.EntityState.Added" />, <see cref="F:System.Data.Entity.EntityState.Modified" /> или <see cref="F:System.Data.Entity.EntityState.Deleted" /> на момент вызова метода <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" />.</returns>
      <param name="options">Значение <see cref="T:System.Data.Entity.Core.Objects.SaveOptions" />, определяющее поведение операции.</param>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">Возник конфликт оптимистичного параллелизма при сохранении изменений.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChangesAsync(System.Data.Entity.Core.Objects.SaveOptions,System.Threading.CancellationToken)">
      <summary>Асинхронно сохраняет все обновления в базе данных и (дополнительно) сбрасывает отслеживание изменений в контексте объекта.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит число объектов в состоянии <see cref="F:System.Data.Entity.EntityState.Added" />, <see cref="F:System.Data.Entity.EntityState.Modified" /> или <see cref="F:System.Data.Entity.EntityState.Deleted" /> на момент вызова метода <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" />.</returns>
      <param name="options">Значение <see cref="T:System.Data.Entity.Core.Objects.SaveOptions" />, определяющее поведение операции.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">Возник конфликт оптимистичного параллелизма при сохранении изменений.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChangesAsync(System.Threading.CancellationToken)">
      <summary>Асинхронно сохраняет все обновления в базе данных и сбрасывает отслеживание изменений в контексте объекта.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит число объектов в состоянии <see cref="F:System.Data.Entity.EntityState.Added" />, <see cref="F:System.Data.Entity.EntityState.Modified" /> или <see cref="F:System.Data.Entity.EntityState.Deleted" /> на момент вызова метода <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" />.</returns>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <exception cref="T:System.Data.Entity.Core.OptimisticConcurrencyException">Возник конфликт оптимистичного параллелизма при сохранении изменений.</exception>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.ObjectContext.SavingChanges">
      <summary>Возникает при сохранении изменений в источнике данных.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.System#Data#Entity#Infrastructure#IObjectContextAdapter#ObjectContext">
      <summary>Возвращает себя.ObjectContext реализует интерфейс <see cref="T:System.Data.Entity.Infrastructure.IObjectContextAdapter" /> в целях предоставления общего интерфейса для <see cref="T:System.Data.Entity.DbContext" /> и ObjectContext; оба эти интерфейса возвращают основополагающий контекст ObjectContext.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContext.TransactionHandler">
      <summary>Возвращает обработчик транзакций, используемый в данном контексте.Может иметь значение NULL, если транзакция не началась.</summary>
      <returns>Обработчик транзакций.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Translate``1(System.Data.Common.DbDataReader)">
      <summary>Преобразует объект <see cref="T:System.Data.Common.DbDataReader" />, содержащий строки данных сущности, в объекты запрошенного типа сущности.</summary>
      <returns>Перечисление объектов типа TResult.</returns>
      <param name="reader">Объект <see cref="T:System.Data.Common.DbDataReader" />, содержащий данные сущности для преобразования в объекты сущности.</param>
      <typeparam name="TElement">Тип сущности.</typeparam>
      <exception cref="T:System.ArgumentNullException">Если модуль чтения имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.Translate``1(System.Data.Common.DbDataReader,System.String,System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Преобразует объект <see cref="T:System.Data.Common.DbDataReader" />, содержащий строки данных сущности, в объекты запрошенного типа сущности (в определенном наборе сущностей и с применением указанного параметра слияния).</summary>
      <returns>Перечисление объектов типа TResult.</returns>
      <param name="reader">Объект <see cref="T:System.Data.Common.DbDataReader" />, содержащий данные сущности для преобразования в объекты сущности.</param>
      <param name="entitySetName">Набор сущностей типа TResult.</param>
      <param name="mergeOption">Объект <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />, используемый при добавлении преобразованных объектов в контекст объекта.Значение по умолчанию — <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />.</param>
      <typeparam name="TEntity">Тип сущности.</typeparam>
      <exception cref="T:System.ArgumentNullException">Если модуль чтения имеет значение null.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Когда предоставленный параметр mergeOption не является допустимым значением <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />.</exception>
      <exception cref="T:System.InvalidOperationException">Когда предоставленное имя entitySetName не является допустимым набором сущностей для типа TResult.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectContext.TryGetObjectByKey(System.Data.Entity.Core.EntityKey,System.Object@)">
      <summary>Возвращает объект, имеющий указанный ключ сущности.</summary>
      <returns>true, если объект был успешно извлечен.false, если параметр key временный, connection равно null или value равно null.</returns>
      <param name="key">Ключ искомого объекта.</param>
      <param name="value">Если этот метод возвращает значение, содержит объект.</param>
      <exception cref="T:System.ArgumentException">Несовместимые метаданные для параметра key.</exception>
      <exception cref="T:System.ArgumentNullException">Параметр key имеет значение null.</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectContextOptions">
      <summary>Определяет параметры, которые влияют на поведение ObjectContext.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.EnsureTransactionsForFunctionsAndCommands">
      <summary>Возвращает или задает значение, которое определяет, должны ли функции и команды SQL всегда выполняться в транзакции.</summary>
      <returns>Поведение транзакции по умолчанию.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.LazyLoadingEnabled">
      <summary>Возвращает или задает логическое значение, которое определяет, происходит ли автоматическая загрузка связанных объектов при осуществлении доступа к какому-либо свойству навигации.</summary>
      <returns>true — если отложенная загрузка включена; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.ProxyCreationEnabled">
      <summary>Возвращает или задает логическое значение, которое определяет, создаются ли экземпляры прокси для пользовательских классов данных, не учитывающих сохраняемость.</summary>
      <returns>true, если прокси созданы; в противном случае — значение false.Значение по умолчанию — true.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.UseConsistentNullReferenceBehavior">
      <summary>Возвращает или задает логическое значение, определяющее, следует ли использовать единообразное поведение NullReference.</summary>
      <returns>true, если должно использоваться единообразное поведение NullReference; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.UseCSharpNullComparisonBehavior">
      <summary>Возвращает или задает логическое значение, определяющее, следует ли использовать единообразное поведение C# NullComparison.</summary>
      <returns>Значение true, если должно использоваться поведение NullComparison языка C#. В противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectContextOptions.UseLegacyPreserveChangesBehavior">
      <summary>Возвращает или задает логическое значение, определяющее, следует ли использовать предыдущее поведение PreserveChanges.</summary>
      <returns>true, если должно использоваться предыдущее поведение PreserveChanges; в противном случае — false.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectMaterializedEventArgs">
      <summary>Параметры EventArgs для события ObjectMaterialized.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectMaterializedEventArgs.Entity">
      <summary>Получает созданный объект сущности.</summary>
      <returns>Созданный объект сущности.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectMaterializedEventHandler">
      <summary>Делегат для события ObjectMaterialized.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectParameter">
      <summary>Этот класс представляет параметр запроса на объектном уровне, который состоит из имени, типа и значения.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameter.#ctor(System.String,System.Object)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> указанным именем и значением.</summary>
      <param name="name">Имя параметра.Это имя не должно содержать маркер параметра «@», используемый в инструкциях Entity SQL, а только фактическое имя.Выражение должно начинаться с буквы.Все последующие символы должны быть буквами, цифрами или символами подчеркивания (_).</param>
      <param name="value">Начальное значение (следовательно, и тип) параметра.</param>
      <exception cref="T:System.ArgumentNullException">Если один из аргументов имеет значение NULL.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Если имя аргумента недопустимо.Имена параметров должны начинаться с буквы и могут содержать только буквы, цифры и символы подчеркивания.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameter.#ctor(System.String,System.Type)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> с заданными именем и типом.</summary>
      <param name="name">Имя параметра.Это имя не должно содержать маркер параметра «@», используемый в инструкциях Entity SQL, а только фактическое имя.Выражение должно начинаться с буквы.Все последующие символы должны быть буквами, цифрами или символами подчеркивания (_).</param>
      <param name="type">Тип параметра среды CLR.</param>
      <exception cref="T:System.ArgumentNullException">Если один из аргументов имеет значение NULL.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Если имя аргумента недопустимо.Имена параметров должны начинаться с буквы и могут содержать только буквы, цифры и символы подчеркивания.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameter.Name">
      <summary>Возвращает имя параметра, которое можно задать только с помощью конструктора.</summary>
      <returns>Имя параметра, которое можно задать только с помощью конструктора.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameter.ParameterType">
      <summary>Возвращает тип параметра.</summary>
      <returns>
        <see cref="T:System.Type" /> для параметра.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameter.Value">
      <summary>Возвращает или задает значение параметра.</summary>
      <returns>Значение параметра.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectParameterCollection">
      <summary>Представляет коллекцию параметров запроса на уровне объектов.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.Add(System.Data.Entity.Core.Objects.ObjectParameter)">
      <summary>Добавляет указанный параметр <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> в коллекцию.</summary>
      <param name="item">Параметр для добавления в коллекцию.</param>
      <exception cref="T:System.ArgumentNullException">Аргумент parameter имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Аргумент parameter уже существует в коллекции.Это условие отличается от большинства коллекций, в которых допускаются повторяющиеся записи.-или- другой параметр с тем же именем, что и формальный параметр, уже существует в коллекции.Учтите, что в поиске не учитывается регистр.Это поведение отличается от большинства коллекций и близко к правилам словаря <see cref="T:System.Collections.Generic.Dictionary" />.</exception>
      <exception cref="T:System.ArgumentOutOfRangeException">Недопустимый тип аргумента parameter.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.Clear">
      <summary>Удаляет все экземпляры <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> из коллекции.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.Contains(System.Data.Entity.Core.Objects.ObjectParameter)">
      <summary>Проверяет наличие указанного параметра <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> в коллекции по ссылке.</summary>
      <returns>Возвращает значение true, если объект-параметр найден в коллекции, и значение false — в противном случае.</returns>
      <param name="item">Объект <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" />, который нужно найти в коллекции.</param>
      <exception cref="T:System.ArgumentNullException">Аргумент parameter имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.Contains(System.String)">
      <summary>Определяет, присутствует ли в коллекции объект <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> с указанным именем.</summary>
      <returns>Возвращает значение true, если параметр с указанным именем найден в коллекции; в противном случае — значение false.</returns>
      <param name="name">Имя параметра, который необходимо найти в коллекции.Это имя не должно содержать маркер параметра «@», используемый в инструкциях Entity SQL, а только фактическое имя.</param>
      <exception cref="T:System.ArgumentNullException">Параметр name имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.CopyTo(System.Data.Entity.Core.Objects.ObjectParameter[],System.Int32)">
      <summary>Позволяет копировать параметры коллекции в указанный массив, начиная с объекта по указанному индексу.</summary>
      <param name="array">Массив, в который копируются параметры.</param>
      <param name="arrayIndex">Индекс в массиве, с которого начинается копирование параметров.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameterCollection.Count">
      <summary>Возвращает число параметров, находящихся в коллекции в данный момент.</summary>
      <returns>Число объектов <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" />, находящихся в коллекции в данный момент.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.GetEnumerator">
      <summary>Возвращает экземпляры перечислителей, позволяющие проводить итерации по коллекции и осуществлять по ней переход.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerator`1" />, который можно использовать для перебора элементов коллекции.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameterCollection.Item(System.String)">
      <summary>Получает индексатор, который позволяет вызывающим методам получать параметры по имени.</summary>
      <returns>Индексатор, который позволяет вызывающим методам получать параметры по имени.</returns>
      <param name="name">Имя элемента.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.Remove(System.Data.Entity.Core.Objects.ObjectParameter)">
      <summary>Удаляет экземпляр <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> из коллекции по ссылке, если он существует в этой коллекции.</summary>
      <returns>Возвращает значение true, если объект-параметр найден в коллекции и удален из нее; в противном случае — значение false.</returns>
      <param name="item">Объект, который должен быть удален из коллекции.</param>
      <exception cref="T:System.ArgumentNullException">Аргумент parameter имеет значение null.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectParameterCollection.System#Collections#Generic#ICollection{T}#IsReadOnly">
      <summary>Возвращает значение, указывающее, доступен ли параметр <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> только для чтения.</summary>
      <returns>Значение true, если параметр <see cref="T:System.Data.Entity.Core.Objects.ObjectParameter" /> доступен только для чтения. В противном случае — значение false.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectParameterCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает нетипизированный перечислитель по коллекции.</summary>
      <returns>Экземпляр <see cref="T:System.Collections.IEnumerator" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectQuery">
      <summary>Этот класс реализует нетипизированные запросы на объектном уровне.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.CommandText">
      <summary>Возвращает текст команды запроса.</summary>
      <returns>Значение типа string.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.Context">
      <summary>Возвращает контекст объекта, ассоциированный с этим запросом объектов.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />, ассоциированный с этим экземпляром <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.EnablePlanCaching">
      <summary>Возвращает или задает значение, указывающее, должен ли быть кэширован план запроса.</summary>
      <returns>Значение, указывающее, должен ли быть кэширован план запроса.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.Execute(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Выполняет нетипизированный запрос объектов с указанным параметром слияния.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />, который содержит коллекцию объектов сущности, возвращенных запросом.</returns>
      <param name="mergeOption">Параметр <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> для использования при выполнении запроса.Значение по умолчанию — <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.ExecuteAsync(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Асинхронно выполняет нетипизированный запрос объектов с указанным параметром слияния.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат выполнения задачи содержит <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> с коллекцией объектов сущностей, возвращенных запросом.</returns>
      <param name="mergeOption">Параметр <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> для использования при выполнении запроса.Значение по умолчанию — <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.ExecuteAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>Асинхронно выполняет нетипизированный запрос объектов с указанным параметром слияния.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат выполнения задачи содержит <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> с коллекцией объектов сущностей, возвращенных запросом.</returns>
      <param name="mergeOption">Параметр <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> для использования при выполнении запроса.Значение по умолчанию — <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.GetResultType">
      <summary>Возвращает сведения о результирующем типе запроса.</summary>
      <returns>Значение <see cref="T:System.Data.Entity.Core.Metadata.Edm.TypeUsage" />, которое содержит сведения об результирующем типе запроса.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.MergeOption">
      <summary>Возвращает или задает способ добавления к контексту объекта объектов, возвращенных запросом.</summary>
      <returns>Свойство <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> запроса.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.Parameters">
      <summary>Возвращает коллекцию параметров для этого запроса объектов.</summary>
      <returns>Коллекция параметров для этого запроса <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.Streaming">
      <summary>Является ли запрос потоковым или буферизуемым</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, осуществляющий итерацию по коллекции.</summary>
      <returns>Объект <see cref="T:System.Collections.IEnumerator" />, который можно использовать для перебора элементов коллекции.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Возвращает значение, указывающее, содержит ли данный запрос коллекцию объектов запроса.</summary>
      <returns>Значение true, если этот запрос содержит коллекцию объектов запроса. В противном случае — значение false.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.System#ComponentModel#IListSource#GetList">
      <summary>Возвращает коллекцию в виде интерфейса <see cref="T:System.Collections.IList" />, используемого для привязки данных.</summary>
      <returns>Интерфейс <see cref="T:System.Collections.IList" /> объектов сущностей.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>Возвращает объект <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator" />, который при перечислении выполняет заданный SQL-запрос по отношению к базе данных.</summary>
      <returns>Результаты запроса.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.System#Linq#IQueryable#ElementType">
      <summary>Возвращает результирующий тип элемента для этого экземпляра запроса.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.System#Linq#IQueryable#Expression">
      <summary>Возвращает выражение, описывающее этот запрос.Применительно к запросам, построенным с использованием шаблонов построителя LINQ, возвращает полное дерево выражений LINQ; в противном случае возвращает константное выражение, включающее этот запрос.Следует отметить, что выражение по умолчанию не кэшируется.Это позволяет проводить различия между запросами LINQ и Entity-SQL.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery.System#Linq#IQueryable#Provider">
      <summary>Возвращает значение <see cref="T:System.Linq.IQueryProvider" />, связанное с этим экземпляром запроса.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery.ToTraceString">
      <summary>Возвращает команды для выполнения относительно источника данных.</summary>
      <returns>Параметр типа string, представляющий команды, которые запрос выполняет по отношению к источнику данных.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectQuery`1">
      <summary>Объект ObjectQuery реализует строго типизированные запросы на объектном уровне.Для указания запросов используются строки Entity-SQL, и они могут быть созданы путем вызова методов построителя запросов на основе Entity-SQL, объявленных в ObjectQuery.</summary>
      <typeparam name="T">Тип результата этого запроса ObjectQuery</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Entity.Core.Objects.ObjectContext)">
      <summary>Создает новый экземпляр <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> с помощью указанной команды Entity SQL в качестве начального запроса.</summary>
      <param name="commandText">Запрос Entity SQL.</param>
      <param name="context">Контекст <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />, в котором выполняется запрос.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.#ctor(System.String,System.Data.Entity.Core.Objects.ObjectContext,System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Создает новый экземпляр <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />, используя указанную команду языка Entity SQL в качестве начального запроса, а также указанные параметры слияния.</summary>
      <param name="commandText">Запрос Entity SQL.</param>
      <param name="context">Контекст <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />, в котором выполняется запрос.</param>
      <param name="mergeOption">Указывает, каким образом сущности, получаемые этим запросом, должны сливаться с сущностями, возвращенными в результате предыдущих запросов к тому же контексту <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Distinct">
      <summary>Ограничивает запрос для выдачи результатов без повторов.</summary>
      <returns>Новый экземпляр <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />, эквивалентный первоначальному экземпляру с примененным к нему предложением SELECT DISTINCT.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Except(System.Data.Entity.Core.Objects.ObjectQuery{`0})">
      <summary>Этот метод построителя запросов создает новый запрос, все результаты которого являются результатами этого запроса, кроме тех, которые являются также частью другого указанного запроса.</summary>
      <returns>новый экземпляр ObjectQuery.</returns>
      <param name="query">Запрос, представляющий исключаемые результаты.</param>
      <exception cref="T:System.ArgumentNullException">Если параметр запроса имеет значение NULL.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Execute(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Выполняет запрос объектов с указанным параметром слияния.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />, который содержит коллекцию объектов сущности, возвращенных запросом.</returns>
      <param name="mergeOption">Параметр <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> для использования при выполнении запроса.Значение по умолчанию — <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.ExecuteAsync(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Асинхронно выполняет запрос объектов с указанным параметром слияния.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат выполнения задачи содержит <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> с коллекцией объектов сущностей, возвращенных запросом.</returns>
      <param name="mergeOption">Параметр <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> для использования при выполнении запроса.Значение по умолчанию — <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.ExecuteAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>Асинхронно выполняет запрос объектов с указанным параметром слияния.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат выполнения задачи содержит <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" /> с коллекцией объектов сущностей, возвращенных запросом.</returns>
      <param name="mergeOption">Параметр <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> для использования при выполнении запроса.Значение по умолчанию — <see cref="F:System.Data.Entity.Core.Objects.MergeOption.AppendOnly" />.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.GroupBy(System.String,System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Группирует результаты запроса по заданному критерию.</summary>
      <returns>Новый экземпляр <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> типа <see cref="T:System.Data.Common.DbDataRecord" />, эквивалентный первоначальному экземпляру с примененным к нему предложением GROUP BY.</returns>
      <param name="keys">Ключевые столбцы, по которым группируются результаты.</param>
      <param name="projection">Список выбранных свойств, определяющий проекцию.</param>
      <param name="parameters">Параметры (ноль или более), используемые в этом методе.</param>
      <exception cref="T:System.ArgumentNullException">Параметр query равен null или содержит пустую строку, либо параметр projection равен null или содержит пустую строку.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Include(System.String)">
      <summary>Задает связанные объекты, включаемые в результаты запроса.</summary>
      <returns>Новый запрос <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> с определенным путем запроса.</returns>
      <param name="path">Разделенный точками список связанных объектов, включаемых в результаты запроса.</param>
      <exception cref="T:System.ArgumentNullException">Параметр path имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Параметр path имеет значение empty.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Intersect(System.Data.Entity.Core.Objects.ObjectQuery{`0})">
      <summary>Этот метод построителя запросов создает новый запрос, результатами которого являются те результаты, которые присутствуют и в этом запросе, и другом указанном запросе.</summary>
      <returns>новый экземпляр ObjectQuery.</returns>
      <param name="query">Запрос, представляющий результаты, с которыми происходит пересечение.</param>
      <exception cref="T:System.ArgumentNullException">Если параметр запроса имеет значение NULL.</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectQuery`1.Name">
      <summary>Возвращает или задает имя данного запроса объектов.</summary>
      <returns>Строковое значение, которое является именем данного <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.OfType``1">
      <summary>Запрос ограничивается результатами определенного типа.</summary>
      <returns>Новый экземпляр <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />, эквивалентный первоначальному, с примененным к нему предложением OFTYPE.</returns>
      <typeparam name="TResultType">Тип объекта <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />, возвращаемого при выполнении запроса с примененным фильтром.</typeparam>
      <exception cref="T:System.Data.Entity.Core.EntitySqlException">Указан недопустимый тип.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.OrderBy(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Сортирует результаты запроса по заданному критерию.</summary>
      <returns>Новый экземпляр <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />, эквивалентный первоначальному экземпляру с примененным к нему предложением ORDER BY.</returns>
      <param name="keys">Ключевые столбцы, по которым упорядочиваются результаты.</param>
      <param name="parameters">Параметры (ноль или более), используемые в этом методе.</param>
      <exception cref="T:System.ArgumentNullException">Параметр keys или параметр parameters имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Параметр key является пустой строкой.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Select(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Ограничивает результаты запроса только теми свойствами, которые определены в заданной проекции.</summary>
      <returns>Новый экземпляр <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> типа <see cref="T:System.Data.Common.DbDataRecord" />, эквивалентный первоначальному экземпляру с примененным к нему предложением SELECT.</returns>
      <param name="projection">Список выбранных свойств, определяющий проекцию.</param>
      <param name="parameters">Параметры (ноль или более), используемые в этом методе.</param>
      <exception cref="T:System.ArgumentNullException">Параметр projection имеет значение null, или параметр parameters равен null.</exception>
      <exception cref="T:System.ArgumentException">Параметр projection является пустой строкой.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Ограничивает результаты запроса только свойствами, заданными в данной проекции.</summary>
      <returns>Новый экземпляр <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> типа, совместимого с конкретной проекцией.Возвращаемый <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" /> эквивалентен исходному экземпляру с примененным к нему предложением SELECT VALUE.</returns>
      <param name="projection">Список проекций.</param>
      <param name="parameters">Дополнительный набор параметров запроса, которые должны находиться в области действия во время синтаксического анализа.</param>
      <typeparam name="TResultType">Тип объекта <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />, возвращаемого методом <see cref="M:System.Data.Entity.Core.Objects.ObjectQuery`1.SelectValue``1(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])" />.</typeparam>
      <exception cref="T:System.ArgumentNullException">Параметр projection имеет значение null, или параметр parameters равен null.</exception>
      <exception cref="T:System.ArgumentException">Параметр projection является пустой строкой.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Skip(System.String,System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Упорядочивает результаты запроса по заданному критерию и пропускает указанное число результатов.</summary>
      <returns>Новый экземпляр <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />, эквивалентный первоначальному экземпляру с примененными к нему предложениями ORDER BY и SKIP.</returns>
      <param name="keys">Ключевые столбцы, по которым упорядочиваются результаты.</param>
      <param name="count">Число результатов, которые нужно пропустить.Может быть константой или ссылкой на параметр.</param>
      <param name="parameters">Дополнительный набор параметров запроса, которые должны находиться в области действия во время синтаксического анализа.</param>
      <exception cref="T:System.ArgumentNullException">Все аргументы имеют значение null.</exception>
      <exception cref="T:System.ArgumentException">Параметр keys содержит пустую строку, либо count содержит пустую строку.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Возвращает объект <see cref="T:System.Collections.Generic.IEnumerator`1" />, который при перечислении выполняет заданный SQL-запрос по отношению к базе данных.</summary>
      <returns>Результаты запроса.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable{T}#GetAsyncEnumerator">
      <summary>Возвращает объект <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1" />, который при перечислении выполняет заданный SQL-запрос по отношению к базе данных.</summary>
      <returns>Результаты запроса.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Top(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Результаты запроса ограничиваются определенным числом элементов.</summary>
      <returns>Новый экземпляр <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />, эквивалентный первоначальному экземпляру с примененным к нему предложением TOP.</returns>
      <param name="count">Количество элементов в результирующем наборе в виде строки.</param>
      <param name="parameters">Дополнительный набор параметров запроса, которые должны находиться в области действия во время синтаксического анализа.</param>
      <exception cref="T:System.ArgumentNullException">Параметр count имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Параметр count является пустой строкой.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Union(System.Data.Entity.Core.Objects.ObjectQuery{`0})">
      <summary>Этот метод построителя запросов создает новый запрос, все результаты которого являются результатами этого запроса, наряду со всеми результатами другого запроса, без повторений (т.е. результаты уникальны).</summary>
      <returns>новый экземпляр ObjectQuery.</returns>
      <param name="query">Запрос, представляющий добавляемые результаты.</param>
      <exception cref="T:System.ArgumentNullException">Если параметр запроса имеет значение NULL.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.UnionAll(System.Data.Entity.Core.Objects.ObjectQuery{`0})">
      <summary>Этот метод построителя запросов создает новый запрос, все результаты которого являются результатами этого запроса, наряду со всеми результатами другого запроса, включая любые повторения (т.е. результаты не обязательно уникальны).</summary>
      <returns>новый экземпляр ObjectQuery.</returns>
      <param name="query">Запрос, представляющий добавляемые результаты.</param>
      <exception cref="T:System.ArgumentNullException">Если параметр запроса имеет значение NULL.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Where(System.String,System.Data.Entity.Core.Objects.ObjectParameter[])">
      <summary>Ограничивает запрос результатами, соответствующими определенному критерию фильтрации.</summary>
      <returns>Новый экземпляр запроса <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />, эквивалентный первоначальному экземпляру с примененным к нему предложением WHERE.</returns>
      <param name="predicate">Предикат фильтра.</param>
      <param name="parameters">Параметры (ноль или более), используемые в этом методе.</param>
      <exception cref="T:System.ArgumentNullException">Параметр predicate имеет значение null, или параметр parameters равен null.</exception>
      <exception cref="T:System.ArgumentException">Параметр predicate является пустой строкой.</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectResult">
      <summary>Этот класс реализует интерфейсы IEnumerable и IDisposable.Экземпляр этого класса возвращен из метода ObjectQuery.Execute.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.#ctor">
      <summary>Этот конструктор предназначен только для использования при создании тестовых дублей, которые переопределят элементы с макетами и имитациями.Использование этого конструктора в других целях может привести к неожиданному поведению, в том числе вызову исключения <see cref="T:System.NullReferenceException" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.Dispose">
      <summary>Выполняет задачи, связанные с освобождением или сбросом ресурсов.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.Dispose(System.Boolean)">
      <summary>Освобождает ресурсы, используемые результатом объекта.</summary>
      <param name="disposing">Значение true, если требуется освободить и управляемые, и неуправляемые ресурсы; значение false, если требуется освободить только неуправляемые ресурсы.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectResult.ElementType">
      <summary>При переопределении в производном классе, возвращает тип универсального объекта <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />.</summary>
      <returns>Тип универсального <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.GetNextResult``1">
      <summary>Возвращает следующий результирующий набор хранимой процедуры.</summary>
      <returns>ObjectResult, который перечисляет значения следующего результирующего набора результатов.Null, если больше нет или если ObjectResult не является результатом вызова хранимой процедуры.</returns>
      <typeparam name="TElement">Тип элемента.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель для перебора результатов запроса.</summary>
      <returns>Перечислитель, проходящий по результатам запроса.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectResult.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Реализация IListSource.ContainsListCollection.Всегда возвращает значение false.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.System#ComponentModel#IListSource#GetList">
      <summary>Возвращает результаты в формате, применимом для привязки данных.</summary>
      <returns>Интерфейс <see cref="T:System.Collections.IList" /> объектов сущностей.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>Возвращает асинхронный перечислитель для перебора результатов запроса.</summary>
      <returns>Асинхронный перечислитель для перебора результатов запроса.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectResult`1">
      <summary>Этот класс представляет результат метода <see cref="M:System.Data.Entity.Core.Objects.ObjectQuery`1.Execute(System.Data.Entity.Core.Objects.MergeOption)" />.</summary>
      <typeparam name="T">Тип результата.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult`1.#ctor">
      <summary>Этот конструктор предназначен только для использования при создании тестовых дублей, которые переопределят элементы с макетами и имитациями.Использование этого конструктора в других целях может привести к неожиданному поведению, в том числе вызову исключения <see cref="T:System.NullReferenceException" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult`1.Dispose(System.Boolean)">
      <summary>Освобождает неуправляемые ресурсы, используемые объектом <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />, а при необходимости освобождает также и управляемые ресурсы.</summary>
      <param name="disposing">Значение true, чтобы освободить управляемые и неуправляемые ресурсы. Значение false, чтобы освободить только неуправляемые ресурсы.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectResult`1.ElementType">
      <summary>Возвращает тип результата <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />.</summary>
      <returns>Объект <see cref="T:System.Type" />, который является типом результата <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult`1.GetEnumerator">
      <summary>Возвращает перечислитель для перебора результатов запроса.</summary>
      <returns>Перечислитель, проходящий по результатам запроса.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectResult`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable{T}#GetAsyncEnumerator">
      <summary>Возвращает асинхронно перечислитель, осуществляющий итерацию объектов <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />.</summary>
      <returns>Перечислитель, осуществляющий итерацию объектов <see cref="T:System.Data.Entity.Core.Objects.ObjectResult`1" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectSet`1">
      <summary>Представляет набор типизированных сущностей, используемый для выполнения операций создания, чтения, обновления и удаления.</summary>
      <typeparam name="TEntity">Тип сущности.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.AddObject(`0)">
      <summary>Добавляет объект к контексту объекта в текущем наборе сущностей.</summary>
      <param name="entity">Добавляемый объект.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.ApplyCurrentValues(`0)">
      <summary>Копирует скалярные значения из указанного объекта в объект в контексте <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />, который содержит тот же ключ.</summary>
      <returns>Обновленный объект.</returns>
      <param name="currentEntity">Отсоединенный объект имеет обновления свойств, которые нужно применить к исходному объекту.Ключ сущности currentEntity должен совпадать со свойством <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntityKey" /> вхождения в <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.ApplyOriginalValues(`0)">
      <summary>Задает свойство <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.OriginalValues" /> объекта <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />, совпадающее со значениями свойств предоставленного объекта.</summary>
      <returns>Обновленный объект.</returns>
      <param name="originalEntity">Отсоединенный объект имеет обновления свойств, которые нужно применить к исходному объекту.Ключ сущности originalEntity должен совпадать со свойством <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntityKey" /> элемента в <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.Attach(`0)">
      <summary>Присоединяет объект или граф объектов к контексту объекта в текущем наборе сущностей.</summary>
      <param name="entity">Присоединяемый объект.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.CreateObject``1">
      <summary>Создает экземпляр заданного типа.</summary>
      <returns>Экземпляр запрошенного типа T или экземпляр прокси-типа, соответствующий типу T.</returns>
      <typeparam name="T">Тип объекта, который должен быть возвращен.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.CreateObject">
      <summary>Создает новый объект типа сущности.</summary>
      <returns>Новый объект типа сущности или экземпляр прокси-типа, соответствующий типу сущности.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.DeleteObject(`0)">
      <summary>Помечает объект для удаления.</summary>
      <param name="entity">Объект, представляющий удаляемую сущность.Объект может находиться в любом состоянии, кроме <see cref="F:System.Data.Entity.EntityState.Detached" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectSet`1.Detach(`0)">
      <summary>Удаляет объект из контекста объекта.</summary>
      <param name="entity">Отсоединяемый объект.Удаляется только сущность. При наличии каких-либо связанных объектов, которые отслеживаются тем же <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />, они не отсоединяются автоматически.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectSet`1.EntitySet">
      <summary>Получает метаданные набора сущностей, представленного данным экземпляром <see cref="T:System.Data.Entity.Core.Objects.ObjectSet`1" />.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectStateEntry">
      <summary>Представляет сущность, заглушку сущности или связь</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.AcceptChanges">
      <summary>Принимает текущие значения как исходные.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.ApplyCurrentValues(System.Object)">
      <summary>Задает текущие значения записи, совпадающие со значениями свойств предоставленного объекта.</summary>
      <param name="currentEntity">Отсоединенный объект с обновленными значениями, применяемыми к данному объекту.currentEntity также может быть ключом сущности объекта.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.ApplyOriginalValues(System.Object)">
      <summary>Задает исходные значения записи, совпадающие со значениями свойств предоставленного объекта.</summary>
      <param name="originalEntity">Отсоединенный объект, имеющий исходные значения, применяемые к данному объекту.originalEntity также может быть ключом сущности объекта.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.ChangeState(System.Data.Entity.EntityState)">
      <summary>Изменяет состояние записи на указанное значение <see cref="T:System.Data.Entity.EntityState" />.</summary>
      <param name="state">Значение <see cref="T:System.Data.Entity.EntityState" />, задаваемое для свойства <see cref="P:System.Data.Entity.Core.Objects.ObjectStateEntry.State" /> записи.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.CurrentValues">
      <summary>Возвращает текущие значения свойств объекта или связи, ассоциированной с этим экземпляром <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />.</summary>
      <returns>Экземпляр типа <see cref="T:System.Data.Entity.Core.Objects.CurrentValueRecord" />, который содержит текущие значения объекта или связи, ассоциированной с экземпляром <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.Delete">
      <summary>Обозначает сущность как удаленную.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.Entity">
      <summary>Возвращает объект сущности.</summary>
      <returns>Объект сущности.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntityKey">
      <summary>Возвращает ключ сущности.</summary>
      <returns>Ключ сущности.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.EntitySet">
      <summary>Возвращает <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" /> для объекта или связи.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" /> для объекта или связи.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.GetModifiedProperties">
      <summary>Возвращает имена свойств объекта, которые изменились с момента последнего вызова метода <see cref="M:System.Data.Entity.Core.Objects.ObjectContext.SaveChanges" />.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" /> коллекция имен в виде строк.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.GetUpdatableOriginalValues">
      <summary>Возвращает обновляемую версию исходных значений объекта, связанного с данным объектом <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />.</summary>
      <returns>Обновляемые исходные значения данных объекта.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.IsPropertyChanged(System.String)">
      <summary>Использует DetectChanges для определения того, является ли текущее значение свойства с заданным именем отличным от его исходного значения.Следует учитывать, что в этом может состоять отличие от свойства, отмеченного как измененное, поскольку свойство, которое не было изменено, все равно может быть отмечено как измененное.</summary>
      <returns>Значение true, если свойство изменилось. В противном случае — значение false.</returns>
      <param name="propertyName">Имя свойства.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.IsRelationship">
      <summary>Возвращает значение, указывающее, представляет ли <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> связь.</summary>
      <returns>true, если <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> представляет связь; в противном случае — false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.ObjectStateManager">
      <summary>Возвращает <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> для <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" /> для <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.OriginalValues">
      <summary>Возвращает версию только для чтения исходных значений объекта или связи.</summary>
      <returns>Версия только для чтения исходных значений записи связи набора или сущности.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.RejectPropertyChanges(System.String)">
      <summary>Отклоняет все изменения, внесенные в свойство с заданным именем, с того времени, как свойство было в последний раз загружено, присоединено, сохранено или были приняты изменения.Сохраняется исходное значение свойства, и свойство перестает быть отмеченным как измененное.</summary>
      <param name="propertyName">Имя свойства, которое должно быть изменено.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.RelationshipManager">
      <summary>Возвращает экземпляр <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> для объекта, представленного записью.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.SetModified">
      <summary>Задает состояние объекта или связи, подлежащее изменению.</summary>
      <exception cref="T:System.InvalidOperationException">Если состояние не является измененным или неизменным</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.SetModifiedProperty(System.String)">
      <summary>Обозначает указанное свойство как измененное.</summary>
      <param name="propertyName">Имя свойства.</param>
      <exception cref="T:System.InvalidOperationException">Если состояние не является измененным или неизменным</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.State">
      <summary>Возвращает состояние экземпляра <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />.</summary>
      <returns>Состояние <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityComplexMemberChanged(System.String,System.Object,System.String)">
      <summary>Используется для сообщения о том, что сложное свойство изменилось. Значение свойства, которое было кэшировано в режиме EntityMemberChanging, теперь добавлено к OriginalValues</summary>
      <param name="entityMemberName">Имя свойства сущности верхнего уровня, которое было изменено</param>
      <param name="complexObject">Сложный объект, содержащий изменившееся свойство</param>
      <param name="complexObjectMemberName">Имя свойства, которое изменилось в объекте complexObject</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityComplexMemberChanging(System.String,System.Object,System.String)">
      <summary>Используется для сообщения о том, что сложное свойство должно быть изменено. Текущее значение указанного свойства кэшировано при вызове этого метода.</summary>
      <param name="entityMemberName">Имя свойства сущности верхнего уровня, которое изменяется</param>
      <param name="complexObject">Сложный объект, содержащий изменяющееся свойство</param>
      <param name="complexObjectMemberName">Имя свойства, которое изменяется в объекте complexObject</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityMemberChanged(System.String)">
      <summary>Используется для сообщения о том, что скалярное свойство сущности изменилось. Значение свойства, которое было кэшировано в режиме EntityMemberChanging, теперь добавлено к OriginalValues</summary>
      <param name="entityMemberName">Имя свойства сущности, которое подверглось изменению</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityMemberChanging(System.String)">
      <summary>Используется для сообщения о том, что скалярное свойство сущности должно быть изменено. Текущее значение указанного свойства кэшировано при вызове этого метода.</summary>
      <param name="entityMemberName">Имя свойства сущности, которое подвергается изменению</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateEntry.System#Data#Entity#Core#Objects#DataClasses#IEntityChangeTracker#EntityState">
      <summary>Возвращает значение EntityState из записи ObjectStateEntry</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ObjectStateManager">
      <summary>Поддерживает состояние объекта и обеспечивает управление идентификаторами для экземпляров типа сущности и экземпляров связи.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.#ctor(System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />.</summary>
      <param name="metadataWorkspace">Рабочая область метаданных <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />, которая предоставляет информацию о сопоставлении и метаданных.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.ChangeObjectState(System.Object,System.Data.Entity.EntityState)">
      <summary>Изменяет состояние записи <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> для определенного объекта на указанное entityState.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> для предоставленной сущности.</returns>
      <param name="entity">Объект, для которого должно быть изменено состояние.</param>
      <param name="entityState">Новое состояние объекта.</param>
      <exception cref="T:System.ArgumentNullException">Если параметр entity имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Если объект не отсоединен и не имеет записи в диспетчере состояний, или при попытке изменить состояние на <see cref="F:System.Data.Entity.EntityState.Detached" /> из любого другого <see cref="T:System.Data.Entity.EntityState." />, или когда состояние имеет недопустимое значение <see cref="T:System.Data.Entity.EntityState" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.ChangeRelationshipState(System.Object,System.Object,System.String,System.Data.Entity.EntityState)">
      <summary>Изменяет состояние связи между двумя объектами сущностей, заданное на основании двух связанных объектов и имени свойства навигации.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> для измененной связи.</returns>
      <param name="sourceEntity">Экземпляр объекта или объект <see cref="T:System.Data.Entity.Core.EntityKey" /> исходной сущности с одной стороны связи.</param>
      <param name="targetEntity">Экземпляр объекта или объект <see cref="T:System.Data.Entity.Core.EntityKey" /> целевой сущности с другой стороны связи.</param>
      <param name="navigationProperty">Имя свойства навигации исходного объекта, возвращающего указанный целевой объект.</param>
      <param name="relationshipState">Запрошенное состояние <see cref="T:System.Data.Entity.EntityState" /> указанной связи.</param>
      <exception cref="T:System.ArgumentNullException">Если исходный или целевой объект равны null.</exception>
      <exception cref="T:System.InvalidOperationException">При попытке изменить состояние связи на значение, отличное от <see cref="F:System.Data.Entity.EntityState.Deleted" /> или <see cref="F:System.Data.Entity.EntityState.Detached" />, когда исходный или целевой объект имеют состояние <see cref="F:System.Data.Entity.EntityState.Deleted" />, или при попытке изменить состояние связи на значение, отличное от <see cref="F:System.Data.Entity.EntityState.Added" /> или <see cref="F:System.Data.Entity.EntityState.Detached" />, когда исходный или целевой объект имеют состояние <see cref="F:System.Data.Entity.EntityState.Added" /> или когда состояние не является допустимым значением <see cref="T:System.Data.Entity.EntityState" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.ChangeRelationshipState(System.Object,System.Object,System.String,System.String,System.Data.Entity.EntityState)">
      <summary>Изменяет состояние связи между двумя объектами сущностей, заданное на основании двух связанных объектов и свойств связи.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> для измененной связи.</returns>
      <param name="sourceEntity">Экземпляр объекта или объект <see cref="T:System.Data.Entity.Core.EntityKey" /> исходной сущности с одной стороны связи.</param>
      <param name="targetEntity">Экземпляр объекта или объект <see cref="T:System.Data.Entity.Core.EntityKey" /> целевой сущности с другой стороны связи.</param>
      <param name="relationshipName">Имя связи.</param>
      <param name="targetRoleName">Имя роли в целевом элементе связи.</param>
      <param name="relationshipState">Запрошенное состояние <see cref="T:System.Data.Entity.EntityState" /> указанной связи.</param>
      <exception cref="T:System.ArgumentNullException">Если исходный или целевой объект равны null.</exception>
      <exception cref="T:System.InvalidOperationException">При попытке изменить состояние связи на значение, отличное от <see cref="F:System.Data.Entity.EntityState.Deleted" /> или <see cref="F:System.Data.Entity.EntityState.Detached" />, когда исходный или целевой объект имеют состояние <see cref="F:System.Data.Entity.EntityState.Deleted" />, или при попытке изменить состояние связи на значение, отличное от <see cref="F:System.Data.Entity.EntityState.Added" /> или <see cref="F:System.Data.Entity.EntityState.Detached" />, когда исходный или целевой объект имеют состояние <see cref="F:System.Data.Entity.EntityState.Added" /> или когда состояние не является допустимым значением <see cref="T:System.Data.Entity.EntityState" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.ChangeRelationshipState``1(``0,System.Object,System.Linq.Expressions.Expression{System.Func{``0,System.Object}},System.Data.Entity.EntityState)">
      <summary>Изменяет состояние связи между двумя объектами сущностей, заданное на основании двух связанных объектов и выражения LINQ, определяющего свойство навигации.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> для измененной связи.</returns>
      <param name="sourceEntity">Экземпляр объекта или объект <see cref="T:System.Data.Entity.Core.EntityKey" /> исходной сущности с одной стороны связи.</param>
      <param name="targetEntity">Экземпляр объекта или объект <see cref="T:System.Data.Entity.Core.EntityKey" /> целевой сущности с другой стороны связи.</param>
      <param name="navigationPropertySelector">Выражение LINQ, выбирающее свойство навигации исходного объекта, возвращающего указанный целевой объект.</param>
      <param name="relationshipState">Запрошенное состояние <see cref="T:System.Data.Entity.EntityState" /> указанной связи.</param>
      <typeparam name="TEntity">Тип сущности исходного объекта.</typeparam>
      <exception cref="T:System.ArgumentNullException">Если исходный, целевой объект или селектор равны null.</exception>
      <exception cref="T:System.ArgumentException">Селектор имеет неправильный формат или не может возвратить свойство навигации.</exception>
      <exception cref="T:System.InvalidOperationException">При попытке изменить состояние связи на значение, отличное от <see cref="F:System.Data.Entity.EntityState.Deleted" /> или <see cref="F:System.Data.Entity.EntityState.Detached" />, когда исходный или целевой объект имеют состояние <see cref="F:System.Data.Entity.EntityState.Deleted" />, или при попытке изменить состояние связи на значение, отличное от <see cref="F:System.Data.Entity.EntityState.Added" /> или <see cref="F:System.Data.Entity.EntityState.Detached" />, когда исходный или целевой объект имеют состояние <see cref="F:System.Data.Entity.EntityState.Added" /> или когда состояние не является допустимым значением <see cref="T:System.Data.Entity.EntityState" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.GetObjectStateEntries(System.Data.Entity.EntityState)">
      <summary>Возвращает коллекцию объектов <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> для объектов или связей с заданным состоянием.</summary>
      <returns>Коллекция объектов <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> в заданном состоянии <see cref="T:System.Data.Entity.EntityState" />.</returns>
      <param name="state">Состояние <see cref="T:System.Data.Entity.EntityState" /> используется для фильтрации возвращаемых объектов <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />.</param>
      <exception cref="T:System.ArgumentException">Если состояние равно <see cref="F:System.Data.Entity.EntityState.Detached" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.GetObjectStateEntry(System.Data.Entity.Core.EntityKey)">
      <summary>Возвращает запись <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> для объекта или запись связи с указанным ключом.</summary>
      <returns>Соответствующая запись <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> для заданного ключа <see cref="T:System.Data.Entity.Core.EntityKey" />.</returns>
      <param name="key">Класс <see cref="T:System.Data.Entity.Core.EntityKey" />.</param>
      <exception cref="T:System.ArgumentNullException">Если ключ имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Когда указанный ключ не удается найти в диспетчере состояния.</exception>
      <exception cref="T:System.InvalidOperationException">Сущность с указанным ключом <see cref="T:System.Data.Entity.Core.EntityKey" /> отсутствует в диспетчере <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.GetObjectStateEntry(System.Object)">
      <summary>Возвращает запись <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> для указанного объекта.</summary>
      <returns>Соответствующая запись <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> для заданного ключа <see cref="T:System.Object" />.</returns>
      <param name="entity">Класс <see cref="T:System.Object" />, которому принадлежит полученный объект <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />.</param>
      <exception cref="T:System.InvalidOperationException">Сущность для указанного ключа <see cref="T:System.Object" /> отсутствует в диспетчере <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.GetRelationshipManager(System.Object)">
      <summary>Возвращает объект <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />, используемый указанным объектом.</summary>
      <returns>Операция <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> для заданного объекта.</returns>
      <param name="entity">Объект, для которого возвращается <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />.</param>
      <exception cref="T:System.InvalidOperationException">Сущность не реализует интерфейс IEntityWithRelationships и не отслеживается этим диспетчером ObjectStateManager</exception>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.ObjectStateManager.MetadataWorkspace">
      <summary>Возвращает рабочую область метаданных <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />, связанную с этим диспетчером состояний.</summary>
      <returns>Рабочее пространство <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataWorkspace" />, связанное с этим соединением <see cref="T:System.Data.Entity.Core.Objects.ObjectStateManager" />.</returns>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.ObjectStateManager.ObjectStateManagerChanged">
      <summary>Событие происходит при добавлении или удалении сущностей из диспетчера состояний.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.TryGetObjectStateEntry(System.Data.Entity.Core.EntityKey,System.Data.Entity.Core.Objects.ObjectStateEntry@)">
      <summary>Пытается получить элемент <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> для объекта или связи с указанным ключом <see cref="T:System.Data.Entity.Core.EntityKey" />.</summary>
      <returns>Логическое значение, равное true, если существует запись <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />, соответствующая заданному <see cref="T:System.Data.Entity.Core.EntityKey" />; в противном случае — значение false.</returns>
      <param name="key">Заданное значение ключа <see cref="T:System.Data.Entity.Core.EntityKey" />.</param>
      <param name="entry">После того как этот метод вернет управление, содержит значение записи <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> для указанного ключа <see cref="T:System.Data.Entity.Core.EntityKey" />. Этот параметр передается в неинициализированном виде.</param>
      <exception cref="T:System.ArgumentNullException">Значение NULL (Nothing в Visual Basic) предоставляется для параметра key.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.TryGetObjectStateEntry(System.Object,System.Data.Entity.Core.Objects.ObjectStateEntry@)">
      <summary>Пытается получить элемент <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />, соответствующий указанному <see cref="T:System.Object" />.</summary>
      <returns>Логическое значение, равное true, если существует запись <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />, соответствующая заданному объекту; в противном случае — значение false.</returns>
      <param name="entity">Класс <see cref="T:System.Object" />, которому принадлежит полученный объект <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" />.</param>
      <param name="entry">После того как этот метод вернет управление, содержит запись <see cref="T:System.Data.Entity.Core.Objects.ObjectStateEntry" /> для указанного объекта <see cref="T:System.Data.Entity.Core.EntityKey" />. Этот параметр передается в неинициализированном виде.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ObjectStateManager.TryGetRelationshipManager(System.Object,System.Data.Entity.Core.Objects.DataClasses.RelationshipManager@)">
      <summary>Возвращает объект <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />, используемый указанным объектом.</summary>
      <returns>Значение true, если для указанной сущности был возвращен экземпляр <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />, в противном случае — false.</returns>
      <param name="entity">Объект, для которого возвращается <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />.</param>
      <param name="relationshipManager">После возвращения метода, содержит <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> для сущности.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.OriginalValueRecord">
      <summary>Исходные значения свойств сущности после ее получения из базы данных.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.ProxyDataContractResolver">
      <summary>Объект DataContractResolver, который позволяет разрешать прокси-типы, созданные для классов, не обладающих способностью к сохранению, до их базовых типов.Это используется с DataContractSerializer.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ProxyDataContractResolver.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Objects.ProxyDataContractResolver" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ProxyDataContractResolver.ResolveName(System.String,System.String,System.Type,System.Runtime.Serialization.DataContractResolver)">
      <summary>При десериализации сопоставляет любую информацию xsi:type с фактическим типом объекта, не учитывающего сохраняемость.</summary>
      <returns>Возвращает тип, с которым сопоставлен объект xsi:type.Возвращает значение null, если элементы, соответствующие xsi:type, не обнаружены.</returns>
      <param name="typeName">Информация xsi:type для сопоставления.</param>
      <param name="typeNamespace">Пространство имен типа xsi:type.</param>
      <param name="declaredType">Объявленный тип.</param>
      <param name="knownTypeResolver">Экземпляр <see cref="T:System.Data.Entity.Core.Objects.ProxyDataContractResolver" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.ProxyDataContractResolver.TryResolveType(System.Type,System.Type,System.Runtime.Serialization.DataContractResolver,System.Xml.XmlDictionaryString@,System.Xml.XmlDictionaryString@)">
      <summary>Во время сериализации сопоставляет фактические типы с данными xsi:type.</summary>
      <returns>Значение true, если тип разрешен. В противном случае — значение false.</returns>
      <param name="type">Фактический тип объекта, не учитывающего сохраняемость.</param>
      <param name="declaredType">Объявленный тип.</param>
      <param name="knownTypeResolver">Экземпляр <see cref="T:System.Data.Entity.Core.Objects.ProxyDataContractResolver" />.</param>
      <param name="typeName">Этот метод возвращает список объявлений xsi:type.</param>
      <param name="typeNamespace">Этот метод возвращает список использованных пространств имен.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.RefreshMode">
      <summary>Определяет различные способы работы с измененными свойствами при обновлении данных (хранимых в памяти) из базы данных.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.RefreshMode.ClientWins">
      <summary>Что касается немодифицированных клиентских объектов, то же поведение, что и для StoreWins.Применительно к измененным клиентским объектам обновляет исходные значения значениями из хранилища, оставляя все значения в клиентском объекте.В следующий раз, когда будет происходить обновление, все клиентские базовые единицы будут рассматриваться как измененные и требующие обновления.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.RefreshMode.StoreWins">
      <summary>Отмена всех изменений на клиенте и обновление значений значениями из хранилища.Исходные клиентские значения обновляются для согласования с хранилищем.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.SaveOptions">
      <summary>Флаги, используемые для изменения поведения ObjectContext.SaveChanges()</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.SaveOptions.AcceptAllChangesAfterSave">
      <summary>После сохранения изменений вызывается метод AcceptAllChangesAfterSave, который сбрасывает отслеживание изменений в ObjectStateManager.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.SaveOptions.DetectChangesBeforeSave">
      <summary>До сохранения изменений вызывается метод DetectChanges для синхронизации значений свойств объектов, прикрепленных к контексту объектов, с данными в ObjectStateManager.</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.SaveOptions.None">
      <summary>Изменения сохраняются без вызова метода DetectChanges и AcceptAllChangesAfterSave.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.ComplexObject">
      <summary>Этот интерфейс, представляющий минимальный интерфейс, который должен быть сущностью в ADO.NET.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.ComplexObject.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Objects.DataClasses.ComplexObject" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.ComplexObject.ReportPropertyChanged(System.String)">
      <summary>Уведомляет средство отслеживания изменений, что свойство сложного объекта изменено.</summary>
      <param name="property">Имя измененного свойства.</param>
      <exception cref="T:System.ArgumentNullException">Параметр property имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.ComplexObject.ReportPropertyChanging(System.String)">
      <summary>Уведомляет средство отслеживания изменений, что ожидается изменение свойства сложного объекта.</summary>
      <param name="property">Имя изменяемого свойства.</param>
      <exception cref="T:System.ArgumentNullException">Параметр property имеет значение null.</exception>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmComplexPropertyAttribute">
      <summary>Атрибут для сложных свойств. Неявные свойства по умолчанию Inherited=True AttributeUsage, AllowMultiple=False. Система метаданных ожидает именно эти свойства и обрабатывает только первый из всех этих атрибутов, даже если их несколько.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmComplexPropertyAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmComplexPropertyAttribute" />.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmComplexTypeAttribute">
      <summary>атрибут для сложных типов</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmComplexTypeAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmComplexTypeAttribute" />.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmEntityTypeAttribute">
      <summary>Атрибут, определяющий базовый класс модели EDM</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmEntityTypeAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmEntityTypeAttribute" />.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmEnumTypeAttribute">
      <summary>Атрибут, указывающий тип перечисления.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmEnumTypeAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmEnumTypeAttribute" />.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmFunctionAttribute">
      <summary>Указывает, что данный метод является прокси-методом для функции модели EDM.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmFunctionAttribute.#ctor(System.String,System.String)">
      <summary>Создает новый экземпляр DbFunctionAttribute.</summary>
      <param name="namespaceName">Пространство имен функций модели EDM, представленной методом с атрибутом.</param>
      <param name="functionName">Имя функции модели EDM, представленной методом с атрибутом.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmPropertyAttribute">
      <summary>Базовый атрибут для свойств, сопоставленных с элементами хранилища.Неявные свойства по умолчанию Inherited=True AttributeUsage, AllowMultiple=False. Система метаданных ожидает именно эти свойства и обрабатывает только первый из всех этих атрибутов, даже если их несколько.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute">
      <summary>Задает связь между двумя типами сущностей на основе ассоциации в концептуальной модели.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.#ctor(System.String,System.String,System.String,System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity,System.Type,System.String,System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity,System.Type)">
      <summary>Создает экземпляр класса <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute" />.</summary>
      <param name="relationshipNamespaceName">Имя пространства имен для ассоциации, в которой участвует эта сущность.</param>
      <param name="relationshipName">Возвращает имя связи, в которой участвует данная сущность.</param>
      <param name="role1Name">Имя роли для типа одного из элементов ассоциации.</param>
      <param name="role1Multiplicity">Значение <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" />, которое указывает кратность одного элемента ассоциации, такую как «один или многие».</param>
      <param name="role1Type">Тип сущности, представляющей собой один из элементов ассоциации.</param>
      <param name="role2Name">Имя роли для типа другого элемента ассоциации.</param>
      <param name="role2Multiplicity">Значение <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" />, которое указывает кратность другого элемента ассоциации, такую как «один или многие».</param>
      <param name="role2Type">Тип сущности, представляющей собой другой элемент ассоциации.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.#ctor(System.String,System.String,System.String,System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity,System.Type,System.String,System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity,System.Type,System.Boolean)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute" />.</summary>
      <param name="relationshipNamespaceName">Имя пространства имен для ассоциации, в которой участвует эта сущность.</param>
      <param name="relationshipName">Возвращает имя связи, в которой участвует данная сущность.</param>
      <param name="role1Name">Имя роли для типа одного из элементов ассоциации.</param>
      <param name="role1Multiplicity">Значение <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" />, которое указывает кратность одного элемента ассоциации, такую как «один или многие».</param>
      <param name="role1Type">Тип сущности, представляющей собой один из элементов ассоциации.</param>
      <param name="role2Name">Имя роли для типа другого элемента ассоциации.</param>
      <param name="role2Multiplicity">Значение <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" />, которое указывает кратность другого элемента ассоциации, такую как «один или многие».</param>
      <param name="role2Type">Тип сущности, представляющей собой другой элемент ассоциации.</param>
      <param name="isForeignKey">Значение, которое указывает, основана ли связь на значении внешнего ключа.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.IsForeignKey">
      <summary>Возвращает логическое значение, которое указывает, основана ли связь на значении внешнего ключа.</summary>
      <returns>Значение true, если связь основана на значении внешнего ключа; в противном случае — false.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.RelationshipName">
      <summary>Имя связи.</summary>
      <returns>Значение <see cref="T:System.String" />, представляющее собой имя связи, которое задано этим атрибутом <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.RelationshipNamespaceName">
      <summary>Пространство имен данной связи.</summary>
      <returns>Строка <see cref="T:System.String" />, содержащая имя пространства имен данной связи.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role1Multiplicity">
      <summary>Кратность на одном конце связи.</summary>
      <returns>Значение <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" />, показывающее кратность.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role1Name">
      <summary>Имя роли для одного из элементов связи.</summary>
      <returns>Объект <see cref="T:System.String" />, который является именем роли.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role1Type">
      <summary>Тип сущности одного из элементов связи.</summary>
      <returns>Объект <see cref="T:System.Type" /> — тип объекта, представляющего собой один из элементов ассоциации.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role2Multiplicity">
      <summary>Кратность на другом конце связи.</summary>
      <returns>Значение <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipMultiplicity" />, показывающее кратность.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role2Name">
      <summary>Имя роли для второго элемента связи.</summary>
      <returns>Объект <see cref="T:System.String" />, который является именем роли.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipAttribute.Role2Type">
      <summary>Тип сущности другого элемента связи.</summary>
      <returns>Объект <see cref="T:System.Type" /> — тип объекта, представляющего собой второй элемент ассоциации.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute">
      <summary>Атрибут, идентифицирующий элементы, определенные для свойств параметра AttributeUsage RelationshipSet Implied по умолчанию Inherited=True AttributeUsage, AllowMultiple=False. Система метаданных ожидает именно эти свойства и обрабатывает только первый из всех этих атрибутов, даже если их несколько.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.#ctor(System.String,System.String,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute" />.</summary>
      <param name="relationshipNamespaceName">Имя пространства имен свойства связи.</param>
      <param name="relationshipName">Имя связи.В имени связи не указано пространство имен.</param>
      <param name="targetRoleName">Имя роли другого элемента связи.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.RelationshipName">
      <summary>Возвращает неполное имя связи.</summary>
      <returns>Имя связи.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.RelationshipNamespaceName">
      <summary>Имя пространства имен свойства навигации.</summary>
      <returns>Объект типа <see cref="T:System.String" />, содержащий имя пространства имен.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmRelationshipNavigationPropertyAttribute.TargetRoleName">
      <summary>Возвращает имя роли в другом элементе связи.</summary>
      <returns>Целевое имя роли указано атрибутом Role другого элемента End в ассоциации, которая определяет эту связь в концептуальной модели.Дополнительные сведения см. в разделе «Ассоциация (модель EDM)».</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmScalarPropertyAttribute">
      <summary>Атрибут скалярных свойств в IEntity.Неявные свойства по умолчанию Inherited=True AttributeUsage, AllowMultiple=False. Система метаданных ожидает именно эти свойства и обрабатывает только первый из всех этих атрибутов, даже если их несколько.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmScalarPropertyAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmScalarPropertyAttribute" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmScalarPropertyAttribute.EntityKeyProperty">
      <summary>Возвращает или задает значение, которое указывает, является ли свойство частью ключа сущности.</summary>
      <returns>Значение, которое указывает, является ли свойство частью ключа сущности.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmScalarPropertyAttribute.IsNullable">
      <summary>Возвращает или задает значение, которое указывает, может ли свойство иметь значение null.</summary>
      <returns>Значение, которое указывает, может ли свойство иметь значение null.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmSchemaAttribute">
      <summary>Атрибут для статических типов</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmSchemaAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmSchemaAttribute" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EdmSchemaAttribute.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EdmSchemaAttribute" /> с уникальным значением для каждой модели, упоминаемой в сборке.</summary>
      <param name="assemblyGuid">Строка, являющаяся уникальным значением идентификатора GUID для модели в сборке.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EdmTypeAttribute">
      <summary>Базовый атрибут для схематизированных типов</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmTypeAttribute.Name">
      <summary>Имя типа в концептуальной схеме, сопоставляемого с классом, к которому применен этот атрибут.</summary>
      <returns>Объект типа <see cref="T:System.String" />, содержащий имя.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EdmTypeAttribute.NamespaceName">
      <summary>Имя пространства имен типа объекта сущности или сложного типа в концептуальной схеме, которая сопоставляется с этим типом.</summary>
      <returns>Объект типа <see cref="T:System.String" />, содержащий имя пространства имен.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1">
      <summary>Коллекция сущностей, моделирующая определенную конструкцию модели EDM, которая может представлять собой либо все сущности определенного типа, либо сущности, участвующие в определенной связи.</summary>
      <typeparam name="TEntity">Тип сущностей в этой коллекции.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Add(`0)">
      <summary>Добавляет объект в коллекцию.</summary>
      <param name="item">Объект для добавления в коллекцию.сущность должна реализовывать <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships" />.</param>
      <exception cref="T:System.ArgumentNullException">Объект entity имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Attach(System.Collections.Generic.IEnumerable{`0})">
      <summary>Определяет связи между объектом и коллекцией связанных объектов в контексте объекта.</summary>
      <param name="entities">Коллекция объектов в контексте объекта, которые связаны с исходным объектом.</param>
      <exception cref="T:System.ArgumentNullException">Коллекция entities имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Исходный объект или объект в коллекции сущностей имеет значение NULL либо не находится в состоянии <see cref="F:System.Data.Entity.EntityState.Unchanged" /> или <see cref="F:System.Data.Entity.EntityState.Modified" />.-или-Связь не может быть задана на основе метаданных модели EDM.Это может происходить, если ассоциация в концептуальной схеме не поддерживает наличие связи между двумя типами.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Attach(`0)">
      <summary>Определяет связь между двумя присоединенными объектами в контексте объекта.</summary>
      <param name="entity">Присоединяемый объект.</param>
      <exception cref="T:System.ArgumentNullException">Если параметр entity имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Если объект entity не может быть связан с исходным объектом.Это может произойти, если ассоциация в концептуальной схеме не поддерживает связь между двумя типами.-или-Если тот или иной из объектов имеет значение NULL либо не находится в состоянии <see cref="F:System.Data.Entity.EntityState.Unchanged" /> или <see cref="F:System.Data.Entity.EntityState.Modified" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Clear">
      <summary>Удаляет все сущности из коллекции.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Contains(`0)">
      <summary>Определяет, существует ли в коллекции указанный объект.</summary>
      <returns>Значение true, если объект найден в коллекции <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />; в противном случае — false.</returns>
      <param name="item">Объект, который должен быть найден в коллекции <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.CopyTo(`0[],System.Int32)">
      <summary>Копирует все содержимое коллекции в массив, начиная с указанного индекса в массиве назначения.</summary>
      <param name="array">Массив для копирования данных.</param>
      <param name="arrayIndex">Индекс с отсчетом от нуля в массиве, с которого начинается копирование.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Count">
      <summary>Возвращает число объектов, содержащихся в коллекции.</summary>
      <returns>Количество элементов, содержащихся в коллекции <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.CreateSourceQuery">
      <summary>Возвращает запрос объектов, в результате выполнения которого возвращается набор объектов, существующих в текущей коллекции.</summary>
      <returns>Запрос <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />, который представляет коллекцию сущностей.</returns>
      <exception cref="T:System.InvalidOperationException">Если объект находится в состоянии <see cref="F:System.Data.Entity.EntityState.Added" /> или если объект находится в состоянии <see cref="F:System.Data.Entity.EntityState.Detached" /> с <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />, отличным от <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.GetEnumerator">
      <summary>Возвращает перечислитель, используемый для прохода по объектам в коллекции.</summary>
      <returns>Перечислитель <see cref="T:System.Collections.IEnumerator" />, который выполняет итерации по набору значений, кэшированных в коллекции <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.IsReadOnly">
      <summary>Возвращает значение, которое указывает, допускает ли коллекция <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> только чтение.</summary>
      <returns>Всегда возвращает значение false.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Load(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Загружает связанные объекты в коллекцию, используя заданный параметр слияния.</summary>
      <param name="mergeOption">Указывает способ слияния объектов из этой коллекции с объектами, которые могли быть возвращены из предыдущих запросов к тому же контексту <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.LoadAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>Асинхронная загрузка связанных сущностей в локальный связанный элемент с параметром слияния по умолчанию.</summary>
      <returns>Задача, представляющая асинхронную операцию.</returns>
      <param name="mergeOption">Параметр слияния.</param>
      <param name="cancellationToken">Токен CancellationToken, который нужно отслеживать во время ожидания выполнения задачи.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.OnCollectionDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>Используется внутренне для десериализации объектов сущности.</summary>
      <param name="context">Контекст потоковой передачи.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.OnSerializing(System.Runtime.Serialization.StreamingContext)">
      <summary>Используется внутренне для сериализации объектов сущности.</summary>
      <param name="context">Контекст потоковой передачи.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.Remove(`0)">
      <summary>Удаляет объект из коллекции и помечает связь к удалению.</summary>
      <returns>Возвращает значение true, если элемент был успешно удален, и значение false — в противном случае.</returns>
      <param name="item">Объект, удаляемый из коллекции.</param>
      <exception cref="T:System.ArgumentNullException">Объект entity имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Объект сущности не присоединен к одному и тому же контексту объекта.-или-Объект сущности не имеет допустимого диспетчера связей.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает перечислитель, который используется для выполнения итераций по набору значений, кэшированных в коллекции <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />.</summary>
      <returns>Перечислитель <see cref="T:System.Collections.IEnumerator" />, который выполняет итерации по набору значений, кэшированных в коллекции <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Реализация IListSource.ContainsListCollection.Всегда возвращает значение false.Это означает, что возвращаемый нами IList — тот, что содержит наши фактические данные, а не список коллекций.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1.System#ComponentModel#IListSource#GetList">
      <summary>Возвращает коллекцию в виде интерфейса <see cref="T:System.Collections.IList" />, используемого для привязки данных.</summary>
      <returns>Интерфейс <see cref="T:System.Collections.IList" /> объектов сущностей.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EntityObject">
      <summary>Этот класс служит основой для всех указанных классов EntityObject.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityObject.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityObject" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityObject.EntityKey">
      <summary>Возвращает или задает ключ для этого объекта.</summary>
      <returns>Ключ <see cref="T:System.Data.Entity.Core.EntityKey" /> для этого объекта.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityObject.EntityState">
      <summary>Возвращает состояние сущности объекта.</summary>
      <returns>Состояние <see cref="T:System.Data.Entity.EntityState" /> этого объекта.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityObject.ReportPropertyChanged(System.String)">
      <summary>Уведомляет объект отслеживания изменений об изменении свойства.</summary>
      <param name="property">Имя измененного свойства.</param>
      <exception cref="T:System.ArgumentNullException">Параметр property имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityObject.ReportPropertyChanging(System.String)">
      <summary>Уведомляет объект отслеживания изменений об отложенном изменении свойства.</summary>
      <param name="property">Имя изменяемого свойства.</param>
      <exception cref="T:System.ArgumentNullException">Параметр property имеет значение null.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityObject.System#Data#Entity#Core#Objects#DataClasses#IEntityWithChangeTracker#SetChangeTracker(System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker)">
      <summary>Используется объектом ObjectStateManager для присоединения этого объекта EntityObject к кэшу или его отсоединению от кэша.</summary>
      <param name="changeTracker">Ссылка на ObjectStateEntry, содержащая эту сущность</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityObject.System#Data#Entity#Core#Objects#DataClasses#IEntityWithRelationships#RelationshipManager">
      <summary>Возвращает контейнер для создаваемых с задержкой объектов свойств навигации по связям, коллекций и ссылок.</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference">
      <summary>Моделирует элемент связи с кратностью 1.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityReference.EntityKey">
      <summary>Возвращает ключ для связанного объекта.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.EntityKey" />, который является ключом для связанного объекта.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1">
      <summary>Моделирует элемент связи с кратностью 1.</summary>
      <typeparam name="TEntity">Тип сущности, на который указывает ссылка.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.#ctor">
      <summary>Создает новый экземпляр <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.Attach(`0)">
      <summary>Создает связь «многие к одному» или «один к одному» между двумя объектами в контексте объекта.</summary>
      <param name="entity">Присоединяемый объект.</param>
      <exception cref="T:System.ArgumentNullException">Если параметр entity имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Если объект entity не может быть связан с текущим связанным элементом.Это может происходить, если ассоциация в концептуальной схеме не поддерживает наличие связи между двумя типами.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.CreateSourceQuery">
      <summary>Создает эквивалентный запрос объектов, возвращающий связанный объект.</summary>
      <returns>Запрос <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />, возвращающий связанный объект.</returns>
      <exception cref="T:System.InvalidOperationException">Если объект находится в состоянии <see cref="F:System.Data.Entity.EntityState.Added" /> или если объект находится в состоянии <see cref="F:System.Data.Entity.EntityState.Detached" /> с <see cref="P:System.Data.Entity.Core.Objects.ObjectQuery.MergeOption" />, отличным от <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.Load(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Загружает связанный объект для этого объекта <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> с указанным параметром слияния.</summary>
      <param name="mergeOption">Указывает способ возврата объекта, если он уже существует в контексте <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />.</param>
      <exception cref="T:System.InvalidOperationException">Источник ссылки <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> имеет значение NULL, или запрос возвратил больше одного связанного элемента, или запрос возвратил нуль связанных элементов, а ожидался один связанный элемент.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.LoadAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>Асинхронная загрузка связанных сущностей в локальный связанный элемент с параметром слияния по умолчанию.</summary>
      <returns>Загруженная в связанный элемент связанная сущность или сущности.</returns>
      <param name="mergeOption">Параметры слияния.</param>
      <param name="cancellationToken">Токен CancellationToken, который нужно отслеживать во время ожидания выполнения задачи.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.OnRefDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>Данный метод используется внутренним механизмом для сериализации связанных объектов сущности.</summary>
      <param name="context">Сериализованный поток.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.OnSerializing(System.Runtime.Serialization.StreamingContext)">
      <summary>Данный метод используется внутренним механизмом для сериализации связанных объектов сущности.</summary>
      <param name="context">Сериализованный поток.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1.Value">
      <summary>Возвращает или задает связанный объект, возвращенный этой ссылкой <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />.</summary>
      <returns>Объект, возвращаемый этим объектом <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker">
      <summary>Этот интерфейс реализуется объектом отслеживания изменений и используется классами данных изменений отчета</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanged(System.String,System.Object,System.String)">
      <summary>Уведомляет средство отслеживания изменений, что свойство сложного типа изменено.</summary>
      <param name="entityMemberName">Имя сложного свойства измененного типа сущности.</param>
      <param name="complexObject">Сложный тип, содержащий измененное свойство.</param>
      <param name="complexObjectMemberName">Имя измененного свойства сложного типа.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityComplexMemberChanging(System.String,System.Object,System.String)">
      <summary>Уведомляет объект отслеживания изменений об отложенном изменении сложного свойства.</summary>
      <param name="entityMemberName">Имя свойства сущности верхнего уровня, которое изменяется.</param>
      <param name="complexObject">Сложный тип, который содержит изменяющееся свойство.</param>
      <param name="complexObjectMemberName">Имя свойства, изменяющегося в сложном типе.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityMemberChanged(System.String)">
      <summary>Уведомляет средство отслеживания изменений, что свойство типа сущности изменено.</summary>
      <param name="entityMemberName">Имя измененного свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityMemberChanging(System.String)">
      <summary>Уведомляет средство отслеживания изменений о предстоящем изменении свойства типа сущности.</summary>
      <param name="entityMemberName">Имя изменяемого свойства.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker.EntityState">
      <summary>Возвращает текущее состояние отслеживаемого объекта.</summary>
      <returns>Значение <see cref="T:System.Data.Entity.EntityState" />, представляющее собой состояние отслеживаемого объекта. Дополнительные сведения см. в разделе «Разрешение удостоверения, состояние управления, отслеживание изменений и изменения отслеживания в сущностях POCO».</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithChangeTracker">
      <summary>Минимальный интерфейс, который класс данных должен реализовывать для того, чтобы им мог управлять объект отслеживания изменений.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IEntityWithChangeTracker.SetChangeTracker(System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker)">
      <summary>Возвращает или задает интерфейс <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker" />, используемый для формирования сообщений об изменениях.</summary>
      <param name="changeTracker">Интерфейс <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityChangeTracker" />, используемый для формирования сообщений об изменениях.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithKey">
      <summary>Интерфейс, определяющий сущность, которая содержит ключ.</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IEntityWithKey.EntityKey">
      <summary>Возвращает или задает ключ <see cref="T:System.Data.Entity.Core.EntityKey" /> для экземпляров типов сущностей, реализующих этот интерфейс.</summary>
      <returns>Значение <see cref="T:System.Data.Entity.Core.EntityKey" /> для экземпляров типов сущностей, которые реализуют этот интерфейс.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships">
      <summary>Интерфейс, который должен реализовывать класс данных, если он предоставляет связи</summary>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships.RelationshipManager">
      <summary>Возвращает диспетчер связей, который управляет связями экземпляра типа сущности.</summary>
      <returns>Диспетчер связей <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" /> для этой сущности.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd">
      <summary>Представляет один элемент связи.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Add(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Добавляет объект в связанный элемент.</summary>
      <param name="entity">Объект для добавления в коллекцию.сущность должна реализовывать <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Add(System.Object)">
      <summary>Добавляет объект в связанный элемент.</summary>
      <param name="entity">Объект для добавления в коллекцию.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Attach(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Определяет связь между двумя присоединенными объектами.</summary>
      <param name="entity">Присоединяемый объект.сущность должна реализовывать <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Attach(System.Object)">
      <summary>Определяет связь между двумя присоединенными объектами.</summary>
      <param name="entity">Присоединяемый объект.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.CreateSourceQuery">
      <summary>Возвращает интерфейс <see cref="T:System.Collections.IEnumerable" />, который представляет объекты, принадлежащие к связанному элементу.</summary>
      <returns>Интерфейс <see cref="T:System.Collections.IEnumerable" />, который представляет объекты, принадлежащие связанному элементу.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.GetEnumerator">
      <summary>Возвращает интерфейс <see cref="T:System.Collections.IEnumerator" />, проходящий по коллекции связанных объектов.</summary>
      <returns>Значение <see cref="T:System.Collections.IEnumerator" />, которое выполняет итерации по коллекции связанных объектов.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.IsLoaded">
      <summary>Получает или задает значение, указывающее, загружена ли сущность (для <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference" />) или все сущности в коллекции (для <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />) из базы данных.</summary>
      <returns>Значение true, если загружены все связанные сущности или флаг IsLoaded явно установлен равным true; в противном случае — значение false.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Load">
      <summary>Загружает связанный объект или объекты в этот связанный элемент с параметром слияния по умолчанию.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Load(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Загружает связанный объект или объекты в связанный элемент с указанным параметром слияния.</summary>
      <param name="mergeOption">Параметр <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />, используемый для слияния объектов в существующую коллекцию <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.LoadAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>Асинхронно загружает связанные объекты в связанный элемент с указанным параметром слияния.</summary>
      <returns>Задача, представляющая асинхронную операцию.</returns>
      <param name="mergeOption">Параметр <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />, используемый для слияния объектов в существующую коллекцию <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.LoadAsync(System.Threading.CancellationToken)">
      <summary>Асинхронно загружает связанные объекты в этот связанный элемент с предусмотренным по умолчанию параметром слияния.</summary>
      <returns>Задача, представляющая асинхронную операцию.</returns>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.RelationshipName">
      <summary>Возвращает имя связи, в которой участвует этот связанный элемент.</summary>
      <returns>Имя связи, в которой участвует этот элемент <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" />.В имени связи не указано пространство имен.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.RelationshipSet">
      <summary>Возвращает ссылку на метаданные для связанного элемента.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" />, который содержит метаданные для элемента связи.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Remove(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Удаляет объект из коллекции объектов связанного элемента.</summary>
      <returns>Значение true, если сущность была успешно удалена; false, если сущность не была частью элемента <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" />.</returns>
      <param name="entity">Объект, удаляемый из коллекции.сущность должна реализовывать <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.Remove(System.Object)">
      <summary>Удаляет объект из коллекции объектов связанного элемента.</summary>
      <returns>Значение true, если сущность была успешно удалена; false, если сущность не была частью элемента <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" />.</returns>
      <param name="entity">Объект, который должен быть удален из коллекции.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.SourceRoleName">
      <summary>Возвращает имя роли в исходном элементе связи.</summary>
      <returns>Имя роли исходного элемента связи.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd.TargetRoleName">
      <summary>Возвращает имя роли в целевом элементе связи.</summary>
      <returns>Имя роли в целевом элементе связи.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd">
      <summary>Базовый класс для EntityCollection и EntityReference</summary>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.AssociationChanged">
      <summary>Происходит, если изменяется связанный элемент.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.GetEnumerator">
      <summary>Возвращает интерфейс <see cref="T:System.Collections.IEnumerator" />, проходящий по коллекции связанных объектов.</summary>
      <returns>Значение <see cref="T:System.Collections.IEnumerator" />, которое выполняет итерации по коллекции связанных объектов.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.IsLoaded">
      <summary>Возвращает значение, показывающее, все ли связанные объекты загружены.</summary>
      <returns>Принимает значение true, если связанный элемент содержит все связанные объекты из базы данных, и значение false — в противном случае.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load">
      <summary>Загружает связанные объекты в связанный элемент с предусмотренным по умолчанию параметром слияния.</summary>
      <exception cref="T:System.InvalidOperationException">Если исходный объект был получен с использованием запроса <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> и <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> не представляет собой <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> или связанные объекты уже загружены либо если исходный объект не присоединен к <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> или исходный объект отслеживается, но находится в состоянии <see cref="F:System.Data.Entity.EntityState.Added" /> или <see cref="F:System.Data.Entity.EntityState.Deleted" /> либо <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />, используемое для <see cref="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load" />, представляет собой <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load(System.Data.Entity.Core.Objects.MergeOption)">
      <summary>Загружает объекты из связанного элемента с указанным параметром слияния.</summary>
      <param name="mergeOption">Параметр <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />, используемый для слияния объектов в существующую коллекцию <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />.</param>
      <exception cref="T:System.InvalidOperationException">Если исходный объект был получен с использованием запроса <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> и <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> не представляет собой <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> или связанные объекты уже загружены либо если исходный объект не присоединен к <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> или исходный объект отслеживается, но находится в состоянии <see cref="F:System.Data.Entity.EntityState.Added" /> или <see cref="F:System.Data.Entity.EntityState.Deleted" /> либо <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />, используемое для <see cref="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load" />, представляет собой <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.LoadAsync(System.Data.Entity.Core.Objects.MergeOption,System.Threading.CancellationToken)">
      <summary>Асинхронно загружает объекты из связанного элемента с указанным параметром слияния.</summary>
      <returns>Задача, представляющая асинхронную операцию.</returns>
      <param name="mergeOption">Параметр <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />, используемый для слияния объектов в существующую коллекцию <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <exception cref="T:System.InvalidOperationException">Если исходный объект был получен с использованием запроса <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> и <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> не представляет собой <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> или связанные объекты уже загружены либо если исходный объект не присоединен к <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> или исходный объект отслеживается, но находится в состоянии <see cref="F:System.Data.Entity.EntityState.Added" /> или <see cref="F:System.Data.Entity.EntityState.Deleted" /> либо <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />, используемое для <see cref="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load" />, представляет собой <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.LoadAsync(System.Threading.CancellationToken)">
      <summary>Асинхронно загружает связанные объекты в связанный элемент с предусмотренным по умолчанию параметром слияния.</summary>
      <returns>Задача, представляющая асинхронную операцию.</returns>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <exception cref="T:System.InvalidOperationException">Если исходный объект был получен с использованием запроса <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> и <see cref="T:System.Data.Entity.Core.Objects.MergeOption" /> не представляет собой <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" /> или связанные объекты уже загружены либо если исходный объект не присоединен к <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> или исходный объект отслеживается, но находится в состоянии <see cref="F:System.Data.Entity.EntityState.Added" /> или <see cref="F:System.Data.Entity.EntityState.Deleted" /> либо <see cref="T:System.Data.Entity.Core.Objects.MergeOption" />, используемое для <see cref="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.Load" />, представляет собой <see cref="F:System.Data.Entity.Core.Objects.MergeOption.NoTracking" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>Используется внутренним образом для десериализации объектов сущностей наряду с экземплярами <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />.</summary>
      <param name="context">Сериализованный поток.</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.RelationshipName">
      <summary>Возвращает имя связи, в которой участвует этот связанный элемент.</summary>
      <returns>Имя связи, в которой участвует этот элемент <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd" />.В имени связи не указано пространство имен.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.RelationshipSet">
      <summary>Возвращает ссылку на метаданные для связанного элемента.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.RelationshipSet" />, который содержит метаданные для элемента связи.</returns>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.SourceRoleName">
      <summary>Возвращает имя роли в исходном элементе связи.</summary>
      <returns>Объект типа <see cref="T:System.String" />, содержащий имя роли.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Add(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Добавляет сущность в связанный элемент.Этот метод работает точно так же, как метод Add(object).Поддерживается для обеспечения обратной совместимости с предыдущими версиями IRelatedEnd.</summary>
      <param name="entity">Экземпляр сущности для добавления в связанный элемент.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Add(System.Object)">
      <summary>Добавляет сущность в связанный элемент.Если владелец присоединен к кэшу, то все подключенные элементы добавляются в кэш объектов и их соответствующие связи также добавляются в ObjectStateManager.Элемент RelatedEnd связи также фиксируется.</summary>
      <param name="entity">Экземпляр сущности для добавления в связанный элемент.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Attach(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Присоединяет сущность к связанному элементу.Этот метод работает точно так же, как метод Attach(object).Поддерживается для обеспечения обратной совместимости с предыдущими версиями IRelatedEnd.</summary>
      <param name="entity">Сущность для присоединения к связанному элементу</param>
      <exception cref="T:System.ArgumentNullException">Возникает, когда <paramref name="entity" /> имеет значение NULL.</exception>
      <exception cref="T:System.InvalidOperationException">Возникает, если сущность невозможно связать через текущий элемент связи.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Attach(System.Object)">
      <summary>Присоединяет сущность к связанному элементу.Если связанный элемент уже заполнен целиком или частично, метод выполнит слияние существующих сущностей с данными.Предполагается, что сущность не образует полный набор связанных сущностей.Владелец и все прошедшие внутрь сущности должны иметь неизменяемое или измененное состояние.Удаленные элементы допускаются только в случае, когда диспетчер состояний уже отслеживает данный экземпляр связи.</summary>
      <param name="entity">Сущность для присоединения к связанному элементу</param>
      <exception cref="T:System.ArgumentNullException">Возникает, когда <paramref name="entity" /> имеет значение NULL.</exception>
      <exception cref="T:System.InvalidOperationException">Возникает, если сущность невозможно связать через текущий элемент связи.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#CreateSourceQuery">
      <summary>Возвращает интерфейс <see cref="T:System.Collections.IEnumerable" />, который представляет объекты, принадлежащие к связанному элементу.</summary>
      <returns>Интерфейс <see cref="T:System.Collections.IEnumerable" />, который представляет объекты, принадлежащие связанному элементу.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Remove(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Удаляет сущность из связанного элемента.Этот метод работает точно так же, как метод Remove(object).Поддерживается для обеспечения обратной совместимости с предыдущими версиями IRelatedEnd.</summary>
      <returns>Возвращает значение true, если сущность была удалена успешно, и значение false, если сущность не была частью элемента RelatedEnd.</returns>
      <param name="entity">Экземпляр сущности для удаления из связанного элемента</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.System#Data#Entity#Core#Objects#DataClasses#IRelatedEnd#Remove(System.Object)">
      <summary>Удаляет сущность из связанного элемента.Если владелец присоединен к кэшу, помечает связь к удалению, и если связь меток для удаления составная, также помечает сущность к удалению.</summary>
      <returns>Возвращает значение true, если сущность была удалена успешно, и значение false, если сущность не была частью элемента RelatedEnd.</returns>
      <param name="entity">Экземпляр сущности для удаления из связанного элемента</param>
    </member>
    <member name="P:System.Data.Entity.Core.Objects.DataClasses.RelatedEnd.TargetRoleName">
      <summary>Возвращает имя роли в целевом элементе связи.</summary>
      <returns>Объект типа <see cref="T:System.String" />, содержащий имя роли.</returns>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipKind">
      <summary>Определяет тип связи</summary>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.DataClasses.RelationshipKind.Association">
      <summary>Связь — это ассоциация</summary>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager">
      <summary>Контейнер для создаваемых с задержкой объектов свойств навигации по связям (коллекций и ссылок).</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.Create(System.Data.Entity.Core.Objects.DataClasses.IEntityWithRelationships)">
      <summary>Создает новый объект <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />.</summary>
      <returns>Требуемый <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />.</returns>
      <param name="owner">Ссылка на сущность, вызывающую этот метод.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.GetAllRelatedEnds">
      <summary>Возвращает перечисление всех связанных элементов, управляемых диспетчером связей.</summary>
      <returns>Интерфейс <see cref="T:System.Collections.Generic.IEnumerable`1" /> объектов, который реализует <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" />.Возвращается пустое перечисление, если связи еще не заполнены.</returns>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.GetRelatedCollection``1(System.String,System.String)">
      <summary>Возвращает коллекцию <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> связанных объектов с заданными именем связи и целевой роли.</summary>
      <returns>Коллекция <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> связанных объектов.</returns>
      <param name="relationshipName">Имя связи для навигации.В имени связи не указано пространство имен.</param>
      <param name="targetRoleName">Имя целевой роли для навигации.Показывает направление перемещения по связи.</param>
      <typeparam name="TTargetEntity">Тип возвращенной ссылки <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />.</typeparam>
      <exception cref="T:System.InvalidOperationException">Указанной ролью возвращена коллекция <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> вместо ссылки <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.GetRelatedEnd(System.String,System.String)">
      <summary>Возвращает коллекцию <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> или <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> правильного типа для указанной целевой роли в связи.</summary>
      <returns>
        <see cref="T:System.Data.Entity.Core.Objects.DataClasses.IRelatedEnd" />, представляющий полученную <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> или <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />.</returns>
      <param name="relationshipName">Имя связи, в которой определен параметр targetRoleName.В имени связи не указано пространство имен.</param>
      <param name="targetRoleName">Целевая роль, используемая для получения другого элемента relationshipName.</param>
      <exception cref="T:System.ArgumentNullException">relationshipName или targetRoleName имеет значение null.</exception>
      <exception cref="T:System.InvalidOperationException">Исходный тип не соответствует типу владельца.</exception>
      <exception cref="T:System.ArgumentException">Значение targetRoleName недействительно или не позволяет определить тип связи в метаданных.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.GetRelatedReference``1(System.String,System.String)">
      <summary>Возвращает ссылку <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> для связанного объекта, используя заданное сочетание имени связи и целевой роли.</summary>
      <returns>Ссылка <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> связанного объекта.</returns>
      <param name="relationshipName">Имя связи для навигации.В имени связи не указано пространство имен.</param>
      <param name="targetRoleName">Имя целевой роли для навигации.Показывает направление перемещения по связи.</param>
      <typeparam name="TTargetEntity">Тип возвращенной ссылки <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />.</typeparam>
      <exception cref="T:System.InvalidOperationException">Указанной ролью возвращена коллекция <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityCollection`1" /> вместо ссылки <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.InitializeRelatedCollection``1(System.String,System.String,System.Data.Entity.Core.Objects.DataClasses.EntityCollection{``0})">
      <summary>Использует имеющуюся коллекцию EntityCollection, созданную конструктором по умолчанию, и инициализирует ее с использованием предоставленных имен связи и целевой роли.Этот метод предназначен для использования только при десериализации и вызовет исключение, если указанная коллекция EntityCollection уже инициализирована, или если диспетчер связей уже присоединен к ObjectContext.</summary>
      <param name="relationshipName">Имя связи.</param>
      <param name="targetRoleName">Имя целевой роли.</param>
      <param name="entityCollection">Существующее значение EntityCollection.</param>
      <typeparam name="TTargetEntity">Тип сущности, представленной targetRoleName</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.InitializeRelatedReference``1(System.String,System.String,System.Data.Entity.Core.Objects.DataClasses.EntityReference{``0})">
      <summary>Использует имеющуюся ссылку EntityReference, созданную конструктором по умолчанию, и инициализирует ее с использованием предоставленных имен связи и целевой роли.Этот метод предназначен для использования только во время десериализации и вызывает исключение, если предоставленное значение EntityReference уже инициализировано, если диспетчер связей уже содержит связь с этим именем и целевую роль или если диспетчер связей уже привязан к ObjectContext.W</summary>
      <param name="relationshipName">Имя связи.</param>
      <param name="targetRoleName">Имя роли связанного элемента.</param>
      <param name="entityReference">Объект <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> для инициализации.</param>
      <typeparam name="TTargetEntity">Тип <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" />, подлежащий инициализации.</typeparam>
      <exception cref="T:System.InvalidOperationException">Если предоставленная ссылка <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityReference`1" /> уже инициализирована.-или-Если диспетчер связей уже привязан к контексту <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> или если диспетчер связей уже содержит связь с этим именем и целевой ролью.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.OnDeserialized(System.Runtime.Serialization.StreamingContext)">
      <summary>Используется внутренним образом для десериализации объектов сущностей наряду с экземплярами <see cref="T:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager" />.</summary>
      <param name="context">Сериализованный поток.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.RelationshipManager.OnSerializing(System.Runtime.Serialization.StreamingContext)">
      <summary>Вызывается службами объектов для подготовки <see cref="T:System.Data.Entity.Core.EntityKey" /> к двоичной сериализации с сериализованной связью.</summary>
      <param name="context">Описывает источник и назначение заданного потока сериализации и обеспечивает дополнительный контекст, определяемый вызывающим объектом.</param>
    </member>
    <member name="T:System.Data.Entity.Core.Objects.DataClasses.StructuralObject">
      <summary>Этот класс содержит общие методы, необходимые для объекта даты.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Core.Objects.DataClasses.StructuralObject" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.BinaryEquals(System.Byte[],System.Byte[])">
      <summary>Определяет, содержат ли указанные массивы байтов одинаковые значения.</summary>
      <returns>Значение true, если оба массива имеют одну и ту же длину и содержат одни и те же байтовые значения или если оба массива равны NULL; в противном случае — false.</returns>
      <param name="first">Значение первого массива байтов, подлежащего сравнению.</param>
      <param name="second">Второй байтовый массив, подлежащий сравнению.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.DefaultDateTimeValue">
      <summary>Возвращает минимальное значение даты и времени, поддерживаемое источником данных.</summary>
      <returns>Значение <see cref="T:System.DateTime" />, представляющее собой минимальное значение даты и времени, которое поддерживается источником данных.</returns>
    </member>
    <member name="F:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.EntityKeyPropertyName">
      <summary>Открытое имя константы, используемое для отслеживания изменений. Предоставление этого определения позволяет пользователям использовать эту константу вместо жесткого программирования строки.Это помогает гарантировать правильность имени свойства, а также ускоряет сравнение в местах, где ведется поиск этой конкретной строки.Пользователь по-прежнему может напрямую использовать вместо константы строку с учетом регистра, это просто немного снизит производительность при сравнении.Если взять имя в символы дефиса (-), то оно гарантированно не будет конфликтовать со свойством фактических данных, поскольку -EntityKey- не является допустимым именем идентификатора</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.GetValidValue(System.Byte[])">
      <summary>Возвращает копию значения текущего байта.</summary>
      <returns>Копия текущего значения <see cref="T:System.Byte" />.</returns>
      <param name="currentValue">Текущее значение массива байт.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.GetValidValue``1(``0,System.String,System.Boolean,System.Boolean)">
      <summary>Возвращает сложный тип для указанного свойства.</summary>
      <returns>Объект сложного типа для свойства.</returns>
      <param name="currentValue">Сложный объект, который наследует от сложного объекта.</param>
      <param name="property">Имя сложного свойства, которое является сложным объектом.</param>
      <param name="isNullable">Указывает, допускает ли тип значения NULL.</param>
      <param name="isInitialized">Указывает, инициализирован ли тип.</param>
      <typeparam name="T">Тип требуемого сложного объекта.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.OnPropertyChanged(System.String)">
      <summary>Создает событие <see cref="E:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.PropertyChanged" />.</summary>
      <param name="property">Имя измененного свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.OnPropertyChanging(System.String)">
      <summary>Создает событие <see cref="E:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.PropertyChanging" />.</summary>
      <param name="property">Имя изменяемого свойства.</param>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.PropertyChanged">
      <summary>Уведомление о том, что свойство было изменено.</summary>
    </member>
    <member name="E:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.PropertyChanging">
      <summary>Уведомление о том, что свойство будет изменено.</summary>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.ReportPropertyChanged(System.String)">
      <summary>Вызывает событие, которое используется для уведомления, что произошло изменение свойства.</summary>
      <param name="property">Имя измененного свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.ReportPropertyChanging(System.String)">
      <summary>Вызывает событие, которое используется для уведомления, что ожидается изменение свойства.</summary>
      <param name="property">Имя изменяемого свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Boolean)">
      <summary>Проверяет, является ли значение <see cref="T:System.Boolean" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.Boolean" />.</returns>
      <param name="value">Логическое значение.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Boolean,System.String)">
      <summary>Проверяет, является ли значение <see cref="T:System.Boolean" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.Boolean" />.</returns>
      <param name="value">Логическое значение.</param>
      <param name="propertyName">Имя проверяемого свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte)">
      <summary>Проверяет, является ли значение <see cref="T:System.Byte" />, заданное для свойства, допустимым.</summary>
      <returns>Заданное значение <see cref="T:System.Byte" />.</returns>
      <param name="value">Проверяемое значение.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte,System.String)">
      <summary>Проверяет, является ли значение <see cref="T:System.Byte" />, заданное для свойства, допустимым.</summary>
      <returns>Заданное значение <see cref="T:System.Byte" />.</returns>
      <param name="value">Значение типа <see cref="T:System.Byte" />.</param>
      <param name="propertyName">Имя проверяемого свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte[],System.Boolean)">
      <summary>Проверяет, является ли значение <see cref="T:System.Byte[]" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.Byte" />.</returns>
      <param name="value">Задаваемое значение.</param>
      <param name="isNullable">Указывает, допускает ли свойство значения NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Byte[],System.Boolean,System.String)">
      <summary>Проверяет, является ли значение <see cref="T:System.Byte[]" />, заданное для свойства, допустимым.</summary>
      <returns>Проверяемое значение <see cref="T:System.Byte" />.</returns>
      <param name="value">Значение, передаваемое в метод задания свойства.</param>
      <param name="isNullable">Флаг, указывающий, может ли это свойство принимать значение NULL.</param>
      <param name="propertyName">Имя проверяемого свойства.</param>
      <exception cref="T:System.Data.ConstraintException">Если значение равно NULL для значения, не допускающего NULL.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Entity.Spatial.DbGeography,System.Boolean)">
      <summary>Проверяет, имеет ли свойство значение, отличное от NULL, и вызывает исключение, если оно является таковым.</summary>
      <returns>Задаваемое значение <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</returns>
      <param name="value">Проверяемое значение <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</param>
      <param name="isNullable">Флаг, указывающий, может ли это свойство принимать значение NULL.</param>
      <exception cref="T:System.Data.ConstraintException">Свойство, не допускающее значений NULL, имеет значение NULL.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Entity.Spatial.DbGeography,System.Boolean,System.String)">
      <summary>Проверяет, имеет ли свойство значение, отличное от NULL, и вызывает исключение, если оно является таковым.</summary>
      <returns>Задаваемое значение <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</returns>
      <param name="value">Проверяемое значение <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</param>
      <param name="isNullable">Флаг, указывающий, может ли это свойство принимать значение NULL.</param>
      <param name="propertyName">Имя проверяемого свойства.</param>
      <exception cref="T:System.Data.ConstraintException">Свойство, не допускающее значений NULL, имеет значение NULL.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Entity.Spatial.DbGeometry,System.Boolean)">
      <summary>Проверяет, имеет ли свойство значение, отличное от NULL, и вызывает исключение, если оно является таковым.</summary>
      <returns>Задаваемое значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</returns>
      <param name="value">Проверяемое значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</param>
      <param name="isNullable">Флаг, указывающий, может ли это свойство принимать значение NULL.</param>
      <exception cref="T:System.Data.ConstraintException">Свойство, не допускающее значений NULL, имеет значение NULL.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Data.Entity.Spatial.DbGeometry,System.Boolean,System.String)">
      <summary>Проверяет, имеет ли свойство значение, отличное от NULL, и вызывает исключение, если оно является таковым.</summary>
      <returns>Задаваемое значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</returns>
      <param name="value">Проверяемое значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</param>
      <param name="isNullable">Флаг, указывающий, может ли это свойство принимать значение NULL.</param>
      <param name="propertyName">Имя проверяемого свойства.</param>
      <exception cref="T:System.Data.ConstraintException">Свойство, не допускающее значений NULL, имеет значение NULL.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTime)">
      <summary>Проверяет, является ли значение <see cref="T:System.DateTime" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.DateTime" />.</returns>
      <param name="value">Значение типа <see cref="T:System.DateTime" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTime,System.String)">
      <summary>Проверяет, является ли значение <see cref="T:System.DateTime" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.DateTime" />.</returns>
      <param name="value">Значение типа <see cref="T:System.DateTime" />.</param>
      <param name="propertyName">Имя проверяемого свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTimeOffset)">
      <summary>Проверяет, является ли значение <see cref="T:System.DateTimeOffset" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.DateTimeOffset" />.</returns>
      <param name="value">Значение типа <see cref="T:System.DateTimeOffset" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.DateTimeOffset,System.String)">
      <summary>Проверяет, является ли значение <see cref="T:System.DateTimeOffset" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.DateTimeOffset" />.</returns>
      <param name="value">Значение типа <see cref="T:System.DateTimeOffset" />.</param>
      <param name="propertyName">Имя проверяемого свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Decimal)">
      <summary>Проверяет, является ли значение <see cref="T:System.Decimal" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.Decimal" />.</returns>
      <param name="value">Значение типа <see cref="T:System.Decimal" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Decimal,System.String)">
      <summary>Проверяет, является ли значение <see cref="T:System.Decimal" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.Decimal" />.</returns>
      <param name="value">Значение типа <see cref="T:System.Decimal" />.</param>
      <param name="propertyName">Имя проверяемого свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Double)">
      <summary>Проверяет, является ли значение <see cref="T:System.Double" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.Double" />.</returns>
      <param name="value">Значение типа <see cref="T:System.Double" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Double,System.String)">
      <summary>Проверяет, является ли значение <see cref="T:System.Double" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.Double" />.</returns>
      <param name="value">Значение типа <see cref="T:System.Double" />.</param>
      <param name="propertyName">Имя проверяемого свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Guid)">
      <summary>Проверяет, является ли значение <see cref="T:System.Guid" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.Guid" />.</returns>
      <param name="value">Значение типа <see cref="T:System.Guid" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Guid,System.String)">
      <summary>Проверяет, является ли значение <see cref="T:System.Guid" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.Guid" />.</returns>
      <param name="value">Значение типа <see cref="T:System.Guid" />.</param>
      <param name="propertyName">Имя проверяемого свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int16)">
      <summary>Проверяет, является ли значение <see cref="T:System.Int16" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.Int16" />.</returns>
      <param name="value">Значение типа <see cref="T:System.Int16" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int16,System.String)">
      <summary>Проверяет, является ли значение <see cref="T:System.Int16" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.Int16" />.</returns>
      <param name="value">Значение типа <see cref="T:System.Int16" />.</param>
      <param name="propertyName">Имя проверяемого свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int32)">
      <summary>Проверяет, является ли значение <see cref="T:System.Int32" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.Int32" />.</returns>
      <param name="value">Значение типа <see cref="T:System.Int32" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int32,System.String)">
      <summary>Проверяет, является ли значение <see cref="T:System.Int32" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.Int32" />.</returns>
      <param name="value">Значение типа <see cref="T:System.Int32" />.</param>
      <param name="propertyName">Имя проверяемого свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int64)">
      <summary>Проверяет, является ли значение <see cref="T:System.Int64" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.Int64" />.</returns>
      <param name="value">Значение типа <see cref="T:System.Int64" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Int64,System.String)">
      <summary>Проверяет, является ли значение <see cref="T:System.Int64" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.Int64" />.</returns>
      <param name="value">Значение типа <see cref="T:System.Int64" />.</param>
      <param name="propertyName">Имя проверяемого свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Boolean})">
      <summary>Проверяет, является ли значение <see cref="T:System.Boolean" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.Boolean" />, допускающее значения NULL.</returns>
      <param name="value">Значение <see cref="T:System.Boolean" />, допускающее значения NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Boolean},System.String)">
      <summary>Проверяет, является ли значение <see cref="T:System.Boolean" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.Boolean" />, допускающее значения NULL.</returns>
      <param name="value">Значение <see cref="T:System.Boolean" />, допускающее значения NULL.</param>
      <param name="propertyName">Имя проверяемого свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Byte})">
      <summary>Проверяет, является ли значение <see cref="T:System.Byte" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.Byte" />, допускающее значения NULL.</returns>
      <param name="value">Значение <see cref="T:System.Byte" />, допускающее значения NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Byte},System.String)">
      <summary>Проверяет, является ли значение <see cref="T:System.Byte" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.Byte" />, допускающее значения NULL.</returns>
      <param name="value">Значение <see cref="T:System.Byte" />, допускающее значения NULL.</param>
      <param name="propertyName">Имя проверяемого свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTime})">
      <summary>Проверяет, является ли значение <see cref="T:System.DateTime" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.DateTime" />, допускающее значения NULL.</returns>
      <param name="value">Значение <see cref="T:System.DateTime" />, допускающее значения NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTime},System.String)">
      <summary>Проверяет, является ли значение <see cref="T:System.DateTime" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.DateTime" />, допускающее значения NULL.</returns>
      <param name="value">Значение <see cref="T:System.DateTime" />, допускающее значения NULL.</param>
      <param name="propertyName">Имя проверяемого свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTimeOffset})">
      <summary>Проверяет, является ли значение <see cref="T:System.DateTimeOffset" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.DateTimeOffset" />, допускающее значения NULL.</returns>
      <param name="value">Значение <see cref="T:System.DateTimeOffset" />, допускающее значения NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.DateTimeOffset},System.String)">
      <summary>Проверяет, является ли значение <see cref="T:System.DateTimeOffset" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.DateTimeOffset" />.</returns>
      <param name="value">Значение типа <see cref="T:System.DateTimeOffset" />.</param>
      <param name="propertyName">Имя проверяемого свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Decimal})">
      <summary>Проверяет, является ли значение <see cref="T:System.Decimal" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.Decimal" />, допускающее значения NULL.</returns>
      <param name="value">Значение <see cref="T:System.Decimal" />, допускающее значения NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Decimal},System.String)">
      <summary>Проверяет, является ли значение <see cref="T:System.Decimal" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.Decimal" />, допускающее значения NULL.</returns>
      <param name="value">Значение <see cref="T:System.Decimal" />, допускающее значения NULL.</param>
      <param name="propertyName">Имя проверяемого свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Double})">
      <summary>Проверяет, является ли значение <see cref="T:System.Double" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.Double" />, допускающее значения NULL.</returns>
      <param name="value">Значение <see cref="T:System.Double" />, допускающее значения NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Double},System.String)">
      <summary>Проверяет, является ли значение <see cref="T:System.Double" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.Double" />, допускающее значения NULL.</returns>
      <param name="value">Значение <see cref="T:System.Double" />, допускающее значения NULL.</param>
      <param name="propertyName">Имя проверяемого свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Guid})">
      <summary>Проверяет, является ли значение <see cref="T:System.Guid" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.Guid" />, допускающее значения NULL.</returns>
      <param name="value">Значение <see cref="T:System.Guid" />, допускающее значения NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Guid},System.String)">
      <summary>Проверяет, является ли значение <see cref="T:System.Guid" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.Guid" />, допускающее значения NULL.</returns>
      <param name="value">Значение <see cref="T:System.Guid" />, допускающее значения NULL.</param>
      <param name="propertyName">Имя проверяемого свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int16})">
      <summary>Проверяет, является ли значение <see cref="T:System.Int16" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.Int16" />, допускающее значения NULL.</returns>
      <param name="value">Значение <see cref="T:System.Int16" />, допускающее значения NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int16},System.String)">
      <summary>Проверяет, является ли значение <see cref="T:System.Int16" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.Int16" />, допускающее значения NULL.</returns>
      <param name="value">Значение <see cref="T:System.Int16" />, допускающее значения NULL.</param>
      <param name="propertyName">Имя проверяемого свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int32})">
      <summary>Проверяет, является ли значение <see cref="T:System.Int32" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.Int32" />, допускающее значения NULL.</returns>
      <param name="value">Значение <see cref="T:System.Int32" />, допускающее значения NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int32},System.String)">
      <summary>Проверяет, является ли значение <see cref="T:System.Int32" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.Int32" />, допускающее значения NULL.</returns>
      <param name="value">Значение <see cref="T:System.Int32" />, допускающее значения NULL.</param>
      <param name="propertyName">Имя проверяемого свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int64})">
      <summary>Проверяет, является ли значение <see cref="T:System.Int64" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.Int64" />, допускающее значения NULL.</returns>
      <param name="value">Значение <see cref="T:System.Int64" />, допускающее значения NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Int64},System.String)">
      <summary>Проверяет, является ли значение <see cref="T:System.Int64" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.Int64" />, допускающее значения NULL.</returns>
      <param name="value">Значение <see cref="T:System.Int64" />, допускающее значения NULL.</param>
      <param name="propertyName">Имя проверяемого свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.SByte})">
      <summary>Проверяет, является ли значение <see cref="T:System.SByte" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.SByte" />, допускающее значения NULL.</returns>
      <param name="value">Значение <see cref="T:System.SByte" />, допускающее значения NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.SByte},System.String)">
      <summary>Проверяет, является ли значение <see cref="T:System.SByte" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.SByte" />, допускающее значения NULL.</returns>
      <param name="value">Значение <see cref="T:System.SByte" />, допускающее значения NULL.</param>
      <param name="propertyName">Имя проверяемого свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Single})">
      <summary>Проверяет, является ли значение <see cref="T:System.Single" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.Single" />, допускающее значения NULL.</returns>
      <param name="value">Значение <see cref="T:System.Single" />, допускающее значения NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.Single},System.String)">
      <summary>Проверяет, является ли значение <see cref="T:System.Single" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.Single" />, допускающее значения NULL.</returns>
      <param name="value">Значение <see cref="T:System.Single" />, допускающее значения NULL.</param>
      <param name="propertyName">Имя проверяемого свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.TimeSpan})">
      <summary>Проверяет, является ли значение <see cref="T:System.TimeSpan" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.TimeSpan" />, допускающее значения NULL.</returns>
      <param name="value">Значение <see cref="T:System.TimeSpan" />, допускающее значения NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.TimeSpan},System.String)">
      <summary>Проверяет, является ли значение <see cref="T:System.TimeSpan" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.TimeSpan" />, допускающее значения NULL.</returns>
      <param name="value">Значение <see cref="T:System.TimeSpan" />, допускающее значения NULL.</param>
      <param name="propertyName">Имя проверяемого свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt16})">
      <summary>Гарантирует допустимость значения UInt16, задаваемого для свойства.</summary>
      <returns>Задаваемое значение UInt16, допускающее значения NULL.</returns>
      <param name="value">Значение UInt16, допускающее значения NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt16},System.String)">
      <summary>Гарантирует допустимость значения UInt16, задаваемого для свойства.</summary>
      <returns>Задаваемое значение UInt16, допускающее значения NULL.</returns>
      <param name="value">Значение UInt16, допускающее значения NULL.</param>
      <param name="propertyName">Имя проверяемого свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt32})">
      <summary>Гарантирует допустимость значения UInt32, задаваемого для свойства.</summary>
      <returns>Задаваемое значение UInt32, допускающее значения NULL.</returns>
      <param name="value">Значение UInt32, допускающее значения NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt32},System.String)">
      <summary>Гарантирует допустимость значения UInt32, задаваемого для свойства.</summary>
      <returns>Задаваемое значение UInt32, допускающее значения NULL.</returns>
      <param name="value">Значение UInt32, допускающее значения NULL.</param>
      <param name="propertyName">Имя проверяемого свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt64})">
      <summary>Проверяет, является ли значение <see cref="T:System.UInt64" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение UInt64, допускающее значения NULL.</returns>
      <param name="value">Значение UInt64, допускающее значения NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Nullable{System.UInt64},System.String)">
      <summary>Проверяет, является ли значение <see cref="T:System.UInt64" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение UInt64, допускающее значения NULL.</returns>
      <param name="value">Значение UInt64, допускающее значения NULL.</param>
      <param name="propertyName">Имя проверяемого свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.SByte)">
      <summary>Проверяет, является ли значение <see cref="T:System.SByte" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.SByte" />.</returns>
      <param name="value">Значение типа <see cref="T:System.SByte" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.SByte,System.String)">
      <summary>Проверяет, является ли значение <see cref="T:System.SByte" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.SByte" />.</returns>
      <param name="value">Значение типа <see cref="T:System.SByte" />.</param>
      <param name="propertyName">Имя проверяемого свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Single)">
      <summary>Гарантирует допустимость значения Single, задаваемого для свойства.</summary>
      <returns>Задаваемое значение <see cref="T:System.Single" />.</returns>
      <param name="value">Значение типа <see cref="T:System.Single" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.Single,System.String)">
      <summary>Гарантирует допустимость значения Single, задаваемого для свойства.</summary>
      <returns>Задаваемое значение <see cref="T:System.Single" />.</returns>
      <param name="value">Значение типа <see cref="T:System.Single" />.</param>
      <param name="propertyName">Имя проверяемого свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.String,System.Boolean)">
      <summary>Проверяет, имеет ли свойство значение, отличное от NULL, и вызывает исключение, если оно является таковым.</summary>
      <returns>Проверяемое значение <see cref="T:System.String" />.</returns>
      <param name="value">Проверяемое строковое значение.</param>
      <param name="isNullable">Флаг, указывающий, может ли это свойство принимать значение NULL.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.String,System.Boolean,System.String)">
      <summary>Проверяет, имеет ли свойство значение, отличное от NULL, и вызывает исключение, если оно является таковым.</summary>
      <returns>Проверяемое свойство.</returns>
      <param name="value">Проверяемое строковое значение.</param>
      <param name="isNullable">Флаг, указывающий, может ли это свойство принимать значение NULL.</param>
      <param name="propertyName">Имя проверяемого свойства.</param>
      <exception cref="T:System.Data.ConstraintException">Строка, не допускающая значений NULL, имеет значение NULL.</exception>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.TimeSpan)">
      <summary>Проверяет, является ли значение <see cref="T:System.TimeSpan" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.TimeSpan" />.</returns>
      <param name="value">Значение типа <see cref="T:System.TimeSpan" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.TimeSpan,System.String)">
      <summary>Проверяет, является ли значение <see cref="T:System.TimeSpan" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.TimeSpan" />.</returns>
      <param name="value">Значение типа <see cref="T:System.TimeSpan" />.</param>
      <param name="propertyName">Имя проверяемого свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt16)">
      <summary>Проверяет, является ли значение <see cref="T:System.UInt16" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.UInt16" />.</returns>
      <param name="value">Значение типа <see cref="T:System.UInt16" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt16,System.String)">
      <summary>Проверяет, является ли значение <see cref="T:System.UInt16" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.UInt16" />.</returns>
      <param name="value">Значение типа <see cref="T:System.UInt16" />.</param>
      <param name="propertyName">Имя проверяемого свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt32)">
      <summary>Проверяет, является ли значение <see cref="T:System.UInt32" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.UInt32" />.</returns>
      <param name="value">Значение типа <see cref="T:System.UInt32" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt32,System.String)">
      <summary>Проверяет, является ли значение <see cref="T:System.UInt32" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.UInt32" />.</returns>
      <param name="value">Значение типа <see cref="T:System.UInt32" />.</param>
      <param name="propertyName">Имя проверяемого свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt64)">
      <summary>Проверяет, является ли значение <see cref="T:System.UInt64" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.UInt64" />.</returns>
      <param name="value">Значение типа <see cref="T:System.UInt64" />.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue(System.UInt64,System.String)">
      <summary>Проверяет, является ли значение <see cref="T:System.UInt64" />, заданное для свойства, допустимым.</summary>
      <returns>Задаваемое значение <see cref="T:System.UInt64" />.</returns>
      <param name="value">Значение типа <see cref="T:System.UInt64" />.</param>
      <param name="propertyName">Имя проверяемого свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.SetValidValue``1(``0,``0,System.String)">
      <summary>Задает сложный объект для указанного свойства.</summary>
      <returns>Сложный тип, который происходит от сложного объекта.</returns>
      <param name="oldValue">Исходный сложный объект для свойства, если таковой имеется.</param>
      <param name="newValue">Задаваемый сложный объект.</param>
      <param name="property">Сложное свойство, которое должно быть задано для сложного объекта.</param>
      <typeparam name="T">Тип заменяемого объекта.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Core.Objects.DataClasses.StructuralObject.VerifyComplexObjectIsNotNull``1(``0,System.String)">
      <summary>Проверяет, не содержит ли сложный объект значение null.</summary>
      <returns>Проверяемый сложный объект.</returns>
      <param name="complexObject">Сложный объект, подлежащий проверке.</param>
      <param name="propertyName">Сложное свойство родительского объекта, который связан с complexObject.</param>
      <typeparam name="TComplex">Тип проверяемого сложного объекта.</typeparam>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.CommitFailedException">
      <summary>Исключение, вызываемое при ошибке фиксации <see cref="T:System.Data.Common.DbTransaction" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailedException.#ctor">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.Entity.Infrastructure.CommitFailedException" /> со значениями по умолчанию.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailedException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.CommitFailedException" /> с сериализованными данными.</summary>
      <param name="info">Данные, необходимые для сериализации или десериализации объекта.</param>
      <param name="context">Описание источника и назначения заданного сериализованного потока.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailedException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.Entity.Infrastructure.CommitFailedException" /> с сообщением об ошибке.</summary>
      <param name="message">Сообщение об исключении.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailedException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.Entity.Infrastructure.CommitFailedException" /> с сообщением об ошибке и внутренним исключением.</summary>
      <param name="message">Сообщение об исключении.</param>
      <param name="innerException">Внутреннее исключение.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.CommitFailureHandler">
      <summary>Представляет обработчик транзакций, который позволяет правильно восстановиться после сбоя подключения во время фиксации транзакции, сохраняя сведения трассировки транзакции в базу данных.Должен быть зарегистрирован с помощью <see cref="M:System.Data.Entity.DbConfiguration.SetDefaultTransactionHandler(System.Func{System.Data.Entity.Infrastructure.TransactionHandler})" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" />, используя стандартный <see cref="P:System.Data.Entity.Infrastructure.CommitFailureHandler.TransactionContext" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.#ctor(System.Func{System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.TransactionContext})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" />.</summary>
      <param name="transactionContextFactory">Фабрика контекста транзакции.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.BeganTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)">
      <summary>Сохраняет сведения отслеживания для новой транзакции в базу данных в той же транзакции.</summary>
      <param name="connection">Соединение, начавшее транзакцию.</param>
      <param name="interceptionContext">Контекстные сведения, связанные с вызовом.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.BuildDatabaseInitializationScript">
      <summary>Создает скрипт инициализации базы данных.</summary>
      <returns>Скрипт инициализации базы данных.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.ClearTransactionHistory">
      <summary>Удаляет весь журнал транзакции.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.ClearTransactionHistoryAsync">
      <summary>Асинхронно удаляет весь журнал транзакции.</summary>
      <returns>Задача, представляющая асинхронную операцию.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.ClearTransactionHistoryAsync(System.Threading.CancellationToken)">
      <summary>Асинхронно удаляет весь журнал транзакции.</summary>
      <returns>Задача, представляющая асинхронную операцию.</returns>
      <param name="cancellationToken">Токен отмены.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.Committed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>Если было вызвано исключение, проверяет базу данных для этой транзакции и пробрасывает исключение, если база данных не найдена.В противном случае помечает фиксацию как успешную и ставит сведения о транзакции в очередь на удаление.</summary>
      <param name="transaction">Зафиксированная транзакция.</param>
      <param name="interceptionContext">Контекстные сведения, связанные с вызовом.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.Dispose(System.Boolean)">
      <summary>Освобождает ресурсы, используемые этим объектом транзакций.</summary>
      <param name="disposing">Укажите значение true, чтобы освободить управляемые и неуправляемые ресурсы, или значение false, чтобы освободить только неуправляемые ресурсы.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.Disposed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>Прекращает отслеживание удаленной транзакции.</summary>
      <param name="transaction">Удаленная транзакция.</param>
      <param name="interceptionContext">Контекстные сведения, связанные с вызовом.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.FromContext(System.Data.Entity.Core.Objects.ObjectContext)">
      <summary>Возвращает объект <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" />, связанный с объектом <paramref name="context" />, если такой есть; в противном случае возвращает null.</summary>
      <returns>Связанный объект <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" />.</returns>
      <param name="context">Контекст.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.FromContext(System.Data.Entity.DbContext)">
      <summary>Возвращает объект <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" />, связанный с объектом <paramref name="context" />, если такой есть; в противном случае возвращает null.</summary>
      <returns>Связанный объект <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" />.</returns>
      <param name="context">Контекст.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.Initialize(System.Data.Entity.Core.Objects.ObjectContext)">
      <summary>Инициализирует свойства экземпляра.</summary>
      <param name="context">Контекст.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.Initialize(System.Data.Entity.DbContext,System.Data.Common.DbConnection)">
      <summary>Инициализирует свойства экземпляра.</summary>
      <param name="context">Контекст.</param>
      <param name="connection">Соединение.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.MarkTransactionForPruning(System.Data.Entity.Infrastructure.TransactionRow)">
      <summary>Добавляет указанную транзакцию к списку транзакций, которые можно удалить из базы данных.</summary>
      <param name="transaction">Транзакция, которая будет удалена из данных.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.PruneTransactionHistory">
      <summary>Удаляет транзакции, помеченные к удалению.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.PruneTransactionHistory(System.Boolean,System.Boolean)">
      <summary>Удаляет транзакции, помеченные к удалению, если их количество превышает <see cref="P:System.Data.Entity.Infrastructure.CommitFailureHandler.PruningLimit" />.</summary>
      <param name="force">Если задано как true, то удаляются все старые транзакции, даже если их количество не превышает <see cref="P:System.Data.Entity.Infrastructure.CommitFailureHandler.PruningLimit" />; в противном случае — false.</param>
      <param name="useExecutionStrategy">Если задано как true, то операция выполняется при помощи связанной стратегии исполнения; в противном случае — false.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.PruneTransactionHistoryAsync">
      <summary>Асинхронно удаляет транзакции, помеченные к удалению.</summary>
      <returns>Задача, представляющая асинхронную операцию.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.PruneTransactionHistoryAsync(System.Boolean,System.Boolean,System.Threading.CancellationToken)">
      <summary>Удаляет транзакции, помеченные к удалению, если их количество превышает <see cref="P:System.Data.Entity.Infrastructure.CommitFailureHandler.PruningLimit" />.</summary>
      <returns>Задача, представляющая асинхронную операцию.</returns>
      <param name="force">Если задано как true, то удаляются все старые транзакции, даже если их количество не превышает <see cref="P:System.Data.Entity.Infrastructure.CommitFailureHandler.PruningLimit" />; в противном случае — false.</param>
      <param name="useExecutionStrategy">Если задано как true, то операция выполняется при помощи связанной стратегии исполнения; в противном случае — false.</param>
      <param name="cancellationToken">Токен отмены.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.PruneTransactionHistoryAsync(System.Threading.CancellationToken)">
      <summary>Асинхронно удаляет транзакции, помеченные к удалению.</summary>
      <returns>Задача, представляющая асинхронную операцию.</returns>
      <param name="cancellationToken">Токен отмены.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.CommitFailureHandler.PruningLimit">
      <summary>Возвращает количество транзакций, которое должно быть выполнено в контексте, перед тем как будет очищен журнал транзакций.Значение по умолчанию — 20.</summary>
      <returns>Количество транзакций, которое должно быть выполнено в контексте, перед тем как будет очищен журнал транзакций.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.CommitFailureHandler.RolledBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>Прекращает отслеживание транзакции, для которой был сделан откат.</summary>
      <param name="transaction">Транзакция, для которой был сделан откат.</param>
      <param name="interceptionContext">Контекстные сведения, связанные с вызовом.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.CommitFailureHandler.TransactionContext">
      <summary>Возвращает контекст транзакции.</summary>
      <returns>Контекст транзакции.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbChangeTracker">
      <summary>Возвращается методом ChangeTracker объекта <see cref="T:System.Data.Entity.DbContext" /> в целях предоставления доступа к функциям контекста, которые связаны с отслеживанием изменений сущностей.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.DetectChanges">
      <summary>Обнаруживает изменения, внесенные в свойства и связи сущностей POCO.Следует учитывать, что сущности некоторых типов (такие как прокси и сущности, отслеживающие изменения, которые происходят от <see cref="T:System.Data.Entity.Core.Objects.DataClasses.EntityObject" />) сообщают об изменениях автоматически и для этих типов сущностей вызов DetectChanges обычно не требуется.Следует также отметить, что обычно метод DetectChanges вызывается автоматически многими методами в <see cref="T:System.Data.Entity.DbContext" />, а его связанные классы таковы, что этот метод редко приходится вызывать явно.Но может оказаться желательным, обычно по соображениям производительности, отключить этот автоматический вызов DetectChanges, используя флаг AutoDetectChangesEnabled из <see cref="P:System.Data.Entity.DbContext.Configuration" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Entries">
      <summary>Возвращает объекты <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> для всех сущностей, отслеживаемых этим контекстом.</summary>
      <returns>Записи.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Entries``1">
      <summary>Возвращает объекты <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> для всех сущностей данного типа, отслеживаемых этим контекстом.</summary>
      <returns>Записи.</returns>
      <typeparam name="TEntity">Тип сущности.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.Equals(System.Object)">
      <summary>Указывает, совпадает ли <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" /> с указанным объектом.</summary>
      <returns>Значение true, если <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" /> та же, что у текущего объекта; в противном случае — значение false.</returns>
      <param name="obj">Сравниваемый объект.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.GetHashCode">
      <summary>Возвращает хэш-код, связанный с <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" />.</summary>
      <returns>Хэш-код, связанный с <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.GetType">
      <summary>Возвращает объект <see cref="T:System.Type" /> для текущего экземпляра.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.HasChanges">
      <summary>Проверяет, отслеживает ли <see cref="T:System.Data.Entity.DbContext" /> какие-либо новые, удаленные и измененные сущности или связи, которые будут отправлены в базу данных при вызове метода <see cref="M:System.Data.Entity.DbContext.SaveChanges" />.</summary>
      <returns>True, если базовый контекст <see cref="T:System.Data.Entity.DbContext" /> имеет изменения, в противном случае — false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbChangeTracker.ToString">
      <summary>Возвращает строковое представление объекта <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" />.</summary>
      <returns>Строковое представление объекта <see cref="T:System.Data.Entity.Infrastructure.DbChangeTracker" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCollectionEntry">
      <summary>Представляет неуниверсальную версию класса <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Cast``2">
      <summary>Возвращает эквивалентный универсальный объект <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" />.</summary>
      <returns>Эквивалентный универсальный объект.</returns>
      <typeparam name="TEntity">Тип сущности, в которой объявлен этот элемент.</typeparam>
      <typeparam name="TElement">Тип элемента коллекции.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.CurrentValue">
      <summary>Возвращает или задает текущее значение свойства навигации.Текущее значение равно сущности, на которую ссылается свойство навигации.</summary>
      <returns>Текущее значение.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.EntityEntry">
      <summary>Возвращает объект <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />, которому принадлежит данное свойство навигации.</summary>
      <returns>Запись для сущности, которая владеет данным свойством навигации.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.IsLoaded">
      <summary>Возвращает или задает значение, указывающее, все ли сущности этой коллекции были загружены из базы данных.</summary>
      <returns>Значение true, если загружены все связанные сущности или флаг IsLoaded явно установлен равным true; в противном случае — значение false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Load">
      <summary>Загружает коллекцию сущностей из базы данных.Обратите внимание, что сущности, уже существующие в контексте, не перезаписываются значениями из базы данных.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.LoadAsync">
      <summary>Загружает в асинхронном режиме коллекцию сущностей из базы данных.Обратите внимание, что сущности, уже существующие в контексте, не перезаписываются значениями из базы данных.</summary>
      <returns>Задача, представляющая асинхронную операцию.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.LoadAsync(System.Threading.CancellationToken)">
      <summary>Загружает в асинхронном режиме коллекцию сущностей из базы данных.Обратите внимание, что сущности, уже существующие в контексте, не перезаписываются значениями из базы данных.</summary>
      <returns>Задача, представляющая асинхронную операцию.</returns>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry.Name">
      <summary>Возвращает имя свойства.</summary>
      <returns>Имя свойства.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry.Query">
      <summary>Возвращает запрос, который может использоваться для загрузки этой коллекции из базы данных.Возвращаемый запрос можно изменить с помощью LINQ для выполнения фильтрации или таких операций в базе данных, как подсчет количества сущностей в коллекции базы данных без их фактической загрузки.</summary>
      <returns>Запрос для коллекции.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2">
      <summary>Экземпляры этого класса возвращены из метода Collection объекта <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> и позволяют выполнять по отношению к свойствам навигации коллекции сущности такие операции, как загрузка.</summary>
      <typeparam name="TEntity">Тип сущности, которой принадлежит это свойство.</typeparam>
      <typeparam name="TElement">Тип элемента в коллекции сущностей.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.CurrentValue">
      <summary>Возвращает или задает текущее значение свойства навигации.Текущее значение равно сущности, на которую ссылается свойство навигации.</summary>
      <returns>Текущее значение.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.EntityEntry">
      <summary>Объект <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />, которому принадлежит данное свойство навигации.</summary>
      <returns>Запись для сущности, которая владеет данным свойством навигации.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.IsLoaded">
      <summary>Возвращает или задает значение, указывающее, все ли сущности этой коллекции были загружены из базы данных.</summary>
      <returns>Значение true, если загружены все связанные сущности или флаг IsLoaded явно установлен равным true; в противном случае — значение false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Load">
      <summary>Загружает коллекцию сущностей из базы данных.Обратите внимание, что сущности, уже существующие в контексте, не перезаписываются значениями из базы данных.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.LoadAsync">
      <summary>Загружает в асинхронном режиме коллекцию сущностей из базы данных.Обратите внимание, что сущности, уже существующие в контексте, не перезаписываются значениями из базы данных.</summary>
      <returns>Задача, представляющая асинхронную операцию.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.LoadAsync(System.Threading.CancellationToken)">
      <summary>Загружает в асинхронном режиме коллекцию сущностей из базы данных.Обратите внимание, что сущности, уже существующие в контексте, не перезаписываются значениями из базы данных.</summary>
      <returns>Задача, представляющая асинхронную операцию.</returns>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Name">
      <summary>Возвращает имя свойства.</summary>
      <returns>Имя свойства.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbCollectionEntry{`0,`1})~System.Data.Entity.Infrastructure.DbCollectionEntry">
      <summary>Возвращает новый экземпляр неуниверсального класса <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" /> для свойства навигации, представленного данным объектом.</summary>
      <returns>Неуниверсальная версия.</returns>
      <param name="entry">Объект, представляющий свойство навигации.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCollectionEntry`2.Query">
      <summary>Возвращает запрос, который может использоваться для загрузки этой коллекции из базы данных.Возвращаемый запрос можно изменить с помощью LINQ для выполнения фильтрации или таких операций в базе данных, как подсчет количества сущностей в коллекции базы данных без их фактической загрузки.</summary>
      <returns>Запрос для коллекции.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbCompiledModel">
      <summary>Неизменяемое представление модели EDM, которое может использоваться для создания <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> или передаваться конструктору <see cref="T:System.Data.Entity.DbContext" />.Для повышения производительности экземпляры этого типа должны кэшироваться и повторно использоваться при создании контекстов.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbCompiledModel.CreateObjectContext``1(System.Data.Common.DbConnection)">
      <summary>Создает экземпляр ObjectContext или класс, производный от ObjectContext.Обратите внимание, что вместо этого можно создать экземпляр DbContext при помощи соответствующего конструктора DbContext.Если используется производный объект ObjectContext, он должен иметь публичный конструктор с единственным параметром EntityConnection.Передаваемое соединение используется созданным объектом ObjectContext, но не находится во владении контекста.Вызывающая сторона должна освободить соединение после освобождения контекста.</summary>
      <returns>Контекст.</returns>
      <param name="existingConnection">Существующее соединение с базой данных, которое будет использоваться контекстом.</param>
      <typeparam name="TContext">Тип создаваемого контекста.</typeparam>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry">
      <summary>Неуниверсальная версия класса <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.Cast``2">
      <summary>Возвращает эквивалентный универсальный объект <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" />.</summary>
      <returns>Эквивалентный универсальный объект.</returns>
      <typeparam name="TEntity">Тип сущности, в которой объявлен этот элемент.</typeparam>
      <typeparam name="TComplexProperty">Тип сложного свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.ComplexProperty(System.String)">
      <summary>Возвращает объект, представляющий вложенное сложное свойство данного свойства.</summary>
      <returns>Объект, представляющий вложенное свойство.</returns>
      <param name="propertyName">Имя вложенного свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry.Property(System.String)">
      <summary>Возвращает объект, представляющий вложенное свойство данного свойства.Этот метод может использоваться как для скалярных, так и для сложных свойств.</summary>
      <returns>Объект, представляющий вложенное свойство.</returns>
      <param name="propertyName">Имя вложенного свойства.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2">
      <summary>Экземпляры данного класса возвращаются методом ComplexProperty объекта <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> и позволяют обращаться к состоянию сложного свойства.</summary>
      <typeparam name="TEntity">Тип сущности, которой принадлежит это свойство.</typeparam>
      <typeparam name="TComplexProperty">Тип свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
      <summary>Возвращает объект, представляющий вложенное сложное свойство данного свойства.</summary>
      <returns>Объект, представляющий вложенное свойство.</returns>
      <param name="property">Выражение, представляющее вложенное свойство.</param>
      <typeparam name="TNestedComplexProperty">Тип вложенного свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty(System.String)">
      <summary>Возвращает объект, представляющий вложенное сложное свойство данного свойства.</summary>
      <returns>Объект, представляющий вложенное свойство.</returns>
      <param name="propertyName">Имя вложенного свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.ComplexProperty``1(System.String)">
      <summary>Возвращает объект, представляющий вложенное сложное свойство данного свойства.</summary>
      <returns>Объект, представляющий вложенное свойство.</returns>
      <param name="propertyName">Имя вложенного свойства.</param>
      <typeparam name="TNestedComplexProperty">Тип вложенного свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbComplexPropertyEntry{`0,`1})~System.Data.Entity.Infrastructure.DbComplexPropertyEntry">
      <summary>Возвращает новый экземпляр неуниверсального класса <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" /> для свойства, представленного данным объектом.</summary>
      <returns>Неуниверсальная версия.</returns>
      <param name="entry">Объект, представляющий свойство.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property``1(System.Linq.Expressions.Expression{System.Func{`1,``0}})">
      <summary>Возвращает объект, представляющий вложенное свойство данного свойства.Этот метод может использоваться как для скалярных, так и для сложных свойств.</summary>
      <returns>Объект, представляющий вложенное свойство.</returns>
      <param name="property">Выражение, представляющее вложенное свойство.</param>
      <typeparam name="TNestedProperty">Тип вложенного свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property``1(System.String)">
      <summary>Возвращает объект, представляющий вложенное свойство данного свойства.Этот метод может использоваться как для скалярных, так и для сложных свойств.</summary>
      <returns>Объект, представляющий вложенное свойство.</returns>
      <param name="propertyName">Имя вложенного свойства.</param>
      <typeparam name="TNestedProperty">Тип вложенного свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2.Property(System.String)">
      <summary>Возвращает объект, представляющий вложенное свойство данного свойства.Этот метод может использоваться как для скалярных, так и для сложных свойств.</summary>
      <returns>Объект, представляющий вложенное свойство.</returns>
      <param name="propertyName">Имя вложенного свойства.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbConnectionInfo">
      <summary>Представляет сведения о подключении базы данных.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" />, представляющего соединение, указанное в файле конфигурации приложения.</summary>
      <param name="connectionName">Имя строки подключения в конфигурации приложения.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.#ctor(System.String,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" /> на основе строки подключения.</summary>
      <param name="connectionString">Имя строки подключения, используемой для подключения.</param>
      <param name="providerInvariantName">Имя поставщика, используемого для соединения.Для SQL Server следует использовать «System.Data.SqlClient».</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.Equals(System.Object)">
      <summary>Определяет, равен ли текущий тип <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" /> указанному типу объекта.</summary>
      <returns>Значение true, если текущий тип <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" /> равен типу указанного объекта; в противном случае значение false.</returns>
      <param name="obj">Объект, с которым сравнивается текущий объект <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" />.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.GetHashCode">
      <summary>Создает значение, представляющее текущее соединение.</summary>
      <returns>Значение, представляющее текущее соединение.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.GetType">
      <summary>Возвращает объект <see cref="T:System.Type" /> для текущего экземпляра.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbConnectionInfo.ToString">
      <summary>Преобразует объект <see cref="T:System.Data.Entity.Infrastructure.DbConnectionInfo" /> в строку.</summary>
      <returns>Текущий диск.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbConnectionStringOrigin">
      <summary>Описывает источник строки подключения базы данных, связанной с <see cref="T:System.Data.Entity.DbContext" />.</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.Configuration">
      <summary>Строка подключения была получена из внешней конфигурации.</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.Convention">
      <summary>Строка подключения была создана соглашением.</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.DbContextInfo">
      <summary>Строка подключения была переопределена данными о подключении, указанными для DbContextInfo.</summary>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.DbConnectionStringOrigin.UserCode">
      <summary>Строка подключения была явно указана во время выполнения.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbContextConfiguration">
      <summary>Возвращается методом Configuration объекта <see cref="T:System.Data.Entity.DbContext" /> в целях предоставления доступа к параметрам конфигурации для контекста.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.AutoDetectChangesEnabled">
      <summary>Возвращает или задает значение, указывающее, вызван ли метод <see cref="M:System.Data.Entity.Infrastructure.DbChangeTracker.DetectChanges" /> автоматически методами <see cref="T:System.Data.Entity.DbContext" /> и связанными классами.Значение по умолчанию — true.</summary>
      <returns>Значение true, если вызов должен быть выполнен автоматически; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.EnsureTransactionsForFunctionsAndCommands">
      <summary>Возвращает или задает значение, которое определяет, должны ли функции и команды SQL всегда выполняться в транзакции.</summary>
      <returns>Поведение транзакции по умолчанию.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.Equals(System.Object)">
      <summary>Указывает, совпадает ли конфигурация с конфигурацией указанного объекта.</summary>
      <returns>Значениеtrue, если конфигурация совпадает с конфигурацией указанного объекта; в противном случае — значение false.</returns>
      <param name="obj">Сравниваемый объект.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.GetHashCode">
      <summary>Возвращает хэш-код, связанный с конфигурацией.</summary>
      <returns>Хэш-код, связанный с конфигурацией.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.GetType">
      <summary>Возвращает объект <see cref="T:System.Type" /> для текущего экземпляра.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.LazyLoadingEnabled">
      <summary>Возвращает или задает значение, указывающее, включена ли отложенная загрузка связей, представленных как свойства навигации.По умолчанию отложенная загрузка включена.</summary>
      <returns>Значение true, если включена отложенная загрузка; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.ProxyCreationEnabled">
      <summary>Возвращает или задает значение, которое указывает, будет ли платформа создавать экземпляры динамически формируемых прокси-классов при создании экземпляра типа сущности.Учтите, что, даже если создание прокси включено этим флагом, экземпляры прокси будут создаваться только для типов сущностей, удовлетворяющих соответствующим требованиям.Создание прокси включено по умолчанию.</summary>
      <returns>Значение true, если включено создание прокси; в противном случае — значение false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextConfiguration.ToString">
      <summary>Возвращает строковое представление объекта <see cref="T:System.Data.Entity.Infrastructure.DbContextConfiguration" />.</summary>
      <returns>Строковое представление объекта <see cref="T:System.Data.Entity.Infrastructure.DbContextConfiguration" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.UseDatabaseNullSemantics">
      <summary>Возвращает или задает значение, указывающее, предоставляется ли семантика базы данных по работе со значениями null при сравнении двух операндов, оба из которых могут принимать значения null.Значение по умолчанию — false.Например, выражение (operand1 == operand2) будет переведено как (operand1 = operand2), если флаг UseDatabaseNullSemantics имеет значение true, и (((operand1 = operand2) AND (NOT (operand1 IS NULL OR operand2 IS NULL))) OR ((operand1 IS NULL) AND (operand2 IS NULL))), если UseDatabaseNullSemantics имеет значение false.</summary>
      <returns>true, если включено поведение базы данных при сравнении значений null, в противном случае false.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextConfiguration.ValidateOnSaveEnabled">
      <summary>Возвращает или задает значение, указывающее, следует ли автоматически проверять отслеживаемые сущности при вызове <see cref="M:System.Data.Entity.DbContext.SaveChanges" />.Значение по умолчанию — true.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbContextInfo">
      <summary>Содержит сведения о среде выполнения для данного типа <see cref="T:System.Data.Entity.DbContext" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" /> с указанным типом контекста.</summary>
      <param name="contextType">Конкретный тип <see cref="T:System.Data.Entity.DbContext" />.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.Configuration)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" /> с указанным типом контекста и файлом конфигурации.</summary>
      <param name="contextType">Конкретный тип <see cref="T:System.Data.Entity.DbContext" />.</param>
      <param name="config">Объект, представляющий файл конфигурации.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.Configuration,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" />, используя указанные сведения о подключении, тип контекста и файл конфигурации.</summary>
      <param name="contextType">Тип, являющийся производным от <see cref="T:System.Data.Entity.DbContext" />.</param>
      <param name="config">Объект, представляющий файл конфигурации.</param>
      <param name="connectionInfo">Сведения о соединении для использования базой данных.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.Configuration,System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" />, используя указанный тип контекста, файл конфигурации и сведения о поставщике.</summary>
      <param name="contextType">Тип, являющийся производным от <see cref="T:System.Data.Entity.DbContext" />.</param>
      <param name="config">Объект, представляющий файл конфигурации.</param>
      <param name="modelProviderInfo">Значение <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" />, которое определяет основополагающий целевой поставщик ADO.NET.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Configuration.ConnectionStringSettingsCollection)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" />, используя указанный тип контекста и настройку строки подключения.</summary>
      <param name="contextType">Тип, являющийся производным от <see cref="T:System.Data.Entity.DbContext" />.</param>
      <param name="connectionStringSettings">Коллекция строк подключения.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" />, используя указанный тип контекста и сведения о подключении.</summary>
      <param name="contextType">Тип, являющийся производным от <see cref="T:System.Data.Entity.DbContext" />.</param>
      <param name="connectionInfo">Сведения о соединении для использования базой данных.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.#ctor(System.Type,System.Data.Entity.Infrastructure.DbProviderInfo)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" />, используя указанный тип контекста и сведения о поставщике.</summary>
      <param name="contextType">Тип, являющийся производным от <see cref="T:System.Data.Entity.DbContext" />.</param>
      <param name="modelProviderInfo">Значение <see cref="T:System.Data.Entity.Infrastructure.DbProviderInfo" />, которое определяет основополагающий целевой поставщик ADO.NET.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionProviderName">
      <summary>Возвращает имя поставщика ADO.NET подключения, используемого базовым типом <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>Имя поставщика ADO.NET соединения, используемого основополагающим типом <see cref="T:System.Data.Entity.DbContext" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionString">
      <summary>Возвращает строку подключения, используемую базовым типом <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>Строка подключения, используемая базовым типом <see cref="T:System.Data.Entity.DbContext" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionStringName">
      <summary>Возвращает имя строки подключения, используемой базовым типом <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>Имя строки подключения, используемой базовым типом <see cref="T:System.Data.Entity.DbContext" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ConnectionStringOrigin">
      <summary>Возвращает источник строки подключения, используемый базовым типом <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>Источник строки подключения, используемый базовым типом <see cref="T:System.Data.Entity.DbContext" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.ContextType">
      <summary>Возвращает конкретный тип <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>Конкретный тип <see cref="T:System.Data.Entity.DbContext" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbContextInfo.CreateInstance">
      <summary>Создает экземпляр объекта <see cref="T:System.Data.Entity.Infrastructure.DbContextInfo" />.</summary>
      <returns>Созданный экземпляр.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.IsConstructible">
      <summary>Указывает, можно ли создать базовый тип <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>Значение true, если можно создать базовый тип <see cref="T:System.Data.Entity.DbContext" />. В противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbContextInfo.OnModelCreating">
      <summary>Возвращает или задает действие, которое должно быть выполнено применительно к DbModelBuilder после выполнения OnModelCreating в контексте.</summary>
      <returns>Действие, которое должно быть выполнено применительно к DbModelBuilder после выполнения OnModelCreating в контексте.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbEntityEntry">
      <summary>Неуниверсальная версия класса <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Cast``1">
      <summary>Возвращает новый экземпляр универсального класса <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> для заданного универсального типа для отслеживаемой сущности, представленной этим объектом.Следует учитывать, что тип отслеживаемой сущности должен быть совместимым с универсальным типом, поскольку в противном случае будет активировано исключение.</summary>
      <returns>Универсальная версия.</returns>
      <typeparam name="TEntity">Тип сущности.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Collection(System.String)">
      <summary>Возвращает объект, представляющий свойство навигации по коллекции из этой сущности в коллекцию связанных сущностей.</summary>
      <returns>Объект, представляющий свойство навигации.</returns>
      <param name="navigationProperty">Имя свойства навигации.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ComplexProperty(System.String)">
      <summary>Возвращает объект, представляющий сложное свойство данной сущности.</summary>
      <returns>Объект, представляющий сложное свойство.</returns>
      <param name="propertyName">Имя сложного свойства.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.CurrentValues">
      <summary>Возвращает текущие значения свойств отслеживаемой сущности, представленной данным объектом.</summary>
      <returns>Текущие значения.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.Entity">
      <summary>Возвращает сущность.</summary>
      <returns>Сущность.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Equals(System.Data.Entity.Infrastructure.DbEntityEntry)">
      <summary>Определяет, равен ли заданный объект <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> данному экземпляру.Два экземпляра <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> считаются равными, если оба они являются записями для одной и той же сущности в одном и том же контексте <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>Значение true, если указанный объект <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> равен этому экземпляру; в противном случае — значение false.</returns>
      <param name="other">Объект <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> для сравнения с данным экземпляром.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект <see cref="T:System.Object" /> данному экземпляру.Два экземпляра <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> считаются равными, если оба они являются записями для одной и той же сущности в одном и том же контексте <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>Значение true, если указанный объект <see cref="T:System.Object" /> равен этому экземпляру; в противном случае — значение false.</returns>
      <param name="obj">Объект <see cref="T:System.Object" /> для сравнения с данным экземпляром.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetDatabaseValues">
      <summary>Запрашивает в базе данных копии значений отслеживаемой сущности в том виде, в котором они сейчас существуют в базе данных.Следует учитывать, что изменение значений в возвращенном словаре не приводит к обновлению значений в базе данных.Если сущность не найдена в базе данных, возвращается значение NULL.</summary>
      <returns>Значения из хранилища.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetDatabaseValuesAsync">
      <summary>Запрашивает в асинхронном режиме базу данных для получения копий значений отслеживаемой сущности в том виде, в котором они в настоящее время существуют в базе данных.Следует учитывать, что изменение значений в возвращенном словаре не приводит к обновлению значений в базе данных.Если сущность не найдена в базе данных, возвращается значение NULL.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит значения из хранилища.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetDatabaseValuesAsync(System.Threading.CancellationToken)">
      <summary>Запрашивает в асинхронном режиме базу данных для получения копий значений отслеживаемой сущности в том виде, в котором они в настоящее время существуют в базе данных.Следует учитывать, что изменение значений в возвращенном словаре не приводит к обновлению значений в базе данных.Если сущность не найдена в базе данных, возвращается значение NULL.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит значения из хранилища.</returns>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetHashCode">
      <summary>Возвращает хэш-код для данного экземпляра.</summary>
      <returns>Хэш-код для данного экземпляра, подходящий для использования в алгоритмах хэширования и структурах данных, подобных хэш-таблицам.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetType">
      <summary>Возвращает объект <see cref="T:System.Type" /> для текущего экземпляра.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.GetValidationResult">
      <summary>Проверяет данный экземпляр <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> и возвращает результат проверки.</summary>
      <returns>Результат проверки сущности.Может быть равно NULL, если метод <see cref="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})" /> переопределен.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Member(System.String)">
      <summary>Возвращает объект, представляющий элемент сущности.Тип среды выполнения для возвращаемого объекта варьируется в зависимости от того, какой вид элемента запрашивается.В настоящее время поддерживаются следующие типы элементов и их возвращаемые типы: Свойство навигации по ссылке: <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />.Свойство навигации по коллекции: <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />.Примитивное или скалярное свойство: <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />.Сложное свойство: <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" />.</summary>
      <returns>Объект, представляющий элемент.</returns>
      <param name="propertyName">Имя элемента.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.OriginalValues">
      <summary>Возвращает исходные значения свойств отслеживаемой сущности, представленной данным объектом.Исходные значения — это обычно значения свойств сущности в том виде, в котором они были в последний раз извлечены запросом из базы данных.</summary>
      <returns>Исходные значения.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Property(System.String)">
      <summary>Возвращает объект, представляющий скалярное или сложное свойство данной сущности.</summary>
      <returns>Объект, представляющий свойство.</returns>
      <param name="propertyName">Имя свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Reference(System.String)">
      <summary>Возвращает объект, представляющий свойство навигации по ссылке (то естьне по коллекции) из этой сущности в другую сущность.</summary>
      <returns>Объект, представляющий свойство навигации.</returns>
      <param name="navigationProperty">Имя свойства навигации.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.Reload">
      <summary>Повторно загружает сущность из базы данных, перезаписывая все значения свойств значениями из базы данных.После вызова этого метода сущность будет в неизмененном состоянии.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ReloadAsync">
      <summary>Повторно загружает в асинхронном режиме сущность из базы данных, перезаписывая все значения свойств значениями из базы данных.После вызова этого метода сущность будет в неизмененном состоянии.</summary>
      <returns>Задача, представляющая асинхронную операцию.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ReloadAsync(System.Threading.CancellationToken)">
      <summary>Повторно загружает в асинхронном режиме сущность из базы данных, перезаписывая все значения свойств значениями из базы данных.После вызова этого метода сущность будет в неизмененном состоянии.</summary>
      <returns>Задача, представляющая асинхронную операцию.</returns>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry.State">
      <summary>Возвращает или задает состояние сущности.</summary>
      <returns>Состояние.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry.ToString">
      <summary>Возвращает строковое представление объекта <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />.</summary>
      <returns>Строковое представление объекта <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbEntityEntry`1">
      <summary>Экземпляры данного класса предоставляют доступ к сведениям о сущностях, отслеживаемых классом <see cref="T:System.Data.Entity.DbContext" />, и возможность управления этими сущностями.Используйте методы Entity или Entities контекста для получения объектов этого типа.</summary>
      <typeparam name="TEntity">Тип сущности.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}})">
      <summary>Возвращает объект, представляющий свойство навигации по коллекции из этой сущности в коллекцию связанных сущностей.</summary>
      <returns>Объект, представляющий свойство навигации.</returns>
      <param name="navigationProperty">Выражение, представляющее свойство навигации.</param>
      <typeparam name="TElement">Тип элементов в коллекции.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection``1(System.String)">
      <summary>Возвращает объект, представляющий свойство навигации по коллекции из этой сущности в коллекцию связанных сущностей.</summary>
      <returns>Объект, представляющий свойство навигации.</returns>
      <param name="navigationProperty">Имя свойства навигации.</param>
      <typeparam name="TElement">Тип элементов в коллекции.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Collection(System.String)">
      <summary>Возвращает объект, представляющий свойство навигации по коллекции из этой сущности в коллекцию связанных сущностей.</summary>
      <returns>Объект, представляющий свойство навигации.</returns>
      <param name="navigationProperty">Имя свойства навигации.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Возвращает объект, представляющий сложное свойство данной сущности.</summary>
      <returns>Объект, представляющий сложное свойство.</returns>
      <param name="property">Выражение, представляющее сложное свойство.</param>
      <typeparam name="TComplexProperty">Тип сложного свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty``1(System.String)">
      <summary>Возвращает объект, представляющий сложное свойство данной сущности.</summary>
      <returns>Объект, представляющий сложное свойство.</returns>
      <param name="propertyName">Имя сложного свойства.</param>
      <typeparam name="TComplexProperty">Тип сложного свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ComplexProperty(System.String)">
      <summary>Возвращает объект, представляющий сложное свойство данной сущности.</summary>
      <returns>Объект, представляющий сложное свойство.</returns>
      <param name="propertyName">Имя сложного свойства.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.CurrentValues">
      <summary>Возвращает текущие значения свойств отслеживаемой сущности, представленной данным объектом.</summary>
      <returns>Текущие значения.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.Entity">
      <summary>Возвращает сущность.</summary>
      <returns>Сущность.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Equals(System.Data.Entity.Infrastructure.DbEntityEntry{`0})">
      <summary>Определяет, равен ли заданный объект <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> данному экземпляру.Два экземпляра <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> считаются равными, если оба они являются записями для одной и той же сущности в одном и том же контексте <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>Значение true, если указанный объект <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> равен этому экземпляру; в противном случае — значение false.</returns>
      <param name="other">Объект <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> для сравнения с данным экземпляром.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект <see cref="T:System.Object" /> данному экземпляру.Два экземпляра <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> считаются равными, если оба они являются записями для одной и той же сущности в одном и том же контексте <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>Значение true, если указанный объект <see cref="T:System.Object" /> равен этому экземпляру; в противном случае — значение false.</returns>
      <param name="obj">Объект <see cref="T:System.Object" /> для сравнения с данным экземпляром.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetDatabaseValues">
      <summary>Запрашивает в базе данных копии значений отслеживаемой сущности в том виде, в котором они сейчас существуют в базе данных.Следует учитывать, что изменение значений в возвращенном словаре не приводит к обновлению значений в базе данных.Если сущность не найдена в базе данных, возвращается значение NULL.</summary>
      <returns>Значения из хранилища.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetDatabaseValuesAsync">
      <summary>Запрашивает в асинхронном режиме базу данных для получения копий значений отслеживаемой сущности в том виде, в котором они в настоящее время существуют в базе данных.Следует учитывать, что изменение значений в возвращенном словаре не приводит к обновлению значений в базе данных.Если сущность не найдена в базе данных, возвращается значение NULL.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит значения из хранилища.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetDatabaseValuesAsync(System.Threading.CancellationToken)">
      <summary>Запрашивает в асинхронном режиме базу данных для получения копий значений отслеживаемой сущности в том виде, в котором они в настоящее время существуют в базе данных.Следует учитывать, что изменение значений в возвращенном словаре не приводит к обновлению значений в базе данных.Если сущность не найдена в базе данных, возвращается значение NULL.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит значения из хранилища.</returns>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetHashCode">
      <summary>Возвращает хэш-код для данного экземпляра.</summary>
      <returns>Хэш-код для данного экземпляра, подходящий для использования в алгоритмах хэширования и структурах данных, подобных хэш-таблицам.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetType">
      <summary>Возвращает объект <see cref="T:System.Type" /> для текущего экземпляра.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.GetValidationResult">
      <summary>Проверяет данный экземпляр <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> и возвращает результат проверки.</summary>
      <returns>Результат проверки сущности.Может быть равно NULL, если метод <see cref="M:System.Data.Entity.DbContext.ValidateEntity(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IDictionary{System.Object,System.Object})" /> переопределен.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Member``1(System.String)">
      <summary>Возвращает объект, представляющий элемент сущности.Тип среды выполнения для возвращаемого объекта варьируется в зависимости от того, какой вид элемента запрашивается.В настоящее время поддерживаются следующие типы элементов и их возвращаемые типы: Свойство навигации по ссылке: <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" />.Свойство навигации по коллекции: <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" />.Примитивное или скалярное свойство: <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" />.Сложное свойство: <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry`2" />.</summary>
      <returns>Объект, представляющий элемент.</returns>
      <param name="propertyName">Имя элемента.</param>
      <typeparam name="TMember">Тип элемента.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Member(System.String)">
      <summary>Возвращает объект, представляющий элемент сущности.Тип среды выполнения для возвращаемого объекта варьируется в зависимости от того, какой вид элемента запрашивается.В настоящее время поддерживаются следующие типы элементов и их возвращаемые типы: Свойство навигации по ссылке: <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />.Свойство навигации по коллекции: <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />.Примитивное или скалярное свойство: <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />.Сложное свойство: <see cref="T:System.Data.Entity.Infrastructure.DbComplexPropertyEntry" />.</summary>
      <returns>Объект, представляющий элемент.</returns>
      <param name="propertyName">Имя элемента.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.op_Implicit(System.Data.Entity.Infrastructure.DbEntityEntry{`0})~System.Data.Entity.Infrastructure.DbEntityEntry">
      <summary>Возвращает новый экземпляр неуниверсального класса <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" /> для отслеживаемой сущности, представленной этим объектом.</summary>
      <returns>Неуниверсальная версия.</returns>
      <param name="entry">Объект, представляющий отслеживаемую сущность.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.OriginalValues">
      <summary>Возвращает исходные значения свойств отслеживаемой сущности, представленной данным объектом.Исходные значения — это обычно значения свойств сущности в том виде, в котором они были в последний раз извлечены запросом из базы данных.</summary>
      <returns>Исходные значения.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Возвращает объект, представляющий скалярное или сложное свойство данной сущности.</summary>
      <returns>Объект, представляющий свойство.</returns>
      <param name="property">Выражение, представляющее свойство.</param>
      <typeparam name="TProperty">Тип свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property(System.String)">
      <summary>Возвращает объект, представляющий скалярное или сложное свойство данной сущности.</summary>
      <returns>Объект, представляющий свойство.</returns>
      <param name="propertyName">Имя свойства.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Property``1(System.String)">
      <summary>Возвращает объект, представляющий скалярное или сложное свойство данной сущности.</summary>
      <returns>Объект, представляющий свойство.</returns>
      <param name="propertyName">Имя свойства.</param>
      <typeparam name="TProperty">Тип свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Возвращает объект, представляющий свойство навигации по ссылке (то естьне по коллекции) из этой сущности в другую сущность.</summary>
      <returns>Объект, представляющий свойство навигации.</returns>
      <param name="navigationProperty">Выражение, представляющее свойство навигации.</param>
      <typeparam name="TProperty">Тип свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference(System.String)">
      <summary>Возвращает объект, представляющий свойство навигации по ссылке (то естьне по коллекции) из этой сущности в другую сущность.</summary>
      <returns>Объект, представляющий свойство навигации.</returns>
      <param name="navigationProperty">Имя свойства навигации.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reference``1(System.String)">
      <summary>Возвращает объект, представляющий свойство навигации по ссылке (то естьне по коллекции) из этой сущности в другую сущность.</summary>
      <returns>Объект, представляющий свойство навигации.</returns>
      <param name="navigationProperty">Имя свойства навигации.</param>
      <typeparam name="TProperty">Тип свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.Reload">
      <summary>Повторно загружает сущность из базы данных, перезаписывая все значения свойств значениями из базы данных.После вызова этого метода сущность будет в неизмененном состоянии.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ReloadAsync">
      <summary>Повторно загружает в асинхронном режиме сущность из базы данных, перезаписывая все значения свойств значениями из базы данных.После вызова этого метода сущность будет в неизмененном состоянии.</summary>
      <returns>Задача, представляющая асинхронную операцию.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ReloadAsync(System.Threading.CancellationToken)">
      <summary>Повторно загружает в асинхронном режиме сущность из базы данных, перезаписывая все значения свойств значениями из базы данных.После вызова этого метода сущность будет в неизмененном состоянии.</summary>
      <returns>Задача, представляющая асинхронную операцию.</returns>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbEntityEntry`1.State">
      <summary>Возвращает или задает состояние сущности.</summary>
      <returns>Состояние.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbEntityEntry`1.ToString">
      <summary>Возвращает строковое представление значений сущности базы данных.</summary>
      <returns>Строковое представление значений сущности базы данных.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbExecutionStrategy">
      <summary>Предоставляет базовую реализацию механизма повторения для ненадежных операций и временных состояний, в которой используются экспоненциально возрастающие задержки между повторными попытками.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.#ctor(System.Int32,System.TimeSpan)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy" /> с указанными пределами для количества повторных попыток и задержками между повторениями.</summary>
      <param name="maxRetryCount">Максимальное количество попыток повторения.</param>
      <param name="maxDelay">Максимальная задержка в миллисекундах между повторениями.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.Execute(System.Action)">
      <summary>Повторно выполняет указанную операцию до тех пор, пока она удовлетворяет текущей политике повторений.</summary>
      <param name="operation">Делегат, представляющий операцию, предназначенную для выполнения, которая не возвращает результатов.</param>
      <exception cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException">Если стратегия задержки определяет, что повтор действия больше не должен осуществляться.</exception>
      <exception cref="T:System.InvalidOperationException">Если обнаружена существующая транзакция и стратегия выполнения ее не поддерживает.</exception>
      <exception cref="T:System.InvalidOperationException">Если этот экземпляр уже использовался для выполнения операции.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.Execute``1(System.Func{``0})">
      <summary>Повторно выполняет указанную операцию до тех пор, пока она удовлетворяет текущей политике повторений.</summary>
      <returns>Результат выполнения операции.</returns>
      <param name="operation">Делегат, представляющий операцию, предназначенную для выполнения, которая возвращает результат типа <paramref name="TResult" />.</param>
      <typeparam name="TResult">Тип результата, ожидаемого от операции, которая предназначена для выполнения.</typeparam>
      <exception cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException">Если стратегия задержки определяет, что повтор действия больше не должен осуществляться.</exception>
      <exception cref="T:System.InvalidOperationException">Если обнаружена существующая транзакция и стратегия выполнения ее не поддерживает.</exception>
      <exception cref="T:System.InvalidOperationException">Если этот экземпляр уже использовался для выполнения операции.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
      <summary>Повторно выполняет указанную асинхронную операцию до тех пор, пока она удовлетворяет текущей политике повторений.</summary>
      <returns>Задача, выполняемая до завершения, если исходная задача завершается успешно (либо в первый раз, либо после повторных попыток из-за временных отказов).Если задача завершается неудачей с постоянной ошибкой или достигнут предел повторения попыток, то возвращенная задача рассматривается как породившая отказ, и должно наблюдаться исключение.</returns>
      <param name="operation">Функция, которая возвращает начатую задачу типа <paramref name="TResult" />.</param>
      <param name="cancellationToken">Токен отмены используется для отмены операций повторения, но не выполняемых или успешно завершенных операций.</param>
      <typeparam name="TResult">Тип результата <see cref="T:System.Threading.Tasks.Task`1" />, возвращенный <paramref name="operation" />.</typeparam>
      <exception cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException">Если стратегия задержки определяет, что повтор действия больше не должен осуществляться.</exception>
      <exception cref="T:System.InvalidOperationException">Если обнаружена существующая транзакция и стратегия выполнения ее не поддерживает.</exception>
      <exception cref="T:System.InvalidOperationException">Если этот экземпляр уже использовался для выполнения операции.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.ExecuteAsync(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
      <summary>Повторно выполняет указанную асинхронную операцию, пока она удовлетворяет текущей политике повторений.</summary>
      <returns>Задача, выполняемая до завершения, если исходная задача завершается успешно (либо в первый раз, либо после повторных попыток из-за временных отказов).Если задача завершается неудачей с постоянной ошибкой или достигнут предел повторения попыток, то возвращенная задача рассматривается как породившая отказ, и должно наблюдаться исключение.</returns>
      <param name="operation">Функция, которая возвращает начатую задачу.</param>
      <param name="cancellationToken">Токен отмены используется для отмены операций повторения, но не выполняемых или успешно завершенных операций.</param>
      <exception cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException">Если стратегия задержки определяет, что повтор действия больше не должен осуществляться.</exception>
      <exception cref="T:System.InvalidOperationException">Если обнаружена существующая транзакция и стратегия выполнения ее не поддерживает.</exception>
      <exception cref="T:System.InvalidOperationException">Если этот экземпляр уже использовался для выполнения операции.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.GetNextDelay(System.Exception)">
      <summary>Определяет, должна ли повторяться операция и какова задержка перед следующей попыткой.</summary>
      <returns>Задержка, указывающая, как долго следует ожидать перед следующей попыткой выполнения, если действие должно быть повторено; в противном случае — значение null.</returns>
      <param name="lastException">Исключение, активированное во время последней попытки выполнения.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbExecutionStrategy.RetriesOnFailure">
      <summary>Возвращает значение, которое указывает, может ли метод <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy" /> повторять выполнение после сбоя.</summary>
      <returns>Значение true, если объект <see cref="T:System.Data.Entity.Infrastructure.DbExecutionStrategy" /> может повторить выполнение после сбоя; в противном случае — значение false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.ShouldRetryOn(System.Exception)">
      <summary>Определяет, представляет ли указанное исключение временный отказ, который можно устранить с помощью повторной попытки.</summary>
      <returns>Значение true, если указанное исключение рассматривается как временное; в противном случае — значение false.</returns>
      <param name="exception">Объект исключения, который должен быть проверен.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbExecutionStrategy.UnwrapAndHandleException``1(System.Exception,System.Func{System.Exception,``0})">
      <summary>Рекурсивно получает исключения InnerException из <paramref name="exception" />, при условии, что этот объект равен <see cref="T:System.Data.Entity.Core.EntityException" />, <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" /> или <see cref="T:System.Data.Entity.Core.UpdateException" />, и передает их в <paramref name="exceptionHandler" /></summary>
      <returns>Результат выполнения <paramref name="exceptionHandler" />.</returns>
      <param name="exception">Исключение, которое должно быть развернуто.</param>
      <param name="exceptionHandler">Делегат, который вызывается с развернутым исключением.</param>
      <typeparam name="T">Тип развернутого исключения.</typeparam>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbMemberEntry">
      <summary>Это абстрактный базовый класс, используемый для представления скалярного или сложного свойства либо свойства навигации у сущности.Скалярные и сложные свойства используют производный класс <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" />, свойства навигации по ссылке используют производный класс <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" />, а свойства навигации по коллекции используют производный класс <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.Cast``2">
      <summary>Возвращает эквивалентный универсальный объект <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2" />.</summary>
      <returns>Эквивалентный универсальный объект.</returns>
      <typeparam name="TEntity">Тип сущности, в которой объявлен этот элемент.</typeparam>
      <typeparam name="TProperty">Тип свойства.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.CurrentValue">
      <summary>Возвращает или задает текущее значение данного свойства.</summary>
      <returns>Текущее значение.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.EntityEntry">
      <summary>Класс <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />, к которому принадлежит этот элемент.</summary>
      <returns>Запись для сущности, которая владеет данным элементом.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.Equals(System.Object)">
      <summary>Определяет, равна ли заданная запись текущей записи.</summary>
      <returns>Если указанная запись равна текущей записи, значение true; в противном случае — false.</returns>
      <param name="obj">Объект, который требуется сравнить с текущей записью.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetHashCode">
      <summary>Возвращает хэш-функцию для данной записи.</summary>
      <returns>Хэш-функция для данной записи.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetType">
      <summary>Возвращает объект <see cref="T:System.Type" /> для текущего экземпляра.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.GetValidationErrors">
      <summary>Проверяет данное свойство.</summary>
      <returns>Коллекция объектов <see cref="T:System.Data.Entity.Validation.DbValidationError" />.Не может иметь значение NULL.Если сущность действительна, коллекция будет пустой.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry.Name">
      <summary>Возвращает имя свойства.</summary>
      <returns>Имя свойства.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry.ToString">
      <summary>Возвращает строковое представление значений свойств базы данных.</summary>
      <returns>Строковое представление значений свойств базы данных.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbMemberEntry`2">
      <summary>Это абстрактный базовый класс, используемый для представления скалярного или сложного свойства либо свойства навигации у сущности.Скалярные и сложные свойства используют производный класс <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" />, свойства навигации по ссылке используют производный класс <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" />, а свойства навигации по коллекции используют производный класс <see cref="T:System.Data.Entity.Infrastructure.DbCollectionEntry`2" />.</summary>
      <typeparam name="TEntity">Тип сущности, которой принадлежит это свойство.</typeparam>
      <typeparam name="TProperty">Тип свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.CurrentValue">
      <summary>Возвращает или задает текущее значение данного свойства.</summary>
      <returns>Текущее значение.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.EntityEntry">
      <summary>Класс <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />, к которому принадлежит этот элемент.</summary>
      <returns>Запись для сущности, которая владеет данным элементом.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.Equals(System.Object)">
      <summary>Определяет, равен ли объект указанному объекту.</summary>
      <returns>Значение true, если объект равен указанному объекту. В противном случае — значение false.</returns>
      <param name="obj">Сравниваемый объект.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetHashCode">
      <summary>Возвращает хэш-код, связанный с объектом.</summary>
      <returns>Хэш-код, связанный с данным объектом.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetType">
      <summary>Возвращает объект <see cref="T:System.Type" /> для текущего экземпляра.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.GetValidationErrors">
      <summary>Проверяет данное свойство.</summary>
      <returns>Коллекция объектов <see cref="T:System.Data.Entity.Validation.DbValidationError" />.Не может иметь значение NULL.Если сущность действительна, коллекция будет пустой.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbMemberEntry`2.Name">
      <summary>Возвращает имя свойства.</summary>
      <returns>Имя свойства.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbMemberEntry{`0,`1})~System.Data.Entity.Infrastructure.DbMemberEntry">
      <summary>Возвращает новый экземпляр неуниверсального класса <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry" /> для свойства, представленного данным объектом.</summary>
      <returns>Неуниверсальная версия.</returns>
      <param name="entry">Объект, представляющий свойство.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbMemberEntry`2.ToString">
      <summary>Возвращает строковое представление объекта <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2" />.</summary>
      <returns>Строковое представление объекта <see cref="T:System.Data.Entity.Infrastructure.DbMemberEntry`2" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbModel">
      <summary>Представляет модель EDM, созданную в <see cref="T:System.Data.Entity.DbModelBuilder" />.Метод Compile может использоваться для перехода от этого представления модели EDM к <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" />, что является скомпилированным моментальным снимком модели, подходящей для кэширования и создания экземпляра <see cref="T:System.Data.Entity.DbContext" /> или <see cref="T:System.Data.Objects.ObjectContext" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbModel.Compile">
      <summary>Создает для данного режима объект <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" />, который представляет собой скомпилированный моментальный снимок, подходящий для кэширования и создания экземпляров класса <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>Скомпилированная модель.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbModel.ConceptualModel">
      <summary>Возвращает концептуальную модель.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbModel.ConceptualToStoreMapping">
      <summary>Возвращает модель сопоставления.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbModel.ProviderInfo">
      <summary>Возвращает сведения о поставщике.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbModel.ProviderManifest">
      <summary>Возвращает манифест поставщика.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbModel.StoreModel">
      <summary>Возвращает модель хранения.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyEntry">
      <summary>Неуниверсальная версия класса <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyEntry.Cast``2">
      <summary>Возвращает эквивалентный универсальный объект <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2" />.</summary>
      <returns>Эквивалентный универсальный объект.</returns>
      <typeparam name="TEntity">Тип сущности, в которой объявлен этот элемент.</typeparam>
      <typeparam name="TProperty">Тип свойства.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.CurrentValue">
      <summary>Возвращает или задает текущее значение данного свойства.</summary>
      <returns>Текущее значение.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.EntityEntry">
      <summary>Объект <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />, которому принадлежит данное свойство.</summary>
      <returns>Запись для сущности, которая владеет данным свойством.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.IsModified">
      <summary>Возвращает или задает значение, указывающее, изменялось ли значение данного свойства со времени его загрузки из базы данных.</summary>
      <returns>Значение true, если этот экземпляр изменен; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.Name">
      <summary>Возвращает имя свойства.</summary>
      <returns>Имя свойства.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.OriginalValue">
      <summary>Возвращает или задает исходное значение данного свойства.</summary>
      <returns>Исходное значение.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry.ParentProperty">
      <summary>Значение <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" /> свойства, для которого это — вложенное свойство.Для свойств сложных объектов этот метод возвращает только запись, отличную от NULL. Для свойств самой сущности метод возвращает NULL.</summary>
      <returns>Запись для родительского сложного свойства или NULL, если данное свойство является свойством сущности.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyEntry`2">
      <summary>Экземпляры данного класса возвращаются методом Property объекта <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> и позволяют обращаться к состоянию скалярного или сложного свойства.</summary>
      <typeparam name="TEntity">Тип сущности, которой принадлежит это свойство.</typeparam>
      <typeparam name="TProperty">Тип свойства.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.CurrentValue">
      <summary>Возвращает или задает текущее значение данного свойства.</summary>
      <returns>Текущее значение.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.EntityEntry">
      <summary>Объект <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />, которому принадлежит данное свойство.</summary>
      <returns>Запись для сущности, которая владеет данным свойством.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.IsModified">
      <summary>Возвращает или задает значение, указывающее, изменялось ли значение данного свойства со времени его загрузки из базы данных.</summary>
      <returns>Значение true, если этот экземпляр изменен; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.Name">
      <summary>Возвращает имя свойства.</summary>
      <returns>Имя свойства.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbPropertyEntry{`0,`1})~System.Data.Entity.Infrastructure.DbPropertyEntry">
      <summary>Возвращает новый экземпляр неуниверсального класса <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" /> для свойства, представленного данным объектом.</summary>
      <returns>Неуниверсальная версия.</returns>
      <param name="entry">Объект, представляющий свойство.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.OriginalValue">
      <summary>Возвращает или задает исходное значение данного свойства.</summary>
      <returns>Исходное значение.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyEntry`2.ParentProperty">
      <summary>Значение <see cref="T:System.Data.Entity.Infrastructure.DbPropertyEntry" /> свойства, для которого это — вложенное свойство.Для свойств сложных объектов этот метод возвращает только запись, отличную от NULL. Для свойств самой сущности метод возвращает NULL.</summary>
      <returns>Запись для родительского сложного свойства или NULL, если данное свойство является свойством сущности.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbPropertyValues">
      <summary>Коллекция всех свойств базовой сущности или сложного объекта.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.Clone">
      <summary>Создает новый словарь, содержащий копии всех свойств в данном словаре.Изменения, вносимые в новый словарь, не будут отражаться в данном словаре, и наоборот.</summary>
      <returns>Клон данного словаря.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.Equals(System.Object)">
      <summary>Определяет, равен ли объект <see cref="T:System.Data.Entity.Infrastructure.DbPropertyValues" /> указанному объекту.</summary>
      <returns>Значение true, если <see cref="T:System.Data.Entity.Infrastructure.DbPropertyValues" /> равен указанному объекту; в противном случае — значение false.</returns>
      <param name="obj">Сравниваемый объект.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetHashCode">
      <summary>Возвращает хэш-код, связанный со значением свойства.</summary>
      <returns>Хэш-код, связанный со значением свойства.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetType">
      <summary>Возвращает объект <see cref="T:System.Type" /> для текущего экземпляра.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.GetValue``1(System.String)">
      <summary>Возвращает значение свойства так же, как при использовании метода считывания индексированного свойства, но приводит значение к типу универсального параметра.Это особенно полезно при работе с вложенными словарями, чтобы избежать написания выражений с множеством приведений.</summary>
      <returns>Значение свойства.</returns>
      <param name="propertyName">Имя свойства.</param>
      <typeparam name="TValue">Тип свойства.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyValues.Item(System.String)">
      <summary>Возвращает или задает значение свойства с указанным именем свойства.Значение может представлять вложенный экземпляр данного класса.</summary>
      <returns>Значение свойства.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbPropertyValues.PropertyNames">
      <summary>Возвращает набор только для чтения, содержащий имена всех свойств в словаре.</summary>
      <returns>Имена свойств.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.SetValues(System.Data.Entity.Infrastructure.DbPropertyValues)">
      <summary>Задает значения данного словаря, считывая значения из другого словаря.Другой словарь должен быть основан на том же типе, что и данный словарь, либо на типе, производном от типа данного словаря.</summary>
      <param name="propertyValues">Словарь, из которого будут считываться значения.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.SetValues(System.Object)">
      <summary>Задает значения данного словаря, считывая значения из указанного объекта.Указанный объект может быть любого типа.Любое свойство объекта с именем, которое согласуется с именем свойства в словаре и может быть считано, будет считано.Остальные свойства будут пропущены.Это позволяет, например, копировать свойства из объектов DTO.</summary>
      <param name="obj">Объект, из которого будут считываться значения.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.ToObject">
      <summary>Создает объект базового типа для данного словаря и заполняет его значениями свойств из этого словаря.</summary>
      <returns>Свойства в этом словаре копируются в новый объект.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbPropertyValues.ToString">
      <summary>Возвращает строковое представление объекта <see cref="T:System.Data.Entity.Infrastructure.DbPropertyValues" />.</summary>
      <returns>Строковое представление объекта <see cref="T:System.Data.Entity.Infrastructure.DbPropertyValues" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbProviderInfo">
      <summary>Группирует в один объект пару строк, идентифицирующих поставщика и версию сервера.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbProviderInfo.#ctor(System.String,System.String)">
      <summary>Создает новый объект для заданного неизменяемого имени поставщика и токена манифеста.</summary>
      <param name="providerInvariantName">Строка, которая определяет данного поставщика.Например, поставщик SQL Server использует строку «System.Data.SqlCient».</param>
      <param name="providerManifestToken">Строка, идентифицирующая версию используемого сервера базы данных.Например, поставщик SQL Server использует строку «2008» для SQL Server 2008.Это строка не может содержать значение null, но может быть пустой.Токен манифеста иногда называют указанием версии.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbProviderInfo.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект данному текущему объекту.</summary>
      <returns>Значение true, если указанный объект равен данному текущему объекту. В противном случае — значение false.</returns>
      <param name="obj">Объект, который требуется сравнить с текущим объектом.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbProviderInfo.GetHashCode">
      <summary>Возвращает хэш-функцию текущего объекта.</summary>
      <returns>Хэш-функция текущего объекта.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbProviderInfo.ProviderInvariantName">
      <summary>Строка, которая определяет данного поставщика.Например, поставщик SQL Server использует строку «System.Data.SqlCient».</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbProviderInfo.ProviderManifestToken">
      <summary>Строка, идентифицирующая версию используемого сервера базы данных.Например, поставщик SQL Server использует строку «2008» для SQL Server 2008.Это строка не может содержать значение null, но может быть пустой.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbQuery">
      <summary>Представляет неуниверсальный запрос LINQ to Entities к контексту DbContext.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.AsNoTracking">
      <summary>Возвращает новый запрос, в котором возвращаемые сущности не кэшируются в <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>Новый запрос с применением NoTracking.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.AsStreaming">
      <summary>Возвращает новый запрос, который обеспечивает потоковую обработку результатов вместо буферизации.</summary>
      <returns>Новый запрос с применением AsStreaming.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Cast``1">
      <summary>Возвращает эквивалентный универсальный объект <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1" />.</summary>
      <returns>Универсальный объект набора.</returns>
      <typeparam name="TElement">Тип элемента, для которого был создан запрос.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.ElementType">
      <summary>Тип элемента IQueryable.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Equals(System.Object)">
      <summary>Определяет, равен ли запрос указанному объекту.</summary>
      <returns>Значение true, если запрос равен указанному объекту. В противном случае — значение false.</returns>
      <param name="obj">Сравниваемый объект.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.GetHashCode">
      <summary>Возвращает хэш-код, связанный с запросом.</summary>
      <returns>Хэш-код, связанный с запросом.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.GetType">
      <summary>Возвращает тип, связанный с запросом.</summary>
      <returns>Тип, связанный с запросом.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.Include(System.String)">
      <summary>Задает связанные объекты, включаемые в результаты запроса.</summary>
      <returns>Новый DbQuery&amp;lt;T&amp;gt; с указанным путем запроса.</returns>
      <param name="path">Разделенный точками список связанных объектов, включаемых в результаты запроса.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает объект <see cref="T:System.Collections.IEnumerator" />, который при перечислении выполняет заданный запрос по отношению к базе данных.</summary>
      <returns>Результаты запроса.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Возвращает значение типа false.</summary>
      <returns>false .</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.System#ComponentModel#IListSource#GetList">
      <summary>Вызывает исключение, указывающее, что прямая привязка к запросу к хранилищу не поддерживается.Вместо этого заполните DbSet данными, например, с использованием метода расширения Load, а затем выполните привязку к локальным данным.Применительно к привязке WPF к DbSet.Local.Применительно к формам Windows Forms, связанным с DbSet.Local.ToBindingList().</summary>
      <returns>Никогда не возвращает значение, всегда вызывает исключение.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>Возвращает объект <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator" />, который при перечислении выполняет заданный запрос по отношению к базе данных.</summary>
      <returns>Результаты запроса.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#Linq#IQueryable#Expression">
      <summary>LINQ-выражение IQueryable.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery.System#Linq#IQueryable#Provider">
      <summary>Поставщик IQueryable.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery.ToString">
      <summary>Возвращает представление <see cref="T:System.String" /> базового запроса.</summary>
      <returns>Строка запроса.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbQuery`1">
      <summary>Представляет запрос LINQ to Entities к контексту DbContext.</summary>
      <typeparam name="TResult">Тип сущности, для которой выполняется запрос.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.AsNoTracking">
      <summary>Возвращает новый запрос, в котором возвращаемые сущности не кэшируются в <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>Новый запрос с применением NoTracking.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.AsStreaming">
      <summary>Возвращает новый запрос, который обеспечивает потоковую обработку результатов вместо буферизации.</summary>
      <returns>Новый запрос с применением AsStreaming.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.Equals(System.Object)">
      <summary>Определяет, равен ли текущий запрос указанному запросу.</summary>
      <returns>Если текущий запрос равен указанному запросу, значение true; в противном случае — false.</returns>
      <param name="obj">Объект, который требуется сравнить с текущим запросом.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.GetHashCode">
      <summary>Возвращает хэш-функцию для данного запроса.</summary>
      <returns>Хэш-функция для данного запроса.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.GetType">
      <summary>Возвращает тип текущего запроса.</summary>
      <returns>Тип текущего запроса.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.Include(System.String)">
      <summary>Задает связанные объекты, включаемые в результаты запроса.</summary>
      <returns>Новый запрос <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1" /> с определенным путем запроса.</returns>
      <param name="path">Разделенный точками список связанных объектов, включаемых в результаты запроса.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.op_Implicit(System.Data.Entity.Infrastructure.DbQuery{`0})~System.Data.Entity.Infrastructure.DbQuery">
      <summary>Возвращает новый экземпляр неуниверсального класса <see cref="T:System.Data.Entity.Infrastructure.DbQuery" /> для этого запроса.</summary>
      <returns>Неуниверсальная версия.</returns>
      <param name="entry">Запрос.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <summary>Возвращает перечисление для данного запроса, вызывая выполнение этого запроса к хранилищу.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerator`1" /> для данного запроса.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает объект <see cref="T:System.Collections.Generic.IEnumerator`1" />, который при перечислении выполняет заданный запрос по отношению к базе данных.</summary>
      <returns>Результаты запроса.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Возвращает значение типа false.</summary>
      <returns>false .</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#ComponentModel#IListSource#GetList">
      <summary>Вызывает исключение, указывающее, что прямая привязка к запросу к хранилищу не поддерживается.Вместо этого заполните DbSet данными, например, с использованием метода расширения Load, а затем выполните привязку к локальным данным.Применительно к привязке WPF к DbSet.Local.Применительно к формам Windows Forms, связанным с DbSet.Local.ToBindingList().</summary>
      <returns>Никогда не возвращает значение, всегда вызывает исключение.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>Возвращает объект <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator" />, который при перечислении выполняет заданный запрос по отношению к базе данных.</summary>
      <returns>Результаты запроса.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable{T}#GetAsyncEnumerator">
      <summary>Возвращает объект <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1" />, который при перечислении выполняет заданный запрос по отношению к базе данных.</summary>
      <returns>Результаты запроса.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#ElementType">
      <summary>Тип элемента IQueryable.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#Expression">
      <summary>LINQ-выражение IQueryable.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbQuery`1.System#Linq#IQueryable#Provider">
      <summary>Поставщик IQueryable.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbQuery`1.ToString">
      <summary>Возвращает представление <see cref="T:System.String" /> базового запроса.</summary>
      <returns>Строка запроса.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbRawSqlQuery">
      <summary>Представляет SQL-запрос для объектов, отличных от сущностей, который создан из <see cref="T:System.Data.Entity.DbContext" /> и выполняется с использованием соединения из этого контекста.Экземпляры этого класса получены из экземпляра <see cref="P:System.Data.Entity.DbContext.Database" />.Запрос не выполняется при создании этого объекта. Он выполняется при каждом перечислении объекта, например при выполнении инструкции foreach.SQL-запросы к сущностям создаются с использованием <see cref="M:System.Data.Entity.DbSet.SqlQuery(System.String,System.Object[])" />.См. <see cref="T:System.Data.Entity.Infrastructure.DbRawSqlQuery`1" /> для ознакомления с универсальной версией этого класса.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.AsStreaming">
      <summary>Возвращает новый запрос, который обеспечивает потоковую обработку результатов вместо буферизации.</summary>
      <returns>Новый запрос с применением AsStreaming.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.Equals(System.Object)">
      <summary>Определяет, равен ли запрос указанному объекту.</summary>
      <returns>Значение true, если запрос равен указанному объекту. В противном случае — значение false.</returns>
      <param name="obj">Сравниваемый объект.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.ForEachAsync(System.Action{System.Object})">
      <summary>Перечисляет в асинхронном режиме результаты запроса и выполняет указанное действие над каждым элементом.</summary>
      <returns>Задача, представляющая асинхронную операцию.</returns>
      <param name="action">Действие, которое должно быть выполнено над каждым элементом.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.ForEachAsync(System.Action{System.Object},System.Threading.CancellationToken)">
      <summary>Перечисляет в асинхронном режиме результаты запроса и выполняет указанное действие над каждым элементом.</summary>
      <returns>Задача, представляющая асинхронную операцию.</returns>
      <param name="action">Действие, которое должно быть выполнено над каждым элементом.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.GetEnumerator">
      <summary>Возвращает объект <see cref="T:System.Collections.IEnumerator" />, который при перечислении выполняет заданный SQL-запрос по отношению к базе данных.</summary>
      <returns>Объект <see cref="T:System.Collections.IEnumerator" />, который можно использовать для выполнения итерации по элементам.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.GetHashCode">
      <summary>Возвращает хэш-код, связанный с запросом.</summary>
      <returns>Хэш-код, связанный с запросом.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.GetType">
      <summary>Возвращает тип, связанный с запросом.</summary>
      <returns>Тип, связанный с запросом.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbRawSqlQuery.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Возвращает значение типа false.</summary>
      <returns>false .</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.System#ComponentModel#IListSource#GetList">
      <summary>Вызывает исключение, указывающее, что прямая привязка к запросу к хранилищу не поддерживается.</summary>
      <returns>Никогда не возвращает значение, всегда вызывает исключение.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>Возвращает объект <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable" />, который при перечислении выполняет заданный SQL-запрос по отношению к базе данных.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable" />, который можно использовать для выполнения итерации по элементам.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.ToListAsync">
      <summary>Создает выражение <see cref="T:System.Collections.Generic.List`1" /> из запроса путем его перечисления в асинхронном режиме.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит значение <see cref="T:System.Collections.Generic.List`1" />, которое содержит элементы из запроса.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.ToListAsync(System.Threading.CancellationToken)">
      <summary>Создает выражение <see cref="T:System.Collections.Generic.List`1" /> из запроса путем его перечисления в асинхронном режиме.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит значение <see cref="T:System.Collections.Generic.List`1" />, которое содержит элементы из запроса.</returns>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery.ToString">
      <summary>Возвращает представление <see cref="T:System.String" />, которое содержит строку SQL, заданную при создании запроса.Параметры не включены.</summary>
      <returns>Значение <see cref="T:System.String" />, которое представляет этот экземпляр.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbRawSqlQuery`1">
      <summary>Представляет SQL-запрос для объектов, отличных от сущностей, который создан из <see cref="T:System.Data.Entity.DbContext" /> и выполняется с использованием соединения из этого контекста.Экземпляры этого класса получены из экземпляра <see cref="P:System.Data.Entity.DbContext.Database" />.Запрос не выполняется при создании этого объекта; выполнение происходит при каждом его перечислении, например, с использованием foreach.SQL-запросы к сущностям создаются с использованием <see cref="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])" />.См. <see cref="T:System.Data.Entity.Infrastructure.DbRawSqlQuery" /> для ознакомления с неуниверсальной версией этого класса.</summary>
      <typeparam name="TElement">Тип элементов, возвращаемых запросом.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AllAsync(System.Func{`0,System.Boolean})">
      <summary>Определяет в асинхронном режиме, все ли элементы запроса удовлетворяют условию.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит true, если каждый элемент в результате запроса проходит проверку в указанном предикате; в противном случае — значение false.</returns>
      <param name="predicate">Функция, предназначенная для проверки каждого элемента по условию.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="predicate" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AllAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>Определяет в асинхронном режиме, все ли элементы запроса удовлетворяют условию.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит true, если каждый элемент в результате запроса проходит проверку в указанном предикате; в противном случае — значение false.</returns>
      <param name="predicate">Функция, предназначенная для проверки каждого элемента по условию.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="predicate" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AnyAsync">
      <summary>Определяет в асинхронном режиме, содержит ли запрос какие-либо элементы.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит true, если результат запроса содержит какие-либо элементы; в противном случае — значение false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AnyAsync(System.Func{`0,System.Boolean})">
      <summary>Определяет в асинхронном режиме, удовлетворяет ли какой-либо элемент запроса условию.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит true, если какие-либо элементы в результате запроса проходят проверку в указанном предикате; в противном случае — значение false.</returns>
      <param name="predicate">Функция, предназначенная для проверки каждого элемента по условию.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AnyAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>Определяет в асинхронном режиме, удовлетворяет ли какой-либо элемент запроса условию.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит true, если какие-либо элементы в результате запроса проходят проверку в указанном предикате; в противном случае — значение false.</returns>
      <param name="predicate">Функция, предназначенная для проверки каждого элемента по условию.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AnyAsync(System.Threading.CancellationToken)">
      <summary>Определяет в асинхронном режиме, содержит ли запрос какие-либо элементы.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит true, если результат запроса содержит какие-либо элементы; в противном случае — значение false.</returns>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.AsStreaming">
      <summary>Возвращает новый запрос, который обеспечивает потоковую обработку результатов вместо буферизации.</summary>
      <returns>Новый запрос с применением AsStreaming.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ContainsAsync(`0)">
      <summary>Определяет в асинхронном режиме, содержит ли запрос указанный элемент, применяя заданное по умолчанию средство сравнения на равенство.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит true, если результат запроса содержит указанное значение; в противном случае — значение false.</returns>
      <param name="value">Объект, который должен быть найден в результате запроса.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ContainsAsync(`0,System.Threading.CancellationToken)">
      <summary>Определяет в асинхронном режиме, содержит ли запрос указанный элемент, применяя заданное по умолчанию средство сравнения на равенство.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит true, если результат запроса содержит указанное значение; в противном случае — значение false.</returns>
      <param name="value">Объект, который должен быть найден в результате запроса.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.CountAsync">
      <summary>Возвращает в асинхронном режиме количество элементов в запросе.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит количество элементов в результате запроса.</returns>
      <exception cref="T:System.OverflowException">Число элементов в результате запроса больше <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.CountAsync(System.Func{`0,System.Boolean})">
      <summary>Возвращает в асинхронном режиме количество элементов в запросе, удовлетворяющих условию.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит количество элементов в результате запроса, которые удовлетворяют условию в предикативной функции.</returns>
      <param name="predicate">Функция, предназначенная для проверки каждого элемента по условию.</param>
      <exception cref="T:System.OverflowException">Число элементов в результате запроса, которые удовлетворяют условию в предикативной функции, больше <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.CountAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>Возвращает в асинхронном режиме количество элементов в запросе, удовлетворяющих условию.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит количество элементов в результате запроса, которые удовлетворяют условию в предикативной функции.</returns>
      <param name="predicate">Функция, предназначенная для проверки каждого элемента по условию.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <exception cref="T:System.OverflowException">Число элементов в результате запроса, которые удовлетворяют условию в предикативной функции, больше <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.CountAsync(System.Threading.CancellationToken)">
      <summary>Возвращает в асинхронном режиме количество элементов в запросе.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит количество элементов в результате запроса.</returns>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <exception cref="T:System.OverflowException">Число элементов в результате запроса больше <see cref="F:System.Int32.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.Equals(System.Object)">
      <summary>Определяет, равен ли текущий запрос указанному запросу.</summary>
      <returns>Если текущий запрос равен указанному запросу, значение true; в противном случае — false.</returns>
      <param name="obj">Запрос, который требуется сравнить с текущим запросом.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstAsync">
      <summary>Возвращает в асинхронном режиме первый элемент запроса.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит первый элемент в результате запроса.</returns>
      <exception cref="T:System.InvalidOperationException">Результат запроса пуст.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstAsync(System.Func{`0,System.Boolean})">
      <summary>Возвращает в асинхронном режиме первый элемент запроса, удовлетворяющий указанному условию.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит первый элемент в результате запроса, который удовлетворяет заданному условию.</returns>
      <param name="predicate">Функция, предназначенная для проверки каждого элемента по условию.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="predicate" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">Результат запроса пуст.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>Возвращает в асинхронном режиме первый элемент запроса, удовлетворяющий указанному условию.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит первый элемент в результате запроса, который удовлетворяет заданному условию.</returns>
      <param name="predicate">Функция, предназначенная для проверки каждого элемента по условию.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="predicate" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">Результат запроса пуст.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstAsync(System.Threading.CancellationToken)">
      <summary>Возвращает в асинхронном режиме первый элемент запроса.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит первый элемент в результате запроса.</returns>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <exception cref="T:System.InvalidOperationException">Результат запроса пуст.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstOrDefaultAsync">
      <summary>Возвращает в асинхронном режиме первый элемент запроса или значение по умолчанию, если результат запроса не содержит элементов.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит default ( <paramref name="TElement" /> ), если результат запроса пуст; в противном случае — первый элемент в результате запроса.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstOrDefaultAsync(System.Func{`0,System.Boolean})">
      <summary>Возвращает в асинхронном режиме первый элемент запроса, удовлетворяющий указанному условию, или значение по умолчанию, если таковой элемент не найден.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит default ( <paramref name="TElement" /> ), если результат запроса пуст или ни один элемент не проходит проверку, заданную в <paramref name="predicate" />; в противном случае — первый элемент в результате запроса, который проходит проверку в <paramref name="predicate" />.</returns>
      <param name="predicate">Функция, предназначенная для проверки каждого элемента по условию.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="predicate" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstOrDefaultAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>Возвращает в асинхронном режиме первый элемент запроса, удовлетворяющий указанному условию, или значение по умолчанию, если таковой элемент не найден.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит default ( <paramref name="TElement" /> ), если результат запроса пуст или ни один элемент не проходит проверку, заданную в <paramref name="predicate" />; в противном случае — первый элемент в результате запроса, который проходит проверку в <paramref name="predicate" />.</returns>
      <param name="predicate">Функция, предназначенная для проверки каждого элемента по условию.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="predicate" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.FirstOrDefaultAsync(System.Threading.CancellationToken)">
      <summary>Возвращает в асинхронном режиме первый элемент запроса или значение по умолчанию, если результат запроса не содержит элементов.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит default ( <paramref name="TElement" /> ), если результат запроса пуст; в противном случае — первый элемент в результате запроса.</returns>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ForEachAsync(System.Action{`0})">
      <summary>Перечисляет в асинхронном режиме результаты запроса и выполняет указанное действие над каждым элементом.</summary>
      <returns>Задача, представляющая асинхронную операцию.</returns>
      <param name="action">Выполняемое действие.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ForEachAsync(System.Action{`0},System.Threading.CancellationToken)">
      <summary>Перечисляет в асинхронном режиме результаты запроса и выполняет указанное действие над каждым элементом.</summary>
      <returns>Задача, представляющая асинхронную операцию.</returns>
      <param name="action">Выполняемое действие.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.GetEnumerator">
      <summary>Возвращает объект <see cref="T:System.Collections.Generic.IEnumerator`1" />, который при перечислении выполняет заданный SQL-запрос по отношению к базе данных.</summary>
      <returns>Объект <see cref="T:System.Collections.Generic.IEnumerator`1" />, который можно использовать для выполнения итерации по элементам.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.GetHashCode">
      <summary>Возвращает хэш-функцию для данного запроса.</summary>
      <returns>Хэш-функция для данного запроса.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.GetType">
      <summary>Возвращает тип текущего запроса.</summary>
      <returns>Тип текущего запроса.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.LongCountAsync">
      <summary>Возвращает в асинхронном режиме значение <see cref="T:System.Int64" />, которое представляет общее количество элементов в запросе.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит количество элементов в результате запроса.</returns>
      <exception cref="T:System.OverflowException">Число элементов в результате запроса больше <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.LongCountAsync(System.Func{`0,System.Boolean})">
      <summary>Возвращает в асинхронном режиме значение <see cref="T:System.Int64" />, которое представляет количество элементов в запросе, удовлетворяющих условию.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит количество элементов в результате запроса, которые удовлетворяют условию в предикативной функции.</returns>
      <param name="predicate">Функция, предназначенная для проверки каждого элемента по условию.</param>
      <exception cref="T:System.OverflowException">Число элементов в результате запроса, которые удовлетворяют условию в предикативной функции, больше <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.LongCountAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>Возвращает в асинхронном режиме значение <see cref="T:System.Int64" />, которое представляет количество элементов в запросе, удовлетворяющих условию.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит количество элементов в результате запроса, которые удовлетворяют условию в предикативной функции.</returns>
      <param name="predicate">Функция, предназначенная для проверки каждого элемента по условию.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <exception cref="T:System.OverflowException">Число элементов в результате запроса, которые удовлетворяют условию в предикативной функции, больше <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.LongCountAsync(System.Threading.CancellationToken)">
      <summary>Возвращает в асинхронном режиме значение <see cref="T:System.Int64" />, которое представляет общее количество элементов в запросе.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит количество элементов в результате запроса.</returns>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <exception cref="T:System.OverflowException">Число элементов в результате запроса больше <see cref="F:System.Int64.MaxValue" />.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.MaxAsync">
      <summary>Возвращает в асинхронном режиме максимальное значение запроса.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит максимальное значение в результате запроса.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.MaxAsync(System.Threading.CancellationToken)">
      <summary>Возвращает в асинхронном режиме максимальное значение запроса.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит максимальное значение в результате запроса.</returns>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.MinAsync">
      <summary>Возвращает в асинхронном режиме минимальное значение запроса.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит минимальное значение в результате запроса.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.MinAsync(System.Threading.CancellationToken)">
      <summary>Возвращает в асинхронном режиме минимальное значение запроса.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит минимальное значение в результате запроса.</returns>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleAsync">
      <summary>Возвращает в асинхронном режиме единственный элемент запроса и вызывает исключение, если количество элементов в последовательности не равно точно одному.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит единственный элемент в результате запроса.</returns>
      <exception cref="T:System.InvalidOperationException">Результат запроса имеет больше одного элемента.</exception>
      <exception cref="T:System.InvalidOperationException">Результат запроса пуст.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleAsync(System.Func{`0,System.Boolean})">
      <summary>Возвращает в асинхронном режиме единственный элемент запроса, удовлетворяющий заданному условию, и вызывает исключение, если существуют несколько таких элементов.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит единственный элемент в результате запроса, который удовлетворяет условию в <paramref name="predicate" />.</returns>
      <param name="predicate">Функция, предназначенная для проверки каждого элемента по условию.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="predicate" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">Ни один элемент не удовлетворяет условию в <paramref name="predicate" />.</exception>
      <exception cref="T:System.InvalidOperationException">Условию в <paramref name="predicate" /> удовлетворяют больше одного элемента.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>Возвращает в асинхронном режиме единственный элемент запроса, удовлетворяющий заданному условию, и вызывает исключение, если существуют несколько таких элементов.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит единственный элемент в результате запроса, который удовлетворяет условию в <paramref name="predicate" />.</returns>
      <param name="predicate">Функция, предназначенная для проверки каждого элемента по условию.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="predicate" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">Ни один элемент не удовлетворяет условию в <paramref name="predicate" />.</exception>
      <exception cref="T:System.InvalidOperationException">Условию в <paramref name="predicate" /> удовлетворяют больше одного элемента.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleAsync(System.Threading.CancellationToken)">
      <summary>Возвращает в асинхронном режиме единственный элемент запроса и вызывает исключение, если количество элементов в последовательности не равно точно одному.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит единственный элемент в результате запроса.</returns>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <exception cref="T:System.InvalidOperationException">Результат запроса имеет больше одного элемента.</exception>
      <exception cref="T:System.InvalidOperationException">Результат запроса пуст.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleOrDefaultAsync">
      <summary>Возвращает в асинхронном режиме единственный элемент последовательности или значение по умолчанию, если последовательность пуста; этот метод вызывает исключение, если количество элементов в последовательности больше одного.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит единственный элемент в результате запроса или default ( <paramref name="TElement" /> ), если последовательность не содержит элементов.</returns>
      <exception cref="T:System.InvalidOperationException">Результат запроса имеет больше одного элемента.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleOrDefaultAsync(System.Func{`0,System.Boolean})">
      <summary>Возвращает в асинхронном режиме единственный элемент запроса, удовлетворяющий заданному условию, или значение по умолчанию, если таковой элемент не существует; этот метод вызывает исключение, если условию удовлетворяют больше одного элемента.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит единственный элемент в результате запроса, который удовлетворяет условию в <paramref name="predicate" />, или default ( <paramref name="TElement" /> ), если таковой элемент не найден.</returns>
      <param name="predicate">Функция, предназначенная для проверки каждого элемента по условию.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="predicate" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">Условию в <paramref name="predicate" /> удовлетворяют больше одного элемента.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleOrDefaultAsync(System.Func{`0,System.Boolean},System.Threading.CancellationToken)">
      <summary>Возвращает в асинхронном режиме единственный элемент запроса, удовлетворяющий заданному условию, или значение по умолчанию, если таковой элемент не существует; этот метод вызывает исключение, если условию удовлетворяют больше одного элемента.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит единственный элемент в результате запроса, который удовлетворяет условию в <paramref name="predicate" />, или default ( <paramref name="TElement" /> ), если таковой элемент не найден.</returns>
      <param name="predicate">Функция, предназначенная для проверки каждого элемента по условию.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="predicate" /> равно null.</exception>
      <exception cref="T:System.InvalidOperationException">Условию в <paramref name="predicate" /> удовлетворяют больше одного элемента.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.SingleOrDefaultAsync(System.Threading.CancellationToken)">
      <summary>Возвращает в асинхронном режиме единственный элемент последовательности или значение по умолчанию, если последовательность пуста; этот метод вызывает исключение, если количество элементов в последовательности больше одного.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит единственный элемент в результате запроса или default ( <paramref name="TElement" /> ), если последовательность не содержит элементов.</returns>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <exception cref="T:System.InvalidOperationException">Результат запроса имеет больше одного элемента.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#Collections#IEnumerable#GetEnumerator">
      <summary>Возвращает объект <see cref="T:System.Collections.IEnumerator" />, который при перечислении выполняет заданный SQL-запрос по отношению к базе данных.</summary>
      <returns>Объект <see cref="T:System.Collections.IEnumerator" />, который можно использовать для выполнения итерации по элементам.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#ComponentModel#IListSource#ContainsListCollection">
      <summary>Возвращает значение типа false.</summary>
      <returns>false .</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#ComponentModel#IListSource#GetList">
      <summary>Вызывает исключение, указывающее, что прямая привязка к запросу к хранилищу не поддерживается.</summary>
      <returns>Никогда не возвращает значение, всегда вызывает исключение.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable#GetAsyncEnumerator">
      <summary>Возвращает объект <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable" />, который при перечислении выполняет заданный SQL-запрос по отношению к базе данных.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable" />, который можно использовать для выполнения итерации по элементам.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.System#Data#Entity#Infrastructure#IDbAsyncEnumerable{T}#GetAsyncEnumerator">
      <summary>Возвращает объект <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1" />, который при перечислении выполняет заданный SQL-запрос по отношению к базе данных.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1" />, который можно использовать для выполнения итерации по элементам.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToArrayAsync">
      <summary>Создает массив из запроса путем перечисления его в асинхронном режиме.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит массив, содержащий элементы из входной последовательности.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToArrayAsync(System.Threading.CancellationToken)">
      <summary>Создает массив из запроса путем перечисления его в асинхронном режиме.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит массив, содержащий элементы из входной последовательности.</returns>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``1(System.Func{`0,``0})">
      <summary>Создает выражение <see cref="T:System.Collections.Generic.Dictionary`2" /> из запроса путем его перечисления в асинхронном режиме согласно заданной функции выбора ключа.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит словарь <see cref="T:System.Collections.Generic.Dictionary`2" />, который содержит выбранные ключи и значения.</returns>
      <param name="keySelector">Функция, предназначенная для извлечения ключа из каждого элемента.</param>
      <typeparam name="TKey">Тип ключа, возвращенного средством выбора <paramref name="keySelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Создает выражение <see cref="T:System.Collections.Generic.Dictionary`2" /> из запроса путем его перечисления в асинхронном режиме согласно заданной функции выбора ключа и средства сравнения.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит словарь <see cref="T:System.Collections.Generic.Dictionary`2" />, который содержит выбранные ключи и значения.</returns>
      <param name="keySelector">Функция, предназначенная для извлечения ключа из каждого элемента.</param>
      <param name="comparer">Значение <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> для сравнения ключей.</param>
      <typeparam name="TKey">Тип ключа, возвращенного средством выбора <paramref name="keySelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
      <summary>Создает выражение <see cref="T:System.Collections.Generic.Dictionary`2" /> из запроса путем его перечисления в асинхронном режиме согласно заданной функции выбора ключа и средства сравнения.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит словарь <see cref="T:System.Collections.Generic.Dictionary`2" />, который содержит выбранные ключи и значения.</returns>
      <param name="keySelector">Функция, предназначенная для извлечения ключа из каждого элемента.</param>
      <param name="comparer">Значение <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> для сравнения ключей.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TKey">Тип ключа, возвращенного средством выбора <paramref name="keySelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``2(System.Func{`0,``0},System.Func{`0,``1})">
      <summary>Создает выражение <see cref="T:System.Collections.Generic.Dictionary`2" /> из запроса путем его перечисления в асинхронном режиме согласно заданной функции выбора ключа и выбора элемента.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит словарь <see cref="T:System.Collections.Generic.Dictionary`2" />, который содержит значения типа <paramref name="TResult" />, выбранные из запроса.</returns>
      <param name="keySelector">Функция, предназначенная для извлечения ключа из каждого элемента.</param>
      <param name="elementSelector">Функция преобразования, предназначенная для формирования значения элемента результата из каждого элемента.</param>
      <typeparam name="TKey">Тип ключа, возвращенного средством выбора <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">Тип значения, возвращенного <paramref name="elementSelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``2(System.Func{`0,``0},System.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0})">
      <summary>Создает выражение <see cref="T:System.Collections.Generic.Dictionary`2" /> из запроса путем его перечисления в асинхронном режиме согласно заданной функции выбора ключа, средства сравнения и функции выбора элемента.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит словарь <see cref="T:System.Collections.Generic.Dictionary`2" />, который содержит значения типа <paramref name="TResult" />, выбранные из входной последовательности.</returns>
      <param name="keySelector">Функция, предназначенная для извлечения ключа из каждого элемента.</param>
      <param name="elementSelector">Функция преобразования, предназначенная для формирования значения элемента результата из каждого элемента.</param>
      <param name="comparer">Значение <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> для сравнения ключей.</param>
      <typeparam name="TKey">Тип ключа, возвращенного средством выбора <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">Тип значения, возвращенного <paramref name="elementSelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``2(System.Func{`0,``0},System.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0},System.Threading.CancellationToken)">
      <summary>Создает выражение <see cref="T:System.Collections.Generic.Dictionary`2" /> из запроса путем его перечисления в асинхронном режиме согласно заданной функции выбора ключа, средства сравнения и функции выбора элемента.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит словарь <see cref="T:System.Collections.Generic.Dictionary`2" />, который содержит значения типа <paramref name="TResult" />, выбранные из входной последовательности.</returns>
      <param name="keySelector">Функция, предназначенная для извлечения ключа из каждого элемента.</param>
      <param name="elementSelector">Функция преобразования, предназначенная для формирования значения элемента результата из каждого элемента.</param>
      <param name="comparer">Значение <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> для сравнения ключей.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TKey">Тип ключа, возвращенного средством выбора <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">Тип значения, возвращенного <paramref name="elementSelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``2(System.Func{`0,``0},System.Func{`0,``1},System.Threading.CancellationToken)">
      <summary>Создает выражение <see cref="T:System.Collections.Generic.Dictionary`2" /> из запроса путем его перечисления в асинхронном режиме согласно заданной функции выбора ключа и выбора элемента.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит словарь <see cref="T:System.Collections.Generic.Dictionary`2" />, который содержит значения типа <paramref name="TResult" />, выбранные из запроса.</returns>
      <param name="keySelector">Функция, предназначенная для извлечения ключа из каждого элемента.</param>
      <param name="elementSelector">Функция преобразования, предназначенная для формирования значения элемента результата из каждого элемента.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TKey">Тип ключа, возвращенного средством выбора <paramref name="keySelector" />.</typeparam>
      <typeparam name="TResult">Тип значения, возвращенного <paramref name="elementSelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToDictionaryAsync``1(System.Func{`0,``0},System.Threading.CancellationToken)">
      <summary>Создает выражение <see cref="T:System.Collections.Generic.Dictionary`2" /> из запроса путем его перечисления в асинхронном режиме согласно заданной функции выбора ключа.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит словарь <see cref="T:System.Collections.Generic.Dictionary`2" />, который содержит выбранные ключи и значения.</returns>
      <param name="keySelector">Функция, предназначенная для извлечения ключа из каждого элемента.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TKey">Тип ключа, возвращенного средством выбора <paramref name="keySelector" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToListAsync">
      <summary>Создает выражение <see cref="T:System.Collections.Generic.List`1" /> из запроса путем его перечисления в асинхронном режиме.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит значение <see cref="T:System.Collections.Generic.List`1" />, которое содержит элементы из входной последовательности.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToListAsync(System.Threading.CancellationToken)">
      <summary>Создает выражение <see cref="T:System.Collections.Generic.List`1" /> из запроса путем его перечисления в асинхронном режиме.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит значение <see cref="T:System.Collections.Generic.List`1" />, которое содержит элементы из входной последовательности.</returns>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbRawSqlQuery`1.ToString">
      <summary>Возвращает представление <see cref="T:System.String" />, которое содержит строку SQL, заданную при создании запроса.Параметры не включены.</summary>
      <returns>Значение <see cref="T:System.String" />, которое представляет этот экземпляр.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbReferenceEntry">
      <summary>Неуниверсальная версия класса <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Cast``2">
      <summary>Возвращает эквивалентный универсальный объект <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2" />.</summary>
      <returns>Эквивалентный универсальный объект.</returns>
      <typeparam name="TEntity">Тип сущности, в которой объявлен этот элемент.</typeparam>
      <typeparam name="TProperty">Тип свойства.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.CurrentValue">
      <summary>Возвращает или задает текущее значение свойства навигации.Текущее значение равно сущности, на которую ссылается свойство навигации.</summary>
      <returns>Текущее значение.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.EntityEntry">
      <summary>Объект <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />, которому принадлежит данное свойство навигации.</summary>
      <returns>Запись для сущности, которая владеет данным свойством навигации.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.IsLoaded">
      <summary>Возвращает или задает значение, указывающее, была ли сущность загружена из базы данных.</summary>
      <returns>Значение true, если сущность загружена или флаг IsLoaded явно установлен равным true; в противном случае — значение false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Load">
      <summary>Загружает сущность из базы данных.Обратите внимание, что, если сущность уже существует в контексте, она не будет перезаписана значениями из базы данных.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.LoadAsync">
      <summary>Загружает в асинхронном режиме сущность из базы данных.Обратите внимание, что, если сущность уже существует в контексте, она не будет перезаписана значениями из базы данных.</summary>
      <returns>Задача, представляющая асинхронную операцию.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.LoadAsync(System.Threading.CancellationToken)">
      <summary>Загружает в асинхронном режиме сущность из базы данных.Обратите внимание, что, если сущность уже существует в контексте, она не будет перезаписана значениями из базы данных.</summary>
      <returns>Задача, представляющая асинхронную операцию.</returns>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry.Name">
      <summary>Возвращает имя свойства.</summary>
      <returns>Имя свойства.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry.Query">
      <summary>Возвращает запрос, который будет использоваться для загрузки этой сущности из базы данных.Возвращаемый запрос можно изменить с помощью LINQ для выполнения фильтрации или операций в базе данных.</summary>
      <returns>Запрос для сущности.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbReferenceEntry`2">
      <summary>Экземпляры этого класса возвращены из метода Reference объекта <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" /> и позволяют выполнять по отношению к свойствам навигации ссылки сущности такие операции, как загрузка.</summary>
      <typeparam name="TEntity">Тип сущности, которой принадлежит это свойство.</typeparam>
      <typeparam name="TProperty">Тип свойства.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.CurrentValue">
      <summary>Возвращает или задает текущее значение свойства навигации.Текущее значение равно сущности, на которую ссылается свойство навигации.</summary>
      <returns>Текущее значение.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.EntityEntry">
      <summary>Объект <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry`1" />, которому принадлежит данное свойство навигации.</summary>
      <returns>Запись для сущности, которая владеет данным свойством навигации.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.IsLoaded">
      <summary>Возвращает или задает значение, указывающее, была ли сущность загружена из базы данных.</summary>
      <returns>Значение true, если сущность загружена или флаг IsLoaded явно установлен равным true; в противном случае — значение false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Load">
      <summary>Загружает сущность из базы данных.Обратите внимание, что, если сущность уже существует в контексте, она не будет перезаписана значениями из базы данных.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.LoadAsync">
      <summary>Загружает в асинхронном режиме сущность из базы данных.Обратите внимание, что, если сущность уже существует в контексте, она не будет перезаписана значениями из базы данных.</summary>
      <returns>Задача, представляющая асинхронную операцию.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.LoadAsync(System.Threading.CancellationToken)">
      <summary>Загружает в асинхронном режиме сущность из базы данных.Обратите внимание, что, если сущность уже существует в контексте, она не будет перезаписана значениями из базы данных.</summary>
      <returns>Задача, представляющая асинхронную операцию.</returns>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Name">
      <summary>Возвращает имя свойства.</summary>
      <returns>Имя свойства.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.op_Implicit(System.Data.Entity.Infrastructure.DbReferenceEntry{`0,`1})~System.Data.Entity.Infrastructure.DbReferenceEntry">
      <summary>Возвращает новый экземпляр неуниверсального класса <see cref="T:System.Data.Entity.Infrastructure.DbReferenceEntry" /> для свойства навигации, представленного данным объектом.</summary>
      <returns>Неуниверсальная версия.</returns>
      <param name="entry">Объект, представляющий свойство навигации.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbReferenceEntry`2.Query">
      <summary>Возвращает запрос, который будет использоваться для загрузки этой сущности из базы данных.Возвращаемый запрос можно изменить с помощью LINQ для выполнения фильтрации или операций в базе данных.</summary>
      <returns>Запрос для сущности.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbSqlQuery">
      <summary>Представляет SQL-запрос для сущностей, который создан из объекта <see cref="T:System.Data.Entity.DbContext" /> и выполняется с использованием соединения из этого контекста.Экземпляры этого класса получены из экземпляра <see cref="T:System.Data.Entity.DbSet" /> для типа сущности.Запрос не выполняется при создании этого объекта. Он выполняется при каждом перечислении объекта, например при выполнении инструкции foreach.SQL-запросы к объектам, отличным от сущностей, создаются с использованием <see cref="M:System.Data.Entity.Database.SqlQuery(System.Type,System.String,System.Object[])" />.См. <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> для ознакомления с универсальной версией этого класса.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.#ctor">
      <summary>Создает экземпляр <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery" /> при вызове из конструктора производного типа, который будет использоваться как тестовый дубль для <see cref="M:System.Data.Entity.DbSet.SqlQuery(System.String,System.Object[])" />.Методы и свойства, используемые в тестовом дубле, должны быть реализованы в нем же за исключением AsNoTracking AsStreaming, которые в стандартной реализации являются операциями no-op.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.AsNoTracking">
      <summary>Возвращает новый запрос, в котором результаты запроса не отслеживаются связанным объектом <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>Новый запрос с применением NoTracking.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.AsStreaming">
      <summary>Возвращает новый запрос, который обеспечивает потоковую обработку результатов вместо буферизации.</summary>
      <returns>Новый запрос с применением AsStreaming.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему элементу.</summary>
      <returns>Значение true, если заданный объект равен текущему экземпляру. В противном случае — значение false.</returns>
      <param name="obj">Объект для сравнения с текущим экземпляром.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.GetHashCode">
      <summary>Возвращает хэш-код текущего экземпляра.</summary>
      <returns>Хэш-код для текущего экземпляра.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.GetType">
      <summary>Возвращает тип, связанный с запросом.</summary>
      <returns>Тип, связанный с запросом.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery.ToString">
      <summary>Возвращает представление <see cref="T:System.String" />, которое содержит строку SQL, заданную при создании запроса.Параметры не включены.</summary>
      <returns>Значение <see cref="T:System.String" />, которое представляет этот экземпляр.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbSqlQuery`1">
      <summary>Представляет SQL-запрос для сущностей, который создан из объекта <see cref="T:System.Data.Entity.DbContext" /> и выполняется с использованием соединения из этого контекста.Экземпляры этого класса получены из экземпляра <see cref="T:System.Data.Entity.DbSet`1" /> для типа сущности.Запрос не выполняется при создании этого объекта. Он выполняется при каждом перечислении объекта, например при выполнении инструкции foreach.SQL-запросы к объектам, отличным от сущностей, создаются с использованием <see cref="M:System.Data.Entity.Database.SqlQuery``1(System.String,System.Object[])" />.См. <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery" /> для ознакомления с неуниверсальной версией этого класса.</summary>
      <typeparam name="TEntity">Тип сущностей, возвращаемых запросом.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.#ctor">
      <summary>Создает экземпляр <see cref="T:System.Data.Entity.Infrastructure.DbSqlQuery`1" /> при вызове из конструктора производного типа, который будет использоваться как тестовый дубль для <see cref="M:System.Data.Entity.DbSet`1.SqlQuery(System.String,System.Object[])" />.Методы и свойства, используемые в тестовом дубле, должны быть реализованы в нем же за исключением AsNoTracking AsStreaming, которые в стандартной реализации являются операциями no-op.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.AsNoTracking">
      <summary>Возвращает новый запрос, в котором возвращаемые сущности не кэшируются в <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>Новый запрос с применением NoTracking.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.AsStreaming">
      <summary>Возвращает новый запрос, который обеспечивает потоковую обработку результатов вместо буферизации.</summary>
      <returns>Новый запрос с применением AsStreaming.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.Equals(System.Object)">
      <summary>Указывает, равен ли данный экземпляр конкретному объекту.</summary>
      <returns>Значение true, если экземпляр равен указанному объекту; в противном случае — значение false.</returns>
      <param name="obj">Сравниваемый объект.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetHashCode">
      <summary>Получает хэш-код, связанный с этим экземпляром.</summary>
      <returns>Хэш-код, связанный с этим экземпляром.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.GetType">
      <summary>Получает тип, связанный с этим экземпляром.</summary>
      <returns>Тип, связанный с этим экземпляром.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbSqlQuery`1.ToString">
      <summary>Возвращает строковое представление этого экземпляра.</summary>
      <returns>Строковое представление этого экземпляра.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException">
      <summary>Исключение, активированное в <see cref="T:System.Data.Entity.DbContext" />, если ожидалось, что применение метода SaveChanges к сущности приведет к обновлению базы данных, но фактически ни одна строка в базе данных не была затронута.Это обычно указывает, что база данных обновлена в параллельном режиме, поэтому токен параллелизма, который в соответствии с ожиданиями должен быть согласованным, фактически не согласован.Следует учитывать, что записи состояния, на которые ссылается это исключение, не сериализованы по соображениям безопасности и получают доступ к записям состояния после того, как сериализация возвращает значение NULL.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />.</summary>
      <param name="message">Сообщение.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateConcurrencyException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />.</summary>
      <param name="message">Сообщение.</param>
      <param name="innerException">Внутреннее исключение.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DbUpdateException">
      <summary>При неудачной попытке записи изменений в базу данных в <see cref="T:System.Data.Entity.DbContext" /> создается исключение.Следует учитывать, что записи состояния, на которые ссылается это исключение, не сериализованы по соображениям безопасности и получают доступ к записям состояния после того, как сериализация возвращает значение NULL.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />.</summary>
      <param name="message">Сообщение.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DbUpdateException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.DbUpdateException" />.</summary>
      <param name="message">Сообщение.</param>
      <param name="innerException">Внутреннее исключение.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DbUpdateException.Entries">
      <summary>Возвращает объекты <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />, представляющие сущности, которые не могли быть сохранены в базе данных.</summary>
      <returns>Записи, представляющие сущности, которые не могли быть сохранены.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DefaultExecutionStrategy">
      <summary>Представляет метод <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" /> по умолчанию, который не выполняет операции повторно, если они завершаются неудачей.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.DefaultExecutionStrategy" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.Execute(System.Action)">
      <summary>Выполняет указанную операцию один раз.</summary>
      <param name="operation">Делегат, представляющий операцию, предназначенную для выполнения, которая не возвращает результатов.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.Execute``1(System.Func{``0})">
      <summary>Выполняет указанную операцию один раз и возвращает результат.</summary>
      <returns>Результат выполнения операции.</returns>
      <param name="operation">Делегат, представляющий операцию, предназначенную для выполнения, которая возвращает результат типа <paramref name="TResult" />.</param>
      <typeparam name="TResult">Возвращаемый тип <paramref name="operation" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
      <summary>Выполняет указанную асинхронную операцию один раз, без повтора в случае сбоя.</summary>
      <returns>Задача, выполняемая до завершения, если исходная задача завершается успешно.</returns>
      <param name="operation">Функция, которая возвращает начатую задачу.</param>
      <param name="cancellationToken">Токен отмены используется для отмены операций повторения, но не выполняемых или успешно завершенных операций.</param>
      <typeparam name="TResult">Тип результата <see cref="T:System.Threading.Tasks.Task`1" />, возвращенный <paramref name="operation" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.ExecuteAsync(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
      <summary>Выполняет указанную асинхронную операцию один раз, без повтора в случае сбоя.</summary>
      <returns>Задача, выполняемая до завершения, если исходная задача завершается успешно.</returns>
      <param name="operation">Функция, которая возвращает начатую задачу.</param>
      <param name="cancellationToken">Токен отмены используется для отмены операций повторения, но не выполняемых или успешно завершенных операций.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DefaultExecutionStrategy.RetriesOnFailure">
      <summary>Указывает, может ли этот метод <see cref="T:System.Data.Entity.Infrastructure.DefaultExecutionStrategy" /> повторять выполнение после сбоя.</summary>
      <returns>Значение true, если объект <see cref="T:System.Data.Entity.Infrastructure.DefaultExecutionStrategy" /> повторяет выполнение после сбоя; в противном случае — значение false.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DefaultManifestTokenResolver">
      <summary>Представляет предусмотренную по умолчанию реализацию <see cref="T:System.Data.Entity.Infrastructure.IManifestTokenResolver" />, в которой используется базовый поставщик для возврата токена манифеста.Чтобы избежать нескольких запросов, эта реализация использует кэширование на основе фактического типа экземпляра <see cref="T:System.Data.Common.DbConnection" />, свойства <see cref="P:System.Data.Common.DbConnection.DataSource" /> и свойства <see cref="P:System.Data.Common.DbConnection.Database" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultManifestTokenResolver.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.DefaultManifestTokenResolver" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DefaultManifestTokenResolver.ResolveManifestToken(System.Data.Common.DbConnection)">
      <summary>Возвращает токен манифеста, предназначенный для использования для данного соединения.</summary>
      <returns>Токен манифеста, предназначенный для использования.</returns>
      <param name="connection">Соединение, для которого требуется токен манифеста.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.EdmMetadata">
      <summary>Представляет сущность, используемую для хранения метаданных о модели EDM в базе данных.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmMetadata.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.EdmMetadata" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.EdmMetadata.Id">
      <summary>Возвращает или задает идентификатор сущности метаданных, который в настоящее время всегда равен 1.</summary>
      <returns>Идентификатор.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.EdmMetadata.ModelHash">
      <summary>Возвращает или задает хэш модели, который используется для проверки того, была ли модель изменена с тех пор, как на ее основе была создана база данных.</summary>
      <returns>Хэш модели.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmMetadata.TryGetModelHash(System.Data.Entity.DbContext)">
      <summary>Пытается возвратить хэш модели, вычисленный механизмом Code First для данного контекста.Этот метод возвращает значение NULL, если контекст не используется в режиме Code First.</summary>
      <returns>Хэш-строка.</returns>
      <param name="context">Контекст.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.EdmxWriter">
      <summary>Содержит методы, используемые для доступа к модели EDM, созданной механизмом Code First в форме EDMX.Эти методы обычно используются для отладки, если необходимо рассмотреть модель, созданную внутренне механизмом Code First.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmxWriter.WriteEdmx(System.Data.Entity.DbContext,System.Xml.XmlWriter)">
      <summary>Использует Code First с указанным контекстом и записывает результирующую модель EDM в указанный модуль записи в форме EDMX.Этот метод может использоваться только с экземплярами контекста, которые используют Code First и создают модель внутри.Этот метод не может использоваться для контекстов, созданных с помощью режима Database First или Model First, для контекстов, созданных с использованием существовавшей ранее версии <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" />, или для контекстов, созданных с применением существовавшей ранее версии <see cref="T:System.Data.Entity.Infrastructure.DbCompiledModel" />.</summary>
      <param name="context">Контекст.</param>
      <param name="writer">Модуль записи.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.EdmxWriter.WriteEdmx(System.Data.Entity.Infrastructure.DbModel,System.Xml.XmlWriter)">
      <summary>Записывает модель данных модели EDM, представленную данной моделью <see cref="T:System.Data.Entity.Infrastructure.DbModel" />, в данный модуль записи в форме EDMX.</summary>
      <param name="model">Объект, представляющий модель EDM.</param>
      <param name="writer">Модуль записи.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey">
      <summary>Ключ, используемый для разрешения <see cref="T:System.Func`1" />.Состоит из неизменяемого имени поставщика ADO.NET и имени сервера базы данных, как указано в строке подключения.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ExecutionStrategyKey.#ctor(System.String,System.String)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey" /></summary>
      <param name="providerInvariantName">Неизменяемое имя поставщика ADO.NET, которое указывает тип соединения ADO.NET для данной стратегии выполнения.</param>
      <param name="serverName">Строка, которая будет сопоставлена с именем сервера в строке подключения.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ExecutionStrategyKey.Equals(System.Object)">
      <summary>Определяет, равен ли указанный объект данному ключу.</summary>
      <returns>Если заданный объект равен данному ключу, значение true; в противном случае — false.</returns>
      <param name="obj">Объект для сравнения.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ExecutionStrategyKey.GetHashCode">
      <summary>Возвращает хэш-код текущего экземпляра.</summary>
      <returns>Хэш-код для текущего экземпляра.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.ExecutionStrategyKey.ProviderInvariantName">
      <summary>Неизменяемое имя поставщика ADO.NET, которое указывает тип соединения ADO.NET для данной стратегии выполнения.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.ExecutionStrategyKey.ServerName">
      <summary>Строка, которая будет сопоставлена с именем сервера в строке подключения.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable">
      <summary>Асинхронная версия интерфейса <see cref="T:System.Collections.IEnumerable" />, который обеспечивает асинхронную выборку элементов.Этот интерфейс используется для взаимодействия с запросами Entity Framework и не должен реализовываться пользовательскими классами.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator">
      <summary>Возвращает перечислитель, которые может использоваться для перечисления последовательности в асинхронном режиме.</summary>
      <returns>Перечислитель для асинхронного перечисления последовательности.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerable`1">
      <summary>Асинхронная версия интерфейса <see cref="T:System.Collections.Generic.IEnumerable`1" />, который позволяет осуществлять асинхронную выборку элементов перечислимой последовательности.Этот интерфейс используется для взаимодействия с запросами Entity Framework и не должен реализовываться пользовательскими классами.</summary>
      <typeparam name="T">Тип объектов, которые должны быть перечислены.Этот параметр типа является ковариантным. Это означает, что можно использовать либо указанный тип, либо более производный тип. Дополнительные сведения о ковариации и контрвариации см. в разделе .</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbAsyncEnumerable`1.GetAsyncEnumerator">
      <summary>Возвращает перечислитель, которые может использоваться для перечисления последовательности в асинхронном режиме.</summary>
      <returns>Перечислитель для асинхронного перечисления последовательности.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator">
      <summary>Асинхронная версия интерфейса <see cref="T:System.Collections.IEnumerator" />, который обеспечивает асинхронную выборку элементов.Этот интерфейс используется для взаимодействия с запросами Entity Framework и не должен реализовываться пользовательскими классами.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current">
      <summary>Возвращает текущий элемент в итерации.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbAsyncEnumerator.MoveNextAsync(System.Threading.CancellationToken)">
      <summary>Продвигает перечислитель к следующему элементу в последовательности, асинхронно возвращая результат.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит значение true, если перечислитель был успешно продвинут к следующему элементу; значение false, если перечислитель вышел за конец последовательности.</returns>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1">
      <summary>Асинхронная версия интерфейса <see cref="T:System.Collections.Generic.IEnumerator`1" />, который обеспечивает асинхронную выборку элементов.Этот интерфейс используется для взаимодействия с запросами Entity Framework и не должен реализовываться пользовательскими классами.</summary>
      <typeparam name="T">Тип объектов, которые должны быть перечислены.Этот параметр типа является ковариантным. Это означает, что можно использовать либо указанный тип, либо более производный тип. Дополнительные сведения о ковариации и контрвариации см. в разделе .</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IDbAsyncEnumerator`1.Current">
      <summary>Возвращает текущий элемент в итерации.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider">
      <summary>Определяет методы для создания и выполнения в асинхронном режиме запросов, которые описаны объектом <see cref="T:System.Linq.IQueryable" />.Этот интерфейс используется для взаимодействия с запросами Entity Framework и не должен реализовываться пользовательскими классами.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider.ExecuteAsync``1(System.Linq.Expressions.Expression,System.Threading.CancellationToken)">
      <summary>Выполняет в асинхронном режиме строго типизированный запрос, представленный указанным деревом выражений.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит значение, полученное при выполнении указанного запроса.</returns>
      <param name="expression">Дерево выражений, которое представляет запрос LINQ.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
      <typeparam name="TResult">Тип значения, полученного в результате выполнения запроса.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbAsyncQueryProvider.ExecuteAsync(System.Linq.Expressions.Expression,System.Threading.CancellationToken)">
      <summary>Выполняет в асинхронном режиме запрос, представленный указанным деревом выражений.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит значение, полученное при выполнении указанного запроса.</returns>
      <param name="expression">Дерево выражений, которое представляет запрос LINQ.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbConnectionFactory">
      <summary>Реализации этого интерфейса используются в целях создания объектов DbConnection для типа сервера базы данных на основе заданного имени базы данных.Применительно к классу <see cref="T:System.Data.Entity.Database" /> задан экземпляр, который вынуждает использовать по умолчанию во всех контекстах DbContexts, созданных без информации о соединении или только с именем базы данных или строкой подключения, сервер базы данных определенного типа.Возможны два варианта реализации этого интерфейса: <see cref="T:System.Data.Entity.Infrastructure.SqlConnectionFactory" /> используется для создания соединений с версия Microsoft SQL Server, включая экспресс-выпуски.<see cref="T:System.Data.Entity.Infrastructure.SqlCeConnectionFactory" /> используется для создания соединений с версиями Microsoft SQL Server Compact Edition.При необходимости можно добавить другие реализации для других серверов баз данных.Следует учитывать, что реализации должны быть потокобезопасными или неизменяемыми, поскольку доступ к ним может осуществляться одновременно несколькими потоками.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbConnectionFactory.CreateConnection(System.String)">
      <summary>Создает соединение на основе указанного имени базы данных или строки подключения.</summary>
      <returns>Инициализированное подключение DbConnection.</returns>
      <param name="nameOrConnectionString">Имя базы данных или строка подключения.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbContextFactory`1">
      <summary>Фабрика для создания производных экземпляров <see cref="T:System.Data.Entity.DbContext" />.Реализуйте этот интерфейс, чтобы включить службы времени разработки для контекстных типов, которые не имеют открытый конструктор, предусмотренный по умолчанию.При проектировании производные экземпляры <see cref="T:System.Data.Entity.DbContext" /> можно создавать для включения поддержки конкретных операций времени разработки, таких как визуализация моделей, создание языка DDL и т. д.Для включения служб времени разработки для производных типов <see cref="T:System.Data.Entity.DbContext" />, у которых отсутствует открытый конструктор по умолчанию, реализуйте этот интерфейс.Службы времени разработки автоматически обнаруживают реализации этого интерфейса, которые находятся в той же сборке, что и производный тип <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <typeparam name="TContext">Тип контекста.Этот параметр типа является ковариантным. Это означает, что можно использовать либо указанный тип, либо более производный тип. Дополнительные сведения о ковариации и контрвариации см. в разделе .</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbContextFactory`1.Create">
      <summary>Создает новый экземпляр производного типа <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>Экземпляр TContext</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy">
      <summary>Стратегия, используемая для выполнения команды или запроса к базе данных, возможно с логикой для повторов при возникновении сбоев.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbExecutionStrategy.Execute(System.Action)">
      <summary>Выполняет указанную операцию.</summary>
      <param name="operation">Делегат, представляющий операцию, предназначенную для выполнения, которая не возвращает результатов.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbExecutionStrategy.Execute``1(System.Func{``0})">
      <summary>Выполняет указанную операцию и возвращает результат.</summary>
      <returns>Результат выполнения операции.</returns>
      <param name="operation">Делегат, представляющий операцию, предназначенную для выполнения, которая возвращает результат типа <paramref name="TResult" />.</param>
      <typeparam name="TResult">Возвращаемый тип <paramref name="operation" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbExecutionStrategy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
      <summary>Выполняет указанную асинхронную операцию и возвращает результат.</summary>
      <returns>Задача, выполняемая до завершения, если исходная задача завершается успешно (либо в первый раз, либо после повторных попыток из-за временных отказов).Если задача завершается неудачей с постоянной ошибкой или достигнут предел повторения попыток, то возвращенная задача рассматривается как породившая отказ, и должно наблюдаться исключение.</returns>
      <param name="operation">Функция, которая возвращает начатую задачу типа <paramref name="TResult" />.</param>
      <param name="cancellationToken">Токен отмены используется для отмены операций повторения, но не выполняемых или успешно завершенных операций.</param>
      <typeparam name="TResult">Тип результата <see cref="T:System.Threading.Tasks.Task`1" />, возвращенный <paramref name="operation" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbExecutionStrategy.ExecuteAsync(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
      <summary>Выполняет указанную асинхронную операцию.</summary>
      <returns>Задача, выполняемая до завершения, если исходная задача завершается успешно (либо в первый раз, либо после повторных попыток из-за временных отказов).Если задача завершается неудачей с постоянной ошибкой или достигнут предел повторения попыток, то возвращенная задача рассматривается как породившая отказ, и должно наблюдаться исключение.</returns>
      <param name="operation">Функция, которая возвращает начатую задачу.</param>
      <param name="cancellationToken">Токен отмены используется для отмены операций повторения, но не выполняемых или успешно завершенных операций.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IDbExecutionStrategy.RetriesOnFailure">
      <summary>Указывает, может ли этот метод <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" /> повторять выполнение после сбоя.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbModelCacheKey">
      <summary>Представляет значение ключа, однозначно определяющее модель Entity Framework, загруженную в память.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbModelCacheKey.Equals(System.Object)">
      <summary>Определяет, равен ли текущий кэшированный ключ модели указанному кэшированному ключу модели.</summary>
      <returns>Значение true, если текущий кэшированный ключ модели равен указанному кэшированному ключу модели; в противном случае — значение false.</returns>
      <param name="other">Кэшированный ключ модели для сравнения с текущим кэшированным ключом модели.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbModelCacheKey.GetHashCode">
      <summary>Возвращает хэш-функцию для этого кэшированного ключа модели.</summary>
      <returns>Хэш-функция для этого кэшированного ключа модели.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbModelCacheKeyProvider">
      <summary>Реализуйте данный интерфейс в контексте, чтобы использовать собственную логику для расчета ключа, используемого при поиске в уже созданной модели в кэше.Данный интерфейс позволяет использовать единственный тип контекста с различными моделями в одном домене AppDomain или несколько типов контекстов с одинаковой моделью.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IDbModelCacheKeyProvider.CacheKey">
      <summary>Возвращает кэшированный ключ, связанный с поставщиком.</summary>
      <returns>Кэшированный ключ, связанный с поставщиком.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IDbProviderFactoryResolver">
      <summary>Служба, предназначенная для получения правильного значения <see cref="T:System.Data.Common.DbProviderFactory" /> из заданного объекта <see cref="T:System.Data.Common.DbConnection" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IDbProviderFactoryResolver.ResolveProviderFactory(System.Data.Common.DbConnection)">
      <summary>Возвращает объект <see cref="T:System.Data.Common.DbProviderFactory" /> для заданного соединения.</summary>
      <returns>Фабрика поставщика для соединения.</returns>
      <param name="connection">Соединение.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IManifestTokenResolver">
      <summary>Служба, предназначенная для получения токена манифеста поставщика при наличии соединения.Класс <see cref="T:System.Data.Entity.Infrastructure.DefaultManifestTokenResolver" /> предусмотрен по умолчанию и в нем применяется основополагающий поставщик для получения токена, что часто требует открытия соединения.Вместо этого можно использовать другую реализацию, добавляя <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> к <see cref="T:System.Data.Entity.DbConfiguration" />, где могут использоваться любые сведения из соединения для возврата токена.Например, если известно, что соединение указывает на базу данных SQL Server 2008, то можно получить «2008» без открытия соединения.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IManifestTokenResolver.ResolveManifestToken(System.Data.Common.DbConnection)">
      <summary>Возвращает токен манифеста, предназначенный для использования для данного соединения.</summary>
      <returns>Токен манифеста, предназначенный для использования.</returns>
      <param name="connection">Соединение, для которого требуется токен манифеста.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer">
      <summary>Реализация этого интерфейса необходима для того, чтобы разрешить сериализацию в EDMX XML (и обратно) пользовательских заметок, представленных <see cref="T:System.Data.Entity.Core.Metadata.Edm.MetadataProperty" />.Обычно экземпляр класса-сериализатора задается с помощью метода <see cref="M:System.Data.Entity.DbConfiguration.SetMetadataAnnotationSerializer(System.String,System.Func{System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer})" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer.Deserialize(System.String,System.String)">
      <summary>Десериализует заданную строку обратно в ожидаемое значение заметки.</summary>
      <returns>Значение десериализованной заметки.</returns>
      <param name="name">Имя десериализуемой заметки.</param>
      <param name="value">Десериализуемая строка.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer.Serialize(System.String,System.Object)">
      <summary>Сериализует указанное значение заметки в строку для хранения в формате EDMX XML.</summary>
      <returns>Сериализованное значение.</returns>
      <param name="name">Имя сериализуемой заметки.</param>
      <param name="value">Сериализуемое значение.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IncludeMetadataConvention">
      <summary>Это соглашение <see cref="T:System.Data.Entity.DbModelBuilder" /> вынуждает построитель DbModelBuilder включать метаданные о модели при сборке им модели.При создании в <see cref="T:System.Data.Entity.DbContext" /> модели в соответствии с соглашением происходит добавление этого соглашения к списку используемых в DbModelBuilder.Это затем приводит к записи метаданных модели в базу данных, если для создания базы данных используется DbContext.Затем это можно использовать в качестве быстрой проверки для определения того, изменилась ли модель после ее последнего использования по отношению к базе данных.Это соглашение может быть удалено из соглашений <see cref="T:System.Data.Entity.DbModelBuilder" /> путем переопределения метода OnModelCreating в производном классе DbContext.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.IncludeMetadataConvention.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.IncludeMetadataConvention" />.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IObjectContextAdapter">
      <summary>Интерфейс, реализованный объектами, которые могут предоставить экземпляр класса <see cref="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext" />.Класс <see cref="T:System.Data.Entity.DbContext" /> реализует этот интерфейс, чтобы предоставить доступ к базовому объекту ObjectContext.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IObjectContextAdapter.ObjectContext">
      <summary>Возвращает контекст объекта.</summary>
      <returns>Контекст объекта.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.IProviderInvariantName">
      <summary>Используется методами <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> и <see cref="T:System.Data.Entity.DbConfiguration" /> при разрешении неизменяемого имени поставщика из <see cref="T:System.Data.Common.DbProviderFactory" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.IProviderInvariantName.Name">
      <summary>Возвращает имя поставщика.</summary>
      <returns>Имя поставщика.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.LocalDbConnectionFactory">
      <summary>Экземпляры этого класса используются в целях создания объектов DbConnection для SQL Server LocalDb на основе заданного имени базы данных или строки подключения.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.#ctor(System.String)">
      <summary>Создает новый экземпляр фабрики соединений для данной версии LocalDb.Для SQL Server 2012 LocalDb следует использовать «v11.0».Для SQL Server 2014 и более поздней версии LocalDb следует использовать "mssqllocaldb".</summary>
      <param name="localDbVersion">Используемая версия LocalDb.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.#ctor(System.String,System.String)">
      <summary>Создает новый экземпляр фабрики соединений для данной версии LocalDb.Для SQL Server 2012 LocalDb следует использовать «v11.0».Для SQL Server 2014 и более поздней версии LocalDb следует использовать "mssqllocaldb".</summary>
      <param name="localDbVersion">Используемая версия LocalDb.</param>
      <param name="baseConnectionString">Строка подключения, используемая для параметров базы данных, отличных от «Initial Catalog», «Data Source» и «AttachDbFilename».Для этой строки будут заданы префиксы «Initial Catalog» и «AttachDbFilename» с учетом имени базы данных при вызове CreateConnection.Параметр «Data Source» будет задан на основе аргумента LocalDbVersion.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.BaseConnectionString">
      <summary>Строка подключения, используемая для параметров базы данных, отличных от «Initial Catalog», «Data Source» и «AttachDbFilename».Для этой строки будут заданы префиксы «Initial Catalog» и «AttachDbFilename» с учетом имени базы данных при вызове CreateConnection.Параметр «Data Source» будет задан на основе аргумента LocalDbVersion.Значением по умолчанию является «Integrated Security=True;».</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.LocalDbConnectionFactory.CreateConnection(System.String)">
      <summary>Создает подключение к SQL Server LocalDb на основе указанного имени базы данных или строки подключения.Если указанная строка содержит символ «=», то она рассматривается как строка подключения целиком. В противном случае она рассматривается только как имя базы данных.</summary>
      <returns>Инициализированное подключение DbConnection.</returns>
      <param name="nameOrConnectionString">Имя базы данных или строка подключения.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ModelContainerConvention">
      <summary>В этом соглашении <see cref="T:System.Data.Entity.DbModelBuilder" /> используется имя производного класса <see cref="T:System.Data.Entity.DbContext" /> в качестве контейнера для концептуальной модели, построенной в режиме Code First.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ModelContainerConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityContainer,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Применяет соглашение к данной модели.</summary>
      <param name="item">Контейнер, к которому применяется соглашение.</param>
      <param name="model">Модель.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ModelNamespaceConvention">
      <summary>В этом соглашении <see cref="T:System.Data.Entity.DbModelBuilder" /> используется пространство имен производного класса <see cref="T:System.Data.Entity.DbContext" /> в качестве пространства имен концептуальной модели, построенной в режиме Code First.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer">
      <summary>Сравнивает объекты по равенству ссылок.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer.Default">
      <summary>Возвращает экземпляр по умолчанию.</summary>
      <returns>Экземпляр по умолчанию.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer.System#Collections#Generic#IEqualityComparer{T}#Equals(System.Object,System.Object)">
      <summary>Определяет, считаются ли равными два указанных экземпляра объекта.</summary>
      <returns>Значение true, если объекты равны: в противном случае — значение false.</returns>
      <param name="x">Первый сравниваемый объект.</param>
      <param name="y">Второй сравниваемый объект.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.ObjectReferenceEqualityComparer.System#Collections#Generic#IEqualityComparer{T}#GetHashCode(System.Object)">
      <summary>Получает хэш-код указанного объекта.</summary>
      <returns>Хэш-код для указанного объекта.</returns>
      <param name="obj">Объект.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.ReplacementDbQueryWrapper`1">
      <summary>Экземпляры этого класса используются внутренним образом в целях создания константных выражений для <see cref="T:System.Data.Entity.Core.Objects.ObjectQuery`1" />, которые вставлены в дерево выражения для замены ссылок на <see cref="T:System.Data.Entity.Infrastructure.DbQuery`1" /> и <see cref="T:System.Data.Entity.Infrastructure.DbQuery" />.</summary>
      <typeparam name="TElement">Тип элемента.</typeparam>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.ReplacementDbQueryWrapper`1.Query">
      <summary>Публичное свойство, которое ожидается в дереве выражения LINQ.</summary>
      <returns>Запрос.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.RetryLimitExceededException">
      <summary>Исключение, которое вызвано после того, как действие снова окончилось неудачей вслед за повторными попытками, количество которых задано в конфигурации.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.RetryLimitExceededException.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException" /> без сообщения об ошибке.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.RetryLimitExceededException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException" /> с указанным сообщением об ошибке.</summary>
      <param name="message">Сообщение, описывающее ошибку.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.RetryLimitExceededException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.RetryLimitExceededException" />.</summary>
      <param name="message">Сообщение, описывающее ошибку.</param>
      <param name="innerException">Исключение, которое является причиной текущего исключения.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SqlCeConnectionFactory">
      <summary>Экземпляры этого класса используются для создания объектов DbConnection для SQL Server Compact Edition на основе указанного имени базы данных или строки подключения.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.#ctor(System.String)">
      <summary>Создает новую фабрику соединений с пустыми (заданными по умолчанию) свойствами DatabaseDirectory и BaseConnectionString.</summary>
      <param name="providerInvariantName">Неизменяемое имя поставщика, указывающее выпуск SQL Server Compact Edition, который необходимо использовать.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.#ctor(System.String,System.String,System.String)">
      <summary>Создает новую фабрику соединений с заданными свойствами DatabaseDirectory и BaseConnectionString.</summary>
      <param name="providerInvariantName">Неизменяемое имя поставщика, указывающее выпуск SQL Server Compact Edition, который необходимо использовать.</param>
      <param name="databaseDirectory">Путь, которым предваряется имя базы данных для создания имени файла, которое SQL Server Compact Edition использует при создании или чтении файла базы данных.Пустая строка означает, что в выпуске SQL Server Compact Edition будет использоваться значение по умолчанию для расположения файла базы данных.</param>
      <param name="baseConnectionString">Строка подключения, используемая для указания параметров обращения к базе данных, отличной от «Data Source».В качестве префикса для этой строки должен быть задан источник данных с учетом имени базы данных при вызове метода CreateConnection.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.BaseConnectionString">
      <summary>Строка подключения, используемая для указания параметров обращения к базе данных, отличной от «Data Source».В качестве префикса для этой строки должен быть задан источник данных с учетом имени базы данных при вызове метода CreateConnection.По умолчанию задана пустая строка — это означает, что другие параметры не используются.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.CreateConnection(System.String)">
      <summary>Создает соединение с SQL Server Compact Edition на основе указанного имени базы данных или строки подключения.Если указанная строка содержит символ «=», то она рассматривается как строка подключения целиком. В противном случае она рассматривается только как имя базы данных.</summary>
      <returns>Инициализированное подключение DbConnection.</returns>
      <param name="nameOrConnectionString">Имя базы данных или строка подключения.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.DatabaseDirectory">
      <summary>Путь, которым предваряется имя базы данных для создания имени файла, которое SQL Server Compact Edition использует при создании или чтении файла базы данных.Значение по умолчанию равно «|DataDirectory|», то есть файл будет размещен в назначенном каталоге данных.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlCeConnectionFactory.ProviderInvariantName">
      <summary>Неизменяемое имя поставщика, указывающее выпуск SQL Server Compact Edition, который необходимо использовать.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SqlConnectionFactory">
      <summary>Экземпляры этого класса используются для создания объектов DbConnection для SQL Server на основе указанного имени базы данных или строки подключения.По умолчанию используется соединение с «.\SQLEXPRESS».Это поведение можно изменить, заменив базовую строку подключения при конструировании экземпляра фабрики.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.#ctor">
      <summary>Создает новую фабрику соединения со свойством BaseConnectionString по умолчанию «Data Source=.\SQLEXPRESS; Integrated Security=True; MultipleActiveResultSets=True;».</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.#ctor(System.String)">
      <summary>Создает новую фабрику соединений с заданным свойством BaseConnectionString.</summary>
      <param name="baseConnectionString">Строка подключения, используемая для указания параметров обращения к базе данных, отличной от «Initial Catalog».В начало этой строки будет добавлено значение «Initial Catalog» на основе имени базы данных при вызове метода CreateConnection.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.SqlConnectionFactory.BaseConnectionString">
      <summary>Строка подключения, используемая для указания параметров обращения к базе данных, отличной от «Initial Catalog».В начало этой строки будет добавлено значение «Initial Catalog» на основе имени базы данных при вызове метода CreateConnection.Значение по умолчанию — «Data Source=.\SQLEXPRESS; Integrated Security=True;».</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SqlConnectionFactory.CreateConnection(System.String)">
      <summary>Создает соединение с SQL Server на основе указанного имени базы данных или строки подключения.Если указанная строка содержит символ «=», то она рассматривается как строка подключения целиком. В противном случае она рассматривается только как имя базы данных.</summary>
      <returns>Инициализированное подключение DbConnection.</returns>
      <param name="nameOrConnectionString">Имя базы данных или строка подключения.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute">
      <summary>Этот атрибут может быть применен либо ко всему производному классу <see cref="T:System.Data.Entity.DbContext" />, либо к отдельным свойствам <see cref="T:System.Data.Entity.DbSet`1" /> или <see cref="T:System.Data.Entity.IDbSet`1" /> этого класса.При применении любых обнаруженных свойств <see cref="T:System.Data.Entity.DbSet`1" /> или <see cref="T:System.Data.Entity.IDbSet`1" /> все еще будет включено в модель, но не будет автоматически инициализировано.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.SuppressDbSetInitializationAttribute" />.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.TableExistenceChecker">
      <summary>Реализуется поставщиками Entity Framework и используется для проверки существования таблиц в заданной базе данных.Используется инициализаторами базы данных для определения, считать ли существующую базу данных пустой и следует ли создать таблицы.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TableExistenceChecker.#ctor"></member>
    <member name="M:System.Data.Entity.Infrastructure.TableExistenceChecker.AnyModelTableExistsInDatabase(System.Data.Entity.Core.Objects.ObjectContext,System.Data.Common.DbConnection,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EntitySet},System.String)">
      <summary>Когда переопределено в производном классе, проверяет, существуют ли заданные таблицы в базе данных для указанного подключения.</summary>
      <returns>Значение true, если существуют какие-либо таблицы модели или таблица EdmMetadata.</returns>
      <param name="context">Контекст, для которого выполняется проверка таблиц, обычно используется для получения соответствующего объекта <see cref="T:System.Data.Entity.Infrastructure.Interception.DbInterceptionContext" />.</param>
      <param name="connection">Подключение к базе данных.Может быть открытым или закрытым; должно быть закрытым, если открывается.Не ликвидировать.</param>
      <param name="modelTables">Таблицы, существование которых проверяется.</param>
      <param name="edmMetadataContextTableName">Имя таблицы EdmMetadata для проверки на существование.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TableExistenceChecker.GetTableName(System.Data.Entity.Core.Metadata.Edm.EntitySet)">
      <summary>Вспомогательный метод для получения имени таблицы для заданного <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySet" /> пространства S.</summary>
      <returns>Имя таблицы.</returns>
      <param name="modelTable">Набор сущностей пространства S для таблицы.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.TransactionContext">
      <summary>Этот класс используется <see cref="T:System.Data.Entity.Infrastructure.CommitFailureHandler" /> для записи и считывания сведений отслеживания транзакции из базы данных.Чтобы настроить определение таблицы транзакции, можно создать класс, производный от этого класса, и переопределить метод <see cref="M:System.Data.Entity.Infrastructure.TransactionContext.OnModelCreating(System.Data.Entity.DbModelBuilder)" />.Производные классы могут быть зарегистрированы с помощью <see cref="T:System.Data.Entity.DbConfiguration" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionContext.#ctor(System.Data.Common.DbConnection)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.TransactionContext" />.</summary>
      <param name="existingConnection">Соединение, используемое контекстом, для которого записываются транзакции.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
      <summary>Этот метод вызывается после инициализации модели для производного контекста.</summary>
      <param name="modelBuilder">Построитель, который определяет модель для создаваемого контекста.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionContext.Transactions">
      <summary>Возвращает или задает объект <see cref="T:System.Data.Entity.DbSet`1" />, который можно использовать для считывания и записи экземпляров <see cref="T:System.Data.Entity.Infrastructure.TransactionRow" />.</summary>
      <returns>
        <see cref="T:System.Data.Entity.DbSet`1" /> может использоваться для чтения и записи экземпляров <see cref="T:System.Data.Entity.Infrastructure.TransactionRow" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.TransactionHandler">
      <summary>Представляет базовый класс для перехватчиков, которые обрабатывают операции транзакции.Производные классы могут быть зарегистрированы с помощью <see cref="M:System.Data.Entity.DbConfiguration.SetDefaultTransactionHandler(System.Func{System.Data.Entity.Infrastructure.TransactionHandler})" /> или <see cref="M:System.Data.Entity.DbConfiguration.SetTransactionHandler(System.String,System.Func{System.Data.Entity.Infrastructure.TransactionHandler},System.String)" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.BeganTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)">
      <summary>Может быть реализовано в производном классе.</summary>
      <param name="connection">Соединение, начавшее транзакцию.</param>
      <param name="interceptionContext">Контекстные сведения, связанные с вызовом.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.BeginningTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.BeginTransactionInterceptionContext)">
      <summary>Может быть реализовано в производном классе.</summary>
      <param name="connection">Соединение, начинающее транзакцию.</param>
      <param name="interceptionContext">Контекстные сведения, связанные с вызовом.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.BuildDatabaseInitializationScript">
      <summary>Если реализован в производном классе, то возвращает скрипт для подготовки базы данных к этому обработчику транзакций.</summary>
      <returns>Скрипт для изменения схемы базы данных для этого обработчика транзакций.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Closed(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
      <summary>Может быть реализовано в производном классе.</summary>
      <param name="connection">Закрытое соединение.</param>
      <param name="interceptionContext">Контекстные сведения, связанные с вызовом.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Closing(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
      <summary>Может быть реализовано в производном классе.</summary>
      <param name="connection">Закрываемое соединение.</param>
      <param name="interceptionContext">Контекстные сведения, связанные с вызовом.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Committed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>Может быть реализовано в производном классе.</summary>
      <param name="transaction">Зафиксированная транзакция.</param>
      <param name="interceptionContext">Контекстные сведения, связанные с вызовом.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Committing(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>Может быть реализовано в производном классе.</summary>
      <param name="transaction">Фиксируемая транзакция.</param>
      <param name="interceptionContext">Контекстные сведения, связанные с вызовом.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionHandler.Connection">
      <summary>Получает подключение, для которого будут обрабатываться операции транзакции.</summary>
      <returns>Объект <see cref="T:System.Data.Common.DbConnection" />, для которого будут обрабатываться операции транзакции.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionGetting(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.Common.DbConnection})">
      <summary>Может быть реализовано в производном классе.</summary>
      <param name="transaction">Транзакция.</param>
      <param name="interceptionContext">Контекстные сведения, связанные с вызовом.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionGot(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.Common.DbConnection})">
      <summary>Может быть реализовано в производном классе.</summary>
      <param name="transaction">Транзакция.</param>
      <param name="interceptionContext">Контекстные сведения, связанные с вызовом.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionStringGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>Может быть реализовано в производном классе.</summary>
      <param name="connection">Соединение.</param>
      <param name="interceptionContext">Контекстные сведения, связанные с вызовом.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionStringGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>Может быть реализовано в производном классе.</summary>
      <param name="connection">Соединение.</param>
      <param name="interceptionContext">Контекстные сведения, связанные с вызовом.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionStringSet(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext{System.String})">
      <summary>Может быть реализовано в производном классе.</summary>
      <param name="connection">Соединение.</param>
      <param name="interceptionContext">Контекстные сведения, связанные с вызовом.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionStringSetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionPropertyInterceptionContext{System.String})">
      <summary>Может быть реализовано в производном классе.</summary>
      <param name="connection">Соединение.</param>
      <param name="interceptionContext">Контекстные сведения, связанные с вызовом.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionTimeoutGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Int32})">
      <summary>Может быть реализовано в производном классе.</summary>
      <param name="connection">Соединение.</param>
      <param name="interceptionContext">Контекстные сведения, связанные с вызовом.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ConnectionTimeoutGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Int32})">
      <summary>Может быть реализовано в производном классе.</summary>
      <param name="connection">Соединение.</param>
      <param name="interceptionContext">Контекстные сведения, связанные с вызовом.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.DatabaseGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>Может быть реализовано в производном классе.</summary>
      <param name="connection">Соединение.</param>
      <param name="interceptionContext">Контекстные сведения, связанные с вызовом.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.DatabaseGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>Может быть реализовано в производном классе.</summary>
      <param name="connection">Соединение.</param>
      <param name="interceptionContext">Контекстные сведения, связанные с вызовом.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.DataSourceGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>Может быть реализовано в производном классе.</summary>
      <param name="connection">Соединение.</param>
      <param name="interceptionContext">Контекстные сведения, связанные с вызовом.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.DataSourceGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>Может быть реализовано в производном классе.</summary>
      <param name="connection">Соединение.</param>
      <param name="interceptionContext">Контекстные сведения, связанные с вызовом.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionHandler.DbContext">
      <summary>Получает контекст, для которого будут обрабатываться операции транзакции.</summary>
      <returns>Объект <see cref="P:System.Data.Entity.Infrastructure.TransactionHandler.DbContext" />, для которого будут обрабатываться операции транзакции.Может принимать значение NULL.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Dispose">
      <summary>Освобождает ресурсы, используемые этим обработчиком транзакций.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Dispose(System.Boolean)">
      <summary>Освобождает ресурсы, используемые этим обработчиком транзакций.</summary>
      <param name="disposing">Укажите значение true, чтобы освободить управляемые и неуправляемые ресурсы, или значение false, чтобы освободить только неуправляемые ресурсы.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Disposed(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
      <summary>Может быть реализовано в производном классе.</summary>
      <param name="connection">Удаленное соединение.</param>
      <param name="interceptionContext">Контекстные сведения, связанные с вызовом.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Disposed(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>Может быть реализовано в производном классе.</summary>
      <param name="transaction">Удаленная транзакция.</param>
      <param name="interceptionContext">Контекстные сведения, связанные с вызовом.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Disposing(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
      <summary>Может быть реализовано в производном классе.</summary>
      <param name="connection">Удаляемое соединение.</param>
      <param name="interceptionContext">Контекстные сведения, связанные с вызовом.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Disposing(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>Может быть реализовано в производном классе.</summary>
      <param name="transaction">Удаляемая транзакция.</param>
      <param name="interceptionContext">Контекстные сведения, связанные с вызовом.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.EnlistedTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext)">
      <summary>Может быть реализовано в производном классе.</summary>
      <param name="connection">Соединение.</param>
      <param name="interceptionContext">Контекстные сведения, связанные с вызовом.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.EnlistingTransaction(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.EnlistTransactionInterceptionContext)">
      <summary>Может быть реализовано в производном классе.</summary>
      <param name="connection">Соединение.</param>
      <param name="interceptionContext">Контекстные сведения, связанные с вызовом.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Initialize(System.Data.Entity.Core.Objects.ObjectContext)">
      <summary>Инициализирует этот экземпляр, используя указанный контекст.</summary>
      <param name="context">Контекст, для которого будут обрабатываться операции транзакции.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Initialize(System.Data.Entity.DbContext,System.Data.Common.DbConnection)">
      <summary>Инициализирует этот экземпляр, используя указанный контекст.</summary>
      <param name="context">Контекст, для которого будут обрабатываться операции транзакции.</param>
      <param name="connection">Соединение, используемое для инициализации.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionHandler.IsDisposed">
      <summary>Возвращает или задает значение, показывающее, удален ли данный обработчик транзакций.</summary>
      <returns>Значение true, если это обработчик транзакций удален; в противном случае — значение false.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.IsolationLevelGetting(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.IsolationLevel})">
      <summary>Может быть реализовано в производном классе.</summary>
      <param name="transaction">Транзакция.</param>
      <param name="interceptionContext">Контекстные сведения, связанные с вызовом.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.IsolationLevelGot(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext{System.Data.IsolationLevel})">
      <summary>Может быть реализовано в производном классе.</summary>
      <param name="transaction">Транзакция.</param>
      <param name="interceptionContext">Контекстные сведения, связанные с вызовом.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.MatchesParentContext(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbInterceptionContext)">
      <summary>Проверяет, содержит ли предоставленный контекст перехвата целевой контекст, или совпадает предоставленное соединение с соединением, которое используется целевым контекстом.</summary>
      <returns>Значение true, если предоставленный контекст перехвата содержит целевой контекст или предоставленное соединение совпадает с соединением, которое используется целевым контекстом, если предоставленный контекст перехвата не содержит какие-либо контексты; в противном случае — false.</returns>
      <param name="connection">Соединение.</param>
      <param name="interceptionContext">Контекст перехвата.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionHandler.ObjectContext">
      <summary>Получает контекст, для которого будут обрабатываться операции транзакции.</summary>
      <returns>Объект <see cref="P:System.Data.Entity.Infrastructure.TransactionHandler.ObjectContext" />, для которого будут обрабатываться операции транзакции.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Opened(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
      <summary>Может быть реализовано в производном классе.</summary>
      <param name="connection">Открытое соединение.</param>
      <param name="interceptionContext">Контекстные сведения, связанные с вызовом.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.Opening(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext)">
      <summary>Может быть реализовано в производном классе.</summary>
      <param name="connection">Открываемое соединение.</param>
      <param name="interceptionContext">Контекстные сведения, связанные с вызовом.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.RolledBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>Может быть реализовано в производном классе.</summary>
      <param name="transaction">Транзакция, для которой был сделан откат.</param>
      <param name="interceptionContext">Контекстные сведения, связанные с вызовом.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.RollingBack(System.Data.Common.DbTransaction,System.Data.Entity.Infrastructure.Interception.DbTransactionInterceptionContext)">
      <summary>Может быть реализовано в производном классе.</summary>
      <param name="transaction">Откатываемая назад транзакция.</param>
      <param name="interceptionContext">Контекстные сведения, связанные с вызовом.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ServerVersionGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>Может быть реализовано в производном классе.</summary>
      <param name="connection">Соединение.</param>
      <param name="interceptionContext">Контекстные сведения, связанные с вызовом.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.ServerVersionGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.String})">
      <summary>Может быть реализовано в производном классе.</summary>
      <param name="connection">Соединение.</param>
      <param name="interceptionContext">Контекстные сведения, связанные с вызовом.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.StateGetting(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Data.ConnectionState})">
      <summary>Может быть реализовано в производном классе.</summary>
      <param name="connection">Соединение.</param>
      <param name="interceptionContext">Контекстные сведения, связанные с вызовом.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionHandler.StateGot(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.Interception.DbConnectionInterceptionContext{System.Data.ConnectionState})">
      <summary>Может быть реализовано в производном классе.</summary>
      <param name="connection">Соединение.</param>
      <param name="interceptionContext">Контекстные сведения, связанные с вызовом.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.TransactionRow">
      <summary>Представляет транзакцию.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionRow.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.TransactionRow" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionRow.CreationTime">
      <summary>Получает или задает локальную дату и время начала транзакции.</summary>
      <returns>Локальная дата и время начала транзакции.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionRow.Equals(System.Object)">
      <summary>Указывает, равен ли заданный объект текущему объекту.</summary>
      <returns>Значение true, если заданный объект равен текущему объекту. В противном случае — значение false.</returns>
      <param name="obj">Объект, который требуется сравнить с текущим объектом.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.TransactionRow.GetHashCode">
      <summary>Возвращает хэш-код данного экземпляра.</summary>
      <returns>Хэш-код данного экземпляра.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.TransactionRow.Id">
      <summary>Получает или задает уникальный идентификатор, назначенный объекту транзакции.</summary>
      <returns>Уникальный идентификатор, назначенный объекту транзакции.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException">
      <summary>Активируется, если контекст создается из шаблонов <see cref="T:System.Data.Entity.DbContext" /> в режиме Database First или Model First, а затем используется в режиме Code First.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" />.</summary>
      <param name="info">Объект, содержащий сериализованные данные объекта.</param>
      <param name="context">Контекстные сведения об источнике или назначении.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" />.</summary>
      <param name="message">Сообщение.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.UnintentionalCodeFirstException" />.</summary>
      <param name="message">Сообщение.</param>
      <param name="innerException">Внутреннее исключение.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator">
      <summary>Представляет создание службы по формированию кода пользовательских заметок в качестве части шаблонов миграций.Производный класс должен быть задан для <see cref="T:System.Data.Entity.Migrations.Design.MigrationCodeGenerator" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator.Generate(System.String,System.Object,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для заданного значения заметки.</summary>
      <param name="annotationName">Имя заметки, для которой создается значение.</param>
      <param name="annotation">Значение заметки.</param>
      <param name="writer">Модуль записи, в который должен быть записан сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator.GetExtraNamespaces(System.Collections.Generic.IEnumerable{System.String})">
      <summary>Возвращает дополнительные пространства имен, которые нужно включить в код, сформированный для шаблонной миграции.Реализация по умолчанию возвращает пустой перечислитель.</summary>
      <returns>Список дополнительных включаемых пространств имен.</returns>
      <param name="annotationNames">Имена заметок, включаемых в сформированный код.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Annotations.AnnotationValues">
      <summary>Представляет пару значений заметки в объекте <see cref="T:System.Data.Entity.Migrations.DbMigration" />, созданном вручную или по шаблону.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.#ctor(System.Object,System.Object)">
      <summary>Создает новую пару значений заметки.</summary>
      <param name="oldValue">Старое значение заметки, которое может быть равно NULL сразу после создания заметки.</param>
      <param name="newValue">Новое значение заметки, которое может быть равно NULL сразу после удаления заметки.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.Equals(System.Object)">
      <summary>Определяет, равен ли указанный объект данному объекту экземпляра.</summary>
      <returns>Значение true, если указанный объект равен данному объекту экземпляра; в противном случае — значение false.</returns>
      <param name="obj">Объект для сравнения.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.GetHashCode">
      <summary>Получает хэш-код.</summary>
      <returns>Хэш-код.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.NewValue">
      <summary>Возвращает новое значение заметки, которое может быть равно NULL после удаления заметки.</summary>
      <returns>Новое значение заметки, которое может быть равно NULL сразу после удаления заметки.</returns>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.OldValue">
      <summary>Возвращает старое значение заметки, которое может быть равно NULL сразу после создания заметки.</summary>
      <returns>Старое значение заметки, которое может быть равно NULL сразу после создания заметки.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.op_Equality(System.Data.Entity.Infrastructure.Annotations.AnnotationValues,System.Data.Entity.Infrastructure.Annotations.AnnotationValues)">
      <summary>Возвращает значение true, если обе пары заметки содержат одинаковые значения; в противном случае — значение false.</summary>
      <returns>Значение true, если обе пары содержат одинаковые значения.</returns>
      <param name="left">Пара значений заметки.</param>
      <param name="right">Пара значений заметки.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.AnnotationValues.op_Inequality(System.Data.Entity.Infrastructure.Annotations.AnnotationValues,System.Data.Entity.Infrastructure.Annotations.AnnotationValues)">
      <summary>Возвращает значение true, если обе пары заметки содержат разные значения; в противном случае — значение false.</summary>
      <returns>Значение true, если пары содержат разные значения.</returns>
      <param name="left">Пара значений заметки.</param>
      <param name="right">Пара значений заметки.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult">
      <summary>Возвращается методом <see cref="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.IsCompatibleWith(System.Object)" /> и связанными методами, чтобы указать, не конфликтует ли один объект с другим и можно ли их объединить в один объект.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult.#ctor(System.Boolean,System.String)">
      <summary>Создает новый экземпляр <see cref="T:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult" />.</summary>
      <param name="isCompatible">Указывает, совместимы ли два тестируемых объекта.</param>
      <param name="errorMessage">Сообщение об ошибке, которое указывает, почему два объекта несовместимы.Ожидается значение NULL, если isCompatible имеет значение true.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult.ErrorMessage">
      <summary>Если <see cref="P:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult.IsCompatible" /> имеет значение TRUE, тогда возвращает сообщение об ошибке, в котором указано, почему два тестируемых объекта несовместимы.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult.IsCompatible">
      <summary>Значение true, если два тестируемых объекта совместимы; в противном случае — значение false.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.CompatibilityResult.op_Implicit(System.Data.Entity.Infrastructure.Annotations.CompatibilityResult)~System.Boolean">
      <summary>Неявное преобразование в логическое значение, чтобы разрешить прямо использовать результирующий объект в проверке.</summary>
      <returns>Значение true, если результат совместим; в противном случае — значение false.</returns>
      <param name="result">Преобразуемый объект.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation">
      <summary>Типы, используемые в качестве пользовательских заметок, могут реализовать этот интерфейс для указания того, что попытка использования нескольких заметок с одним именем для одной таблицы или столбца может быть возможна путем слияния нескольких заметок в одну.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.IsCompatibleWith(System.Object)">
      <summary>Возвращает значение true, если заметка не конфликтует с другой заметкой и эти две заметки могут быть объединены в одну с помощью метода <see cref="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.MergeWith(System.Object)" />.</summary>
      <returns>Значение CompatibilityResult, которое указывает, совместима ли заметка с другой заметкой.</returns>
      <param name="other">Сравниваемая заметка.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.MergeWith(System.Object)">
      <summary>Объединяет заметку с другой заметкой и возвращает новую объединенную заметку.Метод завершается успешно только в том случае, если метод <see cref="M:System.Data.Entity.Infrastructure.Annotations.IMergeableAnnotation.IsCompatibleWith(System.Object)" /> возвращает значение true.</summary>
      <returns>Новая объединенная заметка.</returns>
      <param name="other">Заметка, которую необходимо объединить с этой заметкой.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation">
      <summary>Представляет пользовательские заметки для представления индексов баз данных в модели Entity Framework.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.#ctor(System.Collections.Generic.IEnumerable{System.ComponentModel.DataAnnotations.Schema.IndexAttribute})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" />, используя указанную коллекцию индексов.</summary>
      <param name="indexAttributes">Атрибуты индекса, представляющие один или несколько индексов.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.#ctor(System.ComponentModel.DataAnnotations.Schema.IndexAttribute)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" />, используя указанную коллекцию индексов.</summary>
      <param name="indexAttribute">Атрибуты индекса, представляющие индекс.</param>
    </member>
    <member name="F:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.AnnotationName">
      <summary>Имя, которое используется, когда заметка сохраняется в метаданных Entity Framework или сериализуется в файл SSDL/EDMX.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.Indexes">
      <summary>Возвращает индексы, представленные этой заметкой.</summary>
      <returns>Индексы, представленные этой заметкой.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.IsCompatibleWith(System.Object)">
      <summary>Возвращает значение true, если заметка не конфликтует с другой заметкой и эти две заметки могут быть объединены в одну с помощью метода <see cref="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.MergeWith(System.Object)" />.</summary>
      <returns>Значение CompatibilityResult, которое указывает, совместима ли заметка с другой заметкой.</returns>
      <param name="other">Сравниваемая заметка.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.MergeWith(System.Object)">
      <summary>Объединяет заметку с другой заметкой и возвращает новую заметку, содержащую объединенные индексы.</summary>
      <returns>Новая заметка с индексами из двух объединенных заметок.</returns>
      <param name="other">Заметка, которую необходимо объединить с этой заметкой.</param>
      <exception cref="T:System.InvalidOperationException">Другая заметка содержит индексы, которые несовместимы с индексами в этой заметке.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation.ToString">
      <summary>Возвращает строковое представление объекта <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" />.</summary>
      <returns>Строковое представление объекта <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotationSerializer">
      <summary>Класс используется для сериализации и десериализации объектов <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" />, чтобы их можно было хранить в форме EDMX модели Entity Framework.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotationSerializer.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotationSerializer" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotationSerializer.Deserialize(System.String,System.String)">
      <summary>Десериализует заданную строку обратно в объект <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" />.</summary>
      <returns>Значение десериализованной заметки.</returns>
      <param name="name">Имя десериализуемой заметки.</param>
      <param name="value">Десериализуемая строка.</param>
      <exception cref="T:System.FormatException">Если возникает ошибка во время чтения сериализованного значения.</exception>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Annotations.IndexAnnotationSerializer.Serialize(System.String,System.Object)">
      <summary>Сериализует указанную заметку <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" /> в строку для хранения в формате EDMX XML.</summary>
      <returns>Сериализованное значение.</returns>
      <param name="name">Имя сериализуемой заметки.</param>
      <param name="value">Сериализуемое значение, которое должно быть объектом IndexAnnotation.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs">
      <summary>Представляет аргументы событий, передаваемые обработчикам событий <see cref="E:System.Data.Entity.DbConfiguration.Loaded" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.AddDefaultResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>Добавляет экземпляр <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> в цепочку обязанностей сопоставителей, которые используются для разрешения зависимостей, необходимых платформе Entity Framework.В отличие от AddDependencyResolver, этот метод помещает сопоставителя вниз цепочки ответственности, в результате чего сопоставитель будет использован для разрешения зависимости, которую не удалось разрешить другими сопоставителями.</summary>
      <param name="resolver">Добавляемый сопоставитель.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.AddDependencyResolver(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Boolean)">
      <summary>Добавляет экземпляр <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> в цепочку обязанностей сопоставителей, которые используются для разрешения зависимостей, необходимых платформе Entity Framework.</summary>
      <param name="resolver">Добавляемый сопоставитель.</param>
      <param name="overrideConfigFile">Если значение true, то добавленный сопоставитель получает приоритет над настройками в файле конфигурации.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.DependencyResolver">
      <summary>Получает моментальный снимок сопоставителя <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" />, который скоро будет заблокирован.Получить зарегистрированные службы можно с помощью метода GetService данного объекта.</summary>
      <returns>Моментальный снимок сопоставителя <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" />, который скоро будет заблокирован.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.Equals(System.Object)">
      <summary>Указывает, равен ли данный экземпляр конкретному объекту.</summary>
      <returns>Значение true, если экземпляр равен указанному объекту; в противном случае — значение false.</returns>
      <param name="obj">Сравниваемый объект.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.GetHashCode">
      <summary>Получает хэш-код, связанный с этим экземпляром.</summary>
      <returns>Хэш-код, связанный с этим экземпляром.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.GetType">
      <summary>Получает тип этого экземпляра.</summary>
      <returns>Тип этого экземпляра.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.ReplaceService``1(System.Func{``0,System.Object,``0})">
      <summary>Добавляет сопоставителя-оболочку в конфигурацию, которая скоро будет заблокирована.Сопоставитель-оболочка — это сопоставитель, который инициализирует службу, возвращаемую цепочкой сопоставителя, и готовит или заменяет ее другой службой того же типа.</summary>
      <param name="serviceInterceptor">Делегат, который принимает неподготовленную службу и ключ и возвращает подготовленную или замененную службу.</param>
      <typeparam name="TService">Тип службы, которую требуется подготовить или заменить.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs.ToString">
      <summary>Возвращает строковое представление объекта <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs" />.</summary>
      <returns>Строковое представление объекта <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.DbConfigurationLoadedEventArgs" />.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions">
      <summary>Методы расширения для вызова метода <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" /> с помощью параметра универсального типа и (или) без имени.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetService``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>Вызывает метод <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" />, передавая универсальный тип метода в качестве аргумента type и значение null для аргумента name.</summary>
      <returns>Устраненная зависимость или значение null, если сопоставитель не смог ее разрешить.</returns>
      <param name="resolver">Используемый сопоставитель.</param>
      <typeparam name="T">Тип контракта, который необходимо разрешить.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetService``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Object)">
      <summary>Вызывает метод <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" />, передавая универсальный тип метода и указанное имя в качестве аргументов.</summary>
      <returns>Устраненная зависимость или значение null, если сопоставитель не смог ее разрешить.</returns>
      <param name="resolver">Используемый сопоставитель.</param>
      <param name="key">Ключ зависимости, который необходимо разрешить.</param>
      <typeparam name="T">Тип контракта, который необходимо разрешить.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetService(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Type)">
      <summary>Вызывает метод <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" />, передавая аргумент указанного типа и значение null для аргумента name.</summary>
      <returns>Устраненная зависимость или значение null, если сопоставитель не смог ее разрешить.</returns>
      <param name="resolver">Используемый сопоставитель.</param>
      <param name="type">Тип контракта, который необходимо разрешить.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetServices``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver)">
      <summary>Вызывает метод <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)" />, передавая универсальный тип метода в качестве аргумента type и значение null для аргумента name.</summary>
      <returns>Все разрешенные зависимости или <see cref="T:System.Collections.Generic.IEnumerable`1" />, если службы не разрешены.</returns>
      <param name="resolver">Используемый сопоставитель.</param>
      <typeparam name="T">Тип контракта, который необходимо разрешить.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetServices``1(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Object)">
      <summary>Вызывает метод <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)" />, передавая универсальный тип метода и указанное имя в качестве аргументов.</summary>
      <returns>Все разрешенные зависимости или <see cref="T:System.Collections.Generic.IEnumerable`1" />, если службы не разрешены.</returns>
      <param name="resolver">Используемый сопоставитель.</param>
      <param name="key">Ключ зависимости, который необходимо разрешить.</param>
      <typeparam name="T">Тип контракта, который необходимо разрешить.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.DbDependencyResolverExtensions.GetServices(System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver,System.Type)">
      <summary>Вызывает метод <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)" />, передавая аргумент указанного типа и значение null для аргумента name.</summary>
      <returns>Все разрешенные зависимости или <see cref="T:System.Collections.Generic.IEnumerable`1" />, если службы не разрешены.</returns>
      <param name="resolver">Используемый сопоставитель.</param>
      <param name="type">Тип контракта, который необходимо разрешить.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1">
      <summary>Реализация <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" />, которая используется для разрешения фабрик <see cref="T:System.Data.Entity.Infrastructure.IDbExecutionStrategy" />.</summary>
      <typeparam name="T">Тип разрешаемой стратегии выполнения.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1.#ctor(System.String,System.String,System.Func{`0})">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1" /></summary>
      <param name="providerInvariantName">Неизменяемое имя поставщика ADO.NET, которое указывает тип соединения ADO.NET для данной стратегии выполнения.</param>
      <param name="serverName">Строка, которая будет сопоставлена с именем сервера в строке подключения.Значение null сопоставляется с любым элементом.</param>
      <param name="getExecutionStrategy">Функция, которая возвращает новый экземпляр стратегии выполнения.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1.GetService(System.Type,System.Object)">
      <summary>Если задан тип <see cref="T:System.Func`1" />, то сопоставитель пытается вернуть используемую службу, в противном случае сопоставитель возвращает значение null.Если задан тип Func{IExecutionStrategy}, то ожидаемым ключом должен быть <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey" />.</summary>
      <returns>Значение <see cref="T:System.Func`1" /> или null.</returns>
      <param name="type">Тип разрешаемой службы.</param>
      <param name="key">Ключ, используемый для определения возвращаемой службы.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.ExecutionStrategyResolver`1.GetServices(System.Type,System.Object)">
      <summary>Если задан тип <see cref="T:System.Func`1" />, то сопоставитель пытается вернуть службу для использования, в противном случае возвращает пустое перечисление.Если задан тип Func{IExecutionStrategy}, то ожидаемым ключом должен быть <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey" />.</summary>
      <returns>Перечисление <see cref="T:System.Func`1" /> или пустое перечисление.</returns>
      <param name="type">Тип разрешаемой службы.</param>
      <param name="key">Ключ, используемый для определения возвращаемой службы.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver">
      <summary>Этот интерфейс реализуется любым другим объектом, который может разрешить зависимость напрямую или через внешний контейнер.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)">
      <summary>Пытается разрешить зависимость для указанного типа контракта и необязательного ключа.Если сопоставитель не может разрешить зависимость, он должен вернуть значение null или не возвращать поток.Благодаря этому сопоставители могут быть использованы в цепочке ответственности, в которой несколько сопоставителей можно опрашивать до тех пор, пока один из них не разрешит зависимость.</summary>
      <returns>Разрешенная зависимость, которая должна быть экземпляром данного типа контракта, или значение null, если она не может быть разрешена.</returns>
      <param name="type">Интерфейс или абстрактный базовый класс, который определяет разрешаемую зависимость.Возвращаемый объект должен представлять экземпляр этого типа.</param>
      <param name="key">Ключ разрешаемой зависимости (необязательно).Это может быть значение null для зависимостей, не различаемых по ключу.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetServices(System.Type,System.Object)">
      <summary>Пытается разрешить зависимости для указанного типа контракта и (необязательно) заданного ключа.Если сопоставитель не может разрешить зависимость, то он должен вернуть пустое перечисление и не активировать исключение.Этот метод отличается от <see cref="M:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver.GetService(System.Type,System.Object)" /> тем, что возвращает все зарегистрированные службы для заданного сочетания типа и ключа.</summary>
      <returns>Все службы, разрешающие эту зависимость, должны быть экземплярами данного типа контракта или пустым перечислением, если зависимость не может быть разрешена.</returns>
      <param name="type">Интерфейс или абстрактный базовый класс, который определяет разрешаемую зависимость.Следует ожидать, что каждый возвращаемый объект является экземпляром этого типа.</param>
      <param name="key">Ключ разрешаемой зависимости (необязательно).Это может быть значение null для зависимостей, не различаемых по ключу.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1">
      <summary>Реализует интерфейс <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" /> для разрешения зависимости таким образом, чтобы всегда возвращался тот же экземпляр.</summary>
      <typeparam name="T">Тип, который определяет контракт для разрешаемой зависимости.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.#ctor(`0)">
      <summary>Создает нового сопоставителя, который вернет указанный экземпляр по типу контракта, независимо от ключа, переданного в метод Get.</summary>
      <param name="singletonInstance">Возвращаемый экземпляр.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.#ctor(`0,System.Func{System.Object,System.Boolean})">
      <summary>Создает новый сопоставитель, который возвращает указанный экземпляр по типу контракта, если указанный ключ точно совпадает с ключом, переданным методу Get на основе заданного предиката.</summary>
      <param name="singletonInstance">Возвращаемый экземпляр.</param>
      <param name="keyPredicate">Предикат, который принимает объект ключа и возвращает значение true, если только он соответствует условию поиска.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.#ctor(`0,System.Object)">
      <summary>Создает нового сопоставителя, который вернет указанный экземпляр по типу контракта, если указанный ключ точно совпадает с ключом, переданным в метод Get.</summary>
      <param name="singletonInstance">Возвращаемый экземпляр.</param>
      <param name="key">Ключ разрешаемой зависимости (необязательно).Это может быть значение null для зависимостей, не различаемых по ключу.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.GetService(System.Type,System.Object)">
      <summary>Пытается разрешить зависимость для указанного типа контракта и необязательного ключа.Если сопоставитель не может разрешить зависимость, он должен вернуть значение null или не возвращать поток.Благодаря этому сопоставители могут быть использованы в цепочке ответственности, в которой несколько сопоставителей можно опрашивать до тех пор, пока один из них не разрешит зависимость.</summary>
      <returns>Разрешенная зависимость, которая должна быть экземпляром данного типа контракта, или значение null, если она не может быть разрешена.</returns>
      <param name="type">Интерфейс или абстрактный базовый класс, который определяет разрешаемую зависимость.Возвращаемый объект должен представлять экземпляр этого типа.</param>
      <param name="key">Ключ разрешаемой зависимости (необязательно).Это может быть значение null для зависимостей, не различаемых по ключу.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.SingletonDependencyResolver`1.GetServices(System.Type,System.Object)">
      <summary>Пытается разрешить зависимости для указанного типа контракта и (необязательно) заданного ключа.Если сопоставитель не может разрешить зависимость, то он должен вернуть пустое перечисление и не активировать исключение.</summary>
      <returns>Все службы, разрешающие эту зависимость, должны быть экземплярами данного типа контракта или пустым перечислением, если зависимость не может быть разрешена.</returns>
      <param name="type">Интерфейс или абстрактный базовый класс, который определяет разрешаемую зависимость.Следует ожидать, что каждый возвращаемый объект является экземпляром этого типа.</param>
      <param name="key">Ключ разрешаемой зависимости (необязательно).Это может быть значение null для зависимостей, не различаемых по ключу.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver">
      <summary>Представляет реализацию <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.IDbDependencyResolver" />, которая используется для разрешения фабрик <see cref="T:System.Data.Entity.Infrastructure.TransactionHandler" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver.#ctor(System.Func{System.Data.Entity.Infrastructure.TransactionHandler},System.String,System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver" />.</summary>
      <param name="transactionHandlerFactory">Функция, которая возвращает новый экземпляр обработчика транзакции.</param>
      <param name="providerInvariantName">Неизменяемое имя поставщика ADO.NET, указывающее тип соединения ADO.NET, для которого будет использоваться обработчик транзакций.Значение null сопоставляется с любым элементом.</param>
      <param name="serverName">Строка, которая будет сопоставлена с именем сервера в строке подключения.Значение null сопоставляется с любым элементом.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту.</summary>
      <returns>Значение true, если заданный объект равен текущему объекту. В противном случае — значение false.</returns>
      <param name="obj">Объект для сравнения.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver.GetHashCode">
      <summary>Получает хэш-код экземпляра объекта.</summary>
      <returns>Хэш-код для экземпляра объекта.</returns>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver.GetService(System.Type,System.Object)">
      <summary>Если задан тип <see cref="T:System.Func`1" />, то метод пытается вернуть службу для использования, в противном случае возвращается значение null.Если задан тип <see cref="T:System.Func`1" />, то ожидаемым ключом должен быть <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey" />.</summary>
      <returns>Значение <see cref="T:System.Func`1" /> или null.</returns>
      <param name="type">Тип разрешаемой службы.</param>
      <param name="key">Ключ, используемый для определения возвращаемой службы.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.DependencyResolution.TransactionHandlerResolver.GetServices(System.Type,System.Object)">
      <summary>Если задан тип <see cref="T:System.Func`1" />, то сопоставитель пытается вернуть службу для использования, в противном случае возвращает пустое перечисление.Если задан тип <see cref="T:System.Func`1" />, то ожидаемым ключом должен быть <see cref="T:System.Data.Entity.Infrastructure.ExecutionStrategyKey" />.</summary>
      <returns>Перечисление <see cref="T:System.Func`1" /> или пустое перечисление.</returns>
      <param name="type">Тип разрешаемой службы.</param>
      <param name="key">Ключ, используемый для определения возвращаемой службы.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Design.AppConfigReader">
      <summary>Предоставляет вспомогательные методы для чтения из файла App.config или Web.config.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Design.AppConfigReader.#ctor(System.Configuration.Configuration)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.Entity.Infrastructure.Design.AppConfigReader" />.</summary>
      <param name="configuration">Конфигурация, из которой выполняется чтение.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Design.AppConfigReader.GetProviderServices(System.String)">
      <summary>Возвращает службы указанного поставщика из конфигурации.</summary>
      <returns>Имя типа служб поставщика или значение null, если оно не найдено.</returns>
      <param name="invariantName">Неизменяемое имя служб поставщика.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView">
      <summary>Обозначает представление сопоставления.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingView.#ctor(System.String)">
      <summary>Создает экземпляр <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView" /> с указанной сущностью Entity SQL.</summary>
      <param name="entitySql">Строка, определяющая сущность Entity SQL.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.MappingViews.DbMappingView.EntitySql">
      <summary>Возвращает сущность Entity SQL.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache">
      <summary>Представляет базовый абстрактный класс для реализаций кэша представления сопоставления.Производные классы должны иметь конструктор без параметров, если они используются с атрибутом <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache.GetView(System.Data.Entity.Core.Metadata.Edm.EntitySetBase)">
      <summary>Получает представление, соответствующее заданному экстенту.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingView" />, определяющий представление сопоставления, или null, если экстент не связан с таким представлением.</returns>
      <param name="extent">Объект <see cref="T:System.Data.Entity.Core.Metadata.Edm.EntitySetBase" />, задающий экстент.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache.MappingHashValue">
      <summary>Возвращает хэш-значение, вычисляемое по замыканию сопоставления.</summary>
      <returns>Хэш-значение, вычисляемое по замыканию сопоставления.</returns>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory">
      <summary>Задает способы создания определенных экземпляров <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheFactory.Create(System.String,System.String)">
      <summary>Создает экземпляр кэша формируемого представления для сопоставления контейнеров, определяемого именами сопоставленных контейнеров.</summary>
      <returns>Объект <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" />, который определяет кэш формируемого представления.</returns>
      <param name="conceptualModelContainerName">Имя контейнера в концептуальной модели.</param>
      <param name="storeModelContainerName">Имя контейнера в модели хранения.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute">
      <summary>Определяет настраиваемый атрибут, который определяет тип кэша представления сопоставления (подкласс <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" />), связанный с типом контекста (подкласс <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> или <see cref="T:System.Data.Entity.DbContext" />).Тип кэша создается во время выполнения и используется для получения сформированных ранее представлений в соответствующем контексте.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute.#ctor(System.Type,System.String)">
      <summary>Создает экземпляр <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute" />, который связывает тип контекста с типом кэша представления сопоставления.</summary>
      <param name="contextType">Подкласс <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> или <see cref="T:System.Data.Entity.DbContext" />.</param>
      <param name="cacheTypeName">Полное имя типа кэша с указанием сборки.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute.#ctor(System.Type,System.Type)">
      <summary>Создает экземпляр <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCacheTypeAttribute" />, который связывает тип контекста с типом кэша представления сопоставления.</summary>
      <param name="contextType">Подкласс <see cref="T:System.Data.Entity.Core.Objects.ObjectContext" /> или <see cref="T:System.Data.Entity.DbContext" />.</param>
      <param name="cacheType">Подкласс <see cref="T:System.Data.Entity.Infrastructure.MappingViews.DbMappingViewCache" />.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Pluralization.CustomPluralizationEntry">
      <summary>Представляет пользовательское выражение преобразования во множественную форму, которая используется соединением <see cref="T:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService" /></summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.CustomPluralizationEntry.#ctor(System.String,System.String)">
      <summary>Создайте новый экземпляр</summary>
      <param name="singular">Строка, отличная от значения NULL или пустая, представляющая единственное число.</param>
      <param name="plural">Строка, отличная от значения NULL или пустая, представляющая множественное число.</param>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Pluralization.CustomPluralizationEntry.Plural">
      <summary>Возвратить множественное число.</summary>
    </member>
    <member name="P:System.Data.Entity.Infrastructure.Pluralization.CustomPluralizationEntry.Singular">
      <summary>Возвратить единственное число.</summary>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService">
      <summary>Реализация по умолчанию службы преобразования в форму множественного числа для использования платформой Entity Framework.Эта служба преобразования в форму множественного числа основана на английском языковом стандарте.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService.#ctor">
      <summary>Создает новый экземпляр службы по умолчанию для преобразования в форму множественного числа, используемой в Entity Framework.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService.#ctor(System.Collections.Generic.IEnumerable{System.Data.Entity.Infrastructure.Pluralization.CustomPluralizationEntry})">
      <summary>Создает новый экземпляр службы по умолчанию для преобразования в форму множественного числа, используемой в Entity Framework.</summary>
      <param name="userDictionaryEntries">Коллекция словарных записей пользователя для использования этой службой. Эти входные данные могут настраивать службу в соответствии с требованиями пользователя.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService.Pluralize(System.String)">
      <summary>Возвращает форму множественного числа заданного слова.</summary>
      <returns>Форма множественного числа входного параметра.</returns>
      <param name="word">Слово, которое требуется поставить во множественное число.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService.Singularize(System.String)">
      <summary>Возвращает форму единственного числа заданного слова.</summary>
      <returns>Форма единственного числа входного параметра.</returns>
      <param name="word">Слово, которое требуется поставить в единственное число.</param>
    </member>
    <member name="T:System.Data.Entity.Infrastructure.Pluralization.IPluralizationService">
      <summary>Этот интерфейс реализуется службами преобразования во множественную форму, которые будут использоваться средой выполнения EF.По умолчанию используется служба <see cref="T:System.Data.Entity.Infrastructure.Pluralization.EnglishPluralizationService" />, но используемая служба преобразования во множественную форму может быть задана в классе, производном от <see cref="T:System.Data.Entity.DbConfiguration" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.IPluralizationService.Pluralize(System.String)">
      <summary>Преобразование слова в форму множественного числа с помощью службы.</summary>
      <returns>Слово, преобразованное в форму множественного числа</returns>
      <param name="word">Слово для преобразования в форму множественного числа.</param>
    </member>
    <member name="M:System.Data.Entity.Infrastructure.Pluralization.IPluralizationService.Singularize(System.String)">
      <summary>Преобразование слова в форму единственного числа с помощью службы.</summary>
      <returns>Слово, преобразованное в форму единственного числа.</returns>
      <param name="word">Слово для преобразование в форму единственного числа</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigration">
      <summary>Представляет базовый класс для миграции на основе кода.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Migrations.DbMigration" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddColumn(System.String,System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,System.Data.Entity.Migrations.Model.ColumnModel},System.Object)">
      <summary>Добавляет операцию добавления столбца в существующую таблицу.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="table">Имя таблицы, в которую следует добавить столбец.Имя схемы — необязательный параметр; если схема не указана, предполагается dbo.</param>
      <param name="name">Имя добавляемого столбца.</param>
      <param name="columnAction">Действие, задающее добавляемый столбец.т. е.c =&amp;gt; c.Int(nullable: false, defaultValue: 3)</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddForeignKey(System.String,System.String,System.String,System.String,System.Boolean,System.String,System.Object)">
      <summary>Добавляет операцию создания нового ограничения внешнего ключа.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="dependentTable">Таблица, содержащая столбец внешнего ключа.Имя схемы — необязательный параметр; если схема не указана, предполагается dbo.</param>
      <param name="dependentColumn">Столбец внешнего ключа.</param>
      <param name="principalTable">Таблица, содержащая столбец, на который ссылается этот внешний ключ.Имя схемы — необязательный параметр; если схема не указана, предполагается dbo.</param>
      <param name="principalColumn">Столбец, на который ссылается этот внешний ключ.Если значение не задано, будет использоваться первичный ключ базовой таблицы.</param>
      <param name="cascadeDelete">Значение, указывающее, следует ли настроить каскадное удаление для связи по внешнему ключу.Если значение не задано, каскадное удаление будет отключено.</param>
      <param name="name">Имя ограничения внешнего ключа в базе данных.Если значение не задано, будет сформировано уникальное имя.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddForeignKey(System.String,System.String[],System.String,System.String[],System.Boolean,System.String,System.Object)">
      <summary>Добавляет операцию создания нового ограничения внешнего ключа.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="dependentTable">Таблица, содержащая столбцы внешнего ключа.Имя схемы — необязательный параметр; если схема не указана, предполагается dbo.</param>
      <param name="dependentColumns">Столбцы внешнего ключа.</param>
      <param name="principalTable">Таблица, содержащая столбцы, на которые ссылается этот внешний ключ.Имя схемы — необязательный параметр; если схема не указана, предполагается dbo.</param>
      <param name="principalColumns">Столбцы, на которые ссылается этот внешний ключ.Если значение не задано, будет использоваться первичный ключ базовой таблицы.</param>
      <param name="cascadeDelete">Значение, указывающее, следует ли настроить каскадное удаление для связи по внешнему ключу.Если значение не задано, каскадное удаление будет отключено.</param>
      <param name="name">Имя ограничения внешнего ключа в базе данных.Если значение не задано, будет сформировано уникальное имя.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddPrimaryKey(System.String,System.String,System.String,System.Boolean,System.Object)">
      <summary>Добавляет операцию создания нового первичного ключа.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="table">Таблица, содержащая столбец первичного ключа.Имя схемы — необязательный параметр; если схема не указана, предполагается dbo.</param>
      <param name="column">Столбец первичного ключа.</param>
      <param name="name">Имя первичного ключа в базе данных.Если значение не задано, будет сформировано уникальное имя.</param>
      <param name="clustered">Значение, указывающее, является ли этот индекс кластеризованным первичным ключом.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AddPrimaryKey(System.String,System.String[],System.String,System.Boolean,System.Object)">
      <summary>Добавляет операцию создания нового первичного ключа на основе нескольких столбцов.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="table">Таблица, содержащая столбцы первичного ключа.Имя схемы — необязательный параметр; если схема не указана, предполагается dbo.</param>
      <param name="columns">Столбцы первичного ключа.</param>
      <param name="name">Имя первичного ключа в базе данных.Если значение не задано, будет сформировано уникальное имя.</param>
      <param name="clustered">Значение, указывающее, является ли этот индекс кластеризованным первичным ключом.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AlterColumn(System.String,System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,System.Data.Entity.Migrations.Model.ColumnModel},System.Object)">
      <summary>Добавляет операцию изменения определения существующего столбца.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="table">Имя таблицы, в которой находится столбец.Имя схемы — необязательный параметр; если схема не указана, предполагается dbo.</param>
      <param name="name">Имя столбца для изменения.</param>
      <param name="columnAction">Действие, задающее новое определение для столбца.т. е.c =&amp;gt; c.String(nullable: false, defaultValue: "none")</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AlterStoredProcedure``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ParameterBuilder,``0},System.String,System.Object)">
      <summary>Добавляет операцию изменения хранимой процедуры.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="name">Имя хранимой процедуры.Имя схемы — необязательный параметр; если схема не указана, предполагается dbo.</param>
      <param name="parametersAction">Действие, которое указывает параметры хранимой процедуры.</param>
      <param name="body">Текст хранимой процедуры.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов.Например, 'new { SampleArgument = "MyValue" }'.</param>
      <typeparam name="TParameters">Параметры в этой операции изменения хранимой процедуры.Этот тип указывать не нужно, он будет выведен из предоставляемого параметра <paramref name="parametersAction" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AlterStoredProcedure(System.String,System.String,System.Object)">
      <summary>Добавляет операцию изменения хранимой процедуры.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="name">Имя хранимой процедуры.Имя схемы — необязательный параметр; если схема не указана, предполагается dbo.</param>
      <param name="body">Текст хранимой процедуры.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов.Например, 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.AlterTableAnnotations``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,``0},System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues},System.Object)">
      <summary>Добавляет операцию для обработки изменений в заметках, определенных на таблицах.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="name">Имя таблицы.Имя схемы — необязательный параметр; если схема не указана, предполагается dbo.</param>
      <param name="columnsAction">Действие, задающее столбцы, которые нужно включить в таблицу.т. е.t =&amp;gt; new { Id = t.Int(identity: true), Name = t.String() }</param>
      <param name="annotations">Пользовательские заметки на таблице, которая была изменена.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
      <typeparam name="TColumns">Столбцы в данной операции.Этот тип указывать не нужно, он будет выведен из предоставляемого параметра columnsAction.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateIndex(System.String,System.String,System.Boolean,System.String,System.Boolean,System.Object)">
      <summary>Добавляет операцию создания индекса на одном столбце.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="table">Имя таблицы, в которой создается индекс.Имя схемы — необязательный параметр; если схема не указана, предполагается dbo.</param>
      <param name="column">Имя столбца, на котором создается индекс.</param>
      <param name="unique">Значение, указывающее, является ли этот индекс уникальным.Если значение не задано, будет создан неуникальный индекс.</param>
      <param name="name">Имя, которое будет использоваться для данного индекса в базе данных.Если значение не задано, будет сформировано уникальное имя.</param>
      <param name="clustered">Значение, указывающее, является ли этот индекс кластеризованным.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateIndex(System.String,System.String[],System.Boolean,System.String,System.Boolean,System.Object)">
      <summary>Добавляет операцию создания индекса на нескольких столбцах.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="table">Имя таблицы, в которой создается индекс.Имя схемы — необязательный параметр; если схема не указана, предполагается dbo.</param>
      <param name="columns">Имена столбцов, на которых создается индекс.</param>
      <param name="unique">Значение, указывающее, является ли этот индекс уникальным.Если значение не задано, будет создан неуникальный индекс.</param>
      <param name="name">Имя, которое будет использоваться для данного индекса в базе данных.Если значение не задано, будет сформировано уникальное имя.</param>
      <param name="clustered">Значение, указывающее, является ли этот индекс кластеризованным.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateStoredProcedure``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ParameterBuilder,``0},System.String,System.Object)">
      <summary>Добавляет операцию создания новой хранимой процедуры.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="name">Имя хранимой процедуры.Имя схемы — необязательный параметр; если схема не указана, предполагается dbo.</param>
      <param name="parametersAction">Действие, которое указывает параметры хранимой процедуры.</param>
      <param name="body">Текст хранимой процедуры.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов.Например, 'new { SampleArgument = "MyValue" }'.</param>
      <typeparam name="TParameters">Параметры в этой операции создания хранимой процедуры.Этот тип указывать не нужно, он будет выведен из предоставляемого параметра <paramref name="parametersAction" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateStoredProcedure(System.String,System.String,System.Object)">
      <summary>Добавляет операцию создания новой хранимой процедуры.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="name">Имя хранимой процедуры.Имя схемы — необязательный параметр; если схема не указана, предполагается dbo.</param>
      <param name="body">Текст хранимой процедуры.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов.Например, 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateTable``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,``0},System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
      <summary>Добавляет операцию создания новой таблицы.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <returns>Объект, позволяющий дальнейшую конфигурацию операции создания таблицы.</returns>
      <param name="name">Имя таблицы.Имя схемы — необязательный параметр; если схема не указана, предполагается dbo.</param>
      <param name="columnsAction">Действие, задающее столбцы, которые нужно включить в таблицу.т. е.t =&amp;gt; new { Id = t.Int(identity: true), Name = t.String() }</param>
      <param name="annotations">Существующие пользовательские заметки на таблице, которая должна быть создана.Могут быть пустыми или иметь значение NULL.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
      <typeparam name="TColumns">Столбцы в данной операции создания таблицы.Этот тип указывать не нужно, он будет выведен из предоставляемого параметра columnsAction.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.CreateTable``1(System.String,System.Func{System.Data.Entity.Migrations.Builders.ColumnBuilder,``0},System.Object)">
      <summary>Добавляет операцию создания новой таблицы.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <returns>Объект, позволяющий дальнейшую конфигурацию операции создания таблицы.</returns>
      <param name="name">Имя таблицы.Имя схемы — необязательный параметр; если схема не указана, предполагается dbo.</param>
      <param name="columnsAction">Действие, задающее столбцы, которые нужно включить в таблицу.т. е.t =&amp;gt; new { Id = t.Int(identity: true), Name = t.String() }</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
      <typeparam name="TColumns">Столбцы в данной операции создания таблицы.Этот тип указывать не нужно, он будет выведен из предоставляемого параметра columnsAction.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Down">
      <summary>Операции, которые будут выполнены во время процесса понижения уровня.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropColumn(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
      <summary>Добавляет операцию удаления существующего столбца.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="table">Имя таблицы, из которой следует удалить столбец.Имя схемы — необязательный параметр; если схема не указана, предполагается dbo.</param>
      <param name="name">Имя столбца для удаления.</param>
      <param name="removedAnnotations">Существующие пользовательские заметки на удаляемом столбце.Могут быть пустыми или иметь значение NULL.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropColumn(System.String,System.String,System.Object)">
      <summary>Добавляет операцию удаления существующего столбца.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="table">Имя таблицы, из которой следует удалить столбец.Имя схемы — необязательный параметр; если схема не указана, предполагается dbo.</param>
      <param name="name">Имя столбца для удаления.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String,System.Object)">
      <summary>Добавляет операцию удаления ограничения внешнего ключа на основе его имени.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="dependentTable">Таблица, содержащая столбец внешнего ключа.Имя схемы — необязательный параметр; если схема не указана, предполагается dbo.</param>
      <param name="name">Имя ограничения внешнего ключа в базе данных.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String,System.String,System.Object)">
      <summary>Добавляет операцию удаления ограничения внешнего ключа на основе целевого столбца.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="dependentTable">Таблица, содержащая столбец внешнего ключа.Имя схемы — необязательный параметр; если схема не указана, предполагается dbo.</param>
      <param name="dependentColumn">Столбец внешнего ключа.</param>
      <param name="principalTable">Таблица, содержащая столбец, на который ссылается этот внешний ключ.Имя схемы — необязательный параметр; если схема не указана, предполагается dbo.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String,System.String,System.String,System.Object)">
      <summary>Добавляет операцию удаления ограничения внешнего ключа на основе целевого столбца.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="dependentTable">Таблица, содержащая столбец внешнего ключа.Имя схемы — необязательный параметр; если схема не указана, предполагается dbo.</param>
      <param name="dependentColumn">Столбец внешнего ключа.</param>
      <param name="principalTable">Таблица, содержащая столбец, на который ссылается этот внешний ключ.Имя схемы — необязательный параметр; если схема не указана, предполагается dbo.</param>
      <param name="principalColumn">Столбцы, на которые ссылается этот внешний ключ.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropForeignKey(System.String,System.String[],System.String,System.Object)">
      <summary>Добавляет операцию удаления ограничения внешнего ключа на основе целевых столбцов.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="dependentTable">Таблица, содержащая столбцы внешнего ключа.Имя схемы — необязательный параметр; если схема не указана, предполагается dbo.</param>
      <param name="dependentColumns">Столбцы внешнего ключа.</param>
      <param name="principalTable">Таблица, содержащая столбцы, на которые ссылается этот внешний ключ.Имя схемы — необязательный параметр; если схема не указана, предполагается dbo.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropIndex(System.String,System.String,System.Object)">
      <summary>Добавляет операцию удаления индекса на основе его имени.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="table">Имя таблицы, из которой следует удалить индекс.Имя схемы — необязательный параметр; если схема не указана, предполагается dbo.</param>
      <param name="name">Имя индекса для удаления.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropIndex(System.String,System.String[],System.Object)">
      <summary>Добавляет операцию удаления индекса на основе целевых столбцов.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="table">Имя таблицы, из которой следует удалить индекс.Имя схемы — необязательный параметр; если схема не указана, предполагается dbo.</param>
      <param name="columns">Имена целевых столбцов индекса.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropPrimaryKey(System.String,System.Object)">
      <summary>Добавляет операцию удаления существующего первичного ключа, созданного с именем по умолчанию.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="table">Таблица, содержащая столбец первичного ключа.Имя схемы — необязательный параметр; если схема не указана, предполагается dbo.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropPrimaryKey(System.String,System.String,System.Object)">
      <summary>Добавляет операцию удаления существующего первичного ключа, имеющего имя, отличное от имени по умолчанию.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="table">Таблица, содержащая столбец первичного ключа.Имя схемы — необязательный параметр; если схема не указана, предполагается dbo.</param>
      <param name="name">Имя первичного ключа для удаления.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropStoredProcedure(System.String,System.Object)">
      <summary>Добавляет операцию для удаления существующей хранимой процедуры с указанным именем.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="name">Имя удаляемой процедуры.Имя схемы — необязательный параметр; если схема не указана, предполагается dbo.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов.Например, 'new { SampleArgument = "MyValue" }'.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropTable(System.String,System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.Object}},System.Object)">
      <summary>Добавляет операцию удаления таблицы.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="name">Имя таблицы для удаления.Имя схемы — необязательный параметр; если схема не указана, предполагается dbo.</param>
      <param name="removedColumnAnnotations">Существующие пользовательские заметки на столбцах удаляемой таблицы.Могут быть пустыми или иметь значение NULL.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropTable(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.Object}},System.Object)">
      <summary>Добавляет операцию удаления таблицы.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="name">Имя таблицы для удаления.Имя схемы — необязательный параметр; если схема не указана, предполагается dbo.</param>
      <param name="removedAnnotations">Существующие пользовательские заметки на удаляемой таблице.Могут быть пустыми или иметь значение NULL.</param>
      <param name="removedColumnAnnotations">Существующие пользовательские заметки на столбцах удаляемой таблицы.Могут быть пустыми или иметь значение NULL.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropTable(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
      <summary>Добавляет операцию удаления таблицы.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="name">Имя таблицы для удаления.Имя схемы — необязательный параметр; если схема не указана, предполагается dbo.</param>
      <param name="removedAnnotations">Существующие пользовательские заметки на удаляемой таблице.Могут быть пустыми или иметь значение NULL.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.DropTable(System.String,System.Object)">
      <summary>Добавляет операцию удаления таблицы.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="name">Имя таблицы для удаления.Имя схемы — необязательный параметр; если схема не указана, предполагается dbo.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Equals(System.Object)">
      <summary>Определяет, равен ли данный экземпляр указанному объекту.</summary>
      <returns>Значение true, если указанный объект равен текущему экземпляру; в противном случае значение false.</returns>
      <param name="obj">Объект для сравнения с текущим экземпляром.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.GetHashCode">
      <summary>Возвращает хэш-функцию для текущего объекта.</summary>
      <returns>Хэш-функция для текущего объекта.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.GetType">
      <summary>Возвращает тип текущего экземпляра в среде выполнения.</summary>
      <returns>Тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.MemberwiseClone">
      <summary>Создает неполную копию текущего объекта.</summary>
      <returns>Неполная копия текущего объекта.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.MoveStoredProcedure(System.String,System.String,System.Object)">
      <summary>Добавляет операцию перемещения хранимой процедуры в новую схему.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="name">Имя хранимой процедуры, которая должна быть перемещена.Имя схемы — необязательный параметр; если схема не указана, предполагается dbo.</param>
      <param name="newSchema">Схема, в которую должна быть перемещена хранимая процедура.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.MoveTable(System.String,System.String,System.Object)">
      <summary>Добавляет операцию перемещения таблицы в новую схему.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="name">Имя таблицы для перемещения.Имя схемы — необязательный параметр; если схема не указана, предполагается dbo.</param>
      <param name="newSchema">Схема, в которую перемещается таблица.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.RenameColumn(System.String,System.String,System.String,System.Object)">
      <summary>Добавляет операцию переименования столбца.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="table">Имя таблицы, содержащей переименуемый столбец.Имя схемы — необязательный параметр; если схема не указана, предполагается dbo.</param>
      <param name="name">Имя столбца для переименования.</param>
      <param name="newName">Новое имя столбца.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.RenameIndex(System.String,System.String,System.String,System.Object)">
      <summary>Добавляет операцию переименования индекса.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="table">Имя таблицы, содержащей индекс, который подлежит переименованию.Имя схемы — необязательный параметр; если схема не указана, предполагается dbo.</param>
      <param name="name">Имя индекса, который подлежит переименованию.</param>
      <param name="newName">Новое имя индекса.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.RenameStoredProcedure(System.String,System.String,System.Object)">
      <summary>Добавляет операцию переименования хранимой процедуры.Чтобы изменить схему хранимой процедуры, используйте MoveStoredProcedure. Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="name">Имя хранимой процедуры, которая должна быть переименована.Имя схемы — необязательный параметр; если схема не указана, предполагается dbo.</param>
      <param name="newName">Новое имя для хранимой процедуры.Имя схемы — необязательный параметр; если схема не указана, предполагается dbo.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.RenameTable(System.String,System.String,System.Object)">
      <summary>Добавляет операцию переименования таблицы.Для изменения схемы таблицы используйте метод MoveTable.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="name">Имя таблицы для переименования.Имя схемы — необязательный параметр; если схема не указана, предполагается dbo.</param>
      <param name="newName">Новое имя таблицы.Имя схемы — необязательный параметр; если схема не указана, предполагается dbo.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Sql(System.String,System.Boolean,System.Object)">
      <summary>Добавляет операцию выполнения команды SQL.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="sql">Команда SQL, которую требуется выполнить.</param>
      <param name="suppressTransaction">Значение, указывающее, выполнять ли SQL-код вне транзакции, используемой для процесса миграции.Если значение не задано, SQL-код будет выполняться в пределах транзакции.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.SqlFile(System.String,System.Boolean,System.Object)">
      <summary>Добавляет операцию выполнения файла SQL.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="sqlFile">Файл SQL, который требуется выполнить.Предполагается, что относительные пути являются относительными по отношению к текущему параметру BaseDirectory AppDomain.</param>
      <param name="suppressTransaction">Значение, указывающее, выполнять ли SQL-код вне транзакции, используемой для процесса миграции.Если значение не задано, SQL-код будет выполняться в пределах транзакции.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.SqlResource(System.String,System.Reflection.Assembly,System.Boolean,System.Object)">
      <summary>Добавляет операцию выполнения файла ресурсов SQL.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="sqlResource">Имя ресурса манифеста выполняемого файла ресурсов SQL.</param>
      <param name="resourceAssembly">Сборка, содержащая файл ресурсов.Если не указана, предполагается вызывающая сборка.</param>
      <param name="suppressTransaction">Значение, указывающее, выполнять ли SQL-код вне транзакции, используемой для процесса миграции.Если значение не задано, SQL-код будет выполняться в пределах транзакции.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.System#Data#Entity#Migrations#Infrastructure#IDbMigration#AddOperation(System.Data.Entity.Migrations.Model.MigrationOperation)">
      <summary>Добавляет операцию миграции.</summary>
      <param name="migrationOperation">Добавляемая операция миграции.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.ToString">
      <summary>Возвращает строку, представляющую текущий объект.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigration.Up">
      <summary>Операции, которые будут выполнены в процессе обновления.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrationsConfiguration">
      <summary>Конфигурация, связанная с использованием миграции для данной модели.Вместо использования этого класса обычно создается класс конфигурации, который является производным от <see cref="T:System.Data.Entity.Migrations.DbMigrationsConfiguration`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.#ctor">
      <summary>Инициализирует новый экземпляр класса DbMigrationsConfiguration.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.AutomaticMigrationDataLossAllowed">
      <summary>Возвращает или задает значение, указывающее, приемлемы ли потери данных во время автоматической миграции.Если задано значение false, то при возникновении в процессе автоматической миграции потерь данных будет сформировано исключение.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.AutomaticMigrationsEnabled">
      <summary>Возвращает или задает значение, указывающее, будет ли использоваться автоматическая миграция при переносе базы данных.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.CodeGenerator">
      <summary>Возвращает или задает генератор кода для использования при создании шаблонов миграции.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.CommandTimeout">
      <summary>Возвращает или задает значение времени ожидания, которое используется для отдельных команд в рамках миграции.Значение NULL указывает, что будет использоваться значение по умолчанию базового поставщика.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.ContextKey">
      <summary>Возвращает или задает строку, позволяющую отличить переносы, принадлежащие этой конфигурации, от переносов, принадлежащих другим конфигурациям, используя одну и ту же базу данных.Это свойство позволяет применять перемещения из многих разных моделей к единственной базе данных.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.ContextType">
      <summary>Возвращает или задает производный DbContext, представляющий перенесенную модель.</summary>
    </member>
    <member name="F:System.Data.Entity.Migrations.DbMigrationsConfiguration.DefaultMigrationsDirectory">
      <summary>Каталог по умолчанию, в котором хранятся перемещения.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.GetHistoryContextFactory(System.String)">
      <summary>Возвращает фабрику контекста журнала, которая задана как предназначенная для использования с указанным поставщиком базы данных.</summary>
      <returns>Фабрика контекста журнала, настроенная для поставщика базы данных.</returns>
      <param name="providerInvariantName">Имя поставщика базы данных, для которого должна быть получена фабрика.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.GetSqlGenerator(System.String)">
      <summary>Возвращает генератор SQL, который настроен для использования с данным поставщиком базы данных.</summary>
      <returns>Генератор SQL, настроенный для поставщика базы данных.</returns>
      <param name="providerInvariantName">Имя поставщика базы данных для возвращения генератора SQL.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsAssembly">
      <summary>Возвращает или задает сборку, содержащую миграцию на основе кода.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsDirectory">
      <summary>Возвращает или задает вложенный каталог, в котором хранятся миграции на основе кода.Обратите внимание, что этому свойству необходимо присваивать относительный путь для подкаталога относительно корня проекта Visual Studio, оно не может содержать абсолютного пути.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.MigrationsNamespace">
      <summary>Возвращает или задает пространство имен, используемое для миграции на основе кода.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.SetHistoryContextFactory(System.String,System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})">
      <summary>Добавляет новую фабрику для создания экземпляров <see cref="T:System.Data.Entity.Migrations.History.HistoryContext" />, предназначенных для использования указанным поставщиком базы данных.</summary>
      <param name="providerInvariantName">Имя поставщика базы данных, для которого необходимо задать генератор SQL.</param>
      <param name="factory">Фабрика для создания экземпляров <see cref="T:System.Data.Entity.Migrations.History.HistoryContext" /> для указанных объектов <see cref="T:System.Data.Common.DbConnection" /> и <see cref="T:System.String" />, представляющих схему по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.SetSqlGenerator(System.String,System.Data.Entity.Migrations.Sql.MigrationSqlGenerator)">
      <summary>Добавляет новый генератор SQL, который используется для данного поставщика базы данных.</summary>
      <param name="providerInvariantName">Имя поставщика базы данных, для которого необходимо задать генератор SQL.</param>
      <param name="migrationSqlGenerator">Генератор SQL для использования.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrationsConfiguration.TargetDatabase">
      <summary>Возвращает или задает значение для переопределения соединения перенесенной базы данных.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrationsConfiguration`1">
      <summary>Конфигурация, связанная с использованием миграции для данной модели.</summary>
      <typeparam name="TContext">Контекст, представляющий модель, к которой применяется данная конфигурация.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.#ctor">
      <summary>Инициализирует новый экземпляр класса DbMigrationsConfiguration.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущей конфигурации.</summary>
      <returns>Значение true, если заданный объект равен текущей конфигурации; в противном случае — значение false.</returns>
      <param name="obj">Объект для сравнения с текущей конфигурацией.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.GetHashCode">
      <summary>Возвращает хэш-функцию для этого экземпляра.</summary>
      <returns>Хэш-функция для этого экземпляра.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.GetType">
      <summary>Возвращает тип текущего экземпляра в среде выполнения.</summary>
      <returns>Тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.MemberwiseClone">
      <summary>Создает неполную копию текущего объекта.</summary>
      <returns>Неполная копия текущего объекта.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.Seed(`0)">
      <summary>Запускается после обновления до последней миграции для обеспечения возможности обновления начального значения данных.</summary>
      <param name="context">Контекст, используемый для обновления начального значения данных.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrationsConfiguration`1.ToString">
      <summary>Возвращает строковое представление данной конфигурации.</summary>
      <returns>Строковое представление данной конфигурации.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbMigrator">
      <summary>DbMigrator служит для применения существующих миграций к базе данных.DbMigrator может использоваться для повышения и понижения до любой указанной миграции.Для формирования шаблонов миграции на основе изменений используемой модели следует использовать <see cref="T:System.Data.Entity.Migrations.Design.MigrationScaffolder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.#ctor(System.Data.Entity.Migrations.DbMigrationsConfiguration)">
      <summary>Инициализирует новый экземпляр класса DbMigrator.</summary>
      <param name="configuration">Конфигурация, которая будет использована для процесса миграции.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.DbMigrator.Configuration">
      <summary>Возвращает конфигурацию, которая будет использована для процесса миграции.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetDatabaseMigrations">
      <summary>Возвращает список всех миграций, примененных к целевой базе данных.</summary>
      <returns>Список миграций.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetLocalMigrations">
      <summary>Возвращает все миграции, заданные в настроенной сборке миграций.</summary>
      <returns>Список миграций.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.GetPendingMigrations">
      <summary>Возвращает список всех миграций, определенных в сборке, но не примененных к целевой базе данных.</summary>
      <returns>Список миграций.</returns>
    </member>
    <member name="F:System.Data.Entity.Migrations.DbMigrator.InitialDatabase">
      <summary>Идентификатор миграции, представляющий состояние базы данных до применения каких-либо миграций.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbMigrator.Update(System.String)">
      <summary>Обновляет целевую базу данных до данного переноса.</summary>
      <param name="targetMigration">Перенос для повышения или понижения уровня.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.DbSetMigrationsExtensions">
      <summary>Набор методов расширения для <see cref="T:System.Data.Entity.IDbSet`1" /></summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbSetMigrationsExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Object}},``0[])">
      <summary>Добавляет или обновляет сущности с помощью пользовательского выражения идентификации при вызове метода SaveChanges.Эквивалент операции «upsert» из терминологии баз данных.Этот метод может оказаться полезным при заполнении данных с помощью переноса.</summary>
      <param name="set">Набор, к которому принадлежат сущности.</param>
      <param name="identifierExpression">Выражение, указывающее свойства, которые следует использовать при определении необходимости выполнения операции добавления или обновления.</param>
      <param name="entities">Добавляемые и обновляемые сущности.</param>
      <typeparam name="TEntity">Тип сущностей, подлежащих добавлению или обновлению.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.DbSetMigrationsExtensions.AddOrUpdate``1(System.Data.Entity.IDbSet{``0},``0[])">
      <summary>Добавляет или обновляет сущности с помощью ключей при вызове метода SaveChanges.Эквивалент операции «upsert» из терминологии баз данных.Этот метод может оказаться полезным при заполнении данных с помощью переноса.</summary>
      <param name="set">Набор, к которому принадлежат сущности.</param>
      <param name="entities">Добавляемые и обновляемые сущности.</param>
      <typeparam name="TEntity">Тип сущностей, подлежащих добавлению или обновлению.</typeparam>
    </member>
    <member name="T:System.Data.Entity.Migrations.Builders.ColumnBuilder">
      <summary>Вспомогательный класс, который используется для настройки столбца.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Migrations.Builders.ColumnBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Binary(System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Byte[],System.String,System.Boolean,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Создает новое определение столбца для хранения данных двоичного типа.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <returns>Вновь созданное определение столбца.</returns>
      <param name="nullable">Значение, указывающее, допускает ли столбец значения NULL.</param>
      <param name="maxLength">Максимально допустимая длина данных массива.</param>
      <param name="fixedLength">Значение, указывающее, должны ли все данные быть дополнены до максимальной длины.</param>
      <param name="defaultValue">Константное значение, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="timestamp">Значение, указывающее, должен ли этот столбец быть настроен в качестве отметки времени.</param>
      <param name="name">Имя столбца.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого столбца.</param>
      <param name="annotations">Пользовательские заметки, обычно используемые в модели Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Boolean(System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Создает новое определение столбца для хранения данных типа Boolean.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <returns>Вновь созданное определение столбца.</returns>
      <param name="nullable">Значение, указывающее, допускает ли столбец значения NULL.</param>
      <param name="defaultValue">Константное значение, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="name">Имя столбца.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого столбца.</param>
      <param name="annotations">Пользовательские заметки, обычно используемые в модели Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Byte(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Byte},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Создает новое определение столбца для хранения данных типа Byte.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <returns>Вновь созданное определение столбца.</returns>
      <param name="nullable">Значение, указывающее, допускает ли столбец значения NULL.</param>
      <param name="identity">Значение, указывающее, будет ли база данных формировать значения для этого столбца во время вставки.</param>
      <param name="defaultValue">Константное значение, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="name">Имя столбца.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого столбца.</param>
      <param name="annotations">Пользовательские заметки, обычно используемые в модели Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.DateTime(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.DateTime},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Создает новое определение столбца для хранения данных типа DateTime.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <returns>Вновь созданное определение столбца.</returns>
      <param name="nullable">Значение, указывающее, допускает ли столбец значения NULL.</param>
      <param name="precision">Точность столбца.</param>
      <param name="defaultValue">Константное значение, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="name">Имя столбца.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого столбца.</param>
      <param name="annotations">Пользовательские заметки, обычно используемые в модели Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.DateTimeOffset(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.DateTimeOffset},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Создает новое определение столбца для хранения данных типа DateTimeOffset.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <returns>Вновь созданное определение столбца.</returns>
      <param name="nullable">Значение, указывающее, допускает ли столбец значения NULL.</param>
      <param name="precision">Точность столбца.</param>
      <param name="defaultValue">Константное значение, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="name">Имя столбца.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого столбца.</param>
      <param name="annotations">Пользовательские заметки, обычно используемые в модели Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Decimal(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Decimal},System.String,System.String,System.String,System.Boolean,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Создает новое определение столбца для хранения данных Decimal.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <returns>Вновь созданное определение столбца.</returns>
      <param name="nullable">Значение, указывающее, допускает ли столбец значения NULL.</param>
      <param name="precision">Числовая точность столбца.</param>
      <param name="scale">Числовой масштаб столбца.</param>
      <param name="defaultValue">Константное значение, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="name">Имя столбца.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого столбца.</param>
      <param name="identity">Значение, указывающее, будет ли база данных формировать значения для этого столбца во время вставки.</param>
      <param name="annotations">Пользовательские заметки, обычно используемые в модели Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Double(System.Nullable{System.Boolean},System.Nullable{System.Double},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Создает новое определение столбца для хранения данных типа Double.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <returns>Вновь созданное определение столбца.</returns>
      <param name="nullable">Значение, указывающее, допускает ли столбец значения NULL.</param>
      <param name="defaultValue">Константное значение, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="name">Имя столбца.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого столбца.</param>
      <param name="annotations">Пользовательские заметки, обычно используемые в модели Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Equals(System.Object)">
      <summary>Указывает, равен ли заданный объект текущему объекту.</summary>
      <returns>Значение true, если заданный объект равен текущему объекту. В противном случае — значение false.</returns>
      <param name="obj">Объект, который требуется сравнить с текущим объектом.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Geography(System.Nullable{System.Boolean},System.Data.Entity.Spatial.DbGeography,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Создает новое определение столбца для хранения географических данных.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <returns>Вновь созданное определение столбца.</returns>
      <param name="nullable">Значение, указывающее, допускает ли столбец значения NULL.</param>
      <param name="defaultValue">Константное значение, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="name">Имя столбца.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого столбца.</param>
      <param name="annotations">Пользовательские заметки, обычно используемые в модели Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Geometry(System.Nullable{System.Boolean},System.Data.Entity.Spatial.DbGeometry,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Создает новое определение столбца для хранения геометрических данных.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <returns>Вновь созданное определение столбца.</returns>
      <param name="nullable">Значение, указывающее, допускает ли столбец значения NULL.</param>
      <param name="defaultValue">Константное значение, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="name">Имя столбца.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого столбца.</param>
      <param name="annotations">Пользовательские заметки, обычно используемые в модели Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.GetHashCode">
      <summary>Возвращает хэш-код данного экземпляра.</summary>
      <returns>Хэш-код данного экземпляра.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.GetType">
      <summary>Возвращает объект <see cref="T:System.Type" /> для текущего экземпляра.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Guid(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Guid},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Создает новое определение столбца для хранения данных идентификатора GUID.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <returns>Вновь созданное определение столбца.</returns>
      <param name="nullable">Значение, указывающее, допускает ли столбец значения NULL.</param>
      <param name="identity">Значение, указывающее, будет ли база данных формировать значения для этого столбца во время вставки.</param>
      <param name="defaultValue">Константное значение, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="name">Имя столбца.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого столбца.</param>
      <param name="annotations">Пользовательские заметки, обычно используемые в модели Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Int(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int32},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Создает новое определение столбца для хранения данных типа Integer.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <returns>Вновь созданное определение столбца.</returns>
      <param name="nullable">Значение, указывающее, допускает ли столбец значения NULL.</param>
      <param name="identity">Значение, указывающее, будет ли база данных формировать значения для этого столбца во время вставки.</param>
      <param name="defaultValue">Константное значение, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="name">Имя столбца.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого столбца.</param>
      <param name="annotations">Пользовательские заметки, обычно используемые в модели Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Long(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int64},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Создает новое определение столбца для хранения данных типа Long.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <returns>Вновь созданное определение столбца.</returns>
      <param name="nullable">Значение, указывающее, допускает ли столбец значения NULL.</param>
      <param name="identity">Значение, указывающее, будет ли база данных формировать значения для этого столбца во время вставки.</param>
      <param name="defaultValue">Константное значение, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="name">Имя столбца.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого столбца.</param>
      <param name="annotations">Пользовательские заметки, обычно используемые в модели Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.MemberwiseClone">
      <summary>Создает неполную копию текущего объекта <see cref="T:System.Object" />.</summary>
      <returns>Неполная копия объекта <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Short(System.Nullable{System.Boolean},System.Boolean,System.Nullable{System.Int16},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Создает новое определение столбца для хранения данных типа Short.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <returns>Вновь созданное определение столбца.</returns>
      <param name="nullable">Значение, указывающее, допускает ли столбец значения NULL.</param>
      <param name="identity">Значение, указывающее, будет ли база данных формировать значения для этого столбца во время вставки.</param>
      <param name="defaultValue">Константное значение, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="name">Имя столбца.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого столбца.</param>
      <param name="annotations">Пользовательские заметки, обычно используемые в модели Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Single(System.Nullable{System.Boolean},System.Nullable{System.Single},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Создает новое определение столбца для хранения данных Single.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <returns>Вновь созданное определение столбца.</returns>
      <param name="nullable">Значение, указывающее, допускает ли столбец значения NULL.</param>
      <param name="defaultValue">Константное значение, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="name">Имя столбца.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого столбца.</param>
      <param name="annotations">Пользовательские заметки, обычно используемые в модели Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.String(System.Nullable{System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Создает новое определение столбца для хранения данных String.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <returns>Вновь созданное определение столбца.</returns>
      <param name="nullable">Значение, указывающее, допускает ли столбец значения NULL.</param>
      <param name="maxLength">Максимально допустимая длина строковых данных.</param>
      <param name="fixedLength">Значение, указывающее, должны ли все данные быть дополнены до максимальной длины.</param>
      <param name="unicode">Значение, указывающее, поддерживает ли столбец содержимое в Юникоде.</param>
      <param name="defaultValue">Константное значение, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="name">Имя столбца.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого столбца.</param>
      <param name="annotations">Пользовательские заметки, обычно используемые в модели Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.Time(System.Nullable{System.Boolean},System.Nullable{System.Byte},System.Nullable{System.TimeSpan},System.String,System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues})">
      <summary>Создает новое определение столбца для хранения данных типа Time.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <returns>Вновь созданное определение столбца.</returns>
      <param name="nullable">Значение, указывающее, допускает ли столбец значения NULL.</param>
      <param name="precision">Точность столбца.</param>
      <param name="defaultValue">Константное значение, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого столбца.</param>
      <param name="name">Имя столбца.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого столбца.</param>
      <param name="annotations">Пользовательские заметки, обычно используемые в модели Code First.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ColumnBuilder.ToString">
      <summary>Возвращает строку, представляющую текущий объект.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Builders.ParameterBuilder">
      <summary>Представляет класс, который используется для настройки параметра.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Migrations.Builders.ParameterBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Binary(System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Byte[],System.String,System.String,System.String,System.Boolean)">
      <summary>Создает новое определение параметра для передачи данных типа Binary.</summary>
      <returns>Вновь созданное определение параметра.</returns>
      <param name="maxLength">Максимально допустимая длина данных массива.</param>
      <param name="fixedLength">Значение, указывающее, должны ли все данные быть дополнены до максимальной длины.</param>
      <param name="defaultValue">Константное значение, используемое в качестве значения по умолчанию для этого параметра.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого параметра.</param>
      <param name="name">Имя параметра.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого параметра.</param>
      <param name="outParameter">Значение, указывающее, является ли этот параметр выходным.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Boolean(System.Nullable{System.Boolean},System.String,System.String,System.String,System.Boolean)">
      <summary>Создает новое определение параметра для передачи данных типа Boolean.</summary>
      <returns>Вновь созданное определение параметра.</returns>
      <param name="defaultValue">Постоянное значение, используемое в качестве значения по умолчанию для этого параметра.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого параметра.</param>
      <param name="name">Имя параметра.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого параметра.</param>
      <param name="outParameter">Значение, указывающее, является ли этот параметр выходным.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Byte(System.Nullable{System.Byte},System.String,System.String,System.String,System.Boolean)">
      <summary>Создает новое определение параметра для передачи данных типа Byte.</summary>
      <returns>Вновь созданное определение параметра.</returns>
      <param name="defaultValue">Постоянное значение, используемое в качестве значения по умолчанию для этого параметра.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого параметра.</param>
      <param name="name">Имя параметра.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого параметра.</param>
      <param name="outParameter">Значение, указывающее, является ли этот параметр выходным.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.DateTime(System.Nullable{System.Byte},System.Nullable{System.DateTime},System.String,System.String,System.String,System.Boolean)">
      <summary>Создает новое определение параметра для передачи данных типа DateTime.</summary>
      <returns>Вновь созданное определение параметра.</returns>
      <param name="precision">Точность параметра.</param>
      <param name="defaultValue">Постоянное значение, используемое в качестве значения по умолчанию для этого параметра.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого параметра.</param>
      <param name="name">Имя параметра.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого параметра.</param>
      <param name="outParameter">Значение, указывающее, является ли этот параметр выходным.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.DateTimeOffset(System.Nullable{System.Byte},System.Nullable{System.DateTimeOffset},System.String,System.String,System.String,System.Boolean)">
      <summary>Создает новое определение параметра для передачи данных типа DateTimeOffset.</summary>
      <returns>Вновь созданное определение параметра.</returns>
      <param name="precision">Точность параметра.</param>
      <param name="defaultValue">Постоянное значение, используемое в качестве значения по умолчанию для этого параметра.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого параметра.</param>
      <param name="name">Имя параметра.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого параметра.</param>
      <param name="outParameter">Значение, указывающее, является ли этот параметр выходным.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Decimal(System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Decimal},System.String,System.String,System.String,System.Boolean)">
      <summary>Создает новое определение параметра для передачи данных типа Decimal.</summary>
      <returns>Вновь созданное определение параметра.</returns>
      <param name="precision">Числовая точность параметра.</param>
      <param name="scale">Числовой масштаб параметра.</param>
      <param name="defaultValue">Постоянное значение, используемое в качестве значения по умолчанию для этого параметра.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого параметра.</param>
      <param name="name">Имя параметра.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого параметра.</param>
      <param name="outParameter">Значение, указывающее, является ли этот параметр выходным.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Double(System.Nullable{System.Double},System.String,System.String,System.String,System.Boolean)">
      <summary>Создает новое определение параметра для передачи данных типа Double.</summary>
      <returns>Вновь созданное определение параметра.</returns>
      <param name="defaultValue">Постоянное значение, используемое в качестве значения по умолчанию для этого параметра.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого параметра.</param>
      <param name="name">Имя параметра.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого параметра.</param>
      <param name="outParameter">Значение, указывающее, является ли этот параметр выходным.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Equals(System.Object)">
      <summary>Указывает, равен ли данный экземпляр конкретному объекту.</summary>
      <returns>Значение true, если экземпляр равен указанному объекту; в противном случае — значение false.</returns>
      <param name="obj">Сравниваемый объект.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Geography(System.Data.Entity.Spatial.DbGeography,System.String,System.String,System.String,System.Boolean)">
      <summary>Создает новое определение параметра для передачи географических данных.</summary>
      <returns>Вновь созданное определение параметра.</returns>
      <param name="defaultValue">Постоянное значение, используемое в качестве значения по умолчанию для этого параметра.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого параметра.</param>
      <param name="name">Имя параметра.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого параметра.</param>
      <param name="outParameter">Значение, указывающее, является ли этот параметр выходным.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Geometry(System.Data.Entity.Spatial.DbGeometry,System.String,System.String,System.String,System.Boolean)">
      <summary>Создает новое определение параметра для передачи геометрических данных.</summary>
      <returns>Вновь созданное определение параметра.</returns>
      <param name="defaultValue">Постоянное значение, используемое в качестве значения по умолчанию для этого параметра.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого параметра.</param>
      <param name="name">Имя параметра.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого параметра.</param>
      <param name="outParameter">Значение, указывающее, является ли этот параметр выходным.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.GetHashCode">
      <summary>Получает хэш-код, связанный с этим экземпляром.</summary>
      <returns>Хэш-код, связанный с этим экземпляром.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.GetType">
      <summary>Возвращает объект <see cref="T:System.Type" /> для текущего экземпляра.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Guid(System.Nullable{System.Guid},System.String,System.String,System.String,System.Boolean)">
      <summary>Создает новое определение параметра для передачи данных GUID.</summary>
      <returns>Вновь созданное определение параметра.</returns>
      <param name="defaultValue">Постоянное значение, используемое в качестве значения по умолчанию для этого параметра.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого параметра.</param>
      <param name="name">Имя параметра.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого параметра.</param>
      <param name="outParameter">Значение, указывающее, является ли этот параметр выходным.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Int(System.Nullable{System.Int32},System.String,System.String,System.String,System.Boolean)">
      <summary>Создает новое определение параметра для передачи данных типа Integer.</summary>
      <returns>Вновь созданное определение параметра.</returns>
      <param name="defaultValue">Постоянное значение, используемое в качестве значения по умолчанию для этого параметра.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого параметра.</param>
      <param name="name">Имя параметра.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого параметра.</param>
      <param name="outParameter">Значение, указывающее, является ли этот параметр выходным.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Long(System.Nullable{System.Int64},System.String,System.String,System.String,System.Boolean)">
      <summary>Создает новое определение параметра для передачи данных типа Long.</summary>
      <returns>Вновь созданное определение параметра.</returns>
      <param name="defaultValue">Постоянное значение, используемое в качестве значения по умолчанию для этого параметра.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого параметра.</param>
      <param name="name">Имя параметра.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого параметра.</param>
      <param name="outParameter">Значение, указывающее, является ли этот параметр выходным.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.MemberwiseClone">
      <summary>Создает неполную копию текущего объекта <see cref="T:System.Object" />.</summary>
      <returns>Неполная копия объекта <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Short(System.Nullable{System.Int16},System.String,System.String,System.String,System.Boolean)">
      <summary>Создает новое определение параметра для передачи данных типа Short.</summary>
      <returns>Вновь созданное определение параметра.</returns>
      <param name="defaultValue">Постоянное значение, используемое в качестве значения по умолчанию для этого параметра.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого параметра.</param>
      <param name="name">Имя параметра.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого параметра.</param>
      <param name="outParameter">Значение, указывающее, является ли этот параметр выходным.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Single(System.Nullable{System.Single},System.String,System.String,System.String,System.Boolean)">
      <summary>Создает новое определение параметра для передачи данных типа Single.</summary>
      <returns>Вновь созданное определение параметра.</returns>
      <param name="defaultValue">Постоянное значение, используемое в качестве значения по умолчанию для этого параметра.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого параметра.</param>
      <param name="name">Имя параметра.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого параметра.</param>
      <param name="outParameter">Значение, указывающее, является ли этот параметр выходным.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.String(System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Boolean},System.String,System.String,System.String,System.String,System.Boolean)">
      <summary>Создает новое определение параметра для передачи данных типа String.</summary>
      <returns>Вновь созданное определение параметра.</returns>
      <param name="maxLength">Максимально допустимая длина строковых данных.</param>
      <param name="fixedLength">Значение, указывающее, должны ли все данные быть дополнены до максимальной длины.</param>
      <param name="unicode">Значение, указывающее, поддерживает столбец содержимое в Юникоде или нет.</param>
      <param name="defaultValue">Постоянное значение, используемое в качестве значения по умолчанию для этого параметра.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого параметра.</param>
      <param name="name">Имя параметра.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого параметра.</param>
      <param name="outParameter">Значение, указывающее, является ли этот параметр выходным.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.Time(System.Nullable{System.Byte},System.Nullable{System.TimeSpan},System.String,System.String,System.String,System.Boolean)">
      <summary>Создает новое определение параметра для передачи данных типа Time.</summary>
      <returns>Вновь созданное определение параметра.</returns>
      <param name="precision">Точность параметра.</param>
      <param name="defaultValue">Постоянное значение, используемое в качестве значения по умолчанию для этого параметра.</param>
      <param name="defaultValueSql">Выражение SQL, используемое в качестве значения по умолчанию для этого параметра.</param>
      <param name="name">Имя параметра.</param>
      <param name="storeType">Зависящий от поставщика тип данных, используемый для этого параметра.</param>
      <param name="outParameter">Значение, указывающее, является ли этот параметр выходным.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.ParameterBuilder.ToString">
      <summary>Возвращает строковое представление этого экземпляра.</summary>
      <returns>Строковое представление этого экземпляра.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Builders.TableBuilder`1">
      <summary>Вспомогательный класс, который используется для дальнейшей настройки таблицы, созданной вызовом метода CreateTable для <see cref="T:System.Data.Entity.Migrations.DbMigration" />.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <typeparam name="TColumns">Тип, представляющий столбцы таблицы.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.#ctor(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.DbMigration)">
      <summary>Инициализирует новый экземпляр класса TableBuilder.</summary>
      <param name="createTableOperation">Операция создания таблицы для дальнейшей настройки.</param>
      <param name="migration">Миграция, в которой создается таблица.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту.</summary>
      <returns>Значение true, если заданный объект равен текущему объекту. В противном случае — значение false.</returns>
      <param name="obj">Объект, который требуется сравнить с текущим объектом.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.ForeignKey(System.String,System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.Boolean,System.String,System.Object)">
      <summary>Указывает ограничения внешнего ключа, которое будет создано в таблице.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <returns>Он сам, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="principalTable">Имя таблицы, для которой создается ограничение внешнего ключа.</param>
      <param name="dependentKeyExpression">Лямбда-выражение, представляющее свойства внешнего ключа.C#: t =&amp;gt; t.PropertyOne VB.Net: Function(t) t.PropertyOne Если внешний ключ состоит из нескольких свойств, укажите анонимный тип, включающий эти свойства.C#: t =&amp;gt; new { t.PropertyOne, t.PropertyTwo } VB.Net: Function(t) New With { t.PropertyOne, t.PropertyTwo }</param>
      <param name="cascadeDelete">Значение, указывающее, следует ли настроить каскадное удаление для ограничения внешнего ключа.</param>
      <param name="name">Имя ограничения внешнего ключа.Если имя не определено, вычисляется имя по умолчанию.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.GetHashCode">
      <summary>Возвращает хэш-код текущего объекта.</summary>
      <returns>Хэш-код для текущего объекта.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.GetType">
      <summary>Возвращает объект <see cref="T:System.Type" /> для текущего экземпляра.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.Index(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Boolean,System.Boolean,System.Object)">
      <summary>Указывает индекс, который будет создан для таблицы.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <returns>Он сам, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="indexExpression">Лямбда-выражение, представляющее свойство, которое нужно проиндексировать.C#: t =&amp;gt; t.PropertyOne VB.Net: Function(t) t.PropertyOne Если индексированию подлежат несколько свойств, укажите анонимный тип, включающий эти свойства.C#: t =&amp;gt; new { t.PropertyOne, t.PropertyTwo } VB.Net: Function(t) New With { t.PropertyOne, t.PropertyTwo }</param>
      <param name="name">Имя индекса.</param>
      <param name="unique">Значение, указывающее, является ли этот индекс уникальным.</param>
      <param name="clustered">Значение, указывающее, является ли этот индекс кластеризованным.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.MemberwiseClone">
      <summary>Создает неполную копию текущего объекта <see cref="T:System.Object" />.</summary>
      <returns>Неполная копия объекта <see cref="T:System.Object" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.PrimaryKey(System.Linq.Expressions.Expression{System.Func{`0,System.Object}},System.String,System.Boolean,System.Object)">
      <summary>Указывает первичный ключ для таблицы.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <returns>Он сам, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="keyExpression">Лямбда-выражение, представляющее свойство, которое должно использоваться в качестве первичного ключа.C#: t =&amp;gt; t.Id VB.Net: Function(t) t.Id Если первичный ключ состоит из нескольких свойств, укажите анонимный тип, включающий в себя эти свойства.C#: t =&amp;gt; new { t.Id1, t.Id2 } VB.Net: Function(t) New With { t.Id1, t.Id2 }</param>
      <param name="name">Имя первичного ключа.Если указывается значение NULL, будет сформировано имя по умолчанию.</param>
      <param name="clustered">Значение, указывающее, является ли этот индекс кластеризованным первичным ключом.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Builders.TableBuilder`1.ToString">
      <summary>Возвращает строковое представление текущего объекта.</summary>
      <returns>Строковое представление текущего объекта.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator">
      <summary>Формирует код на языке C# для миграции на основе кода.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Byte[])">
      <summary>Формирует код, задающий значение по умолчанию для столбца <see cref="T:byte[]" />.</summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String)">
      <summary>Формирует главный файл кода, доступный для просмотра и изменения пользователем.</summary>
      <returns>Сформированный код.</returns>
      <param name="operations">Операции, которые будут выполнены во время миграции.</param>
      <param name="namespace">Пространство имен, в котором будет формироваться этот код.</param>
      <param name="className">Имя класса, который будет сформирован.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.String},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код, задающий набор имен столбцов с помощью лямбда-выражения.</summary>
      <param name="columns">Столбцы, для которых будет сформирован код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation" />.</summary>
      <param name="addColumnOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" />.</summary>
      <param name="addForeignKeyOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" />.</summary>
      <param name="addPrimaryKeyOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" />.</summary>
      <param name="alterColumnOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.AlterProcedureOperation" />.</summary>
      <param name="alterProcedureOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для <see cref="T:System.Data.Entity.Migrations.Model.AlterTableOperation" />.</summary>
      <param name="alterTableOperation">Операция, для которой предполагается формирование кода.</param>
      <param name="writer">Модуль записи, в который должен быть записан сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>Формирует код для задания определения модели <see cref="T:System.Data.Entity.Migrations.Model.ColumnModel" />.</summary>
      <param name="column">Определение столбца, для которого будет сформирован код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
      <param name="emitName">Значение, указывающее, следует ли включать в определение имя столбца.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" />.</summary>
      <param name="createIndexOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.CreateProcedureOperation" />.</summary>
      <param name="createProcedureOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.</summary>
      <param name="createTableOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" />.</summary>
      <param name="dropColumnOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" />.</summary>
      <param name="dropForeignKeyOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" />.</summary>
      <param name="dropIndexOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation" />.</summary>
      <param name="dropPrimaryKeyOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.DropProcedureOperation" />.</summary>
      <param name="dropProcedureOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.DropTableOperation" />.</summary>
      <param name="dropTableOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.MoveProcedureOperation" />.</summary>
      <param name="moveProcedureOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" />.</summary>
      <param name="moveTableOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ParameterModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>Формирует код для задания определения модели <see cref="T:System.Data.Entity.Migrations.Model.ParameterModel" />.</summary>
      <param name="parameterModel">Определение параметра, для которого будет сформирован код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
      <param name="emitName">Значение, указывающее, следует ли включать в определение имя столбца.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" />.</summary>
      <param name="renameColumnOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.RenameIndexOperation" />.</summary>
      <param name="renameIndexOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.RenameProcedureOperation" />.</summary>
      <param name="renameProcedureOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" />.</summary>
      <param name="renameTableOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.SqlOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.SqlOperation" />.</summary>
      <param name="sqlOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Spatial.DbGeography)">
      <summary>Формирует код, задающий значение по умолчанию для столбца <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Формирует код, задающий значение по умолчанию для столбца <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.DateTime)">
      <summary>Формирует код, задающий значение по умолчанию для столбца <see cref="T:System.DateTime" />.</summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.DateTimeOffset)">
      <summary>Формирует код, задающий значение по умолчанию для столбца <see cref="T:System.DateTimeOffset" />.</summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Decimal)">
      <summary>Формирует код, задающий значение по умолчанию для столбца <see cref="T:System.Decimal" />.</summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Guid)">
      <summary>Формирует код, задающий значение по умолчанию для столбца <see cref="T:System.Guid" />.</summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Int64)">
      <summary>Формирует код, задающий значение по умолчанию для столбца <see cref="T:System.Int64" />.</summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Object)">
      <summary>Формирует код, задающий значение по умолчанию для столбца неизвестного типа данных.</summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.Single)">
      <summary>Формирует код, задающий значение по умолчанию для столбца <see cref="T:System.Single" />.</summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String)">
      <summary>Формирует код, задающий значение по умолчанию для столбца <see cref="T:System.String" />.</summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>Формирует файл фонового кода, содержащий <see cref="T:System.Data.Entity.Migrations.Design.ScaffoldedMigration" />.</summary>
      <returns>Сформированный код.</returns>
      <param name="migrationId">Уникальный идентификатор миграции.</param>
      <param name="operations">Операция, для которой будет формироваться код.</param>
      <param name="sourceModel">Исходная модель для сохранения в метаданных миграции.</param>
      <param name="targetModel">Целевая модель для сохранения в метаданных миграции.</param>
      <param name="namespace">Пространство имен, в котором будет формироваться этот код.</param>
      <param name="className">Имя класса, который будет сформирован.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.String,System.String,System.String,System.String,System.String)">
      <summary>Формирует файл фонового кода, содержащий метаданные миграции.</summary>
      <returns>Сформированный код.</returns>
      <param name="migrationId">Уникальный идентификатор миграции.</param>
      <param name="sourceModel">Исходная модель для сохранения в метаданных миграции.</param>
      <param name="targetModel">Целевая модель для сохранения в метаданных миграции.</param>
      <param name="namespace">Пространство имен, в котором будет формироваться этот код.</param>
      <param name="className">Имя класса, который будет сформирован.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Generate(System.TimeSpan)">
      <summary>Формирует код, задающий значение по умолчанию для столбца <see cref="T:System.TimeSpan" />.</summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateAnnotation(System.String,System.Object,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для определенного значения заметки, которое может быть равно null.При стандартном поведении используется объект <see cref="T:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator" />, если таковой зарегистрирован, в противном случае применяется метод ToString для значения заметки.</summary>
      <param name="name">Имя заметки, для которой требуется код.</param>
      <param name="annotation">Формируемое значение заметки.</param>
      <param name="writer">Модуль записи, в который должен быть записан сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateAnnotations(System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для пересоздания заданного словаря заметок, который будет использоваться при их передаче в виде параметра при вызове <see cref="T:System.Data.Entity.Migrations.DbMigration" />.</summary>
      <param name="annotations">Формируемые заметки.</param>
      <param name="writer">Модуль записи, в который должен быть записан сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateAnnotations(System.Collections.Generic.IDictionary{System.String,System.Object},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для пересоздания заданного словаря заметок, который будет использоваться при их передаче в виде параметра при вызове <see cref="T:System.Data.Entity.Migrations.DbMigration" />.</summary>
      <param name="annotations">Формируемые заметки.</param>
      <param name="writer">Модуль записи, в который должен быть записан сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" /> в рамках операции <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.</summary>
      <param name="addForeignKeyOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" /> в рамках операции <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.</summary>
      <param name="addPrimaryKeyOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" /> в рамках операции <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.</summary>
      <param name="createIndexOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.Quote(System.String)">
      <summary>Заключает идентификатор в кавычки с применением соответствующего экранирования, чтобы его можно было сохранить в строке.</summary>
      <returns>Заключенный в кавычки идентификатор.</returns>
      <param name="identifier">Идентификатор для заключения в кавычки.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.ScrubName(System.String)">
      <summary>Удаляет все недопустимые символы из имени артефакта базы данных.</summary>
      <returns>Очищенное имя.</returns>
      <param name="name">Имя для очистки.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.TranslateColumnType(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind)">
      <summary>Возвращает имя типа для столбца заданного типа данных.</summary>
      <returns>Имя типа для использования в сформированной миграции.</returns>
      <param name="primitiveTypeKind">Тип данных для перевода.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteClassAttributes(System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>Генерирует атрибуты класса.</summary>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
      <param name="designer">Значение, указывающее, будет ли код формироваться в файле с выделенным кодом.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteClassEnd(System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует завершающий код для класса, начатого с WriteClassStart.</summary>
      <param name="namespace">Пространство имен, в котором будет формироваться этот код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteClassStart(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Формирует пространство имен с помощью определения класса и инструкций.</summary>
      <param name="namespace">Пространство имен, в котором будет формироваться этот код.</param>
      <param name="className">Имя класса, который будет сформирован.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
      <param name="base">Базовый класс для формируемого.</param>
      <param name="designer">Значение, указывающее, будет ли код формироваться в файле с выделенным кодом.</param>
      <param name="namespaces">Пространства имен, для которых будут добавлены директивы using.Если имеет значение NULL, то будут использоваться пространства имен, возвращенные из GetDefaultNamespaces.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.CSharpMigrationCodeGenerator.WriteProperty(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует свойство для получения исходной или целевой модели в файле фонового кода.</summary>
      <param name="name">Имя свойства.</param>
      <param name="value">Возвращаемое значение.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.MigrationCodeGenerator">
      <summary>Базовый класс для поставщиков, формирующих код для миграции на основе кода.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Migrations.Design.MigrationCodeGenerator" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.AnnotationGenerators">
      <summary>Возвращает используемые экземпляры <see cref="T:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>Формирует код, который будет добавлен к пользовательскому проекту.</summary>
      <returns>Сформированный код.</returns>
      <param name="migrationId">Уникальный идентификатор миграции.</param>
      <param name="operations">Операции, которые будут выполнены во время миграции.</param>
      <param name="sourceModel">Исходная модель для сохранения в метаданных миграции.</param>
      <param name="targetModel">Целевая модель для сохранения в метаданных миграции.</param>
      <param name="namespace">Пространство имен, в котором будет формироваться этот код.</param>
      <param name="className">Имя класса, который будет сформирован.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.GetDefaultNamespaces(System.Boolean)">
      <summary>Возвращает пространства имен по умолчанию, которые будут выводиться через директивы using или Imports для любого формируемого кода.</summary>
      <returns>Упорядоченный список пространств имен.</returns>
      <param name="designer">Значение, указывающее, будет ли код формироваться в файле с выделенным кодом.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationCodeGenerator.GetNamespaces(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation})">
      <summary>Возвращает пространства имен, которые будут выводиться через директивы using или Imports для обработки кода, сформированного данными операциями.</summary>
      <returns>Упорядоченный список пространств имен.</returns>
      <param name="operations">Операции, для которых предполагается формирование кода.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.MigrationScaffolder">
      <summary>Формирует шаблоны миграций на основе кода для применения ожидающих изменений модели к базе данных.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.#ctor(System.Data.Entity.Migrations.DbMigrationsConfiguration)">
      <summary>Инициализирует новый экземпляр класса MigrationScaffolder.</summary>
      <param name="migrationsConfiguration">Конфигурация, которая будет использована для формирования шаблонов.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.MigrationScaffolder.Namespace">
      <summary>Возвращает или задает пространство имен, используемое в сформированном коде миграции.По умолчанию совпадает с MigrationsNamespace для объекта конфигурации миграции, переданного в конструктор.Для проектов VB.NET его необходимо изменить с учетом корневого пространства имен проекта.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.Scaffold(System.String)">
      <summary>Формирует шаблоны миграций на основе кода для применения ожидающих изменений модели к базе данных.</summary>
      <returns>Миграция с формированием шаблонов.</returns>
      <param name="migrationName">Имя, которое будет использовано для миграции с формированием шаблонов.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.Scaffold(System.String,System.Boolean)">
      <summary>Формирует шаблоны миграций на основе кода для применения ожидающих изменений модели к базе данных.</summary>
      <returns>Миграция с формированием шаблонов.</returns>
      <param name="migrationName">Имя, которое будет использовано для миграции с формированием шаблонов.</param>
      <param name="ignoreChanges">Включать ли изменения модели.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.MigrationScaffolder.ScaffoldInitialCreate">
      <summary>Формирует шаблоны первоначальной миграции на основе кода, соответствующей ранее запущенному инициализатору базы данных.</summary>
      <returns>Миграция с формированием шаблонов.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.ScaffoldedMigration">
      <summary>Представляет миграцию на основе кода, для которой сформированы шаблоны и которая готова для записи в файл.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ScaffoldedMigration.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Migrations.Design.ScaffoldedMigration" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.DesignerCode">
      <summary>Возвращает или задает код миграции, для которой сформированы шаблоны и которая должна быть сохранена в файле фонового кода.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.Directory">
      <summary>Возвращает или задает подкаталог в пользовательском проекте, где должна быть сохранена данная миграция.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.IsRescaffold">
      <summary>Возвращает или задает, был ли выполнен перенос с формированием шаблонов.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.Language">
      <summary>Возвращает или задает язык программирования, используемый для данной миграции.Как правило, используется для выбора расширения файла сформированного кода.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.MigrationId">
      <summary>Возвращает или задает уникальный идентификатор данной миграции.Как правило, используется для выбора имени файла сформированного кода.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.Resources">
      <summary>Возвращает словарь строк ресурсов для добавления в файл ресурсов миграции.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ScaffoldedMigration.UserCode">
      <summary>Возвращает или задает сформированные шаблоны кода миграции, которые пользователь может редактировать.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.ToolingFacade">
      <summary>Вспомогательный класс, используемый во время разработки для выполнения команд, связанных с миграцией, которым необходимо взаимодействие с приложением, которое редактируется в среде Visual Studio.Поскольку приложение редактируется, загрузка сборок должна производиться в отдельном AppDomain, чтобы гарантировать загрузку последних версий.Кроме того, копируется файл конфигурации App/Web.config запускаемого проекта, чтобы обеспечить применение актуальной конфигурации.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.Data.Entity.Infrastructure.DbConnectionInfo)">
      <summary>Инициализирует новый экземпляр класса ToolingFacade.</summary>
      <param name="migrationsAssemblyName">Имя сборки, которая содержит используемую конфигурацию миграции.</param>
      <param name="contextAssemblyName">Имя сборки, которая содержит используемый DbContext.</param>
      <param name="configurationTypeName">Используется полное имя конфигурации миграции с указанием пространства имен.</param>
      <param name="workingDirectory">Рабочая папка каталога, содержащая скомпилированные сборки.</param>
      <param name="configurationFilePath">Путь файла конфигурации запускаемого проекта.</param>
      <param name="dataDirectory">Путь каталога данных приложения для запускаемого проекта.Как правило, это каталог App_Data для веб-приложений или рабочая папка каталога для исполняемых файлов.</param>
      <param name="connectionStringInfo">Соединение с перенесенной базой данных.Если указано значение NULL, то будет использоваться соединение по умолчанию для контекста.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Dispose">
      <summary>Освобождает ресурсы, используемые текущим экземпляром класса <see cref="T:System.Data.Entity.Migrations.Design.ToolingFacade" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Dispose(System.Boolean)">
      <summary>Освобождает все ресурсы, используемые фасадом.</summary>
      <param name="disposing">Значение true задает освобождение как управляемых, так и неуправляемых ресурсов; значение false задает освобождение только неуправляемых ресурсов.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Finalize">
      <summary>Освобождает все неуправляемые ресурсы, используемые фасадом.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetContextType(System.String)">
      <summary>Возвращает полное имя типа, производного от <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>Найденный тип контекста.</returns>
      <param name="contextTypeName">Имя типа контекста.Если он равен null, то возвращается единственный тип контекста, находящийся в сборке.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetContextTypes">
      <summary>Возвращает полное имя для всех типов, производных от <see cref="T:System.Data.Entity.DbContext" />.</summary>
      <returns>Все найденные типы контекста.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetDatabaseMigrations">
      <summary>Возвращает список всех миграций, примененных к базе данных.</summary>
      <returns>Идентификаторы примененных миграций.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.GetPendingMigrations">
      <summary>Возвращает список всех миграций, не примененных к базе данных.</summary>
      <returns>Идентификаторы ожидающих миграций.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogInfoDelegate">
      <summary>Возвращает или задает действие, выполняемое для регистрации информации.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogVerboseDelegate">
      <summary>Возвращает или задает действие, выполняемое для регистрации подробной информации.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Design.ToolingFacade.LogWarningDelegate">
      <summary>Возвращает или задает действие, выполняемое для регистрации предупреждений.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Scaffold(System.String,System.String,System.String,System.Boolean)">
      <summary>Формирует шаблоны миграций на основе кода для применения ожидающих изменений модели.</summary>
      <returns>Миграция с формированием шаблонов.</returns>
      <param name="migrationName">Имя сформированной миграции.</param>
      <param name="language">Язык программирования для формируемой миграции.</param>
      <param name="rootNamespace">Корневое пространство имен для проекта, куда будет добавлена миграция.</param>
      <param name="ignoreChanges">Включать ли изменения модели.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.ScaffoldInitialCreate(System.String,System.String)">
      <summary>Формирует шаблоны первоначальной миграции на основе кода, соответствующей ранее запущенному инициализатору базы данных.</summary>
      <returns>Миграция с формированием шаблонов.</returns>
      <param name="language">Язык программирования для формируемой миграции.</param>
      <param name="rootNamespace">Корневое пространство имен для проекта, куда будет добавлена миграция.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.ScriptUpdate(System.String,System.String,System.Boolean)">
      <summary>Формирует скрипт SQL для миграции между двумя миграциями.</summary>
      <returns>Сформированный скрипт SQL.</returns>
      <param name="sourceMigration">Миграция, с которой нужно обновиться.Если указано значение NULL, то скрипт обновляет текущую создаваемую базу данных.</param>
      <param name="targetMigration">Миграция, на которую нужно обновиться.Если указано значение NULL, то скрипт обновляет последнюю созданную миграцию.</param>
      <param name="force">Значение, указывающее, приемлемы ли потери данных во время автоматической миграции.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.ToolingFacade.Update(System.String,System.Boolean)">
      <summary>Обновляет базу данных для указанной миграции.</summary>
      <param name="targetMigration">Идентификатор миграции, на которую будет произведен переход.Если указано значение NULL, то база данных будет обновлена до последней миграции.</param>
      <param name="force">Значение, указывающее, приемлемы ли потери данных во время автоматической миграции.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator">
      <summary>Формирует код VB.Net для миграции на основе кода.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Byte[])">
      <summary>Формирует код, задающий значение по умолчанию для столбца <see cref="T:byte[]" />.</summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String)">
      <summary>Формирует главный файл кода, доступный для просмотра и изменения пользователем.</summary>
      <returns>Сформированный код.</returns>
      <param name="operations">Операции, которые будут выполнены во время миграции.</param>
      <param name="namespace">Пространство имен, в котором будет формироваться этот код.</param>
      <param name="className">Имя класса, который будет сформирован.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Collections.Generic.IEnumerable{System.String},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код, задающий набор имен столбцов с помощью лямбда-выражения.</summary>
      <param name="columns">Столбцы, для которых будет сформирован код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.AddColumnOperation" />.</summary>
      <param name="addColumnOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" />.</summary>
      <param name="addForeignKeyOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" />.</summary>
      <param name="addPrimaryKeyOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.AlterColumnOperation" />.</summary>
      <param name="alterColumnOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.AlterProcedureOperation" />.</summary>
      <param name="alterProcedureOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.AlterTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для <see cref="T:System.Data.Entity.Migrations.Model.AlterTableOperation" />.</summary>
      <param name="alterTableOperation">Операция, для которой предполагается формирование кода.</param>
      <param name="writer">Модуль записи, в который должен быть записан сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>Формирует код для задания определения модели <see cref="T:System.Data.Entity.Migrations.Model.ColumnModel" />.</summary>
      <param name="column">Определение столбца, для которого будет сформирован код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
      <param name="emitName">Значение, указывающее, следует ли включать в определение имя столбца.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" />.</summary>
      <param name="createIndexOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.CreateProcedureOperation" />.</summary>
      <param name="createProcedureOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.CreateTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.</summary>
      <param name="createTableOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.DropColumnOperation" />.</summary>
      <param name="dropColumnOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" />.</summary>
      <param name="dropForeignKeyOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.DropIndexOperation" />.</summary>
      <param name="dropIndexOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation" />.</summary>
      <param name="dropPrimaryKeyOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.DropProcedureOperation" />.</summary>
      <param name="dropProcedureOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.DropTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.DropTableOperation" />.</summary>
      <param name="dropTableOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.MoveProcedureOperation" />.</summary>
      <param name="moveProcedureOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.MoveTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.MoveTableOperation" />.</summary>
      <param name="moveTableOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.ParameterModel,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.ParameterModel" />.</summary>
      <param name="parameterModel">Определение модели параметра, для которого будет сформирован код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
      <param name="emitName">Значение true, если необходимо включать имя столбца в определение; в противном случае — значение false.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameColumnOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.RenameColumnOperation" />.</summary>
      <param name="renameColumnOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.RenameIndexOperation" />.</summary>
      <param name="renameIndexOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameProcedureOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.RenameProcedureOperation" />.</summary>
      <param name="renameProcedureOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.RenameTableOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.RenameTableOperation" />.</summary>
      <param name="renameTableOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Migrations.Model.SqlOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.SqlOperation" />.</summary>
      <param name="sqlOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Spatial.DbGeography)">
      <summary>Формирует код, задающий значение по умолчанию для столбца <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Формирует код, задающий значение по умолчанию для столбца <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.DateTime)">
      <summary>Формирует код, задающий значение по умолчанию для столбца <see cref="T:System.DateTime" />.</summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.DateTimeOffset)">
      <summary>Формирует код, задающий значение по умолчанию для столбца <see cref="T:System.DateTimeOffset" />.</summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Decimal)">
      <summary>Формирует код, задающий значение по умолчанию для столбца <see cref="T:System.Decimal" />.</summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Guid)">
      <summary>Формирует код, задающий значение по умолчанию для столбца <see cref="T:System.Guid" />.</summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Int64)">
      <summary>Формирует код, задающий значение по умолчанию для столбца <see cref="T:System.Int64" />.</summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Object)">
      <summary>Формирует код, задающий значение по умолчанию для столбца неизвестного типа данных.</summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.Single)">
      <summary>Формирует код, задающий значение по умолчанию для столбца <see cref="T:System.Single" />.</summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String)">
      <summary>Формирует код, задающий значение по умолчанию для столбца <see cref="T:System.String" />.</summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String,System.String,System.String,System.String)">
      <summary>Формирует файл фонового кода, содержащий метаданные миграции.</summary>
      <returns>Сформированный код.</returns>
      <param name="migrationId">Уникальный идентификатор миграции.</param>
      <param name="operations">Операции, которые будут выполнены во время миграции.</param>
      <param name="sourceModel">Исходная модель для сохранения в метаданных миграции.</param>
      <param name="targetModel">Целевая модель для сохранения в метаданных миграции.</param>
      <param name="namespace">Пространство имен, в котором будет формироваться этот код.</param>
      <param name="className">Имя класса, который будет сформирован.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.String,System.String,System.String,System.String,System.String)">
      <summary>Формирует файл фонового кода, содержащий метаданные миграции.</summary>
      <returns>Сформированный код.</returns>
      <param name="migrationId">Уникальный идентификатор миграции.</param>
      <param name="sourceModel">Исходная модель для сохранения в метаданных миграции.</param>
      <param name="targetModel">Целевая модель для сохранения в метаданных миграции.</param>
      <param name="namespace">Пространство имен, в котором будет формироваться этот код.</param>
      <param name="className">Имя класса, который будет сформирован.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Generate(System.TimeSpan)">
      <summary>Формирует код, задающий значение по умолчанию для столбца <see cref="T:System.TimeSpan" />.</summary>
      <returns>Код, представляющий значение по умолчанию.</returns>
      <param name="defaultValue">Значение, используемое в качестве значения по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateAnnotation(System.String,System.Object,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для определенного значения заметки, которое может быть равно null.При стандартном поведении используется объект <see cref="T:System.Data.Entity.Infrastructure.Annotations.AnnotationCodeGenerator" />, если таковой зарегистрирован, в противном случае применяется метод ToString для значения заметки.</summary>
      <param name="name">Имя заметки, для которой требуется код.</param>
      <param name="annotation">Формируемое значение заметки.</param>
      <param name="writer">Модуль записи, в который должен быть записан сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateAnnotations(System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для пересоздания заданного словаря заметок, который будет использоваться при их передаче в виде параметра при вызове <see cref="T:System.Data.Entity.Migrations.DbMigration" />.</summary>
      <param name="annotations">Формируемые заметки.</param>
      <param name="writer">Модуль записи, в который должен быть записан сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateAnnotations(System.Collections.Generic.IDictionary{System.String,System.Object},System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для пересоздания заданного словаря заметок, который будет использоваться при их передаче в виде параметра при вызове <see cref="T:System.Data.Entity.Migrations.DbMigration" />.</summary>
      <param name="annotations">Формируемые заметки.</param>
      <param name="writer">Модуль записи, в который должен быть записан сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation" /> в рамках операции <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.</summary>
      <param name="addForeignKeyOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation" /> в рамках операции <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.</summary>
      <param name="addPrimaryKeyOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.GenerateInline(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует код для выполнения операции <see cref="T:System.Data.Entity.Migrations.Model.CreateIndexOperation" /> в рамках операции <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.</summary>
      <param name="createIndexOperation">Операция, для которой будет формироваться код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.Quote(System.String)">
      <summary>Заключает идентификатор в кавычки с применением соответствующего экранирования, чтобы его можно было сохранить в строке.</summary>
      <returns>Заключенный в кавычки идентификатор.</returns>
      <param name="identifier">Идентификатор для заключения в кавычки.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.ScrubName(System.String)">
      <summary>Удаляет все недопустимые символы из имени артефакта базы данных.</summary>
      <returns>Очищенное имя.</returns>
      <param name="name">Имя для очистки.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.TranslateColumnType(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind)">
      <summary>Возвращает имя типа для столбца заданного типа данных.</summary>
      <returns>Имя типа для использования в сформированной миграции.</returns>
      <param name="primitiveTypeKind">Тип данных для перевода.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteClassAttributes(System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.Boolean)">
      <summary>Генерирует атрибуты класса.</summary>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
      <param name="designer">Значение, указывающее, будет ли код формироваться в файле с выделенным кодом.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteClassEnd(System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует завершающий код для класса, начатого с WriteClassStart.</summary>
      <param name="namespace">Пространство имен, в котором будет формироваться этот код.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteClassStart(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.String})">
      <summary>Формирует пространство имен с помощью определения класса и инструкций.</summary>
      <param name="namespace">Пространство имен, в котором будет формироваться этот код.</param>
      <param name="className">Имя класса, который будет сформирован.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
      <param name="base">Базовый класс для формируемого.</param>
      <param name="designer">Значение, указывающее, будет ли код формироваться в файле с выделенным кодом.</param>
      <param name="namespaces">Пространства имен, для которых будут добавлены директивы Imports.Если имеет значение NULL, то будут использоваться пространства имен, возвращенные из GetDefaultNamespaces.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Design.VisualBasicMigrationCodeGenerator.WriteProperty(System.String,System.String,System.Data.Entity.Migrations.Utilities.IndentedTextWriter)">
      <summary>Формирует свойство для получения исходной или целевой модели в файле фонового кода.</summary>
      <param name="name">Имя свойства.</param>
      <param name="value">Возвращаемое значение.</param>
      <param name="writer">Модуль записи текста, в который добавляется сформированный код.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.History.HistoryContext">
      <summary>Этот класс используется Code First Migrations для чтения и записи журнала миграции из базы данных.Чтобы настроить определение таблицы журнала миграций, можно создать класс, производный от этого класса, и переопределить OnModelCreating.Производные экземпляры можно регистрировать для каждой из конфигураций миграций с использованием <see cref="M:System.Data.Entity.Migrations.DbMigrationsConfiguration.SetHistoryContextFactory(System.String,System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})" /> либо глобально с помощью <see cref="M:System.Data.Entity.DbConfiguration.SetDefaultHistoryContext(System.Func{System.Data.Common.DbConnection,System.String,System.Data.Entity.Migrations.History.HistoryContext})" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.History.HistoryContext.#ctor(System.Data.Common.DbConnection,System.String)">
      <summary>Инициализирует новый экземпляр класса HistoryContext.Если вы создаете производный контекст журнала, в общем случае вы предоставляете конструктор, который принимает те же параметры и передает их базовому конструктору.</summary>
      <param name="existingConnection">Существующее соединение, которое будет использоваться новым контекстом.</param>
      <param name="defaultSchema">Схема по умолчанию для перенесенной модели.Эта схема будет использоваться для таблицы журнала миграций, если в OnModelCreating не настроена другая схема.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryContext.CacheKey">
      <summary>Возвращает ключ, используемый для поиска модели, ранее построенной для этого контекста.Это используется, чтобы избежать обработки OnModelCreating и вычисления модели каждый раз, когда создается новый экземпляр контекста.По умолчанию это свойство возвращает схему по умолчанию.В большинстве случаев переопределять это свойство не понадобится.Однако если ваша реализация OnModelCreating содержит условную логику, в соответствии с которой создается другая модель при том же поставщике баз данных и схеме по умолчанию, необходимо переопределить это свойство и вычислить соответствующий ключ.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryContext.DefaultSchema">
      <summary>Возвращает схему по умолчанию для переносимой модели.Эта схема будет использоваться для таблицы журнала миграций, если в OnModelCreating не настроена другая схема.</summary>
    </member>
    <member name="F:System.Data.Entity.Migrations.History.HistoryContext.DefaultTableName">
      <summary>Имя по умолчанию, используемое для таблицы журнала миграций.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryContext.History">
      <summary>Возвращает или задает объект <see cref="T:System.Data.Entity.DbSet`1" />, который можно использовать для считывания и записи экземпляров <see cref="T:System.Data.Entity.Migrations.History.HistoryRow" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.History.HistoryContext.OnModelCreating(System.Data.Entity.DbModelBuilder)">
      <summary>Применяет конфигурацию по умолчанию для таблицы журнала миграций.При переопределении этого метода рекомендуется вызвать эту базовую реализацию перед применением пользовательской конфигурации.</summary>
      <param name="modelBuilder">Построитель, который определяет модель для создаваемого контекста.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.History.HistoryRow">
      <summary>Этот класс используется Code First Migrations для чтения и записи журнала миграции из базы данных.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.History.HistoryRow.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Migrations.History.HistoryRow" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.ContextKey">
      <summary>Возвращает или задает ключ, представляющий то, к какому контексту применяется строка.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.MigrationId">
      <summary>Возвращает или задает идентификатор Id миграции, которую представляет эта строка.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.Model">
      <summary>Возвращает или задает состояние модели после применения этой миграции.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.History.HistoryRow.ProductVersion">
      <summary>Возвращает или задает версию платформы Entity Framework, в которой была создана эта запись.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException">
      <summary>Представляет ошибку, которая возникает при потере данных во время автоматической миграции.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException.#ctor">
      <summary>Инициализирует новый экземпляр класса AutomaticDataLossException.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса AutomaticDataLossException.</summary>
      <param name="message">Сообщение, описывающее ошибку.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticDataLossException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса MigrationsException.</summary>
      <param name="message">Сообщение, описывающее ошибку.</param>
      <param name="innerException">Исключение, вызвавшее текущее исключение, или пустая ссылка (Nothing в Visual Basic), если внутреннее исключение не указано.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException">
      <summary>Представляет ошибку, которая возникла при наличии ожидающих изменений модели после применения последней миграции и отключения автоматической миграции.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException.#ctor">
      <summary>Инициализирует новый экземпляр класса AutomaticMigrationsDisabledException.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса AutomaticMigrationsDisabledException.</summary>
      <param name="message">Сообщение, описывающее ошибку.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.AutomaticMigrationsDisabledException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса MigrationsException.</summary>
      <param name="message">Сообщение, описывающее ошибку.</param>
      <param name="innerException">Исключение, вызвавшее текущее исключение, или пустая ссылка (Nothing в Visual Basic), если внутреннее исключение не указано.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.IDbMigration">
      <summary>Явно реализован с помощью <see cref="T:System.Data.Entity.Migrations.DbMigration" />, чтобы определенные члены не появлялись в технологии IntelliSense при миграции с формированием шаблонов.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.IDbMigration.AddOperation(System.Data.Entity.Migrations.Model.MigrationOperation)">
      <summary>Добавляет к миграции пользовательское свойство <see cref="T:System.Data.Entity.Migrations.Model.MigrationOperation" />.Рекомендуется, чтобы пользовательские средства реализации операций создавали методы расширения в миграции <see cref="T:System.Data.Entity.Migrations.Infrastructure.IDbMigration" />, обеспечивающие быстрые API для добавления новых операций.</summary>
      <param name="migrationOperation">Добавляемая операция.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata">
      <summary>Обеспечивает дополнительные метаданные о переносе на основе кода.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Id">
      <summary>Возвращает уникальный идентификатор для переноса.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Source">
      <summary>Возвращает состояние модели до запуска этого переноса.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.IMigrationMetadata.Target">
      <summary>Возвращает состояние модели после запуска этого переноса.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigrationsException">
      <summary>Представляет ошибки, возникающие внутри конвейера Code First Migrations.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor">
      <summary>Инициализирует новый экземпляр класса MigrationsException.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Инициализирует новый экземпляр класса MigrationsException с сериализованными данными.</summary>
      <param name="info">Объект <see cref="T:System.Runtime.Serialization.SerializationInfo" />, содержащий данные сериализованного объекта о генерируемом исключении.</param>
      <param name="context">Объект <see cref="T:System.Runtime.Serialization.StreamingContext" />, содержащий контекстные сведения об источнике или назначении.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса MigrationsException.</summary>
      <param name="message">Сообщение, описывающее ошибку.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса MigrationsException.</summary>
      <param name="message">Сообщение, описывающее ошибку.</param>
      <param name="innerException">Исключение, вызвавшее текущее исключение, или пустая ссылка (Nothing в Visual Basic), если внутреннее исключение не указано.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger">
      <summary>Базовый класс для регистраторов, которые могут быть использованы для процессов миграции.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Info(System.String)">
      <summary>Добавляет в журнал информационное сообщение.</summary>
      <param name="message">Сообщение, которое нужно добавить в журнал.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Verbose(System.String)">
      <summary>Добавляет в журнал дополнительные сведения, которые должны быть представлены для пользователя после запроса подробной выходной информации.</summary>
      <param name="message">Сообщение, которое нужно добавить в журнал.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsLogger.Warning(System.String)">
      <summary>Добавляет в журнал предупреждение, о котором следует уведомить пользователя.</summary>
      <param name="message">Сообщение, которое нужно добавить в журнал.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigrationsPendingException">
      <summary>Вызывается, если не удается выполнить операцию из-за существующих миграций, которые не были применены к базе данных.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsPendingException.#ctor">
      <summary>Инициализирует новый экземпляр класса MigrationsPendingException.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsPendingException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса MigrationsPendingException.</summary>
      <param name="message">Сообщение, описывающее ошибку.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigrationsPendingException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса MigrationsPendingException.</summary>
      <param name="message">Сообщение, описывающее ошибку.</param>
      <param name="innerException">Исключение, вызвавшее текущее исключение, или пустая ссылка (Nothing в Visual Basic), если внутреннее исключение не указано.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorBase">
      <summary>Представляет базовый класс для декораторов, которые служат оболочкой для базового <see cref="T:System.Data.Entity.Migrations.DbMigrator" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Migrations.Infrastructure.MigratorBase" />.</summary>
      <param name="innerMigrator">Средство переноса, помещаемое этим декоратором в оболочку.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Configuration">
      <summary>Возвращает конфигурацию, используемую для процесса переноса.</summary>
      <returns>Процесс, используемый для процессов миграций.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetDatabaseMigrations">
      <summary>Возвращает список переносов, примененных к базе данных.</summary>
      <returns>Список идентификаторов миграций.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetLocalMigrations">
      <summary>Возвращает список переносов, определенных в сборке.</summary>
      <returns>Список идентификаторов миграций.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.GetPendingMigrations">
      <summary>Возвращает список отложенных переносов, не примененных к базе данных.</summary>
      <returns>Список идентификаторов миграций.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Update">
      <summary>Обновляет целевую базу данных до последнего переноса.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorBase.Update(System.String)">
      <summary>Обновляет целевую базу данных до данного переноса.</summary>
      <param name="targetMigration">Перенос для повышения или понижения уровня.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorLoggingDecorator">
      <summary>Декоратор для обеспечения протоколирования при выполнении операций переноса.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorLoggingDecorator.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase,System.Data.Entity.Migrations.Infrastructure.MigrationsLogger)">
      <summary>Инициализирует новый экземпляр класса MigratorLoggingDecorator.</summary>
      <param name="innerMigrator">Средство переноса, помещаемое этим декоратором в оболочку.</param>
      <param name="logger">Регистратор, в который выполняется запись сообщений.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator">
      <summary>Декоратор для создания скрипта SQL вместо применения изменений к базе данных.Использование этого декоратора для использования программы-оболочки <see cref="T:System.Data.Entity.Migrations.DbMigrator" /> позволит предотвратить <see cref="T:System.Data.Entity.Migrations.DbMigrator" /> от применения каких-либо изменений к целевой базе данных.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator.#ctor(System.Data.Entity.Migrations.Infrastructure.MigratorBase)">
      <summary>Инициализирует новый экземпляр класса MigratorScriptingDecorator.</summary>
      <param name="innerMigrator">Средство переноса, помещаемое этим декоратором в оболочку.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Infrastructure.MigratorScriptingDecorator.ScriptUpdate(System.String,System.String)">
      <summary>Создает скрипт для обновления базы данных.</summary>
      <returns>Сформированный скрипт SQL.</returns>
      <param name="sourceMigration">Миграция, с которой нужно обновиться.Если указано значение NULL, то скрипт обновляет текущую создаваемую базу данных.</param>
      <param name="targetMigration">Миграция, на которую нужно обновиться.Если указано значение NULL, то скрипт обновляет последнюю созданную миграцию.</param>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddColumnOperation">
      <summary>Представляет столбец, добавляемый в таблицу.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Object)">
      <summary>Инициализирует новый экземпляр класса AddColumnOperation.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="table">Имя таблицы, в которую добавляется столбец.</param>
      <param name="column">Сведения о добавляемом столбце.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Column">
      <summary>Возвращает сведения о добавляемом столбце.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Inverse">
      <summary>Возвращает операцию, представляющую удаление добавленного столбца.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.IsDestructiveChange">
      <summary>Возвращает значение, указывающее, является ли изменение разрушительным.</summary>
      <returns>Значение true, если изменение разрушительно; в противном случае — false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddColumnOperation.Table">
      <summary>Возвращает имя таблицы, в которую добавляется столбец.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddForeignKeyOperation">
      <summary>Представляет ограничение внешнего ключа, добавляемое в таблицу.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.#ctor(System.Object)">
      <summary>Инициализирует новый экземпляр класса AddForeignKeyOperation.Также должны быть заполнены свойства PrincipalTable, PrincipalColumns, DependentTable и DependentColumns.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.CascadeDelete">
      <summary>Возвращает или задает значение, указывающее, следует ли настроить каскадное удаление для ограничения внешнего ключа.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.CreateCreateIndexOperation">
      <summary>Возвращает операцию создания индекса на столбцах внешнего ключа.</summary>
      <returns>Операция добавления индекса.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.Inverse">
      <summary>Возвращает операцию удаления ограничения внешнего ключа.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.IsDestructiveChange">
      <summary>Возвращает или задает значение, указывающее, приведет ли это изменение к потере данных.</summary>
      <returns>Значение true, если это изменение приведет к потере данных; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddForeignKeyOperation.PrincipalColumns">
      <summary>Имена столбцов, которые являются целевыми для ограничения внешнего ключа.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation">
      <summary>Представляет добавление первичного ключа в таблицу.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation.#ctor(System.Object)">
      <summary>Инициализирует новый экземпляр класса AddPrimaryKeyOperation.Также должны быть заполнены свойства Table и Columns.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation.Inverse">
      <summary>Возвращает операцию удаления первичного ключа.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AddPrimaryKeyOperation.IsClustered">
      <summary>Возвращает или задает значение, указывающее, является ли этот первичный ключ кластеризованным.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AlterColumnOperation">
      <summary>Представляет изменение существующего столбца.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AlterColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Boolean,System.Data.Entity.Migrations.Model.AlterColumnOperation,System.Object)">
      <summary>Инициализирует новый экземпляр класса AlterColumnOperation.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="table">Имя таблицы, к которой принадлежит столбец.</param>
      <param name="column">Сведения о том, какие изменение следует внести в столбец.</param>
      <param name="isDestructiveChange">Значение, указывающее, приведет ли это изменение к потере данных.</param>
      <param name="inverse">Операция для отката изменения столбца.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AlterColumnOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.ColumnModel,System.Boolean,System.Object)">
      <summary>Инициализирует новый экземпляр класса AlterColumnOperation.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="table">Имя таблицы, к которой принадлежит столбец.</param>
      <param name="column">Сведения о том, какие изменение следует внести в столбец.</param>
      <param name="isDestructiveChange">Значение, указывающее, приведет ли это изменение к потере данных.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Column">
      <summary>Возвращает новое определение столбца.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Inverse">
      <summary>Возвращает операцию, представляющую откат изменения.Обратная операция не может быть вычислена автоматически; если она не была предоставлена конструктору, это свойство возвратит значение NULL.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.IsDestructiveChange">
      <summary>Возвращает значение, указывающее, приведет ли это изменение к потере данных.</summary>
      <returns>Значение true, если это изменение приведет к потере данных; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterColumnOperation.Table">
      <summary>Возвращает имя таблицы, к которой принадлежит столбец.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AlterProcedureOperation">
      <summary>Представляет изменение существующей хранимой процедуры.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AlterProcedureOperation.#ctor(System.String,System.String,System.Object)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Migrations.Model.AlterProcedureOperation" />.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="name">Имя хранимой процедуры.</param>
      <param name="bodySql">Текст хранимой процедуры в коде SQL.</param>
      <param name="anonymousArguments">Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterProcedureOperation.Inverse">
      <summary>Возвращает операцию, отменяющую данную операцию.Всегда возвращает значение <see cref="T:System.Data.Entity.Migrations.Model.NotSupportedOperation" />.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.AlterTableOperation">
      <summary>Представляет изменения, внесенные в пользовательские заметки на таблице.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.AlterTableOperation.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Data.Entity.Infrastructure.Annotations.AnnotationValues},System.Object)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Migrations.Model.AlterTableOperation" />.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="name">Имя таблицы, заметки на которой были изменены.</param>
      <param name="annotations">Пользовательские заметки на таблице, которая была изменена.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterTableOperation.Annotations">
      <summary>Возвращает измененные пользовательские заметки на таблице.</summary>
      <returns>Пользовательские заметки, которые были изменены на таблице.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterTableOperation.Columns">
      <summary>Возвращает столбцы, подлежащие включению в таблицу, для которой изменены заметки.</summary>
      <returns>Столбцы, подлежащие включению в таблицу, для которой изменены заметки.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterTableOperation.Inverse">
      <summary>Возвращает операцию, обратную той, при которой заметки изменяются, снова принимая вид, который они имели перед применением этой операции.</summary>
      <returns>Операция, обратная той, при которой заметки изменяются, снова принимая вид, который они имели перед применением этой операции.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterTableOperation.IsDestructiveChange">
      <summary>Получает значение, указывающее, может ли эта операция привести к потере данных.</summary>
      <returns>Значение true, если эта операция может привести к потере данных; в противном случае — false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.AlterTableOperation.Name">
      <summary>Возвращает имя таблицы, заметки на которой были изменены.</summary>
      <returns>Имя таблицы, заметки на которой были изменены.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ColumnModel">
      <summary>Представляет информацию о столбце.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind)">
      <summary>Инициализирует новый экземпляр класса ColumnModel.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="type">Тип данных для этого столбца.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Инициализирует новый экземпляр класса ColumnModel.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="type">Тип данных для этого столбца.</param>
      <param name="typeUsage">Дополнительные сведения о типе данных.Включает такие сведения, как максимальная длина, допустимость значений NULL и т. д.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.Annotations">
      <summary>Возвращает или задает изменившиеся пользовательские заметки на столбце.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.ClrDefaultValue">
      <summary>Возвращает значение по умолчанию для типа CLR, соответствующего типу базы данных для данного столбца.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.ClrType">
      <summary>Возвращает тип CLR, соответствующий типу базы данных для данного столбца.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsIdentity">
      <summary>Возвращает или задает значение, указывающее, будут ли значения для этого столбца создаваться базой данных с помощью шаблонов идентификации.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ColumnModel.IsNarrowerThan(System.Data.Entity.Migrations.Model.ColumnModel,System.Data.Entity.Core.Common.DbProviderManifest)">
      <summary>Определяет, относится ли столбец к более узкому типу данных, чем другой столбец.Используется для определения, приведет ли изменение определения столбца к потере данных.</summary>
      <returns>Значение true, если столбец относится к более узкому типу данных.</returns>
      <param name="column">Столбец для сравнения.</param>
      <param name="providerManifest">Сведения о базе данных, предоставленные поставщиком.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsNullable">
      <summary>Возвращает или задает значение, показывающее, может ли этот столбец содержать значения NULL.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ColumnModel.IsTimestamp">
      <summary>Возвращает или задает значение, указывающее, должна ли эта модель свойства быть настроена в качестве отметки времени.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.CreateIndexOperation">
      <summary>Представляет создание индекса базы данных.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.CreateIndexOperation.#ctor(System.Object)">
      <summary>Инициализирует новый экземпляр класса CreateIndexOperation.Также должны быть заполнены свойства Table и Columns.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.Inverse">
      <summary>Возвращает операцию удаления этого индекса.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.IsClustered">
      <summary>Возвращает или задает значение, указывающее, является ли индекс кластеризованным.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.IsDestructiveChange">
      <summary>Возвращает или задает значение, указывающее, приведет ли это изменение к потере данных.</summary>
      <returns>Значение true, если это изменение приведет к потере данных; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateIndexOperation.IsUnique">
      <summary>Возвращает или задает значение, указывающее, является ли этот индекс уникальным.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.CreateProcedureOperation">
      <summary>Операция переноса, предназначенная для добавления новой хранимой процедуры в базу данных.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.CreateProcedureOperation.#ctor(System.String,System.String,System.Object)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Migrations.Model.CreateProcedureOperation" />.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="name">Имя хранимой процедуры.</param>
      <param name="bodySql">Текст хранимой процедуры в коде SQL.</param>
      <param name="anonymousArguments">Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateProcedureOperation.Inverse">
      <summary>Возвращает операцию удаления хранимой процедуры.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.CreateTableOperation">
      <summary>Представляет создание таблицы.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.CreateTableOperation.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="name">Имя создаваемой таблицы.</param>
      <param name="annotations">Существующие пользовательские заметки на таблице, которая должна быть создана.Могут быть пустыми или иметь значение NULL.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.CreateTableOperation.#ctor(System.String,System.Object)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Migrations.Model.CreateTableOperation" />.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="name">Имя создаваемой таблицы.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Annotations">
      <summary>Возвращает существующие пользовательские заметки на таблице, которая должна быть создана.</summary>
      <returns>Существующие пользовательские заметки на таблице, которая должна быть создана.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Columns">
      <summary>Возвращает столбцы, включаемые в новую таблицу.</summary>
      <returns>Столбцы, включаемые в новую таблицу.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Inverse">
      <summary>Возвращает операцию удаления таблицы.</summary>
      <returns>Операция удаления таблицы.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.IsDestructiveChange">
      <summary>Возвращает значение, указывающее, может ли эта операция привести к потере данных.</summary>
      <returns>Значение true, если эта операция может привести к потере данных; в противном случае — false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.Name">
      <summary>Возвращает имя создаваемой таблицы.</summary>
      <returns>Имя создаваемой таблицы.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.CreateTableOperation.PrimaryKey">
      <summary>Возвращает или задает первичный ключ для новой таблицы.</summary>
      <returns>Первичный ключ для новой таблицы.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropColumnOperation">
      <summary>Представляет столбец, удаляемый из таблицы.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Data.Entity.Migrations.Model.AddColumnOperation,System.Object)">
      <summary>Инициализирует новый экземпляр класса DropColumnOperation.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="table">Имя таблицы, из которой следует удалить столбец.</param>
      <param name="name">Имя столбца для удаления.</param>
      <param name="removedAnnotations">Существующие пользовательские заметки на уничтожаемом столбце.Могут быть пустыми или иметь значение NULL.</param>
      <param name="inverse">Операция, представляющая откат операции удаления.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Object)">
      <summary>Инициализирует новый экземпляр класса DropColumnOperation.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="table">Имя таблицы, из которой следует удалить столбец.</param>
      <param name="name">Имя столбца для удаления.</param>
      <param name="removedAnnotations">Существующие пользовательские заметки на уничтожаемом столбце.Могут быть пустыми или иметь значение NULL.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Data.Entity.Migrations.Model.AddColumnOperation,System.Object)">
      <summary>Инициализирует новый экземпляр класса DropColumnOperation.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="table">Имя таблицы, из которой следует удалить столбец.</param>
      <param name="name">Имя столбца для удаления.</param>
      <param name="inverse">Операция, представляющая откат операции удаления.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropColumnOperation.#ctor(System.String,System.String,System.Object)">
      <summary>Инициализирует новый экземпляр класса DropColumnOperation.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="table">Имя таблицы, из которой следует удалить столбец.</param>
      <param name="name">Имя столбца для удаления.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Inverse">
      <summary>Возвращает операцию, представляющую откат удаления столбца.Обратная операция не может быть вычислена автоматически; если она не была предоставлена конструктору, это свойство возвратит значение NULL.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.IsDestructiveChange">
      <summary>Возвращает значение, указывающее, может ли эта операция привести к потере данных.</summary>
      <returns>Значение true, если эта операция может привести к потере данных; в противном случае — false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Name">
      <summary>Возвращает имя столбца для удаления.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.RemovedAnnotations">
      <summary>Возвращает существующие пользовательские заметки на уничтожаемом столбце.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropColumnOperation.Table">
      <summary>Возвращает имя таблицы, из которой следует удалить столбец.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation">
      <summary>Представляет ограничение внешнего ключа, удаляемое из таблицы.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.#ctor(System.Data.Entity.Migrations.Model.AddForeignKeyOperation,System.Object)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" />.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="inverse">Операция, представляющая откат удаления ограничения внешнего ключа.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.#ctor(System.Object)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Migrations.Model.DropForeignKeyOperation" />.Также должны быть заполнены свойства PrincipalTable, DependentTable и DependentColumns.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.CreateDropIndexOperation">
      <summary>Возвращает операцию удаления связанного индекса для столбцов внешнего ключа.</summary>
      <returns>Операция удаления индекса.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.Inverse">
      <summary>Возвращает операцию, представляющую откат удаления ограничения внешнего ключа.Обратная операция не может быть вычислена автоматически; если она не была предоставлена конструктору, это свойство возвратит значение NULL.</summary>
      <returns>Операция, представляющая откат удаления ограничения внешнего ключа.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropForeignKeyOperation.IsDestructiveChange">
      <summary>Возвращает значение, указывающее, является ли изменение разрушительным.</summary>
      <returns>Значение true, если изменение разрушительно; в противном случае — false.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropIndexOperation">
      <summary>Представляет удаление существующего индекса.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropIndexOperation.#ctor(System.Data.Entity.Migrations.Model.CreateIndexOperation,System.Object)">
      <summary>Инициализирует новый экземпляр класса DropIndexOperation.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="inverse">Операция, представляющая откат удаления индекса.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropIndexOperation.#ctor(System.Object)">
      <summary>Инициализирует новый экземпляр класса DropIndexOperation.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropIndexOperation.Inverse">
      <summary>Возвращает операцию, представляющую откат удаления индекса.Обратная операция не может быть вычислена автоматически; если она не была предоставлена конструктору, это свойство возвратит значение NULL.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropIndexOperation.IsDestructiveChange">
      <summary>Возвращает значение, указывающее, может ли эта операция привести к потере данных.</summary>
      <returns>Значение true, если эта операция может привести к потере данных; в противном случае — false.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation">
      <summary>Представляет удаление первичного ключа из таблицы.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation.#ctor(System.Object)">
      <summary>Инициализирует новый экземпляр класса DropPrimaryKeyOperation.Также должны быть заполнены свойства Table и Columns.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation.CreateTableOperation">
      <summary>Используется при изменении таблицы журнала миграций для перестроения таблицы вместо удаления и добавления первичного ключа.</summary>
      <returns>Операция создания таблицы журнала миграций.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropPrimaryKeyOperation.Inverse">
      <summary>Возвращает операцию добавления первичного ключа.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropProcedureOperation">
      <summary>Удаляет хранимую процедуру из базы данных.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropProcedureOperation.#ctor(System.String,System.Object)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Migrations.Model.DropProcedureOperation" />.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="name">Имя хранимой процедуры, подлежащей удалению.</param>
      <param name="anonymousArguments">Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropProcedureOperation.Inverse">
      <summary>Возвращает операцию, отменяющую данную операцию.Всегда возвращает значение <see cref="T:System.Data.Entity.Migrations.Model.NotSupportedOperation" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropProcedureOperation.IsDestructiveChange">
      <summary>Возвращает значение, указывающее, может ли эта операция привести к потере данных.Всегда возвращает значение false.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropProcedureOperation.Name">
      <summary>Возвращает имя хранимой процедуры, подлежащей удалению.</summary>
      <returns>Имя хранимой процедуры, подлежащей удалению.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.DropTableOperation">
      <summary>Представляет удаление существующей таблицы.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.Object}},System.Data.Entity.Migrations.Model.CreateTableOperation,System.Object)">
      <summary>Инициализирует новый экземпляр класса DropTableOperation.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="name">Имя таблицы для удаления.</param>
      <param name="removedAnnotations">Существующие пользовательские заметки на уничтожаемой таблице.Могут быть пустыми или иметь значение NULL.</param>
      <param name="removedColumnAnnotations">Существующие пользовательские заметки на столбцах уничтожаемой таблицы.Могут быть пустыми или иметь значение NULL.</param>
      <param name="inverse">Операция, представляющая откат удаления таблицы.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.Object}},System.Object)">
      <summary>Инициализирует новый экземпляр класса DropTableOperation.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="name">Имя таблицы для удаления.</param>
      <param name="removedAnnotations">Существующие пользовательские заметки на уничтожаемой таблице.Могут быть пустыми или иметь значение NULL.</param>
      <param name="removedColumnAnnotations">Существующие пользовательские заметки на столбцах уничтожаемой таблицы.Могут быть пустыми или иметь значение NULL.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Data.Entity.Migrations.Model.CreateTableOperation,System.Object)">
      <summary>Инициализирует новый экземпляр класса DropTableOperation.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="name">Имя таблицы для удаления.</param>
      <param name="inverse">Операция, представляющая откат удаления таблицы.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.DropTableOperation.#ctor(System.String,System.Object)">
      <summary>Инициализирует новый экземпляр класса DropTableOperation.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="name">Имя таблицы для удаления.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.Inverse">
      <summary>Возвращает операцию, представляющую откат удаления таблицы.Обратная операция не может быть вычислена автоматически; если она не была предоставлена конструктору, это свойство возвратит значение NULL.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.IsDestructiveChange">
      <summary>Возвращает значение, указывающее, может ли операция привести к потере данных.</summary>
      <returns>Значение true, если операция может привести к потере данных; в противном случае — false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.Name">
      <summary>Возвращает имя удаляемой таблицы.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.RemovedAnnotations">
      <summary>Возвращает существующие пользовательские заметки на уничтожаемой таблице.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.DropTableOperation.RemovedColumnAnnotations">
      <summary>Возвращает существующие пользовательские заметки на столбцах уничтожаемой таблицы.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ForeignKeyOperation">
      <summary>Базовый класс для изменений, влияющих на ограничения внешнего ключа.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ForeignKeyOperation.#ctor(System.Object)">
      <summary>Инициализирует новый экземпляр класса ForeignKeyOperation.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.DependentColumns">
      <summary>Имена столбцов внешнего ключа.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.DependentTable">
      <summary>Возвращает или задает имя таблицы, в которой существуют столбцы внешнего ключа.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.HasDefaultName">
      <summary>Возвращает значение, указывающее, задано ли для этого ограничения внешнего ключа определенное имя.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.Name">
      <summary>Возвращает или задает имя ограничения внешнего ключа.Если имя не определено, вычисляется имя по умолчанию.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ForeignKeyOperation.PrincipalTable">
      <summary>Возвращает или задает имя целевой таблицы для ограничения внешнего ключа.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.HistoryOperation">
      <summary>Операция, представляющая изменения языка DML в таблице журнала миграций.Таблица журнала миграций используется для хранения журнала миграций, примененных к базе данных.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.HistoryOperation.#ctor(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbModificationCommandTree},System.Object)">
      <summary>Инициализирует новый экземпляр класса HistoryOperation.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="commandTrees">Последовательность деревьев команд, представляющих операции, применяемые к таблице журнала.</param>
      <param name="anonymousArguments">Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.HistoryOperation.CommandTrees">
      <summary>Последовательность команд, представляющих операции, применяемые к таблице журнала.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.HistoryOperation.IsDestructiveChange">
      <summary>Возвращает значение, указывающее, может ли эта операция привести к потере данных.</summary>
      <returns>Значение true, если эта операция может привести к потере данных; в противном случае — false.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.IndexOperation">
      <summary>Общий базовый класс для операций, влияющих на индексы.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.IndexOperation.#ctor(System.Object)">
      <summary>Инициализирует новый экземпляр класса IndexOperation.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.IndexOperation.BuildDefaultName(System.Collections.Generic.IEnumerable{System.String})">
      <summary>Создает имя индекса по умолчанию на основе переданных имен столбцов.</summary>
      <returns>Имя индекса по умолчанию.</returns>
      <param name="columns">Имена столбцов, используемые для создания имени индекса по умолчанию.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Columns">
      <summary>Возвращает индексируемые столбцы.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.HasDefaultName">
      <summary>Возвращает значение, указывающее, задано ли для этого индекса специфическое имя.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Name">
      <summary>Возвращает или задает имя индекса.Если имя не определено, вычисляется имя по умолчанию.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.IndexOperation.Table">
      <summary>Возвращает или задает таблицу, к которой принадлежит индекс.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.MigrationOperation">
      <summary>Представляет операцию изменения схемы базы данных.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.MigrationOperation.#ctor(System.Object)">
      <summary>Инициализирует новый экземпляр класса MigrationOperation.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="anonymousArguments">Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.AnonymousArguments">
      <summary>Возвращает дополнительные аргументы, которые могут обрабатываться поставщиками.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.Inverse">
      <summary>Возвращает операцию, отменяющую данную операцию.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MigrationOperation.IsDestructiveChange">
      <summary>Возвращает значение, указывающее, может ли эта операция привести к потере данных.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.MoveProcedureOperation">
      <summary>Представляет перемещение хранимой процедуры в новую схему в базе данных.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.MoveProcedureOperation.#ctor(System.String,System.String,System.Object)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Migrations.Model.MoveProcedureOperation" />.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="name">Имя хранимой процедуры, подлежащей перемещению.</param>
      <param name="newSchema">Новая схема для хранимой процедуры.</param>
      <param name="anonymousArguments">Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveProcedureOperation.Inverse">
      <summary>Возвращает операцию, отменяющую данную операцию.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveProcedureOperation.IsDestructiveChange">
      <summary>Возвращает значение, указывающее, может ли эта операция привести к потере данных.Всегда возвращает значение false.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveProcedureOperation.Name">
      <summary>Возвращает имя хранимой процедуры, подлежащей перемещению.</summary>
      <returns>Имя хранимой процедуры, подлежащей перемещению.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveProcedureOperation.NewSchema">
      <summary>Возвращает новую схему для хранимой процедуры.</summary>
      <returns>Новая схема для хранимой процедуры.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.MoveTableOperation">
      <summary>Представляет перемещение таблицы из одной схемы в другую.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.MoveTableOperation.#ctor(System.String,System.String,System.Object)">
      <summary>Инициализирует новый экземпляр класса MoveTableOperation.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="name">Имя таблицы для перемещения.</param>
      <param name="newSchema">Имя схемы, в которую перемещается таблица.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.ContextKey">
      <summary>Используется при изменении таблицы журнала миграций для перемещения данных в новую таблицу.</summary>
      <returns>Ключ контекста для модели.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.CreateTableOperation">
      <summary>Используется при изменении таблицы журнала миграций для перестроения таблицы вместо удаления и добавления первичного ключа.</summary>
      <returns>Операция создания таблицы журнала миграций.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.Inverse">
      <summary>Возвращает операцию, перемещающую таблицу обратно в первоначальную схему.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.IsDestructiveChange">
      <summary>Возвращает значение, указывающее, приведет ли это изменение к потере данных.</summary>
      <returns>Значение true, если это изменение приведет к потере данных; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.IsSystem">
      <summary>Возвращает значение, указывающее, является ли таблица системной.</summary>
      <returns>Значение true, если таблица является системной; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.Name">
      <summary>Возвращает имя перемещаемой таблицы.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.MoveTableOperation.NewSchema">
      <summary>Возвращает имя схемы, в которую перемещается таблица.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.NotSupportedOperation">
      <summary>Представляет операцию переноса, которая не могла быть выполнена, возможно, потому, что не поддерживается поставщиком целевой базы данных.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.NotSupportedOperation.IsDestructiveChange">
      <summary>Возвращает значение, указывающее, может ли эта операция привести к потере данных.Всегда возвращает значение false.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ParameterModel">
      <summary>Представляет информацию о параметре.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ParameterModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind)">
      <summary>Инициализирует новый экземпляр класса ParameterModel с указанным типом.</summary>
      <param name="type">Тип данных для этого параметра.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ParameterModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Инициализирует новый экземпляр класса ParameterModel с заданными типом и типом использования.</summary>
      <param name="type">Тип данных для этого параметра.</param>
      <param name="typeUsage">Дополнительные сведения о типе данных.Включает такие сведения, как максимальная длина, допустимость значений NULL и т. д.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ParameterModel.IsOutParameter">
      <summary>Получает или задает значение, указывающее, является ли этот экземпляр выходным параметром.</summary>
      <returns>Значение true, если данный экземпляр является выходным параметром; в противном случае — значение false.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.PrimaryKeyOperation">
      <summary>Общий базовый класс для представления операций, влияющих на первичные ключи.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.#ctor(System.Object)">
      <summary>Инициализирует новый экземпляр класса PrimaryKeyOperation.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.BuildDefaultName(System.String)">
      <summary>Возвращает имя по умолчанию для первичного ключа.</summary>
      <returns>Имя первичного ключа по умолчанию.</returns>
      <param name="table">Имя целевой таблицы.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Columns">
      <summary>Возвращает столбцы, составляющие первичный ключ.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.HasDefaultName">
      <summary>Возвращает значение, указывающее, задано ли для этого первичного ключа определенное имя.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.IsDestructiveChange">
      <summary>Возвращает значение, указывающее, может ли эта операция привести к потере данных.</summary>
      <returns>Значение true, если эта операция может привести к потере данных; в противном случае — false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Name">
      <summary>Возвращает или задает имя первичного ключа.Если имя не определено, вычисляется имя по умолчанию.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PrimaryKeyOperation.Table">
      <summary>Возвращает или задает имя таблицы, содержащей первичный ключ.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.ProcedureOperation">
      <summary>Операция переноса, которая воздействует на хранимые процедуры.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.ProcedureOperation.#ctor(System.String,System.String,System.Object)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Migrations.Model.ProcedureOperation" />.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="name">Имя хранимой процедуры.</param>
      <param name="bodySql">Текст хранимой процедуры в коде SQL.</param>
      <param name="anonymousArguments">Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ProcedureOperation.BodySql">
      <summary>Возвращает текст хранимой процедуры в коде SQL.</summary>
      <returns>Текст хранимой процедуры в коде SQL.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ProcedureOperation.IsDestructiveChange">
      <summary>Возвращает значение, указывающее, может ли эта операция привести к потере данных.Всегда возвращает значение false.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ProcedureOperation.Name">
      <summary>Возвращает имя хранимой процедуры.</summary>
      <returns>Имя хранимой процедуры.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.ProcedureOperation.Parameters">
      <summary>Возвращает параметры хранимой процедуры.</summary>
      <returns>Параметры хранимой процедуры.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.PropertyModel">
      <summary>Представляет сведения о свойстве сущности.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.PropertyModel.#ctor(System.Data.Entity.Core.Metadata.Edm.PrimitiveTypeKind,System.Data.Entity.Core.Metadata.Edm.TypeUsage)">
      <summary>Инициализирует новый экземпляр класса PropertyModel.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="type">Тип данных для этой модели свойства.</param>
      <param name="typeUsage">Дополнительные сведения о типе данных.Включает такие сведения, как максимальная длина, допустимость значений NULL и т. д.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.DefaultValue">
      <summary>Возвращает или задает значение константы, используемое в качестве значения по умолчанию для этой модели свойства.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.DefaultValueSql">
      <summary>Возвращает или задает выражение SQL, используемое в качестве значения по умолчанию для этой модели свойства.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.IsFixedLength">
      <summary>Возвращает или задает значение, показывающее, имеет ли эта модель свойства фиксированную длину.Допустимо только для типов данных, представляющих массивы.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.IsUnicode">
      <summary>Возвращает или задает значение, показывающее, поддерживает ли эта модель свойства символы Юникода.Допустимо только для текстовых типов данных.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.MaxLength">
      <summary>Возвращает или задает максимальную длину данной модели свойства.Допустимо только для типов данных, представляющих массивы.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.Name">
      <summary>Возвращает или задает имя модели свойства.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.Precision">
      <summary>Возвращает или задает точность для этой модели свойства.Допустимо только для типов данных decimal.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.Scale">
      <summary>Возвращает или задает масштаб для этой модели свойства.Допустимо только для типов данных decimal.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.StoreType">
      <summary>Возвращает или задает зависящий от поставщика тип данных, используемый для этой модели свойства.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.Type">
      <summary>Возвращает тип данных для этой модели свойства.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.PropertyModel.TypeUsage">
      <summary>Возвращает дополнительные сведения о типе данных этой модели свойства.Включает такие сведения, как максимальная длина, допустимость значений NULL и т. д.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.RenameColumnOperation">
      <summary>Представляет переименование существующего столбца.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.RenameColumnOperation.#ctor(System.String,System.String,System.String,System.Object)">
      <summary>Инициализирует новый экземпляр класса RenameColumnOperation.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="table">Имя таблицы, к которой принадлежит столбец.</param>
      <param name="name">Имя столбца для переименования.</param>
      <param name="newName">Новое имя столбца.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Inverse">
      <summary>Возвращает операцию отката переименования.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.IsDestructiveChange">
      <summary>Возвращает значение, указывающее, может ли эта операция привести к потере данных.</summary>
      <returns>Значение true, если эта операция может привести к потере данных; в противном случае — false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Name">
      <summary>Возвращает имя столбца для переименования.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.NewName">
      <summary>Возвращает новое имя столбца.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameColumnOperation.Table">
      <summary>Возвращает имя таблицы, к которой принадлежит столбец.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.RenameIndexOperation">
      <summary>Представляет операцию переименования существующего индекса.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.RenameIndexOperation.#ctor(System.String,System.String,System.String,System.Object)">
      <summary>Инициализирует новый экземпляр класса RenameIndexOperation.</summary>
      <param name="table">Имя таблицы, к которой относится индекс.</param>
      <param name="name">Имя индекса, который подлежит переименованию.</param>
      <param name="newName">Новое имя индекса.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameIndexOperation.Inverse">
      <summary>Получает операцию отката к первоначальному имени индекса.</summary>
      <returns>Операция отката к первоначальному имени индекса.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameIndexOperation.IsDestructiveChange">
      <summary>Получает значение, указывающее, является переименование индекса разрушающим для операции.</summary>
      <returns>Значение true, если переименование свойства может быть разрушающим для операции; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameIndexOperation.Name">
      <summary>Возвращает имя индекса, подлежащего переименованию.</summary>
      <returns>Имя индекса, который подлежит переименованию.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameIndexOperation.NewName">
      <summary>Возвращает новое имя для индекса.</summary>
      <returns>Новое имя индекса.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameIndexOperation.Table">
      <summary>Возвращает имя таблицы, к которой принадлежит индекс.</summary>
      <returns>Имя таблицы, к которой относится индекс.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.RenameProcedureOperation">
      <summary>Представляет переименование хранимой процедуры в базе данных.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.RenameProcedureOperation.#ctor(System.String,System.String,System.Object)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Migrations.Model.RenameProcedureOperation" />.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="name">Имя хранимой процедуры, подлежащей переименованию.</param>
      <param name="newName">Новое имя для хранимой процедуры.</param>
      <param name="anonymousArguments">Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameProcedureOperation.Inverse">
      <summary>Возвращает операцию, отменяющую данную операцию.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameProcedureOperation.IsDestructiveChange">
      <summary>Возвращает значение, указывающее, может ли эта операция привести к потере данных.Всегда возвращает значение false.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameProcedureOperation.Name">
      <summary>Возвращает имя хранимой процедуры, подлежащей переименованию.</summary>
      <returns>Имя хранимой процедуры, подлежащей переименованию.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameProcedureOperation.NewName">
      <summary>Возвращает новое имя для хранимой процедуры.</summary>
      <returns>Новое имя для хранимой процедуры.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.RenameTableOperation">
      <summary>Представляет переименование существующей таблицы.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.RenameTableOperation.#ctor(System.String,System.String,System.Object)">
      <summary>Инициализирует новый экземпляр класса RenameTableOperation.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="name">Имя таблицы для переименования.</param>
      <param name="newName">Новое имя таблицы.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.Inverse">
      <summary>Возвращает операцию отката переименования.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.IsDestructiveChange">
      <summary>Возвращает значение, указывающее, является ли изменение разрушительным.</summary>
      <returns>Значение true, если изменение разрушительно; в противном случае — false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.Name">
      <summary>Возвращает имя переименуемой таблицы.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.RenameTableOperation.NewName">
      <summary>Возвращает новое имя таблицы.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.SqlOperation">
      <summary>Представляет зависящую от поставщика инструкцию SQL для выполнения непосредственно в целевой базе данных.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.SqlOperation.#ctor(System.String,System.Object)">
      <summary>Инициализирует новый экземпляр класса SqlOperation.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="sql">Команда SQL, которую требуется выполнить.</param>
      <param name="anonymousArguments">Дополнительные аргументы, которые могут обрабатываться поставщиками.Используйте синтаксис анонимного типа для указания аргументов, например «new { SampleArgument = "MyValue" }».</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.IsDestructiveChange">
      <summary>Возвращает значение, указывающее, может ли эта операция привести к потере данных.</summary>
      <returns>Значение true, если эта операция может привести к потере данных; в противном случае — false.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.Sql">
      <summary>Возвращает выполняемую команду SQL.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.SqlOperation.SuppressTransaction">
      <summary>Возвращает или задает значение, указывающее, следует ли выполнять эту инструкцию за пределами области транзакции, которая используется для того, чтобы процесс миграции был транзакционным.Если задано значение true, откат этой операции в случае сбоя процесса выполнен не будет.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation">
      <summary>Используется при создании скрипта с операцией обновления базы данных для сохранения операций, которые должны быть выполнены по отношению к базе данных.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.#ctor(System.Collections.Generic.IList{System.Data.Entity.Core.Common.CommandTrees.DbQueryCommandTree})">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation" />.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="historyQueryTrees">Запросы, которые служат для определения того, должен ли быть применен перенос к этой базе данных.Это дает возможность создать идемпотентный скрипт SQL, который может быть выполнен для базы данных любой версии.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.AddMigration(System.String,System.Collections.Generic.IList{System.Data.Entity.Migrations.Model.MigrationOperation})">
      <summary>Добавляет перенос к этой операции обновления базы данных.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <param name="migrationId">Идентификатор переноса.</param>
      <param name="operations">Отдельные операции, применяемые в ходе переноса.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.HistoryQueryTrees">
      <summary>Запросы, которые служат для определения того, должен ли быть применен перенос к этой базе данных.Это дает возможность создать идемпотентный скрипт SQL, который может быть выполнен для базы данных любой версии.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.IsDestructiveChange">
      <summary>Возвращает значение, указывающее, могут ли какие-либо операции привести к потере данных.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.Migrations">
      <summary>Возвращает переносы, примененные во время операции обновления базы данных.</summary>
      <returns>Переносы, примененные во время операции обновления базы данных.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.Migration">
      <summary>Возвращает перенос, который должен быть применен к базе данных.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.Migration.MigrationId">
      <summary>Возвращает идентификатор переноса.</summary>
      <returns>Идентификатор переноса.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Model.UpdateDatabaseOperation.Migration.Operations">
      <summary>Возвращает отдельные операции, применяемые в ходе этого переноса.</summary>
      <returns>Отдельные операции, применяемые в этом переносе.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator">
      <summary>Общий базовый класс для поставщиков, который преобразует зависящие от поставщика операции миграции в команды SQL, определяемые поставщиком базы данных.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.BuildStoreTypeUsage(System.String,System.Data.Entity.Migrations.Model.PropertyModel)">
      <summary>Выполняет сборку использования типа хранилища для указанного <paramref name="storeTypeName" /> с использованием аспектов из указанного <paramref name="propertyModel" />.</summary>
      <returns>Определяемое хранилищем TypeUsage</returns>
      <param name="storeTypeName">Имя типа хранилища.</param>
      <param name="propertyModel">Целевое свойство.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.Generate(System.Collections.Generic.IEnumerable{System.Data.Entity.Migrations.Model.MigrationOperation},System.String)">
      <summary>Преобразует набор операций миграции в определяемые поставщиком базы данных команды SQL.</summary>
      <returns>Список инструкций SQL, выполняемых в рамках операции миграции.</returns>
      <param name="migrationOperations">Операции для преобразования.</param>
      <param name="providerManifestToken">Токен, представляющий версию целевой базы данных.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.GenerateProcedureBody(System.Collections.Generic.ICollection{System.Data.Entity.Core.Common.CommandTrees.DbModificationCommandTree},System.String,System.String)">
      <summary>Создает текст инструкции SQL для хранимой процедуры.</summary>
      <returns>Инструкция SQL для хранимой процедуры.</returns>
      <param name="commandTrees">Деревья команд, представляющие команды для операции вставки, обновления и удаления.</param>
      <param name="rowsAffectedParameter">Строки затронули имя параметра.</param>
      <param name="providerManifestToken">Токен манифеста поставщика.</param>
    </member>
    <member name="P:System.Data.Entity.Migrations.Sql.MigrationSqlGenerator.ProviderManifest">
      <summary>Возвращает или задает манифест поставщика.</summary>
      <returns>Манифест поставщика.</returns>
    </member>
    <member name="T:System.Data.Entity.Migrations.Sql.MigrationStatement">
      <summary>Представляет операцию миграции, преобразованную в инструкцию SQL.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Sql.MigrationStatement.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Migrations.Sql.MigrationStatement" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Sql.MigrationStatement.BatchTerminator">
      <summary>Возвращает или задает признак конца пакета для поставщика базы данных.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
      <returns>Признак конца пакета для поставщика базы данных.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Sql.MigrationStatement.Sql">
      <summary>Возвращает или задает SQL, который должен быть выполнен в рамках выполнения операции миграции.Интерфейсы Migrations API платформы Entity Framework не предназначены для доступа к входным данным от недоверенных источников (например, от конечного пользователя приложения).Если входные данные получены от таких источников, их следует проверить перед передачей этим API для защиты от атак путем внедрения кода SQL и т. д.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Sql.MigrationStatement.SuppressTransaction">
      <summary>Возвращает или задает значение, указывающее, следует ли выполнять эту инструкцию за пределами области транзакции, которая используется для того, чтобы процесс миграции был транзакционным.Если задано значение true, откат этой операции в случае сбоя процесса выполнен не будет.</summary>
    </member>
    <member name="T:System.Data.Entity.Migrations.Utilities.IndentedTextWriter">
      <summary>Аналогично <see cref="T:System.CodeDom.Compiler.IndentedTextWriter" />, но работает с частичным уровнем доверия и добавляет явное кэширование созданной строки отступа и распознает строку, содержащую только \r\n или \n, в качестве строки для записи для обеспечения правильного отступа следующей строки.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.#ctor(System.IO.TextWriter)">
      <summary>Инициализирует новый экземпляр класса IndentedTextWriter, используя указанный модуль записи текста и строку табуляции по умолчанию.Обратите внимание, что модуль записи, переданный этому конструктору, должен использовать <see cref="T:System.Globalization.CultureInfo" />, указанную свойством <see cref="F:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Culture" />.</summary>
      <param name="writer">Объект <see cref="T:System.IO.TextWriter" />, используемый для вывода данных.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.#ctor(System.IO.TextWriter,System.String)">
      <summary>Инициализирует новый экземпляр класса IndentedTextWriter, используя указанный модуль записи текста и строку табуляции.Обратите внимание, что модуль записи, переданный этому конструктору, должен использовать <see cref="T:System.Globalization.CultureInfo" />, указанную свойством <see cref="F:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Culture" />.</summary>
      <param name="writer">Объект <see cref="T:System.IO.TextWriter" />, используемый для вывода данных.</param>
      <param name="tabString">Строка табуляции, используемая для отступа.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Close">
      <summary>Закрывает документ, в который производилась запись.</summary>
    </member>
    <member name="F:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Culture">
      <summary>Указывает язык и региональные параметры, используемые в базовом объекте TextWriter.Статическое свойство доступно только для чтения.Обратите внимание, что все модули записи, переданные одному из конструкторов <see cref="T:System.Data.Entity.Migrations.Utilities.IndentedTextWriter" />, должен использовать один и тот же язык и региональные параметры.Язык и региональные параметры — это <see cref="P:System.Globalization.CultureInfo.InvariantCulture" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.CurrentIndentation">
      <summary>Выполняет сборку строки, представляющую текущий уровень отступа для новой строки.</summary>
      <returns>Пустая строка или строка, содержащая уровень INDENT указанной строки табуляции.</returns>
    </member>
    <member name="F:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.DefaultTabString">
      <summary>Указывает строку табуляции по умолчанию.Это поле является константой.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Encoding">
      <summary>Возвращает кодирование, которое использует модуль записи текста.</summary>
      <returns>Объект <see cref="T:System.Text.Encoding" />, который задает кодирование, которое будет использовано модулем записи текста.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Flush">
      <summary>Сбрасывает поток записи на диск.</summary>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Indent">
      <summary>Возвращает или задает количество пробелов для отступа.</summary>
      <returns>Количество пробелов для отступа.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.InnerWriter">
      <summary>Возвращает используемый <see cref="T:System.IO.TextWriter" />.</summary>
      <returns>Используемый модуль записи <see cref="T:System.IO.TextWriter" />.</returns>
    </member>
    <member name="P:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.NewLine">
      <summary>Возвращает или задает используемый символ новой строки.</summary>
      <returns>Знак новой строки, который будет использован.</returns>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.OutputTabs">
      <summary>Выводит строку табуляции один раз для каждого уровня отступа в соответствии со свойством <see cref="P:System.CodeDom.Compiler.IndentedTextWriter.Indent" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Boolean)">
      <summary>Записывает текстовое представление значения типа Boolean в текстовый поток.</summary>
      <param name="value">Записываемое значение типа Boolean.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char)">
      <summary>Записывает символ в текстовый поток.</summary>
      <param name="value">Символ, записываемый в поток.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char[])">
      <summary>Записывает массив символов в текстовый поток.</summary>
      <param name="buffer">Записываемый массив символов.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Char[],System.Int32,System.Int32)">
      <summary>Записывает подмассив символов в текстовый поток.</summary>
      <param name="buffer">Массив символов, из которого записываются данные.</param>
      <param name="index">Начальный индекс в буфере.</param>
      <param name="count">Число символов для записи.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Double)">
      <summary>Записывает текстовое представление значения типа Double в текстовый поток.</summary>
      <param name="value">Записываемое значение типа Double.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Int32)">
      <summary>Записывает текстовое представление целочисленного типа в текстовый поток.</summary>
      <param name="value">Записываемое целочисленное значение.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Int64)">
      <summary>Записывает текстовое представление целого числа размером 8 байт в текстовый поток.</summary>
      <param name="value">Записываемое целочисленное значение размером 8 байт.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Object)">
      <summary>Записывает текстовое представление объекта в текстовый поток.</summary>
      <param name="value">Записываемый объект.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.Single)">
      <summary>Записывает текстовое представление значения типа Single в текстовый поток.</summary>
      <param name="value">Записываемое значение типа Single.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String)">
      <summary>Записывает указанную строку в текстовый поток.</summary>
      <param name="value">Записываемая строка.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object)">
      <summary>Записывает отформатированную строку с использованием указанной семантики.</summary>
      <param name="format">Отформатированная строка.</param>
      <param name="arg0">Объект, записываемый в отформатированную строку.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object,System.Object)">
      <summary>Записывает отформатированную строку с использованием указанной семантики.</summary>
      <param name="format">Используемая отформатированная строка.</param>
      <param name="arg0">Первый объект, записываемый в отформатированную строку.</param>
      <param name="arg1">Второй объект, записываемый в отформатированную строку.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.Write(System.String,System.Object[])">
      <summary>Записывает отформатированную строку с использованием указанной семантики.</summary>
      <param name="format">Используемая отформатированная строка.</param>
      <param name="arg">Массив аргументов для вывода.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine">
      <summary>Записывает признак конца строки.</summary>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Boolean)">
      <summary>Записывает в текстовый поток текстовое представление значения типа Boolean, за которым следует признак конца строки.</summary>
      <param name="value">Записываемое значение типа Boolean.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char)">
      <summary>Записывает в текстовый поток символ, за которым следует признак конца строки.</summary>
      <param name="value">Символ, записываемый в поток.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char[])">
      <summary>Записывает в текстовый поток массив символов, за которым следует признак конца строки.</summary>
      <param name="buffer">Записываемый массив символов.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Char[],System.Int32,System.Int32)">
      <summary>Записывает в текстовый поток подмассив символов, за которым следует признак конца строки.</summary>
      <param name="buffer">Массив символов, из которого записываются данные.</param>
      <param name="index">Начальный индекс в буфере.</param>
      <param name="count">Число символов для записи.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Double)">
      <summary>Записывает в текстовый поток текстовое представление значения типа Double, за которым следует признак конца строки.</summary>
      <param name="value">Записываемое значение типа Double.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Int32)">
      <summary>Записывает в текстовый поток текстовое представление целого числа, за которым следует признак конца строки.</summary>
      <param name="value">Записываемое целочисленное значение.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Int64)">
      <summary>Записывает в текстовый поток текстовое представление целого числа размером 8 байт, за которым следует признак конца строки.</summary>
      <param name="value">Записываемое целочисленное значение размером 8 байт.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Object)">
      <summary>Записывает в текстовый поток текстовое представление объекта, за которым следует признак конца строки.</summary>
      <param name="value">Записываемый объект.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.Single)">
      <summary>Записывает в текстовый поток текстовое представление значения типа Single, за которым следует признак конца строки.</summary>
      <param name="value">Записываемое значение типа Single.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String)">
      <summary>Записывает в текстовый поток указанную строку, за которой следует признак конца строки.</summary>
      <param name="value">Записываемая строка.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object)">
      <summary>Выводит отформатированную строку, за которой следует признак конца строки, используя заданную семантику.</summary>
      <param name="format">Отформатированная строка.</param>
      <param name="arg0">Объект, записываемый в отформатированную строку.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object,System.Object)">
      <summary>Выводит отформатированную строку, за которой следует признак конца строки, используя заданную семантику.</summary>
      <param name="format">Используемая отформатированная строка.</param>
      <param name="arg0">Первый объект, записываемый в отформатированную строку.</param>
      <param name="arg1">Второй объект, записываемый в отформатированную строку.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.String,System.Object[])">
      <summary>Выводит отформатированную строку, за которой следует признак конца строки, используя заданную семантику.</summary>
      <param name="format">Используемая отформатированная строка.</param>
      <param name="arg">Массив аргументов для вывода.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLine(System.UInt32)">
      <summary>Записывает в текстовый поток текстовое представление значения типа UInt32, за которым следует признак конца строки.</summary>
      <param name="value">Выводимое значение типа UInt32.</param>
    </member>
    <member name="M:System.Data.Entity.Migrations.Utilities.IndentedTextWriter.WriteLineNoTabs(System.String)">
      <summary>Записывает указанное строковое значение в строку без табуляций.</summary>
      <param name="value">Записываемая строка.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1">
      <summary>Разрешает выполнить настройку для сложного типа в модели.Объект ComplexTypeConfiguration можно получить через метод ComplexType класса <see cref="T:System.Data.Entity.DbModelBuilder" />, либо пользовательский тип, производный от ComplexTypeConfiguration, может быть зарегистрирован через свойство Configurations класса <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
      <typeparam name="TComplexType">Настраиваемый сложный тип.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.#ctor">
      <summary>Инициализирует новый экземпляр ComplexTypeConfiguration</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту.</summary>
      <returns>Если объекты равны, возвращает значение true. В противном случае — значение false.</returns>
      <param name="obj">Объект, который требуется сравнить с указанным объектом.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа.</summary>
      <returns>Хэш-функция для определенного типа.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.GetType">
      <summary>Возвращает тип текущего экземпляра.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.Ignore``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Исключает свойство из модели, в результате чего оно не будет сопоставляться с базой данных.</summary>
      <returns>Тот же экземпляр класса ComplexTypeConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство, которое нужно настроить.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="TProperty">Тип исключаемого свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration`1.ToString">
      <summary>Возвращает строку, представляющую текущий объект.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1">
      <summary>Разрешает выполнить настройку для типа сущности в модели.Объект EntityTypeConfiguration может быть получен через метод Entity класса <see cref="T:System.Data.Entity.DbModelBuilder" />, либо пользовательский тип, производный от EntityTypeConfiguration, может быть зарегистрирован через свойство Configurations класса <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
      <typeparam name="TEntityType">Настраиваемый тип сущности.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.#ctor">
      <summary>Инициализирует новый экземпляр EntityTypeConfiguration</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Equals(System.Object)">
      <summary>Возвращает значение, указывающее, равна ли указанная модель конфигурации текущей модели конфигурации.</summary>
      <returns>Значение true, если указанная модель конфигурации равна текущей модели конфигурации; в противном случае — значение false.</returns>
      <param name="obj">Модель, сравниваемая с текущим объектом.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.GetHashCode">
      <summary>Возвращает хэш-функцию для указанной модели конфигурации.</summary>
      <returns>Хэш-функция для указанного построителя модели.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.GetType">
      <summary>Возвращает тип текущей конфигурации модели.</summary>
      <returns>Тип текущей конфигурации модели.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasEntitySetName(System.String)">
      <summary>Настраивает имя набора сущностей, используемого для этого типа сущности.Имя набора сущностей можно настраивать только для базового типа в каждом наборе.</summary>
      <returns>Тот же экземпляр класса EntityTypeConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="entitySetName">Имя набора сущностей.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Настраивает свойства первичного ключа для этого типа сущности.</summary>
      <returns>Тот же экземпляр класса EntityTypeConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="keyExpression">Лямбда-выражение, представляющее свойство, которое должно использоваться в качестве первичного ключа.C#: t =&amp;gt; t.Id VB.Net: Function(t) t.Id Если первичный ключ состоит из нескольких свойств, укажите анонимный тип, включающий в себя эти свойства.C#: t =&amp;gt; new { t.Id1, t.Id2 } VB.Net: Function(t) New With { t.Id1, t.Id2 }</param>
      <typeparam name="TKey">Тип ключа.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasMany``1(System.Linq.Expressions.Expression{System.Func{`0,System.Collections.Generic.ICollection{``0}}})">
      <summary>Настраивает множественную связь для этого типа сущности.</summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
      <param name="navigationPropertyExpression">Лямбда-выражение, представляющее свойство навигации для этой связи.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="TTargetEntity">Тип сущности на другом элементе назначений связи.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasOptional``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Настраивает дополнительную связь этого типа сущности.Экземпляры этого типа сущности смогут сохраняться в базе данных без указания этой связи.Внешний ключ в базе данных допускает значения NULL.</summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
      <param name="navigationPropertyExpression">Лямбда-выражение, представляющее свойство навигации для этой связи.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="TTargetEntity">Тип сущности на другом элементе назначений связи.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasRequired``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Настраивает требуемое отношение этого типа сущности.Экземпляры этого типа сущности не смогут сохраняться в базе данных без указания этой связи.Внешний ключ в базе данных не допускает значения NULL.</summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
      <param name="navigationPropertyExpression">Лямбда-выражение, представляющее свойство навигации для этой связи.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="TTargetEntity">Тип сущности на другом элементе назначений связи.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.HasTableAnnotation(System.String,System.Object)">
      <summary>Задает заметку в модели для таблицы, с которой сопоставлена данная сущность.Значение заметки можно впоследствии использовать при обработке таблицы, например при создании миграций.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="name">Имя заметки, которое должно быть допустимым идентификатором C#/EDM.</param>
      <param name="value">Значение заметки, которое может быть строкой или другим типом, который может быть сериализован с помощью <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /></param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Ignore``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Исключает свойство из модели, в результате чего оно не будет сопоставляться с базой данных.</summary>
      <returns>Тот же экземпляр класса EntityTypeConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство, которое нужно настроить.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="TProperty">Тип исключаемого свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Map``1(System.Action{System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration{``0}})">
      <summary>Позволяет осуществить дополнительную настройку, связанную с сопоставлением производного типа сущности со схемой базы данных.Вызовы Map аддитивны, последующие вызовы не переопределяют настройку, уже выполненную с помощью Map.</summary>
      <returns>Тот же экземпляр класса EntityTypeConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="derivedTypeMapConfigurationAction">Действие, которое выполняет настройку класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" />.</param>
      <typeparam name="TDerived">Производный тип сущности, который необходимо настроить.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration{`0}})">
      <summary>Позволяет осуществить дополнительную настройку, связанную с сопоставлением этого типа сущности со схемой базы данных.По умолчанию любая настройка будет применена к любому типу, производному от этого типа сущности.Производные типы можно настраивать с помощью специальной перегрузки метода Map, настраивающего производный тип, либо с помощью метода EntityTypeConfiguration данного производного типа.Свойства сущности могут разбиваться по разным таблицам с помощью нескольких вызовов метода Map.Вызовы Map аддитивны, последующие вызовы не переопределяют настройку, уже выполненную с помощью Map.</summary>
      <returns>Тот же экземпляр класса EntityTypeConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="entityMappingConfigurationAction">Действие, которое выполняет настройку класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" />.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.MapToStoredProcedures">
      <summary>Настраивает этот тип для использования хранимых процедур для вставки, обновления и удаления данных.Будут использованы соглашения по умолчанию для имен процедуры и параметров.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.MapToStoredProcedures(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration{`0}})">
      <summary>Настраивает этот тип для использования хранимых процедур для вставки, обновления и удаления данных.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="modificationStoredProcedureMappingConfigurationAction">Конфигурация, которая переопределит соглашения по умолчанию для имен процедур и параметров.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToString">
      <summary>Возвращает строковое представление конфигурации модели.</summary>
      <returns>Строковое представление построителя модели.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToTable(System.String)">
      <summary>Настраивает имя таблицы, с которой сопоставлен этот тип сущности.</summary>
      <returns>Тот же экземпляр класса EntityTypeConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="tableName">Имя таблицы.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration`1.ToTable(System.String,System.String)">
      <summary>Настраивает имя таблицы, с которой сопоставлен этот тип сущности.</summary>
      <returns>Тот же экземпляр класса EntityTypeConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="tableName">Имя таблицы.</param>
      <param name="schemaName">Имя схемы базы данных для таблицы.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.ModelValidationException">
      <summary>Исключение, которое вызывается <see cref="T:System.Data.Entity.DbModelBuilder" /> во время создания модели, если создана недопустимая модель.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor">
      <summary>Инициализирует новый экземпляр ModelValidationException</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Инициализирует новый экземпляр сведений сериализации класса <see cref="T:System.Data.Entity.ModelConfiguration.ModelValidationException" /> и потокового контекста.</summary>
      <param name="info">Данные сериализации.</param>
      <param name="context">Контекст потоковой передачи.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр ModelValidationException</summary>
      <param name="message">Сообщение об исключении.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.ModelValidationException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр ModelValidationException</summary>
      <param name="message">Сообщение об исключении.</param>
      <param name="innerException">Внутреннее исключение.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration">
      <summary>Базовый класс для выполнения настройки отношения.Функции настройки доступны при использовании Code First Fluent API, см. <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.AssociationMappingConfiguration" />.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration`1">
      <summary>Позволяет выполнить настройку хранимой процедуры, используемой для изменения связи.</summary>
      <typeparam name="TEntityType">Тип сущности, для которого настраивается связь.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>Настраивает параметр для этой хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство для настройки параметра.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Имя параметра.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>Настраивает параметр для этой хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство для настройки параметра.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Имя параметра.</param>
      <typeparam name="TProperty">Тип свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>Настраивает параметр для этой хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство для настройки параметра.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Имя параметра.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>Настраивает параметр для этой хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство для настройки параметра.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Имя параметра.</param>
      <typeparam name="TProperty">Тип свойства.</typeparam>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration">
      <summary>Используется для настройки свойства <see cref="T:System.byte[]" /> типа сущности или сложного типа.Функции настройки доступны при использовании Code First Fluent API, см. <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>Задает заметку в модели для столбца базы данных, используемого для хранения этого свойства.Значение заметки можно впоследствии использовать при обработке столбца, например, при создании миграций.</summary>
      <returns>Тот же экземпляр класса BinaryPropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="name">Имя заметки, которое должно быть допустимым идентификатором C#/EDM.</param>
      <param name="value">Значение заметки, которое может быть строкой или другим типом, который может быть сериализован с помощью <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /></param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnName(System.String)">
      <summary>Настраивает имя столбца базы данных, используемого для хранения этого свойства.</summary>
      <returns>Тот же экземпляр класса BinaryPropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="columnName">Имя столбца.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>Настраивает порядковый номер столбца базы данных, используемого для хранения этого свойства.Этот метод также используется для указания упорядочения ключа, если тип сущности имеет составной ключ.</summary>
      <returns>Тот же экземпляр класса BinaryPropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="columnOrder">Порядковый номер, под которым этот столбец должен появиться в таблице базы данных.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasColumnType(System.String)">
      <summary>Настраивает тип данных столбца базы данных, используемого для хранения этого свойства.</summary>
      <returns>Тот же экземпляр класса BinaryPropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="columnType">Имя типа данных, зависящего от поставщика баз данных.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>Указывает, как база данных будет формировать значения этого свойства.</summary>
      <returns>Тот же экземпляр класса BinaryPropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="databaseGeneratedOption">Шаблон для формирования значений этого свойства в базе данных.Установка значения null приведет к использованию стандартного параметра, который может быть равен None, Identity или Computed в зависимости от типа свойства и его семантики в модели (например,первичные ключи обрабатываются по-другому) и от используемого набора правил.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>Указывает, что свойство будет иметь заданную максимальную длину.</summary>
      <returns>Тот же экземпляр класса BinaryPropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="value">Максимальная длина для данного свойства.Установка в значение null удалит любое ограничение максимальной длины для этого свойства.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsConcurrencyToken">
      <summary>Настраивает использование свойства в качестве маркера оптимистичного параллелизма.</summary>
      <returns>Тот же экземпляр класса BinaryPropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary>Указывает, должно ли свойство использоваться в качестве маркера оптимистичного параллелизма.</summary>
      <returns>Тот же экземпляр класса BinaryPropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="concurrencyToken">Значение, указывающее, является ли свойство маркером параллелизма.Установка «NULL» удалит аспект маркера параллелизма из этого свойства.Указание значения NULL приведет к такому же поведению среды выполнения, что и указание значения false.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsFixedLength">
      <summary>Указывает, что свойство будет фиксированной длины.Используйте HasMaxLength для установки фиксированной длины для этого свойства.</summary>
      <returns>Тот же экземпляр класса BinaryPropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsMaxLength">
      <summary>Настраивает для свойства разрешение использовать максимальную длину, поддерживаемую поставщиком баз данных.</summary>
      <returns>Тот же экземпляр класса BinaryPropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsOptional">
      <summary>Делает свойство необязательным.Столбец базы данных, используемый для хранения этого свойства, будет допускать значения NULL.Свойства <see cref="T:System.byte[]" /> по умолчанию являются необязательными.</summary>
      <returns>Тот же экземпляр класса BinaryPropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsRequired">
      <summary>Делает свойство обязательным.Столбец базы данных, используемый для хранения этого свойства, не будет допускать значения NULL.</summary>
      <returns>Тот же экземпляр класса BinaryPropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsRowVersion">
      <summary>Настраивает свойство, чтобы отображалась версия строки в базе данных.Реальный тип данных будет разным в зависимости от используемого поставщика баз данных.Установка отображения версии строки для этого свойства автоматически сделает его маркером оптимистичного параллелизма.</summary>
      <returns>Тот же экземпляр класса BinaryPropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.BinaryPropertyConfiguration.IsVariableLength">
      <summary>Настраивает свойство на переменную длину.Свойства <see cref="T:System.byte[]" /> по умолчанию имеют переменную длину.</summary>
      <returns>Тот же экземпляр класса BinaryPropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration">
      <summary>Настраивает связь, которая сможет поддерживать функции каскадного удаления.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту.</summary>
      <returns>Если объекты равны, возвращает значение true. В противном случае — значение false.</returns>
      <param name="obj">Объект, который требуется сравнить с текущим объектом.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа.</summary>
      <returns>Хэш-код для текущего типа.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.GetType">
      <summary>Возвращает объект <see cref="T:System.Type" /> для текущего экземпляра.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.ToString">
      <summary>Возвращает строку, представляющую текущий объект.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.WillCascadeOnDelete">
      <summary>Настраивает для связи каскадное удаление.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.CascadableNavigationPropertyConfiguration.WillCascadeOnDelete(System.Boolean)">
      <summary>Настраивает для связи наличие или отсутствие каскадного удаления.</summary>
      <param name="value">Значение, указывающее, включено ли каскадное удаление.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar">
      <summary>Разрешает производным классам конфигурации для типов сущностей и сложных типов регистрироваться с помощью <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Add``1(System.Data.Entity.ModelConfiguration.ComplexTypeConfiguration{``0})">
      <summary>Добавляет <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.ComplexTypeConfiguration" /> к <see cref="T:System.Data.Entity.DbModelBuilder" />.Для каждого типа в модели можно добавить только один класс <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.ComplexTypeConfiguration" />.</summary>
      <returns>Тот же экземпляр класса ConfigurationRegistrar, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="complexTypeConfiguration">Добавляемая настройка сложного типа</param>
      <typeparam name="TComplexType">Настраиваемый сложный тип.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Add``1(System.Data.Entity.ModelConfiguration.EntityTypeConfiguration{``0})">
      <summary>Добавляет <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.EntityTypeConfiguration" /> к <see cref="T:System.Data.Entity.DbModelBuilder" />.Для каждого типа в модели можно добавить только один класс <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.EntityTypeConfiguration" />.</summary>
      <returns>Тот же экземпляр класса ConfigurationRegistrar, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="entityTypeConfiguration">Добавляемая настройка типа сущности.</param>
      <typeparam name="TEntityType">Настраиваемый тип сущности.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.AddFromAssembly(System.Reflection.Assembly)">
      <summary>Обнаруживает в данной сборке любые типы, производные от <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.EntityTypeConfiguration" /> или <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.Types.ComplexTypeConfiguration" />, и добавляет экземпляр каждого обнаруженного типа в этот регистратор.</summary>
      <returns>Тот же экземпляр класса ConfigurationRegistrar, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="assembly">Сборка, содержащая конфигурации модели для добавления.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту.</summary>
      <returns>Значение true, если заданный объект равен текущему объекту. В противном случае — значение false.</returns>
      <param name="obj">Объект, который требуется сравнить с текущим объектом.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа.</summary>
      <returns>Хэш-код для текущего объекта.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.GetType">
      <summary>Возвращает объект <see cref="T:System.Type" /> для текущего экземпляра.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConfigurationRegistrar.ToString">
      <summary>Возвращает строку, представляющую текущий объект.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration">
      <summary>Создает соглашение, позволяющее использовать хранимые процедуры для удаления сущностей в базе данных.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.Equals(System.Object)">
      <summary>Указывает, равен ли данный экземпляр конкретному объекту.</summary>
      <returns>Значение true, если экземпляр равен указанному объекту; в противном случае — значение false.</returns>
      <param name="obj">Сравниваемый объект.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.GetHashCode">
      <summary>Получает хэш-код, связанный с этим экземпляром.</summary>
      <returns>Хэш-код, связанный с этим экземпляром.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.GetType">
      <summary>Получает базовый тип этого экземпляра.</summary>
      <returns>Базовый тип этого экземпляра.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.HasName(System.String)">
      <summary>Настраивает имя хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="procedureName">Имя хранимой процедуры.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.HasName(System.String,System.String)">
      <summary>Настраивает имя хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="procedureName">Имя хранимой процедуры.</param>
      <param name="schemaName">Имя схемы.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.Parameter(System.Reflection.PropertyInfo,System.String)">
      <summary>Настраивает параметр для этой хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyInfo">Свойство для настройки параметра.</param>
      <param name="parameterName">Имя параметра.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.Parameter(System.String,System.String)">
      <summary>Настраивает параметр для этой хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyName">Имя свойства для настройки параметра.</param>
      <param name="parameterName">Имя параметра.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.RowsAffectedParameter(System.String)">
      <summary>Настраивает выходной параметр, возвращающий строки, обработанные этой хранимой процедурой.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="parameterName">Имя параметра.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration.ToString">
      <summary>Возвращает строковое представление этого экземпляра.</summary>
      <returns>Строковое представление этого экземпляра.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration">
      <summary>Создает соглашение, позволяющее использовать хранимые процедуры для вставки сущностей в базе данных.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему элементу.</summary>
      <returns>Значение true, если заданный объект равен текущему экземпляру. В противном случае — значение false.</returns>
      <param name="obj">Сравниваемый объект.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.GetHashCode">
      <summary>Получает хэш-код текущего экземпляра.</summary>
      <returns>Хэш-код для текущего экземпляра.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.GetType">
      <summary>Получает тип, связанный с конфигурацией.</summary>
      <returns>Тип, связанный с конфигурацией.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.HasName(System.String)">
      <summary>Настраивает имя хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="procedureName">Имя хранимой процедуры.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.HasName(System.String,System.String)">
      <summary>Настраивает имя хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="procedureName">Имя хранимой процедуры.</param>
      <param name="schemaName">Имя схемы.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.Parameter(System.Reflection.PropertyInfo,System.String)">
      <summary>Настраивает параметр для этой хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyInfo">Свойство для настройки параметра.</param>
      <param name="parameterName">Имя параметра.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.Parameter(System.String,System.String)">
      <summary>Настраивает параметр для этой хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyName">Имя свойства для настройки параметра.</param>
      <param name="parameterName">Имя параметра.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.Result(System.Reflection.PropertyInfo,System.String)">
      <summary>Настраивает столбец результатов этой хранимой процедуры для сопоставления со свойством.Используется для столбцов, сформированных базой данных.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyInfo">Свойство для настройки результата.</param>
      <param name="columnName">Имя столбца результатов.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.Result(System.String,System.String)">
      <summary>Настраивает столбец результатов этой хранимой процедуры для сопоставления со свойством.Используется для столбцов, сформированных базой данных.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyName">Имя свойства для настройки результата.</param>
      <param name="columnName">Имя столбца результатов.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration.ToString">
      <summary>Возвращает строковое представление этого экземпляра.</summary>
      <returns>Строковое представление данного экземпляра.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProcedureConfiguration">
      <summary>Представляет соглашение, позволяющее использовать хранимые процедуры для изменения сущностей в базе данных.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration">
      <summary>Создает соглашение, позволяющее использовать хранимые процедуры для изменения сущностей в базе данных.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.Delete(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionDeleteModificationStoredProcedureConfiguration})">
      <summary>Настраивает хранимые процедуры, используемые для удаления сущностей.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="modificationStoredProcedureConfigurationAction">Лямбда-выражение, которое выполняет настройку для хранимой процедуры.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.Equals(System.Object)">
      <summary>Указывает, равна ли эта конфигурация конкретному объекту.</summary>
      <returns>Значение true, если конфигурация равна указанному объекту; в противном случае — значение false.</returns>
      <param name="obj">Сравниваемый объект.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.GetHashCode">
      <summary>Получает хэш-код, связанный с этой конфигурацией.</summary>
      <returns>Хэш-код, связанный с этой конфигурацией.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.GetType">
      <summary>Возвращает объект <see cref="T:System.Type" /> для текущего экземпляра.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.Insert(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionInsertModificationStoredProcedureConfiguration})">
      <summary>Настраивает хранимые процедуры, используемые для вставки сущностей.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="modificationStoredProcedureConfigurationAction">Лямбда-выражение, которое выполняет настройку для хранимой процедуры.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.ToString">
      <summary>Возвращает строковое представление класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration" />.</summary>
      <returns>Строковое представление класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration" />.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration.Update(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration})">
      <summary>Настраивает хранимые процедуры, используемые для обновления сущностей.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="modificationStoredProcedureConfigurationAction">Лямбда-выражение, которое выполняет настройку для хранимой процедуры.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration">
      <summary>Представляет свойство-примитив для типа сущности или сложного типа.</summary>
    </member>
    <member name="P:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.ClrPropertyInfo">
      <summary>Возвращает <see cref="T:System.Reflection.PropertyInfo" /> для этого свойства.</summary>
      <returns>
        <see cref="T:System.Reflection.PropertyInfo" /> для этого свойства.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.Equals(System.Object)">
      <summary>Указывает, равен ли данный экземпляр другому объекту.</summary>
      <returns>Значение true, если экземпляр равен другому объекту; в противном случае — значение false.</returns>
      <param name="obj">Сравниваемый объект.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.GetHashCode">
      <summary>Получает хэш-код этого экземпляра.</summary>
      <returns>Хэш-код данного экземпляра.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.GetType">
      <summary>Возвращает объект <see cref="T:System.Type" /> для текущего экземпляра.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>Задает заметку в модели для столбца базы данных, используемого для хранения этого свойства.Значение заметки можно впоследствии использовать при обработке столбца, например, при создании миграций.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="name">Имя заметки, которое должно быть допустимым идентификатором C#/EDM.</param>
      <param name="value">Значение заметки, которое может быть строкой или другим типом, который может быть сериализован с помощью <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /></param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasColumnName(System.String)">
      <summary>Настраивает имя столбца базы данных, используемого для хранения этого свойства.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="columnName">Имя столбца.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasColumnOrder(System.Int32)">
      <summary>Настраивает порядковый номер столбца базы данных, используемого для хранения этого свойства.Этот метод также используется для указания упорядочения ключа, если тип сущности имеет составной ключ.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="columnOrder">Порядковый номер, под которым этот столбец должен появиться в таблице базы данных.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasColumnType(System.String)">
      <summary>Настраивает тип данных столбца базы данных, используемого для хранения этого свойства.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="columnType">Имя типа данных, зависящего от поставщика баз данных.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption)">
      <summary>Указывает, как база данных будет формировать значения этого свойства.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="databaseGeneratedOption">Шаблон для формирования значений этого свойства в базе данных.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasMaxLength(System.Int32)">
      <summary>Указывает, что свойство будет иметь заданную максимальную длину.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="maxLength">Максимальная длина для данного свойства.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasParameterName(System.String)">
      <summary>Настраивает имя параметра, используемого в хранимых процедурах для этого свойства.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="parameterName">Имя параметра.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasPrecision(System.Byte)">
      <summary>Настраивает точность свойства <see cref="T:System.DateTime" />.Если поставщик баз данных не поддерживает точность для типа данных этого столбца, это значение не учитывается.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="value">Точность свойства.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.HasPrecision(System.Byte,System.Byte)">
      <summary>Настраивает точность и масштаб свойства <see cref="T:System.Decimal" />.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="precision">Точность свойства.</param>
      <param name="scale">Масштаб значения свойства.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsConcurrencyToken">
      <summary>Настраивает использование свойства в качестве маркера оптимистичного параллелизма.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsConcurrencyToken(System.Boolean)">
      <summary>Указывает, должно ли свойство использоваться в качестве маркера оптимистичного параллелизма.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="concurrencyToken">Значение, указывающее, является ли свойство маркером параллелизма.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsFixedLength">
      <summary>Указывает, что свойство будет фиксированной длины.Используйте HasMaxLength для установки фиксированной длины для этого свойства.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsKey">
      <summary>Настраивает это свойство как часть первичного ключа для этого типа сущности.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsMaxLength">
      <summary>Настраивает для свойства разрешение использовать максимальную длину, поддерживаемую поставщиком баз данных.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsOptional">
      <summary>Делает свойство необязательным.Столбец базы данных, используемый для хранения этого свойства, будет допускать значения NULL.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsRequired">
      <summary>Делает свойство обязательным.Столбец базы данных, используемый для хранения этого свойства, не будет допускать значения NULL.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsRowVersion">
      <summary>Настраивает свойство, чтобы отображалась версия строки в базе данных.Реальный тип данных будет разным в зависимости от используемого поставщика баз данных.Установка отображения версии строки для этого свойства автоматически сделает его маркером оптимистичного параллелизма.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsUnicode">
      <summary>Указывает, что это свойство будет поддерживать содержимое строк в Юникоде.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsUnicode(System.Boolean)">
      <summary>Указывает, будет ли это свойство поддерживать содержимое строк в Юникоде.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="unicode">Значение, указывающее, будет это свойство поддерживать содержимое строк в Юникоде или нет.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.IsVariableLength">
      <summary>Настраивает свойство на переменную длину.По умолчанию свойства имеют переменную длину.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration.ToString">
      <summary>Возвращает строковое представление этого экземпляра.</summary>
      <returns>Строковое представление этого экземпляра.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration">
      <summary>Позволяет настроить соглашения, используемые экземпляром <see cref="T:System.Data.Entity.DbModelBuilder" />.Соглашения по умолчанию находятся в пространстве имен System.Data.Entity.ModelConfiguration.Conventions.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Add``1">
      <summary>Включает соглашение для <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
      <typeparam name="TConvention">Тип соглашения, которое должно быть включено.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Add(System.Data.Entity.ModelConfiguration.Conventions.IConvention[])">
      <summary>Содержит одно или несколько соглашений для <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
      <param name="conventions">Соглашения, которые нужно включить.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.AddAfter``1(System.Data.Entity.ModelConfiguration.Conventions.IConvention)">
      <summary>Включает соглашение для <see cref="T:System.Data.Entity.DbModelBuilder" />.Это соглашение будет выполняться после указанного.</summary>
      <param name="newConvention">Соглашение, которое необходимо включить.</param>
      <typeparam name="TExistingConvention">Тип соглашения, после которого будет выполняться включаемое.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.AddBefore``1(System.Data.Entity.ModelConfiguration.Conventions.IConvention)">
      <summary>Включает соглашение о конфигурации для <see cref="T:System.Data.Entity.DbModelBuilder" />.Это соглашение будет выполняться перед указанным.</summary>
      <param name="newConvention">Соглашение, которое необходимо включить.</param>
      <typeparam name="TExistingConvention">Тип соглашения, перед которым будет выполняться включаемое.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.AddFromAssembly(System.Reflection.Assembly)">
      <summary>Изучите все соглашения в данной сборке и добавьте их в <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
      <param name="assembly">Сборка, которая содержит добавляемые соглашения.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту.</summary>
      <returns>Если объекты равны, возвращает значение true. В противном случае — значение false.</returns>
      <param name="obj">Объект.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа.</summary>
      <returns>Хэш-код для текущего типа.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.GetType">
      <summary>Возвращает объект <see cref="T:System.Type" /> для текущего экземпляра.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Remove``1">
      <summary>Отключает соглашение для <see cref="T:System.Data.Entity.DbModelBuilder" />.Соглашения по умолчанию, доступные для удаления, находятся в пространстве имен System.Data.Entity.ModelConfiguration.Conventions.</summary>
      <typeparam name="TConvention">Тип соглашения, которое должно быть отключено.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.Remove(System.Data.Entity.ModelConfiguration.Conventions.IConvention[])">
      <summary>Отключает одно или несколько соглашений для <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
      <param name="conventions">Соглашения, которые нужно отключить.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionsConfiguration.ToString">
      <summary>Возвращает строку, представляющую текущий объект.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration">
      <summary>Разрешает выполнить настройку для типа сущности в модели.Эта функция конфигурации доступна через облегченные соглашения.</summary>
    </member>
    <member name="P:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.ClrType">
      <summary>Возвращает тип <see cref="T:System.Type" /> этого типа сущности.</summary>
      <returns>Тип <see cref="T:System.Type" /> этого типа сущности.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему элементу.</summary>
      <returns>Значение true, если заданный объект равен текущему экземпляру. В противном случае — значение false.</returns>
      <param name="obj">Сравниваемый объект.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.GetHashCode">
      <summary>Возвращает хэш-код текущего экземпляра.</summary>
      <returns>Хэш-код для текущего экземпляра.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.GetType">
      <summary>Возвращает объект <see cref="T:System.Type" /> для текущего экземпляра.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasEntitySetName(System.String)">
      <summary>Настраивает имя набора сущностей, используемого для этого типа сущности.Имя набора сущностей можно настраивать только для базового типа в каждом наборе.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="entitySetName">Имя набора сущностей.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasKey(System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
      <summary>Настраивает свойства первичного ключа для этого типа сущности.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="keyProperties">Свойства, которые будут использоваться в качестве первичного ключа.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasKey(System.Collections.Generic.IEnumerable{System.String})">
      <summary>Настраивает свойства первичного ключа для этого типа сущности.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="propertyNames">Имена свойств, которые будут использоваться в качестве первичного ключа.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasKey(System.Reflection.PropertyInfo)">
      <summary>Настраивает свойства первичного ключа для этого типа сущности.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="propertyInfo">Свойство, которое будет использоваться в качестве первичного ключа.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasKey(System.String)">
      <summary>Настраивает свойства первичного ключа для этого типа сущности.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="propertyName">Имя свойства, используемого в качестве первичного ключа.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.HasTableAnnotation(System.String,System.Object)">
      <summary>Задает заметку в модели для таблицы, с которой сопоставлена данная сущность.Значение заметки можно впоследствии использовать при обработке таблицы, например при создании миграций.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="name">Имя заметки, которое должно быть допустимым идентификатором C#/EDM.</param>
      <param name="value">Значение заметки, которое может быть строкой или другим типом, который может быть сериализован с помощью <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /></param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Ignore">
      <summary>Исключает этот тип сущности из модели, в результате чего оно не будет сопоставляться с базой данных.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Ignore(System.Reflection.PropertyInfo)">
      <summary>Исключает свойство из модели, в результате чего оно не будет сопоставляться с базой данных.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="propertyInfo">Свойство, которое нужно настроить.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Ignore(System.String)">
      <summary>Исключает свойство из модели, в результате чего оно не будет сопоставляться с базой данных.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="propertyName">Имя настраиваемого свойства.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.IsComplexType">
      <summary>Изменяет этот тип сущности на сложный.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.MapToStoredProcedures">
      <summary>Настраивает этот тип для использования хранимых процедур для вставки, обновления и удаления данных.Будут использованы соглашения по умолчанию для имен процедуры и параметров.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.MapToStoredProcedures(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionModificationStoredProceduresConfiguration})">
      <summary>Настраивает этот тип для использования хранимых процедур для вставки, обновления и удаления данных.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="modificationStoredProceduresConfigurationAction">Конфигурация, которая переопределит соглашения по умолчанию для имен процедур и параметров.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Property(System.Reflection.PropertyInfo)">
      <summary>Настраивает свойство, определенное для этого типа.</summary>
      <returns>Объект настройки, который можно использовать для настройки этого свойства.</returns>
      <param name="propertyInfo">Настраиваемое свойство.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.Property(System.String)">
      <summary>Настраивает свойство, определенное для этого типа.</summary>
      <returns>Объект настройки, который можно использовать для настройки этого свойства.</returns>
      <param name="propertyName">Имя настраиваемого свойства.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.ToString">
      <summary>Возвращает строковое представление этого экземпляра.</summary>
      <returns>Строковое представление данного экземпляра.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.ToTable(System.String)">
      <summary>Настраивает имя таблицы, с которой сопоставлен этот тип сущности.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="tableName">Имя таблицы.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration.ToTable(System.String,System.String)">
      <summary>Настраивает имя таблицы, с которой сопоставлен этот тип сущности.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="tableName">Имя таблицы.</param>
      <param name="schemaName">Имя схемы базы данных для таблицы.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1">
      <summary>Разрешает выполнить настройку для типа сущности в модели.Эта функция конфигурации доступна через облегченные соглашения.</summary>
      <typeparam name="T">Тип, наследуемый типом сущности.</typeparam>
    </member>
    <member name="P:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.ClrType">
      <summary>Возвращает тип <see cref="T:System.Type" /> этого типа сущности.</summary>
      <returns>Тип <see cref="T:System.Type" /> этого типа сущности.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему элементу.</summary>
      <returns>Значение true, если заданный объект равен текущему экземпляру. В противном случае — значение false.</returns>
      <param name="obj">Сравниваемый объект.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.GetHashCode">
      <summary>Получает хэш-код текущего экземпляра.</summary>
      <returns>Хэш-код для текущего экземпляра.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.GetType">
      <summary>Возвращает объект <see cref="T:System.Type" /> для текущего экземпляра.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.HasEntitySetName(System.String)">
      <summary>Настраивает имя набора сущностей, используемого для этого типа сущности.Имя набора сущностей можно настраивать только для базового типа в каждом наборе.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="entitySetName">Имя набора сущностей.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.HasKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Настраивает свойства первичного ключа для этого типа сущности.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="keyExpression">Лямбда-выражение, представляющее свойство, которое должно использоваться в качестве первичного ключа.C#: t =&amp;gt; t.Id VB.Net: Function(t) t.Id Если первичный ключ состоит из нескольких свойств, укажите анонимный тип, включающий в себя эти свойства.C#: t =&amp;gt; new { t.Id1, t.Id2 } VB.Net: Function(t) New With { t.Id1, t.Id2 }</param>
      <typeparam name="TProperty">Тип ключа.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.HasTableAnnotation(System.String,System.Object)">
      <summary>Задает заметку в модели для таблицы, с которой сопоставлена данная сущность.Значение заметки можно впоследствии использовать при обработке таблицы, например при создании миграций.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="name">Имя заметки, которое должно быть допустимым идентификатором C#/EDM.</param>
      <param name="value">Значение заметки, которое может быть строкой или другим типом, который может быть сериализован с помощью <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" />.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.Ignore">
      <summary>Исключает этот тип сущности из модели, в результате чего оно не будет сопоставляться с базой данных.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.Ignore``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Исключает свойство из модели, в результате чего оно не будет сопоставляться с базой данных.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство, которое нужно настроить.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="TProperty">Тип исключаемого свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.IsComplexType">
      <summary>Изменяет этот тип сущности на сложный.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.MapToStoredProcedures">
      <summary>Настраивает этот тип для использования хранимых процедур для вставки, обновления и удаления данных.Будут использованы соглашения по умолчанию для имен процедуры и параметров.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.MapToStoredProcedures(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration{`0}})">
      <summary>Настраивает этот тип для использования хранимых процедур для вставки, обновления и удаления данных.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="modificationStoredProceduresConfigurationAction">Конфигурация, которая переопределит соглашения по умолчанию для имен процедур и параметров.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Настраивает свойство, определенное для этого типа.</summary>
      <returns>Объект настройки, который можно использовать для настройки этого свойства.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство, которое нужно настроить.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="TProperty">Настраиваемый тип свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.ToString">
      <summary>Конвертирует значение текущего экземпляра в эквивалентное строковое представление.</summary>
      <returns>Строковое представление текущего экземпляра.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.ToTable(System.String)">
      <summary>Настраивает имя таблицы, с которой сопоставлен этот тип сущности.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="tableName">Имя таблицы.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1.ToTable(System.String,System.String)">
      <summary>Настраивает имя таблицы, с которой сопоставлен этот тип сущности.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="tableName">Имя таблицы.</param>
      <param name="schemaName">Имя схемы базы данных для таблицы.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration">
      <summary>Создает соглашение, позволяющее использовать хранимые процедуры для обновления сущностей в базе данных.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Equals(System.Object)">
      <summary>Определяет, равен ли данный экземпляр указанному объекту.</summary>
      <returns>Значение true, если экземпляр равен указанному объекту; в противном случае — значение false.</returns>
      <param name="obj">Сравниваемый объект.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.GetHashCode">
      <summary>Возвращает хэш-код текущего экземпляра.</summary>
      <returns>Хэш-код для текущего экземпляра.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.GetType">
      <summary>Возвращает тип, связанный с текущим экземпляром.</summary>
      <returns>Тип, связанный с текущим экземпляром.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.HasName(System.String)">
      <summary>Настраивает имя хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="procedureName">Имя хранимой процедуры.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.HasName(System.String,System.String)">
      <summary>Настраивает имя хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="procedureName">Имя хранимой процедуры.</param>
      <param name="schemaName">Имя схемы.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Parameter(System.Reflection.PropertyInfo,System.String)">
      <summary>Настраивает параметр для этой хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyInfo">Свойство для настройки параметра.</param>
      <param name="parameterName">Имя параметра.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Parameter(System.Reflection.PropertyInfo,System.String,System.String)">
      <summary>Настраивает параметр для этой хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyInfo">Свойство для настройки параметра.</param>
      <param name="currentValueParameterName">Текущее имя параметра значения.</param>
      <param name="originalValueParameterName">Исходное имя параметра значения.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Parameter(System.String,System.String)">
      <summary>Настраивает параметр для этой хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyName">Имя свойства для настройки параметра.</param>
      <param name="parameterName">Имя параметра.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Parameter(System.String,System.String,System.String)">
      <summary>Настраивает параметр для этой хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyName">Имя свойства для настройки параметра.</param>
      <param name="currentValueParameterName">Текущее имя параметра значения.</param>
      <param name="originalValueParameterName">Исходное имя параметра значения.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Result(System.Reflection.PropertyInfo,System.String)">
      <summary>Настраивает столбец результатов этой хранимой процедуры для сопоставления со свойством.Используется для столбцов, сформированных базой данных.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyInfo">Свойство для настройки результата.</param>
      <param name="columnName">Имя столбца результатов.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.Result(System.String,System.String)">
      <summary>Настраивает столбец результатов этой хранимой процедуры для сопоставления со свойством.Используется для столбцов, сформированных базой данных.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyName">Имя свойства для настройки результата.</param>
      <param name="columnName">Имя столбца результатов.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.RowsAffectedParameter(System.String)">
      <summary>Настраивает выходной параметр, возвращающий строки, обработанные этой хранимой процедурой.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="parameterName">Имя параметра.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ConventionUpdateModificationStoredProcedureConfiguration.ToString">
      <summary>Возвращает строковое представление этого экземпляра.</summary>
      <returns>Строковое представление этого экземпляра.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration">
      <summary>Используется для настройки свойства <see cref="T:System.DateTime" /> типа сущности или сложного типа.Функции настройки доступны при использовании Code First Fluent API, см. <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>Задает заметку в модели для столбца базы данных, используемого для хранения этого свойства.Значение заметки можно впоследствии использовать при обработке столбца, например, при создании миграций.</summary>
      <returns>Тот же экземпляр класса DateTimePropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="name">Имя заметки, которое должно быть допустимым идентификатором C#/EDM.</param>
      <param name="value">Значение заметки, которое может быть строкой или другим типом, который может быть сериализован с помощью <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /></param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnName(System.String)">
      <summary>Настраивает имя столбца базы данных, используемого для хранения этого свойства.</summary>
      <returns>Тот же экземпляр класса DateTimePropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="columnName">Имя столбца.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>Настраивает порядковый номер столбца базы данных, используемого для хранения этого свойства.Этот метод также используется для указания упорядочения ключа, если тип сущности имеет составной ключ.</summary>
      <returns>Тот же экземпляр класса DateTimePropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="columnOrder">Порядковый номер, под которым этот столбец должен появиться в таблице базы данных.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasColumnType(System.String)">
      <summary>Настраивает тип данных столбца базы данных, используемого для хранения этого свойства.</summary>
      <returns>Тот же экземпляр класса DateTimePropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="columnType">Имя типа данных, зависящего от поставщика баз данных.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>Указывает, как база данных будет формировать значения этого свойства.</summary>
      <returns>Тот же экземпляр класса DateTimePropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="databaseGeneratedOption">Шаблон для формирования значений этого свойства в базе данных.Установка значения null приведет к использованию стандартного параметра, который может быть равен None, Identity или Computed в зависимости от типа свойства и его семантики в модели (например,первичные ключи обрабатываются по-другому) и от используемого набора правил.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.HasPrecision(System.Byte)">
      <summary>Настраивает точность свойства.Если поставщик баз данных не поддерживает точность для типа данных этого столбца, это значение не учитывается.</summary>
      <returns>Тот же экземпляр класса DateTimePropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="value">Точность свойства.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsConcurrencyToken">
      <summary>Настраивает использование свойства в качестве маркера оптимистичного параллелизма.</summary>
      <returns>Тот же экземпляр класса DateTimePropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary>Указывает, должно ли свойство использоваться в качестве маркера оптимистичного параллелизма.</summary>
      <returns>Тот же экземпляр класса DateTimePropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="concurrencyToken">Значение, указывающее, является ли свойство маркером параллелизма.Установка «NULL» удалит аспект маркера параллелизма из этого свойства.Указание значения NULL приведет к такому же поведению среды выполнения, что и указание значения false.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsOptional">
      <summary>Делает свойство необязательным.Столбец базы данных, используемый для хранения этого свойства, будет допускать значения NULL.</summary>
      <returns>Тот же экземпляр класса DateTimePropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DateTimePropertyConfiguration.IsRequired">
      <summary>Делает свойство обязательным.Столбец базы данных, используемый для хранения этого свойства, не будет допускать значения NULL.Свойства <see cref="T:System.DateTime" /> требуются по умолчанию.</summary>
      <returns>Тот же экземпляр класса DateTimePropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration">
      <summary>Используется для настройки свойства <see cref="T:System.decimal" /> типа сущности или сложного типа.Функции настройки доступны при использовании Code First Fluent API, см. <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>Задает заметку в модели для столбца базы данных, используемого для хранения этого свойства.Значение заметки можно впоследствии использовать при обработке столбца, например, при создании миграций.</summary>
      <returns>Тот же экземпляр класса DecimalPropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="name">Имя заметки, которое должно быть допустимым идентификатором C#/EDM.</param>
      <param name="value">Значение заметки, которое может быть строкой или другим типом, который может быть сериализован с помощью <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /></param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnName(System.String)">
      <summary>Настраивает имя столбца базы данных, используемого для хранения этого свойства.</summary>
      <returns>Тот же экземпляр класса DecimalPropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="columnName">Имя столбца.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>Настраивает порядковый номер столбца базы данных, используемого для хранения этого свойства.Этот метод также используется для указания упорядочения ключа, если тип сущности имеет составной ключ.</summary>
      <returns>Тот же экземпляр класса DecimalPropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="columnOrder">Порядковый номер, под которым этот столбец должен появиться в таблице базы данных.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasColumnType(System.String)">
      <summary>Настраивает тип данных столбца базы данных, используемого для хранения этого свойства.</summary>
      <returns>Тот же экземпляр класса DecimalPropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="columnType">Имя типа данных, зависящего от поставщика баз данных.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>Указывает, как база данных будет формировать значения этого свойства.</summary>
      <returns>Тот же экземпляр класса DecimalPropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="databaseGeneratedOption">Шаблон для формирования значений этого свойства в базе данных.Установка значения null приведет к использованию стандартного параметра, который может быть равен None, Identity или Computed в зависимости от типа свойства и его семантики в модели (например,первичные ключи обрабатываются по-другому) и от используемого набора правил.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.HasPrecision(System.Byte,System.Byte)">
      <summary>Настраивает точность и масштаб свойства.</summary>
      <returns>Тот же экземпляр класса DecimalPropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="precision">Точность свойства.</param>
      <param name="scale">Масштаб значения свойства.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsConcurrencyToken">
      <summary>Настраивает использование свойства в качестве маркера оптимистичного параллелизма.</summary>
      <returns>Тот же экземпляр класса DecimalPropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary>Указывает, должно ли свойство использоваться в качестве маркера оптимистичного параллелизма.</summary>
      <returns>Тот же экземпляр класса DecimalPropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="concurrencyToken">Значение, указывающее, является ли свойство маркером параллелизма.Установка «NULL» удалит аспект маркера параллелизма из этого свойства.Указание значения NULL приведет к такому же поведению среды выполнения, что и указание значения false.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsOptional">
      <summary>Делает свойство необязательным.Столбец базы данных, используемый для хранения этого свойства, будет допускать значения NULL.</summary>
      <returns>Тот же экземпляр класса DecimalPropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DecimalPropertyConfiguration.IsRequired">
      <summary>Делает свойство обязательным.Столбец базы данных, используемый для хранения этого свойства, не будет допускать значения NULL.Свойства <see cref="T:System.decimal" /> требуются по умолчанию.</summary>
      <returns>Тот же экземпляр класса DecimalPropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1">
      <summary>Позволяет выполнить настройку хранимой процедуры, используемой для удаления сущностей.</summary>
      <typeparam name="TEntityType">Тип сущности, которую хранимая процедура может использовать для удаления.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту.</summary>
      <returns>Значение true, если заданный объект равен текущему объекту. В противном случае — значение false.</returns>
      <param name="obj">Объект для сравнения.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.GetHashCode">
      <summary>Получает хэш-код текущего экземпляра.</summary>
      <returns>Хэш-код для текущего экземпляра.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.GetType">
      <summary>Получает тип текущего экземпляра.</summary>
      <returns>Тип текущего экземпляра.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.HasName(System.String)">
      <summary>Настраивает имя хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="procedureName">Имя хранимой процедуры.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.HasName(System.String,System.String)">
      <summary>Настраивает имя хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="procedureName">Имя хранимой процедуры.</param>
      <param name="schemaName">Имя схемы.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.ICollection{`0}}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>Настраивает параметры для связи, в которой свойство внешнего ключа не включено в класс.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="navigationPropertyExpression">Лямбда-выражение, представляющее свойство навигации для этой связи.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">Лямбда-выражение, которое выполняет настройку.</param>
      <typeparam name="TPrincipalEntityType">Тип основной сущности в связи.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,`0}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>Настраивает параметры для связи, в которой свойство внешнего ключа не включено в класс.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="navigationPropertyExpression">Лямбда-выражение, представляющее свойство навигации для этой связи.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">Лямбда-выражение, которое выполняет настройку.</param>
      <typeparam name="TPrincipalEntityType">Тип основной сущности в связи.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>Настраивает параметр для этой хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство для настройки параметра.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Имя параметра.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String)">
      <summary>Настраивает параметр для этой хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство для настройки параметра.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Имя параметра.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String)">
      <summary>Настраивает параметр для этой хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство для настройки параметра.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Имя параметра.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>Настраивает параметр для этой хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство для настройки параметра.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Имя параметра.</param>
      <typeparam name="TProperty">Тип настраиваемого свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>Настраивает параметр для этой хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство для настройки параметра.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Имя параметра.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>Настраивает параметр для этой хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство для настройки параметра.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Имя параметра.</param>
      <typeparam name="TProperty">Тип настраиваемого свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.RowsAffectedParameter(System.String)">
      <summary>Настраивает выходной параметр, возвращающий строки, обработанные этой хранимой процедурой.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="parameterName">Имя параметра.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration`1.ToString">
      <summary>Конвертирует значение текущего экземпляра в эквивалентное строковое представление.</summary>
      <returns>Строковое представление текущего экземпляра.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1">
      <summary>Настраивает связь, которая поддерживает свойства внешнего ключа, отображаемые в объектной модели.Функции настройки доступны при использовании Code First Fluent API, см. <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
      <typeparam name="TDependentEntityType">Зависимый тип сущности.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту.</summary>
      <returns>Значение true, если заданный объект равен текущему объекту. В противном случае — значение false.</returns>
      <param name="obj">Объект, который требуется сравнить с текущим объектом.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа.</summary>
      <returns>Хэш-код для текущего объекта.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.GetType">
      <summary>Возвращает тип текущего экземпляра.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.HasForeignKey``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Настраивает для связи использование свойств внешнего ключа, отображаемых в объектной модели.Если свойства внешнего ключа не отображаются в объектной модели, воспользуйтесь методом Map.</summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
      <param name="foreignKeyExpression">Лямбда-выражение, представляющее свойство, которое должно использоваться в качестве внешнего ключа.Если внешний ключ состоит из нескольких свойств, укажите анонимный тип, включающий эти свойства.При использовании нескольких свойств внешнего ключа эти свойства должны указываться в том же порядке, в котором были настроены свойства первичного ключа для основного типа сущности.</param>
      <typeparam name="TKey">Тип ключа.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.DependentNavigationPropertyConfiguration`1.ToString">
      <summary>Возвращает строку, представляющую текущий объект.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1">
      <summary>Настраивает сопоставление таблиц и столбцов для типа сущности или подмножества свойств типа сущности.Функции настройки доступны при использовании Code First Fluent API, см. <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
      <typeparam name="TEntityType">Тип сущности, подлежащей сопоставлению.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту.</summary>
      <returns>Значение true, если заданный объект равен текущему объекту. В противном случае — значение false.</returns>
      <param name="obj">Объект, который требуется сравнить с текущим объектом.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа.</summary>
      <returns>Хэш-код для текущего объекта.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.GetType">
      <summary>Возвращает объект <see cref="T:System.Type" /> для текущего экземпляра.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.HasTableAnnotation(System.String,System.Object)">
      <summary>Задает заметку в модели для таблицы, с которой сопоставлена данная сущность.Значение заметки можно впоследствии использовать при обработке таблицы, например при создании миграций.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="name">Имя заметки, которое должно быть допустимым идентификатором C#/EDM.</param>
      <param name="value">Значение заметки, которое может быть строкой или другим типом, который может быть сериализован с помощью <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /></param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.MapInheritedProperties">
      <summary>Повторно сопоставляет все свойства, наследуемые от базовых типов.При настройке сопоставления с производным типом отдельной таблицы это приведет к включению в таблицу всех свойств, а не только ненаследуемых.Это называется сопоставлением «одна таблица на конкретный тип» (TPC).</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Properties``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Настраивает свойства, которые будут включены в этот фрагмент сопоставления.Если этот метод не вызывается, будут настроены все свойства, которые до сих пор не вошли во фрагмент сопоставления.</summary>
      <param name="propertiesExpression">Лямбда-выражение для анонимного типа, содержащего свойства для сопоставления.C#: t =&amp;gt; new { t.Id, t.Property1, t.Property2 } VB.Net: Function(t) New With { p.Id, t.Property1, t.Property2 }</param>
      <typeparam name="TObject">Анонимный тип, включающий сопоставляемые свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}})">
      <summary>Настраивает свойство <see cref="T:System.byte[]" />, которое будет включено в этот фрагмент сопоставления.</summary>
      <returns>Объект настройки, который можно использовать для настройки этого свойства.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство, которое нужно настроить.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}})">
      <summary>Настраивает свойство <see cref="T:DbGeography" />, которое будет включено в этот фрагмент сопоставления.</summary>
      <returns>Объект настройки, который можно использовать для настройки этого свойства.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство, которое нужно настроить.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}})">
      <summary>Настраивает свойство <see cref="T:DbGeometry" />, которое будет включено в этот фрагмент сопоставления.</summary>
      <returns>Объект настройки, который можно использовать для настройки этого свойства.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство, которое нужно настроить.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}})">
      <summary>Настраивает свойство <see cref="T:System.DateTime" />, которое будет включено в этот фрагмент сопоставления.</summary>
      <returns>Объект настройки, который можно использовать для настройки этого свойства.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство, которое нужно настроить.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTimeOffset}})">
      <summary>Настраивает свойство <see cref="T:System.DateTimeOffset" />, которое будет включено в этот фрагмент сопоставления.</summary>
      <returns>Объект настройки, который можно использовать для настройки этого свойства.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство, которое нужно настроить.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
      <summary>Настраивает свойство <see cref="T:System.decimal" />, которое будет включено в этот фрагмент сопоставления.</summary>
      <returns>Объект настройки, который можно использовать для настройки этого свойства.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство, которое нужно настроить.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTime}}})">
      <summary>Настраивает свойство <see cref="T:System.DateTime?" />, которое будет включено в этот фрагмент сопоставления.</summary>
      <returns>Объект настройки, который можно использовать для настройки этого свойства.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство, которое нужно настроить.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTimeOffset}}})">
      <summary>Настраивает свойство <see cref="T:System.DateTimeOffset?" />, которое будет включено в этот фрагмент сопоставления.</summary>
      <returns>Объект настройки, который можно использовать для настройки этого свойства.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство, которое нужно настроить.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})">
      <summary>Настраивает свойство <see cref="T:System.decimal?" />, которое будет включено в этот фрагмент сопоставления.</summary>
      <returns>Объект настройки, который можно использовать для настройки этого свойства.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство, которое нужно настроить.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.TimeSpan}}})">
      <summary>Настраивает свойство <see cref="T:System.TimeSpan?" />, которое будет включено в этот фрагмент сопоставления.</summary>
      <returns>Объект настройки, который можно использовать для настройки этого свойства.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство, которое нужно настроить.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}})">
      <summary>Настраивает свойство <see cref="T:System.struct?" />, которое будет включено в этот фрагмент сопоставления.</summary>
      <returns>Объект настройки, который можно использовать для настройки этого свойства.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство, которое нужно настроить.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="T">Настраиваемый тип свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
      <summary>Настраивает свойство <see cref="T:System.string" />, которое будет включено в этот фрагмент сопоставления.</summary>
      <returns>Объект настройки, который можно использовать для настройки этого свойства.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство, которое нужно настроить.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.TimeSpan}})">
      <summary>Настраивает свойство <see cref="T:System.TimeSpan" />, которое будет включено в этот фрагмент сопоставления.</summary>
      <returns>Объект настройки, который можно использовать для настройки этого свойства.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство, которое нужно настроить.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Настраивает свойство <see cref="T:System.struct" />, которое будет включено в этот фрагмент сопоставления.</summary>
      <returns>Объект настройки, который можно использовать для настройки этого свойства.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство, которое нужно настроить.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="T">Настраиваемый тип свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Requires``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Настраивает условие дискриминатора, используемое для идентификации типов в иерархии наследования.</summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки условия дискриминатора.</returns>
      <param name="property">Лямбда-выражение, представляющее свойство, которое должно использоваться в качестве дискриминатора типов.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="TProperty">Тип свойства, которое должно использоваться в качестве дискриминатора типов.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.Requires(System.String)">
      <summary>Настраивает столбец дискриминатора, используемый для идентификации типов в иерархии наследования.</summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки столбца дискриминатора и значений.</returns>
      <param name="discriminator">Имя столбца дискриминатора.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToString">
      <summary>Возвращает строку, представляющую текущий объект.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToTable(System.String)">
      <summary>Настраивает имя таблицы для сопоставления.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="tableName">Имя таблицы.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.EntityMappingConfiguration`1.ToTable(System.String,System.String)">
      <summary>Настраивает имя таблицы и схему для сопоставления.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="tableName">Имя таблицы.</param>
      <param name="schemaName">Схема таблицы.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration">
      <summary>Настраивает сопоставление таблицы и столбцов для связи, которая не отображает свойства внешнего ключа в объектной модели.Функции настройки доступны при использовании Code First Fluent API, см. <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.Equals(System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration)">
      <summary>Определяет, равен ли заданный объект текущему объекту.</summary>
      <returns>Если объекты равны, возвращает значение true. В противном случае — значение false.</returns>
      <param name="other">Объект <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration" />, который требуется сравнить с текущим объектом.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту.</summary>
      <returns>Если объекты равны, возвращает значение true. В противном случае — значение false.</returns>
      <param name="obj">Объект, который требуется сравнить с текущим объектом.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа.</summary>
      <returns>Хэш-код для текущего типа.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.GetType">
      <summary>Возвращает тип текущего экземпляра.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.HasColumnAnnotation(System.String,System.String,System.Object)">
      <summary>Задает заметку в модели для столбца базы данных, настроенного с помощью <see cref="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.MapKey(System.String[])" />.Значение заметки можно впоследствии использовать при обработке столбца, например, при создании миграций.</summary>
      <returns>Тот же экземпляр класса ForeignKeyAssociationMappingConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="keyColumnName">Имя столбца, настроенного с помощью метода HasKey.</param>
      <param name="annotationName">Имя заметки, которое должно быть допустимым идентификатором C#/EDM.</param>
      <param name="value">Значение заметки, которое может быть строкой или другим типом, который может быть сериализован с помощью <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /></param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.MapKey(System.String[])">
      <summary>Настраивает имя столбцов для внешнего ключа.</summary>
      <returns>Тот же экземпляр класса ForeignKeyAssociationMappingConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="keyColumnNames">Имена столбцов внешнего ключа.При использовании нескольких свойств внешнего ключа эти свойства должны указываться в том же порядке, в котором были настроены свойства первичного ключа для целевого типа сущности.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToString">
      <summary>Возвращает строку, представляющую текущий объект.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToTable(System.String)">
      <summary>Настраивает имя таблицы, содержащей столбцы внешнего ключа.Указанная таблица уже должна быть сопоставлена с типом сущности.Если желательно, чтобы внешние ключи хранились в своей собственной таблице, воспользуйтесь методом Map в <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration" /> для выполнения расщепления сущности, чтобы создать таблицу только со свойством первичного ключа.Внешние ключи затем можно добавить с помощью этого метода в таблицу.</summary>
      <returns>Тот же экземпляр класса ForeignKeyAssociationMappingConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="tableName">Имя таблицы.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration.ToTable(System.String,System.String)">
      <summary>Настраивает имя таблицы и схему, содержащие внешние ключевые столбцы.Указанная таблица уже должна быть сопоставлена с типом сущности.Если желательно, чтобы внешние ключи хранились в своей собственной таблице, воспользуйтесь методом Map в <see cref="T:System.Data.Entity.ModelConfiguration.EntityTypeConfiguration" /> для выполнения расщепления сущности, чтобы создать таблицу только со свойством первичного ключа.Внешние ключи затем можно добавить с помощью этого метода в таблицу.</summary>
      <returns>Тот же экземпляр класса ForeignKeyAssociationMappingConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="tableName">Имя таблицы.</param>
      <param name="schemaName">Схема таблицы.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration">
      <summary>Настраивает связь, которая поддерживает только свойства внешнего ключа, неотображаемые в объектной модели.Функции настройки доступны при использовании Code First Fluent API, см. <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту.</summary>
      <returns>Если объекты равны, возвращает значение true. В противном случае — значение false.</returns>
      <param name="obj">Объект для сравнения с текущим. </param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа.</summary>
      <returns>Хэш-код для текущего типа.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.GetType">
      <summary>Возвращает тип текущего экземпляра.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyAssociationMappingConfiguration})">
      <summary>Настраивает связь на использование свойств внешнего ключа, неотображаемых в объектной модели.Столбцы и таблицу можно настроить, указав действие конфигурации.Если указано пустое действие конфигурации, имена столбцов будут сформированы в соответствии с соглашением.Если свойства внешнего ключа отображаются в объектной модели, воспользуйтесь методом HasForeignKey.Не все связи поддерживают отображение свойств внешнего ключа в объектной модели.</summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
      <param name="configurationAction">Действие, которое настраивает столбцы и таблицу внешнего ключа.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ForeignKeyNavigationPropertyConfiguration.ToString">
      <summary>Возвращает строку, представляющую текущий объект.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1">
      <summary>Представляет возможность настройки хранимой процедуры, которая используется для вставки сущностей.</summary>
      <typeparam name="TEntityType">Тип сущности, которую хранимая процедура может использовать для вставки.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Equals(System.Object)">
      <summary>Указывает, равен ли данный экземпляр конкретному объекту.</summary>
      <returns>Значение true, если экземпляр равен указанному объекту; в противном случае — значение false.</returns>
      <param name="obj">Сравниваемый объект.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.GetHashCode">
      <summary>Получает хэш-код для этого экземпляра.</summary>
      <returns>Хэш-код данного экземпляра.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.GetType">
      <summary>Получает тип этого экземпляра.</summary>
      <returns>Тип этого экземпляра.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.HasName(System.String)">
      <summary>Настраивает имя хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="procedureName">Имя хранимой процедуры.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.HasName(System.String,System.String)">
      <summary>Настраивает имя хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="procedureName">Имя хранимой процедуры.</param>
      <param name="schemaName">Имя схемы.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.ICollection{`0}}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>Настраивает параметры для связи, в которой свойство внешнего ключа не включено в класс.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="navigationPropertyExpression">Лямбда-выражение, представляющее свойство навигации для этой связи.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">Лямбда-выражение, которое выполняет настройку.</param>
      <typeparam name="TPrincipalEntityType">Тип основной сущности в связи.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,`0}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>Настраивает параметры для связи, в которой свойство внешнего ключа не включено в класс.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="navigationPropertyExpression">Лямбда-выражение, представляющее свойство навигации для этой связи.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">Лямбда-выражение, которое выполняет настройку.</param>
      <typeparam name="TPrincipalEntityType">Тип основной сущности в связи.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>Настраивает параметр для этой хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство для настройки параметра.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Имя параметра.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String)">
      <summary>Настраивает параметр для этой хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство для настройки параметра.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Имя параметра.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String)">
      <summary>Настраивает параметр для этой хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство для настройки параметра.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Имя параметра.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>Настраивает параметр для этой хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство для настройки параметра.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Имя параметра.</param>
      <typeparam name="TProperty">Тип настраиваемого свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>Настраивает параметр для этой хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство для настройки параметра.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Имя параметра.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>Настраивает параметр для этой хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство для настройки параметра.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Имя параметра.</param>
      <typeparam name="TProperty">Тип настраиваемого свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>Настраивает столбец результатов этой хранимой процедуры для сопоставления со свойством.Используется для столбцов, сформированных базой данных.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство для настройки результата.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Имя столбца результатов.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String)">
      <summary>Настраивает столбец результатов этой хранимой процедуры для сопоставления со свойством.Используется для столбцов, сформированных базой данных.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство для настройки результата.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Имя столбца результатов.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String)">
      <summary>Настраивает столбец результатов этой хранимой процедуры для сопоставления со свойством.Используется для столбцов, сформированных базой данных.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство для настройки результата.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Имя столбца результатов.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>Настраивает столбец результатов этой хранимой процедуры для сопоставления со свойством.Используется для столбцов, сформированных базой данных.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство для настройки результата.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Имя столбца результатов.</param>
      <typeparam name="TProperty">Тип настраиваемого свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>Настраивает столбец результатов этой хранимой процедуры для сопоставления со свойством.Используется для столбцов, сформированных базой данных.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство для настройки результата.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Имя столбца результатов.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.Result``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>Настраивает столбец результатов этой хранимой процедуры для сопоставления со свойством.Используется для столбцов, сформированных базой данных.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство для настройки результата.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Имя столбца результатов.</param>
      <typeparam name="TProperty">Тип настраиваемого свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration`1.ToString">
      <summary>Возвращает строковое представление этого экземпляра.</summary>
      <returns>Строковое представление этого экземпляра.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration">
      <summary>Используется для настройки столбца с аспектами длины для типа сущности или сложного типа.Функции настройки показаны в API для Code First Fluent, см. класс <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту.</summary>
      <returns>Если объекты равны, возвращает значение true. В противном случае — значение false.</returns>
      <param name="obj">Объект.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа.</summary>
      <returns>Хэш-код для текущего типа.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.GetType">
      <summary>Возвращает тип текущего экземпляра.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>Настраивает для столбца указанную максимальную длину.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="value">Максимальная длина для данного столбца.Установка значения NULL удалит из столбца любое ограничение максимальной длины и приведет к использованию для этого столбца базы данных длины по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsFixedLength">
      <summary>Настраивает столбец на фиксированную длину.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsMaxLength">
      <summary>Настраивает для столбца разрешение использовать максимальную длину, поддерживаемую поставщиком баз данных.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.IsVariableLength">
      <summary>Настраивает столбец на переменную длину.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthColumnConfiguration.ToString">
      <summary>Возвращает строку, представляющую текущий объект.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration">
      <summary>Используется для настройки свойства с аспектами длины для типа сущности или сложного типа.Функции настройки доступны при использовании Code First Fluent API, см. <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>Указывает, что свойство будет иметь заданную максимальную длину.</summary>
      <returns>Тот же экземпляр класса LengthPropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="value">Максимальная длина для данного свойства.Если задано значение null, то для свойства будет отменено ограничение максимальной длины, а для столбца базы данных будет использоваться длина по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsFixedLength">
      <summary>Указывает, что свойство будет фиксированной длины.Используйте HasMaxLength для установки фиксированной длины для этого свойства.</summary>
      <returns>Тот же экземпляр класса LengthPropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsMaxLength">
      <summary>Настраивает для свойства разрешение использовать максимальную длину, поддерживаемую поставщиком баз данных.</summary>
      <returns>Тот же экземпляр класса LengthPropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.LengthPropertyConfiguration.IsVariableLength">
      <summary>Настраивает свойство на переменную длину.По умолчанию свойства имеют переменную длину.</summary>
      <returns>Тот же экземпляр класса LengthPropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2">
      <summary>Настраивает связь множественного типа, исходящую из этого типа сущности.</summary>
      <typeparam name="TEntityType">Тип сущности, от которой исходит данная связь.</typeparam>
      <typeparam name="TTargetEntityType">Тип сущности, к которой направлена данная связь.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту.</summary>
      <returns>Если объекты равны, возвращает значение true. В противном случае — значение false.</returns>
      <param name="obj">Объект, который требуется сравнить с текущим объектом.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа.</summary>
      <returns>Хэш-код для текущего типа.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.GetType">
      <summary>Возвращает объект <see cref="T:System.Type" /> для текущего экземпляра.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.ToString">
      <summary>Возвращает строку, представляющую текущий объект.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithMany">
      <summary>Настраивает связь, меняя ее тип на «многие ко многим» без свойства навигации на другом конце связи.</summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary>Настраивает связь типа «многие ко многим» со свойством навигации на другом конце связи.</summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
      <param name="navigationPropertyExpression">Лямбда-выражение, представляющее свойство навигации на другом конце этой связи.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithOptional">
      <summary>Настраивает связь, делая ее необязательной множественного типа без свойства навигации на другом конце связи.</summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithOptional(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>Настраивает связь, делая ее необязательной множественного типа со свойством навигации на другом конце связи.</summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
      <param name="navigationPropertyExpression">Лямбда-выражение, представляющее свойство навигации на другом конце этой связи.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithRequired">
      <summary>Настраивает связь, делая ее обязательной множественного типа без свойства навигации на другом конце связи.</summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyNavigationPropertyConfiguration`2.WithRequired(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>Настраивает связь, делая ее требуемой множественного типа со свойством навигации на другом конце связи.</summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
      <param name="navigationPropertyExpression">Лямбда-выражение, представляющее свойство навигации на другом конце этой связи.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration">
      <summary>Настраивает связь для таблицы и столбца, делая ее типа «многие ко многим».Функции настройки доступны при использовании Code First Fluent API, см. <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.Equals(System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration)">
      <summary>Определяет, равен ли заданный объект текущему объекту.</summary>
      <returns>Значение true, если заданный объект равен текущему объекту. В противном случае — значение false.</returns>
      <param name="other">Объект, который требуется сравнить с текущим объектом.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту.</summary>
      <returns>Значение true, если заданный объект равен текущему объекту. В противном случае — значение false.</returns>
      <param name="obj">Объект, который требуется сравнить с текущим объектом.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа.</summary>
      <returns>Хэш-код для текущего объекта.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.GetType">
      <summary>Возвращает тип текущего экземпляра.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.HasTableAnnotation(System.String,System.Object)">
      <summary>Задает заметку в модели для таблицы соединения.Значение заметки можно впоследствии использовать при обработке таблицы, например при создании миграций.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="name">Имя заметки, которое должно быть допустимым идентификатором C#/EDM.</param>
      <param name="value">Значение заметки, которое может быть строкой или другим типом, который может быть сериализован с помощью <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /></param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.MapLeftKey(System.String[])">
      <summary>Настраивает имя столбцов для левого внешнего ключа.Левый внешний ключ указывает на родительскую сущность свойства навигации, заданную в вызове HasMany.</summary>
      <returns>Тот же экземпляр класса ManyToManyAssociationMappingConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="keyColumnNames">Имена столбцов внешнего ключа.При использовании нескольких свойств внешнего ключа эти свойства должны указываться в том же порядке, в котором были настроены свойства первичного ключа для целевого типа сущности.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.MapRightKey(System.String[])">
      <summary>Настраивает имя столбцов для правого внешнего ключа.Правый внешний ключ указывает на родительскую сущность свойства навигации, указанную в вызове WithMany.</summary>
      <returns>Тот же экземпляр класса ManyToManyAssociationMappingConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="keyColumnNames">Имена столбцов внешнего ключа.При использовании нескольких свойств внешнего ключа эти свойства должны указываться в том же порядке, в котором были настроены свойства первичного ключа для целевого типа сущности.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToString">
      <summary>Возвращает строку, представляющую текущий объект.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToTable(System.String)">
      <summary>Настраивает для связи имя таблицы соединения.</summary>
      <returns>Тот же экземпляр класса ManyToManyAssociationMappingConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="tableName">Имя таблицы.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration.ToTable(System.String,System.String)">
      <summary>Настраивает для связи имя таблицы соединения и схему.</summary>
      <returns>Тот же экземпляр класса ManyToManyAssociationMappingConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="tableName">Имя таблицы.</param>
      <param name="schemaName">Схема таблицы.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2">
      <summary>Позволяет выполнить настройку хранимой процедуры, используемой для изменения связи «многие ко многим».</summary>
      <typeparam name="TEntityType">Тип сущности, для которого настраивается связь.</typeparam>
      <typeparam name="TTargetEntityType">Тип сущности в другом элементе назначений связи.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту.</summary>
      <returns>Значение true, если заданный объект равен текущему объекту. В противном случае — значение false.</returns>
      <param name="obj">Объект, который требуется сравнить с текущим объектом.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.GetHashCode">
      <summary>Получает хэш-код текущего экземпляра.</summary>
      <returns>Хэш-код для текущего экземпляра.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.GetType">
      <summary>Получает тип текущего экземпляра.</summary>
      <returns>Тип текущего экземпляра.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.HasName(System.String)">
      <summary>Задает имя хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="procedureName">Имя процедуры.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.HasName(System.String,System.String)">
      <summary>Задает имя хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="procedureName">Имя процедуры.</param>
      <param name="schemaName">Имя схемы.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.LeftKeyParameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>Настраивает параметр для значений ключа слева.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство, которое нужно настроить.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Имя параметра.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.LeftKeyParameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>Настраивает параметр для значений ключа слева.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство, которое нужно настроить.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Имя параметра.</param>
      <typeparam name="TProperty">Тип настраиваемого свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.LeftKeyParameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>Настраивает параметр для значений ключа слева.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство, которое нужно настроить.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Имя параметра.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.LeftKeyParameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>Настраивает параметр для значений ключа слева.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство, которое нужно настроить.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Имя параметра.</param>
      <typeparam name="TProperty">Тип настраиваемого свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.RightKeyParameter(System.Linq.Expressions.Expression{System.Func{`1,System.Byte[]}},System.String)">
      <summary>Настраивает параметр для значений ключа справа.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство, которое нужно настроить.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Имя параметра.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.RightKeyParameter``1(System.Linq.Expressions.Expression{System.Func{`1,System.Nullable{``0}}},System.String)">
      <summary>Настраивает параметр для значений ключа справа.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство, которое нужно настроить.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Имя параметра.</param>
      <typeparam name="TProperty">Тип настраиваемого свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.RightKeyParameter(System.Linq.Expressions.Expression{System.Func{`1,System.String}},System.String)">
      <summary>Настраивает параметр для значений ключа справа.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство, которое нужно настроить.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Имя параметра.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.RightKeyParameter``1(System.Linq.Expressions.Expression{System.Func{`1,``0}},System.String)">
      <summary>Настраивает параметр для значений ключа справа.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство, которое нужно настроить.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Имя параметра.</param>
      <typeparam name="TProperty">Тип настраиваемого свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration`2.ToString">
      <summary>Конвертирует значение текущего экземпляра в эквивалентное строковое представление.</summary>
      <returns>Строковое представление текущего экземпляра.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2">
      <summary>Позволяет выполнить настройку хранимой процедуры, используемой для изменения связи «многие ко многим».</summary>
      <typeparam name="TEntityType">Тип сущности, для которого настраивается связь.</typeparam>
      <typeparam name="TTargetEntityType">Тип сущности в другом элементе назначений связи.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.Delete(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration{`0,`1}})">
      <summary>Настраивает хранимые процедуры, используемые для удаления связей.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="modificationStoredProcedureConfigurationAction">Лямбда-выражение, которое выполняет настройку для хранимой процедуры.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту.</summary>
      <returns>Значение true, если заданный объект равен текущему объекту. В противном случае — значение false.</returns>
      <param name="obj">Объект, который требуется сравнить с текущим объектом.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.GetHashCode">
      <summary>Получает хэш-код текущего экземпляра.</summary>
      <returns>Хэш-код для текущего экземпляра.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.GetType">
      <summary>Возвращает объект <see cref="T:System.Type" /> для текущего экземпляра.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.Insert(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProcedureConfiguration{`0,`1}})">
      <summary>Настраивает хранимые процедуры, используемые для вставки связей.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="modificationStoredProcedureConfigurationAction">Лямбда-выражение, которое выполняет настройку для хранимой процедуры.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration`2.ToString">
      <summary>Конвертирует значение текущего экземпляра в эквивалентное строковое представление.</summary>
      <returns>Строковое представление текущего экземпляра.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2">
      <summary>Настраивает связь типа «многие ко многим».Функции настройки доступны при использовании Code First Fluent API, см. <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
      <typeparam name="TEntityType">Тип родительской сущности свойства навигации, указанный в вызове HasMany.</typeparam>
      <typeparam name="TTargetEntityType">Тип родительской сущности свойства навигации, указанный в вызове WithMany.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту.</summary>
      <returns>Если объекты равны, возвращает значение true. В противном случае — значение false.</returns>
      <param name="obj">Объект, который требуется сравнить с текущим объектом.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа.</summary>
      <returns>Хэш-код для текущего типа.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.GetType">
      <summary>Возвращает объект <see cref="T:System.Type" /> для текущего экземпляра.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.Map(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ManyToManyAssociationMappingConfiguration})">
      <summary>Настраивает столбцы и таблицу внешнего ключа, используемые для хранения связи.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="configurationAction">Действие, которое настраивает столбцы и таблицу внешнего ключа.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.MapToStoredProcedures">
      <summary>Настраивает хранимые процедуры для использования при изменении этой связи.Будут использованы соглашения по умолчанию для имен процедуры и параметров.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.MapToStoredProcedures(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ManyToManyModificationStoredProceduresConfiguration{`0,`1}})">
      <summary>Настраивает хранимые процедуры для использования при изменении этой связи.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="modificationStoredProcedureMappingConfigurationAction">Конфигурация, которая переопределит соглашения по умолчанию для имен процедур и параметров.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ManyToManyNavigationPropertyConfiguration`2.ToString">
      <summary>Возвращает строку, представляющую текущий объект.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProcedureConfigurationBase">
      <summary>Выполняет настройку хранимой процедуры, используемой для изменения сущности в базе данных.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1">
      <summary>Позволяет выполнить настройку хранимой процедуры, используемой для изменения сущностей.</summary>
      <typeparam name="TEntityType">Тип сущности, которую хранимая процедура может использовать для изменения.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.Delete(System.Action{System.Data.Entity.ModelConfiguration.Configuration.DeleteModificationStoredProcedureConfiguration{`0}})">
      <summary>Настраивает хранимые процедуры, используемые для удаления сущностей.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="modificationStoredProcedureConfigurationAction">Лямбда-выражение, которое выполняет настройку для хранимой процедуры.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.Equals(System.Object)">
      <summary>Указывает, равен ли данный экземпляр конкретному объекту.</summary>
      <returns>Значение true, если экземпляр равен указанному объекту; в противном случае — значение false.</returns>
      <param name="obj">Сравниваемый объект.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.GetHashCode">
      <summary>Получает хэш-код для этого экземпляра.</summary>
      <returns>Хэш-код данного экземпляра.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.GetType">
      <summary>Возвращает объект <see cref="T:System.Type" /> для текущего экземпляра.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.Insert(System.Action{System.Data.Entity.ModelConfiguration.Configuration.InsertModificationStoredProcedureConfiguration{`0}})">
      <summary>Настраивает хранимые процедуры, используемые для вставки сущностей.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="modificationStoredProcedureConfigurationAction">Лямбда-выражение, которое выполняет настройку для хранимой процедуры.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.ToString">
      <summary>Возвращает строковое представление этого экземпляра.</summary>
      <returns>Строковое представление этого экземпляра.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ModificationStoredProceduresConfiguration`1.Update(System.Action{System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration{`0}})">
      <summary>Настраивает хранимые процедуры, используемые для обновления сущностей.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="modificationStoredProcedureConfigurationAction">Лямбда-выражение, которое выполняет настройку для хранимой процедуры.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration">
      <summary>Настраивает условие, используемое для различения типов в иерархии наследования на основании значений, назначенных свойству.Функции настройки доступны при использовании Code First Fluent API, см. <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту.</summary>
      <returns>Значение true, если заданный объект равен текущему объекту. В противном случае — значение false.</returns>
      <param name="obj">Объект, который требуется сравнить с текущим объектом.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа.</summary>
      <returns>Хэш-код для текущего объекта.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.GetType">
      <summary>Возвращает объект <see cref="T:System.Type" /> для текущего экземпляра.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.HasValue">
      <summary>Настраивает условие, требующее ввода значения для свойства.Строки, в которых нет назначенного значения для столбца, в котором хранится это свойство, считаются относящимися к базовому типу для этого типа сущности.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.NotNullConditionConfiguration.ToString">
      <summary>Возвращает строку, представляющую текущий объект.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2">
      <summary>Настраивает дополнительную связь из типа сущности.</summary>
      <typeparam name="TEntityType">Тип сущности, от которой исходит данная связь.</typeparam>
      <typeparam name="TTargetEntityType">Тип сущности, к которой направлена данная связь.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту.</summary>
      <returns>Если объекты равны, возвращает значение true. В противном случае — значение false.</returns>
      <param name="obj">Объект.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа.</summary>
      <returns>Хэш-код для текущего типа.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.GetType">
      <summary>Возвращает объект <see cref="T:System.Type" /> для текущего экземпляра.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.ToString">
      <summary>Возвращает строку, представляющую текущий объект.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithMany">
      <summary>Настраивает связь, делая ее необязательной множественного типа без свойства навигации на другом конце связи.</summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary>Настраивает связь, делая ее необязательной множественного типа со свойством навигации на другом конце связи.</summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
      <param name="navigationPropertyExpression">Лямбда-выражение, представляющее свойство навигации на другом конце этой связи.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalDependent">
      <summary>Настраивает связь, делая ее необязательной необязательного типа без свойства навигации на другом конце связи.Настраиваемый тип сущности будет зависимым и будет содержать внешний ключ для основного типа сущности.Тип сущности, к которому направлена эта связь, будет основным для этой связи.</summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalDependent(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>Настраивает связь, делая ее необязательной необязательного типа со свойством навигации на другом конце связи.Настраиваемый тип сущности будет зависимым и будет содержать внешний ключ для основного типа сущности.Тип сущности, к которому направлена эта связь, будет основным для этой связи.</summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
      <param name="navigationPropertyExpression">Лямбда-выражение, представляющее свойство навигации на другом конце этой связи.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalPrincipal">
      <summary>Настраивает связь, делая ее необязательной необязательного типа без свойства навигации на другом конце связи.Настраиваемый тип сущности будет основным для этой связи.Тип сущности, к которому направлена эта связь, будет зависимым и будет содержать внешний ключ для основного типа сущности.</summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithOptionalPrincipal(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>Настраивает связь, делая ее необязательной необязательного типа со свойством навигации на другом конце связи.Настраиваемый тип сущности будет основным для этой связи.Тип сущности, к которому направлена эта связь, будет зависимым и будет содержать внешний ключ для основного типа сущности.</summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
      <param name="navigationPropertyExpression">Лямбда-выражение, представляющее свойство навигации на другом конце этой связи.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithRequired">
      <summary>Настраивает связь, делая ее необязательной обязательного типа без свойства навигации на другом конце связи.</summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.OptionalNavigationPropertyConfiguration`2.WithRequired(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>Настраивает связь, делая ее необязательной обязательного типа со свойством навигации на другом конце связи.</summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
      <param name="navigationPropertyExpression">Лямбда-выражение, представляющее свойство навигации на другом конце этой связи.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration">
      <summary>Настраивает столбец-примитив из типа сущности.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту.</summary>
      <returns>Если объекты равны, возвращает значение true. В противном случае — значение false.</returns>
      <param name="obj">Объект, который требуется сравнить с текущим объектом.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа.</summary>
      <returns>Хэш-код для текущего типа.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.GetType">
      <summary>Возвращает объект <see cref="T:System.Type" /> для текущего экземпляра.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>Настраивает порядковый номер столбца-примитива, используемого для хранения этого свойства.Этот метод также используется для указания упорядочения ключа, если тип сущности имеет составной ключ.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="columnOrder">Порядковый номер, под которым этот столбец должен появиться в таблице базы данных.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.HasColumnType(System.String)">
      <summary>Настраивает тип данных столбца-примитива, используемого для хранения этого свойства.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="columnType">Имя типа данных, зависящего от поставщика баз данных.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.IsOptional">
      <summary>Делает столбец-примитив необязательным.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.IsRequired">
      <summary>Делает столбец-примитив обязательным.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitiveColumnConfiguration.ToString">
      <summary>Возвращает строку, представляющую текущий объект.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration">
      <summary>Предоставляет методы для настройки свойства-примитива для типа сущности или сложного типа.Функции настройки доступны при использовании Code First Fluent API, см. <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.Equals(System.Object)">
      <summary>Определяет, равен ли данный экземпляр указанному объекту.</summary>
      <returns>Значение true, если экземпляр равен указанному объекту; в противном случае — значение false.</returns>
      <param name="obj">Сравниваемый объект.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.GetHashCode">
      <summary>Возвращает хэш-код текущего экземпляра.</summary>
      <returns>Хэш-код для текущего экземпляра.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.GetType">
      <summary>Возвращает объект <see cref="T:System.Type" /> для текущего экземпляра.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>Задает заметку в модели для столбца базы данных, используемого для хранения этого свойства.Значение заметки можно впоследствии использовать при обработке столбца, например, при создании миграций.</summary>
      <returns>Тот же экземпляр класса PrimitivePropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="name">Имя заметки, которое должно быть допустимым идентификатором C#/EDM.</param>
      <param name="value">Значение заметки, которое может быть строкой или другим типом, который может быть сериализован с помощью <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /></param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnName(System.String)">
      <summary>Настраивает имя столбца базы данных, используемого для хранения этого свойства.</summary>
      <returns>Тот же экземпляр класса PrimitivePropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="columnName">Имя столбца.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>Настраивает порядковый номер столбца базы данных, используемого для хранения этого свойства.Этот метод также используется для указания упорядочения ключа, если тип сущности имеет составной ключ.</summary>
      <returns>Тот же экземпляр класса PrimitivePropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="columnOrder">Порядковый номер, под которым этот столбец должен появиться в таблице базы данных.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasColumnType(System.String)">
      <summary>Настраивает тип данных столбца базы данных, используемого для хранения этого свойства.</summary>
      <returns>Тот же экземпляр класса PrimitivePropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="columnType">Имя типа данных, зависящего от поставщика баз данных.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>Указывает, как база данных будет формировать значения этого свойства.</summary>
      <returns>Тот же экземпляр класса PrimitivePropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="databaseGeneratedOption">Шаблон для формирования значений этого свойства в базе данных.Установка значения null приведет к использованию стандартного параметра, который может быть равен None, Identity или Computed в зависимости от типа свойства и его семантики в модели (например,первичные ключи обрабатываются по-другому) и от используемого набора правил.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.HasParameterName(System.String)">
      <summary>Настраивает имя параметра, используемого в хранимых процедурах для этого свойства.</summary>
      <returns>Тот же экземпляр класса PrimitivePropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="parameterName">Имя параметра.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsConcurrencyToken">
      <summary>Настраивает использование свойства в качестве маркера оптимистичного параллелизма.</summary>
      <returns>Тот же экземпляр класса PrimitivePropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary>Указывает, должно ли свойство использоваться в качестве маркера оптимистичного параллелизма.</summary>
      <returns>Тот же экземпляр класса PrimitivePropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="concurrencyToken">Значение, указывающее, является ли свойство маркером параллелизма.Установка «NULL» удалит аспект маркера параллелизма из этого свойства.Указание значения NULL приведет к такому же поведению среды выполнения, что и указание значения false.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsOptional">
      <summary>Делает свойство необязательным.Столбец базы данных, используемый для хранения этого свойства, будет допускать значения NULL.</summary>
      <returns>Тот же экземпляр класса PrimitivePropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.IsRequired">
      <summary>Делает свойство обязательным.Столбец базы данных, используемый для хранения этого свойства, не будет допускать значения NULL.</summary>
      <returns>Тот же экземпляр класса PrimitivePropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PrimitivePropertyConfiguration.ToString">
      <summary>Возвращает строковое представление этого экземпляра.</summary>
      <returns>Строковое представление данного экземпляра.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration">
      <summary>Разрешает выполнение конфигурации по облегченному соглашению, исходя из свойств модели.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration})">
      <summary>Разрешает конфигурацию свойств, к которым применяется это соглашение.</summary>
      <param name="propertyConfigurationAction">Действие, которое выполняет настройку класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" />.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту.</summary>
      <returns>Значение true, если заданный объект равен текущему объекту. В противном случае — значение false.</returns>
      <param name="obj">Объект, который требуется сравнить с текущим объектом.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.GetHashCode">
      <summary>Возвращает хэш-код данного экземпляра.</summary>
      <returns>Хэш-код данного экземпляра.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.GetType">
      <summary>Возвращает объект <see cref="T:System.Type" /> для текущего экземпляра.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.Having``1(System.Func{System.Reflection.PropertyInfo,``0})">
      <summary>Фильтрует свойства, к которым применяется данное соглашение, исходя из предиката при получении значения для последующего использования во время настройки.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="capturingPredicate">Функция для получения значения каждого из свойств.Если значение равно null, то свойство будет отфильтровано.</param>
      <typeparam name="T">Тип полученного значения.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.ToString">
      <summary>Возвращает строку, представляющую текущий объект.</summary>
      <returns>Текущий объект.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration.Where(System.Func{System.Reflection.PropertyInfo,System.Boolean})">
      <summary>Фильтрует свойства, к которым применяется соглашение, по предикату.</summary>
      <returns>Тот же экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="predicate">Функция, предназначенная для проверки каждого свойства по условию.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1">
      <summary>Разрешает выполнение конфигурации по облегченному соглашению, исходя из свойств типов сущностей в модели и полученного значения.</summary>
      <typeparam name="T">Тип зафиксированного значения.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,`0})">
      <summary>Разрешает конфигурацию свойств, к которым применяется это соглашение.</summary>
      <param name="propertyConfigurationAction">Действие, которое выполняет настройку <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration" /> с использованием полученного значения.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту.</summary>
      <returns>Значение true, если заданный объект равен текущему объекту. В противном случае — значение false.</returns>
      <param name="obj">Объект, который требуется сравнить с текущим объектом.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа.</summary>
      <returns>Хэш-код для текущего типа.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1.GetType">
      <summary>Возвращает объект <see cref="T:System.Type" /> для текущего экземпляра.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyConventionWithHavingConfiguration`1.ToString">
      <summary>Возвращает строку, представляющую текущий объект.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.PropertyMappingConfiguration">
      <summary>Используется для настройки свойства во фрагменте сопоставления.Функции настройки доступны при использовании Code First Fluent API, см. <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyMappingConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>Задает заметку в модели для столбца базы данных, используемого для хранения этого свойства.Значение заметки можно впоследствии использовать при обработке столбца, например, при создании миграций.</summary>
      <returns>Тот же экземпляр класса PropertyMappingConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="name">Имя заметки, которое должно быть допустимым идентификатором C#/EDM.</param>
      <param name="value">Значение заметки, которое может быть строкой или другим типом, который может быть сериализован с помощью <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" /></param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.PropertyMappingConfiguration.HasColumnName(System.String)">
      <summary>Настраивает имя столбца базы данных, используемого для хранения этого свойства во фрагменте сопоставления.</summary>
      <returns>Тот же экземпляр класса PropertyMappingConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="columnName">Имя столбца.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2">
      <summary>Настраивает необходимую связь от данного типа сущности.</summary>
      <typeparam name="TEntityType">Тип сущности, от которой исходит данная связь.</typeparam>
      <typeparam name="TTargetEntityType">Тип сущности, к которой направлена данная связь.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.Equals(System.Object)">
      <summary>Указывает, совпадает ли указанный объект с текущим объектом.</summary>
      <returns>Значение true, если заданный объект равен текущему объекту. В противном случае — значение false.</returns>
      <param name="obj">Сравниваемый объект.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.GetHashCode">
      <summary>Возвращает хэш-код, связанный с текущим объектом.</summary>
      <returns>Хэш-код, связанный с текущим объектом.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.GetType">
      <summary>Возвращает объект <see cref="T:System.Type" /> для текущего экземпляра.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.ToString">
      <summary>Возвращает строковое представление текущего объекта.</summary>
      <returns>Строковое представление текущего объекта.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithMany">
      <summary>Настраивает требуемую связь множественного типа без свойства навигации на другом конце связи.</summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithMany(System.Linq.Expressions.Expression{System.Func{`1,System.Collections.Generic.ICollection{`0}}})">
      <summary>Настраивает требуемую связь множественного типа со свойством навигации на другом конце связи.</summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
      <param name="navigationPropertyExpression">Лямбда-выражение, представляющее свойство навигации на другом конце этой связи.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithOptional">
      <summary>Настраивает требуемую связь необязательного типа без свойства навигации на другом конце связи.</summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithOptional(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>Настраивает требуемую связь необязательного типа со свойством навигации на другом конце связи.</summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
      <param name="navigationPropertyExpression">Лямбда-выражение, представляющее свойство навигации на другом конце этой связи.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredDependent">
      <summary>Настраивает требуемую связь обязательного типа без свойства навигации на другом конце связи.Настраиваемый тип сущности будет зависимым и будет содержать внешний ключ для основного типа сущности.Тип сущности, к которому направлена эта связь, будет основным для этой связи.</summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredDependent(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>Настраивает требуемую связь обязательного типа со свойством навигации на другом конце связи.Настраиваемый тип сущности будет зависимым и будет содержать внешний ключ для основного типа сущности.Тип сущности, к которому направлена эта связь, будет основным для этой связи.</summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
      <param name="navigationPropertyExpression">Лямбда-выражение, представляющее свойство навигации на другом конце этой связи.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredPrincipal">
      <summary>Настраивает требуемую связь обязательного типа без свойства навигации на другом конце связи.Настраиваемый тип сущности будет основным для этой связи.Тип сущности, к которому направлена эта связь, будет зависимым и будет содержать внешний ключ для основного типа сущности.</summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.RequiredNavigationPropertyConfiguration`2.WithRequiredPrincipal(System.Linq.Expressions.Expression{System.Func{`1,`0}})">
      <summary>Настраивает требуемую связь обязательного типа со свойством навигации на другом конце связи.Настраиваемый тип сущности будет основным для этой связи.Тип сущности, к которому направлена эта связь, будет зависимым и будет содержать внешний ключ для основного типа сущности.</summary>
      <returns>Объект настройки, который может использоваться для дальнейшей настройки этой связи.</returns>
      <param name="navigationPropertyExpression">Лямбда-выражение, представляющее свойство навигации на другом конце этой связи.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration">
      <summary>Настраивает столбец базы данных для хранения строковых значений.Функции настройки доступны при использовании Code First Fluent API, см. <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту.</summary>
      <returns>Если объекты равны, возвращает значение true. В противном случае — значение false.</returns>
      <param name="obj">Объект.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа.</summary>
      <returns>Хэш-код для текущего типа.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.GetType">
      <summary>Возвращает тип текущего экземпляра.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>Настраивает порядковый номер этого столбца базы данных.</summary>
      <returns>Тот же экземпляр класса StringColumnConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="columnOrder">Порядковый номер, под которым этот столбец должен появиться в таблице базы данных.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasColumnType(System.String)">
      <summary>Настраивает тип данных этого столбца базы данных.</summary>
      <returns>Тот же экземпляр класса StringColumnConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="columnType">Имя типа данных, зависящего от поставщика баз данных.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>Указывает, что свойство будет иметь заданную максимальную длину.</summary>
      <returns>Тот же экземпляр класса StringColumnConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="value">Максимальная длина для данного свойства.Установка значения NULL приведет к использованию для столбца длины по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsFixedLength">
      <summary>Настраивает столбец на фиксированную длину.Используйте HasMaxLength для установки фиксированной длины для этого свойства.</summary>
      <returns>Тот же экземпляр класса StringColumnConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsMaxLength">
      <summary>Настраивает для столбца разрешение использовать максимальную длину, поддерживаемую поставщиком баз данных.</summary>
      <returns>Тот же экземпляр класса StringColumnConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsOptional">
      <summary>Делает столбец необязательным.</summary>
      <returns>Тот же экземпляр класса StringColumnConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsRequired">
      <summary>Делает столбец обязательным.</summary>
      <returns>Тот же экземпляр класса StringColumnConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsUnicode">
      <summary>Указывает, что столбец будет поддерживать содержимое строк в Юникоде.</summary>
      <returns>Тот же экземпляр класса StringColumnConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsUnicode(System.Nullable{System.Boolean})">
      <summary>Указывает, будет ли этот столбец поддерживать содержимое строк в Юникоде.</summary>
      <returns>Тот же экземпляр класса StringColumnConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="unicode">Значение, указывающее, будет этот столбец поддерживать содержимое строк в Юникоде или нет.Установка в значение null удалит из столбца аспект Юникод.Указание значения NULL приведет к такому же поведению среды выполнения, что и указание значения false.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.IsVariableLength">
      <summary>Настраивает столбец на переменную длину.По умолчанию столбцы имеют переменную длину.</summary>
      <returns>Тот же экземпляр класса StringColumnConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringColumnConfiguration.ToString">
      <summary>Возвращает строку, представляющую текущий объект.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration">
      <summary>Используется для настройки свойства <see cref="T:System.string" /> типа сущности или сложного типа.Функции настройки доступны при использовании Code First Fluent API, см. <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnAnnotation(System.String,System.Object)">
      <summary>Задает заметку в модели для столбца базы данных, используемого для хранения этого свойства.Значение заметки можно впоследствии использовать при обработке столбца, например, при создании миграций.</summary>
      <returns>Тот же экземпляр класса StringPropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="name">Имя заметки, которое должно быть допустимым идентификатором C#/EDM.</param>
      <param name="value">Значение заметки, которое может быть строкой или другим типом, который может быть сериализован с помощью <see cref="T:System.Data.Entity.Infrastructure.IMetadataAnnotationSerializer" />.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnName(System.String)">
      <summary>Настраивает имя столбца базы данных, используемого для хранения этого свойства.</summary>
      <returns>Тот же экземпляр класса StringPropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="columnName">Имя столбца.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnOrder(System.Nullable{System.Int32})">
      <summary>Настраивает порядковый номер столбца базы данных, используемого для хранения этого свойства.Этот метод также используется для указания упорядочения ключа, если тип сущности имеет составной ключ.</summary>
      <returns>Тот же экземпляр класса StringPropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="columnOrder">Порядковый номер, под которым этот столбец должен появиться в таблице базы данных.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasColumnType(System.String)">
      <summary>Настраивает тип данных столбца базы данных, используемого для хранения этого свойства.</summary>
      <returns>Тот же экземпляр класса StringPropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="columnType">Имя типа данных, зависящего от поставщика баз данных.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasDatabaseGeneratedOption(System.Nullable{System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption})">
      <summary>Указывает, как база данных будет формировать значения этого свойства.</summary>
      <returns>Тот же экземпляр класса StringPropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="databaseGeneratedOption">Шаблон для формирования значений этого свойства в базе данных.Установка значения null приведет к использованию стандартного параметра, который может быть равен None, Identity или Computed в зависимости от типа свойства и его семантики в модели (например,первичные ключи обрабатываются по-другому) и от используемого набора правил.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.HasMaxLength(System.Nullable{System.Int32})">
      <summary>Указывает, что свойство будет иметь заданную максимальную длину.</summary>
      <returns>Тот же экземпляр класса StringPropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="value">Максимальная длина для данного свойства.Если задано значение null, то для свойства будет отменено ограничение максимальной длины, а для столбца базы данных будет использоваться длина по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsConcurrencyToken">
      <summary>Настраивает использование свойства в качестве маркера оптимистичного параллелизма.</summary>
      <returns>Тот же экземпляр класса StringPropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsConcurrencyToken(System.Nullable{System.Boolean})">
      <summary>Указывает, должно ли свойство использоваться в качестве маркера оптимистичного параллелизма.</summary>
      <returns>Тот же экземпляр класса StringPropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="concurrencyToken">Значение, указывающее, является ли свойство маркером параллелизма.Установка «NULL» удалит аспект маркера параллелизма из этого свойства.Указание значения NULL приведет к такому же поведению среды выполнения, что и указание значения false.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsFixedLength">
      <summary>Указывает, что свойство будет фиксированной длины.Используйте HasMaxLength для установки фиксированной длины для этого свойства.</summary>
      <returns>Тот же экземпляр класса StringPropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsMaxLength">
      <summary>Настраивает для свойства разрешение использовать максимальную длину, поддерживаемую поставщиком баз данных.</summary>
      <returns>Тот же экземпляр класса StringPropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsOptional">
      <summary>Делает свойство необязательным.Столбец базы данных, используемый для хранения этого свойства, будет допускать значения NULL.Свойства <see cref="T:System.string" /> по умолчанию являются необязательными.</summary>
      <returns>Тот же экземпляр класса StringPropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsRequired">
      <summary>Делает свойство обязательным.Столбец базы данных, используемый для хранения этого свойства, не будет допускать значения NULL.</summary>
      <returns>Тот же экземпляр класса StringPropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsUnicode">
      <summary>Указывает, что это свойство будет поддерживать содержимое строк в Юникоде.</summary>
      <returns>Тот же экземпляр класса StringPropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsUnicode(System.Nullable{System.Boolean})">
      <summary>Указывает, будет ли это свойство поддерживать содержимое строк в Юникоде.</summary>
      <returns>Тот же экземпляр класса StringPropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="unicode">Значение, указывающее, будет это свойство поддерживать содержимое строк в Юникоде или нет.Указание значения null удаляет из свойства аспект Юникод.Указание значения NULL приведет к такому же поведению среды выполнения, что и указание значения false.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StringPropertyConfiguration.IsVariableLength">
      <summary>Настраивает свойство на переменную длину.Свойства <see cref="T:System.string" /> по умолчанию имеют переменную длину.</summary>
      <returns>Тот же экземпляр класса StringPropertyConfiguration, что позволяет соединить несколько вызовов в цепочку.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1">
      <summary>Разрешает настройку типа в модели.</summary>
      <typeparam name="TStructuralType">Тип, который нужно настроить.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.#ctor">
      <summary>Инициализирует новые экземпляры класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту.</summary>
      <returns>Значение true, если заданный объект равен текущему объекту. В противном случае — значение false.</returns>
      <param name="obj">Объект, который требуется сравнить с текущим объектом.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа.</summary>
      <returns>Хэш-код для текущего объекта.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.GetType">
      <summary>Возвращает объект <see cref="T:System.Type" /> для текущего экземпляра.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}})">
      <summary>Настраивает свойство <see cref="T:System.byte[]" />, определенное для этого типа.</summary>
      <returns>Объект настройки, который можно использовать для настройки этого свойства.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство, которое нужно настроить.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}})">
      <summary>Настраивает свойство <see cref="T:DbGeography" />, определенное для этого типа.</summary>
      <returns>Объект настройки, который можно использовать для настройки этого свойства.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство, которое нужно настроить.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}})">
      <summary>Настраивает свойство <see cref="T:DbGeometry" />, определенное для этого типа.</summary>
      <returns>Объект настройки, который можно использовать для настройки этого свойства.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство, которое нужно настроить.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTime}})">
      <summary>Настраивает свойство <see cref="T:System.DateTime" />, определенное для этого типа.</summary>
      <returns>Объект настройки, который можно использовать для настройки этого свойства.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство, которое нужно настроить.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.DateTimeOffset}})">
      <summary>Настраивает свойство <see cref="T:System.DateTimeOffset" />, определенное для этого типа.</summary>
      <returns>Объект настройки, который можно использовать для настройки этого свойства.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство, которое нужно настроить.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Decimal}})">
      <summary>Настраивает свойство <see cref="T:System.decimal" />, определенное для этого типа.</summary>
      <returns>Объект настройки, который можно использовать для настройки этого свойства.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство, которое нужно настроить.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTime}}})">
      <summary>Настраивает свойство <see cref="T:System.DateTime?" />, определенное для этого типа.</summary>
      <returns>Объект настройки, который можно использовать для настройки этого свойства.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство, которое нужно настроить.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.DateTimeOffset}}})">
      <summary>Настраивает свойство <see cref="T:System.DateTimeOffset?" />, определенное для этого типа.</summary>
      <returns>Объект настройки, который можно использовать для настройки этого свойства.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство, которое нужно настроить.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.Decimal}}})">
      <summary>Настраивает свойство <see cref="T:System.decimal?" />, определенное для этого типа.</summary>
      <returns>Объект настройки, который можно использовать для настройки этого свойства.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство, которое нужно настроить.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{System.TimeSpan}}})">
      <summary>Настраивает свойство <see cref="T:System.TimeSpan?" />, определенное для этого типа.</summary>
      <returns>Объект настройки, который можно использовать для настройки этого свойства.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство, которое нужно настроить.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}})">
      <summary>Настраивает свойство <see cref="T:System.struct?" />, определенное для этого типа.</summary>
      <returns>Объект настройки, который можно использовать для настройки этого свойства.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство, которое нужно настроить.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="T">Настраиваемый тип свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
      <summary>Настраивает свойство <see cref="T:System.string" />, определенное для этого типа.</summary>
      <returns>Объект настройки, который можно использовать для настройки этого свойства.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство, которое нужно настроить.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property(System.Linq.Expressions.Expression{System.Func{`0,System.TimeSpan}})">
      <summary>Настраивает свойство <see cref="T:System.TimeSpan" />, определенное для этого типа.</summary>
      <returns>Объект настройки, который можно использовать для настройки этого свойства.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство, которое нужно настроить.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.Property``1(System.Linq.Expressions.Expression{System.Func{`0,``0}})">
      <summary>Настраивает свойство <see cref="T:System.struct" />, определенное для этого типа.</summary>
      <returns>Объект настройки, который можно использовать для настройки этого свойства.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство, которое нужно настроить.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <typeparam name="T">Настраиваемый тип свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.StructuralTypeConfiguration`1.ToString">
      <summary>Возвращает строку, представляющую текущий объект.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration">
      <summary>Разрешает выполнение конфигурации по облегченному соглашению, исходя из типов сущностей в модели.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration})">
      <summary>Разрешает конфигурацию типов сущности, к которым применяется это соглашение.</summary>
      <param name="entityConfigurationAction">Действие, которое выполняет настройку класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" />.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.Equals(System.Object)">
      <summary>Указывает, равен ли данный экземпляр конкретному объекту.</summary>
      <returns>Значение true, если экземпляр равен указанному объекту; в противном случае — значение false.</returns>
      <param name="obj">Сравниваемый объект.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.GetHashCode">
      <summary>Получает хэш-код для этого экземпляра.</summary>
      <returns>Хэш-код данного экземпляра.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.GetType">
      <summary>Возвращает объект <see cref="T:System.Type" /> для текущего экземпляра.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.Having``1(System.Func{System.Type,``0})">
      <summary>Фильтрует типы сущностей, к которым применяется данное соглашение, исходя из предиката при получении значения для последующего использования во время настройки.</summary>
      <returns>Экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="capturingPredicate">Функция для получения значения для каждого типа сущности.Если значение равно null, то тип сущности будет отфильтрован.</param>
      <typeparam name="T">Тип полученного значения.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.ToString">
      <summary>Возвращает строковое представление этого экземпляра.</summary>
      <returns>Строковое представление этого экземпляра.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration.Where(System.Func{System.Type,System.Boolean})">
      <summary>Фильтрует типы сущности, к которым применяется соглашение, по предикату.</summary>
      <returns>Экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="predicate">Функция, предназначенная для проверки каждого типа сущности по условию.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1">
      <summary>Разрешает выполнение конфигурации в соответствии с облегченным соглашением, исходя из типов сущностей в модели, производных от общего, указанного типа.</summary>
      <typeparam name="T">Общий тип типов сущностей, к которым применяется соглашение.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration{`0}})">
      <summary>Разрешает конфигурацию типов сущности, к которым применяется это соглашение.</summary>
      <param name="entityConfigurationAction">Действие, которое выполняет настройку класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" />.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.Equals(System.Object)">
      <summary>Указывает, равен ли данный экземпляр конкретному объекту.</summary>
      <returns>Значение true, если экземпляр равен указанному объекту; в противном случае — значение false.</returns>
      <param name="obj">Сравниваемый объект.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.GetHashCode">
      <summary>Получает хэш-код для этого экземпляра.</summary>
      <returns>Хэш-код данного экземпляра.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.GetType">
      <summary>Возвращает объект <see cref="T:System.Type" /> для текущего экземпляра.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.Having``1(System.Func{System.Type,``0})">
      <summary>Фильтрует типы сущностей, к которым применяется данное соглашение, исходя из предиката при получении значения для последующего использования во время настройки.</summary>
      <returns>Экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="capturingPredicate">Функция для получения значения для каждого типа сущности.Если значение равно null, то тип сущности будет отфильтрован.</param>
      <typeparam name="TValue">Тип полученного значения.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.ToString">
      <summary>Возвращает строковое представление этого экземпляра.</summary>
      <returns>Строковое представление этого экземпляра.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1.Where(System.Func{System.Type,System.Boolean})">
      <summary>Фильтрует типы сущности, к которым применяется соглашение, по предикату.</summary>
      <returns>Экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionConfiguration`1" />, чтобы можно было соединить в цепочку несколько вызовов.</returns>
      <param name="predicate">Функция, предназначенная для проверки каждого типа сущности по условию.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1">
      <summary>Разрешает выполнение конфигурации по облегченному соглашению, исходя из типов сущностей в модели и полученного значения.</summary>
      <typeparam name="T">Тип полученного значения.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,`0})">
      <summary>Разрешает конфигурацию типов сущности, к которым применяется это соглашение.</summary>
      <param name="entityConfigurationAction">Действие, которое выполняет настройку <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration" /> с использованием полученного значения.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту.</summary>
      <returns>Значение true, если заданный объект равен текущему объекту. В противном случае — значение false.</returns>
      <param name="obj">Объект для сравнения.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.GetHashCode">
      <summary>Получает хэш-код текущего экземпляра.</summary>
      <returns>Хэш-код для текущего экземпляра.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.GetType">
      <summary>Возвращает объект <see cref="T:System.Type" /> для текущего экземпляра.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`1.ToString">
      <summary>Конвертирует значение текущего экземпляра в эквивалентное строковое представление.</summary>
      <returns>Строковое представление текущего экземпляра.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2">
      <summary>Разрешает выполнение конфигурации в соответствии с облегченным соглашением, исходя из типов сущностей в модели, производных от общего, указанного типа и полученного значения.</summary>
      <typeparam name="T">Общий тип типов сущностей, к которым применяется соглашение.</typeparam>
      <typeparam name="TValue">Тип полученного значения.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.Configure(System.Action{System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration{`0},`1})">
      <summary>Разрешает конфигурацию типов сущности, к которым применяется это соглашение.</summary>
      <param name="entityConfigurationAction">Действие, которое выполняет настройку <see cref="T:System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration`1" /> с использованием полученного значения.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.Equals(System.Object)">
      <summary>Указывает, равен ли данный экземпляр конкретному объекту.</summary>
      <returns>Значение true, если экземпляр равен указанному объекту; в противном случае — значение false.</returns>
      <param name="obj">Сравниваемый объект.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.GetHashCode">
      <summary>Получает хэш-код для этого экземпляра.</summary>
      <returns>Хэш-код данного экземпляра.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.GetType">
      <summary>Возвращает объект <see cref="T:System.Type" /> для текущего экземпляра.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.TypeConventionWithHavingConfiguration`2.ToString">
      <summary>Возвращает строковое представление этого экземпляра.</summary>
      <returns>Строковое представление этого экземпляра.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1">
      <summary>Позволяет выполнить настройку хранимой процедуры, используемой для обновления сущностей.</summary>
      <typeparam name="TEntityType">Тип сущности, которую хранимая процедура может использовать для обновления.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Equals(System.Object)">
      <summary>Определяет, равен ли указанный объект данному объекту экземпляра.</summary>
      <returns>Значение true, если указанный объект равен данному объекту экземпляра; в противном случае — значение false.</returns>
      <param name="obj">Сравниваемый объект.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.GetHashCode">
      <summary>Получает хэш-код.</summary>
      <returns>Хэш-код.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.GetType">
      <summary>Получает тип этой конфигурации.</summary>
      <returns>Тип конфигурации.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.HasName(System.String)">
      <summary>Настраивает имя хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="procedureName">Имя хранимой процедуры.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.HasName(System.String,System.String)">
      <summary>Настраивает имя хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="procedureName">Имя хранимой процедуры.</param>
      <param name="schemaName">Имя схемы.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.ICollection{`0}}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>Настраивает параметры для связи, в которой свойство внешнего ключа не включено в класс.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="navigationPropertyExpression">Лямбда-выражение, представляющее свойство навигации для этой связи.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">Лямбда-выражение, которое выполняет настройку.</param>
      <typeparam name="TPrincipalEntityType">Тип основной сущности в связи.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Navigation``1(System.Linq.Expressions.Expression{System.Func{``0,`0}},System.Action{System.Data.Entity.ModelConfiguration.Configuration.AssociationModificationStoredProcedureConfiguration{``0}})">
      <summary>Настраивает параметры для связи, в которой свойство внешнего ключа не включено в класс.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="navigationPropertyExpression">Лямбда-выражение, представляющее свойство навигации для этой связи.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="associationModificationStoredProcedureConfigurationAction">Лямбда-выражение, которое выполняет настройку.</param>
      <typeparam name="TPrincipalEntityType">Тип основной сущности в связи.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>Настраивает параметр для этой хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство для настройки параметра.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Имя параметра.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String,System.String)">
      <summary>Настраивает параметр для этой хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство для настройки параметра.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">Текущее имя параметра значения.</param>
      <param name="originalValueParameterName">Исходное имя параметра значения.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String)">
      <summary>Настраивает параметр для этой хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство для настройки параметра.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Имя параметра.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String,System.String)">
      <summary>Настраивает параметр для этой хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство для настройки параметра.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">Текущее имя параметра значения.</param>
      <param name="originalValueParameterName">Исходное имя параметра значения.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String)">
      <summary>Настраивает параметр для этой хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство для настройки параметра.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Имя параметра.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String,System.String)">
      <summary>Настраивает параметр для этой хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство для настройки параметра.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">Текущее имя параметра значения.</param>
      <param name="originalValueParameterName">Исходное имя параметра значения.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>Настраивает параметр для этой хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство для настройки параметра.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Имя параметра.</param>
      <typeparam name="TProperty">Тип настраиваемого свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String,System.String)">
      <summary>Настраивает параметр для этой хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство для настройки параметра.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">Текущее имя параметра значения.</param>
      <param name="originalValueParameterName">Исходное имя параметра значения.</param>
      <typeparam name="TProperty">Тип настраиваемого свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>Настраивает параметр для этой хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство для настройки параметра.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Имя параметра.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String,System.String)">
      <summary>Настраивает параметр для этой хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство для настройки параметра.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">Текущее имя параметра значения.</param>
      <param name="originalValueParameterName">Исходное имя параметра значения.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>Настраивает параметр для этой хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство для настройки параметра.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="parameterName">Имя параметра.</param>
      <typeparam name="TProperty">Тип настраиваемого свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Parameter``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String,System.String)">
      <summary>Настраивает параметр для этой хранимой процедуры.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство для настройки параметра.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="currentValueParameterName">Текущее имя параметра значения.</param>
      <param name="originalValueParameterName">Исходное имя параметра значения.</param>
      <typeparam name="TProperty">Тип настраиваемого свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Byte[]}},System.String)">
      <summary>Настраивает столбец результатов этой хранимой процедуры для сопоставления со свойством.Используется для столбцов, сформированных базой данных.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство для настройки результата.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Имя столбца результатов.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeography}},System.String)">
      <summary>Настраивает столбец результатов этой хранимой процедуры для сопоставления со свойством.Используется для столбцов, сформированных базой данных.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство для настройки результата.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Имя столбца результатов.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.Data.Entity.Spatial.DbGeometry}},System.String)">
      <summary>Настраивает столбец результатов этой хранимой процедуры для сопоставления со свойством.Используется для столбцов, сформированных базой данных.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство для настройки результата.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Имя столбца результатов.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result``1(System.Linq.Expressions.Expression{System.Func{`0,System.Nullable{``0}}},System.String)">
      <summary>Настраивает столбец результатов этой хранимой процедуры для сопоставления со свойством.Используется для столбцов, сформированных базой данных.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство для настройки результата.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Имя столбца результатов.</param>
      <typeparam name="TProperty">Тип настраиваемого свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result(System.Linq.Expressions.Expression{System.Func{`0,System.String}},System.String)">
      <summary>Настраивает столбец результатов этой хранимой процедуры для сопоставления со свойством.Используется для столбцов, сформированных базой данных.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство для настройки результата.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Имя столбца результатов.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.Result``1(System.Linq.Expressions.Expression{System.Func{`0,``0}},System.String)">
      <summary>Настраивает столбец результатов этой хранимой процедуры для сопоставления со свойством.Используется для столбцов, сформированных базой данных.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="propertyExpression">Лямбда-выражение, представляющее свойство для настройки результата.C#: t =&amp;gt; t.MyProperty VB.Net: Function(t) t.MyProperty</param>
      <param name="columnName">Имя столбца результатов.</param>
      <typeparam name="TProperty">Тип настраиваемого свойства.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.RowsAffectedParameter(System.String)">
      <summary>Настраивает выходной параметр, возвращающий строки, обработанные этой хранимой процедурой.</summary>
      <returns>Тот же экземпляр конфигурации, что позволяет соединить несколько вызовов в цепочку.</returns>
      <param name="parameterName">Имя параметра.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.UpdateModificationStoredProcedureConfiguration`1.ToString">
      <summary>Конвертирует значение этого экземпляра в эквивалентного строкового представления.</summary>
      <returns>Строковое представление значения этого экземпляра.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration">
      <summary>Настраивает столбец-дискриминатор, используемый для различения типов в иерархии наследования.Функции настройки доступны при использовании Code First Fluent API, см. <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.Equals(System.Object)">
      <summary>Определяет, равен ли заданный объект текущему объекту.</summary>
      <returns>Если объекты равны, возвращает значение true. В противном случае — значение false.</returns>
      <param name="obj">Объект.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.GetHashCode">
      <summary>Служит хэш-функцией для определенного типа.</summary>
      <returns>Хэш-код для текущего типа.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.GetType">
      <summary>Возвращает объект <see cref="T:System.Type" /> для текущего экземпляра.</summary>
      <returns>Точный тип текущего экземпляра в среде выполнения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue``1(System.Nullable{``0})">
      <summary>Настраивает значение дискриминатора, используемое для идентификации типа сущности, настраиваемого из других типов в иерархии наследования.</summary>
      <returns>Объект настройки для настройки столбца, используемого для хранения значений дискриминатора.</returns>
      <param name="value">Значение, используемое для идентификации типа сущности.</param>
      <typeparam name="T">Тип значения дискриминатора.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue(System.String)">
      <summary>Настраивает значение дискриминатора, используемое для идентификации типа сущности, настраиваемого из других типов в иерархии наследования.</summary>
      <returns>Объект настройки для настройки столбца, используемого для хранения значений дискриминатора.</returns>
      <param name="value">Значение, используемое для идентификации типа сущности.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.HasValue``1(``0)">
      <summary>Настраивает значение дискриминатора, используемое для идентификации типа сущности, настраиваемого из других типов в иерархии наследования.</summary>
      <returns>Объект настройки для настройки столбца, используемого для хранения значений дискриминатора.</returns>
      <param name="value">Значение, используемое для идентификации типа сущности.</param>
      <typeparam name="T">Тип значения дискриминатора.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Configuration.ValueConditionConfiguration.ToString">
      <summary>Возвращает строку, представляющую текущий объект.</summary>
      <returns>Строка, представляющая текущий объект.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.AssociationInverseDiscoveryConvention">
      <summary>Предоставляет соглашение об инверсии свойств навигации относительно друг друга, если существует только одна пара свойств навигации между связанными типами.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.AssociationInverseDiscoveryConvention.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.AssociationInverseDiscoveryConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.AssociationInverseDiscoveryConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Применяет данное соглашение к элементу модели.</summary>
      <param name="item">Элемент, к которому применяется соглашение.</param>
      <param name="model">Модель.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.AttributeToColumnAnnotationConvention`2">
      <summary>Класс общего назначения для соглашений Code First, который считывает атрибуты из свойств .NET и формирует заметки столбцов на основе их атрибутов.</summary>
      <typeparam name="TAttribute">Тип атрибута для обнаружения.</typeparam>
      <typeparam name="TAnnotation">Тип заметки, которая будет создана.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.AttributeToColumnAnnotationConvention`2.#ctor(System.String,System.Func{System.Reflection.PropertyInfo,System.Collections.Generic.IList{`0},`1})">
      <summary>Конструирует соглашение, которое будет создавать заметки столбцов с заданным именем и делегатом фабрики.</summary>
      <param name="annotationName">Имя создаваемых заметок.</param>
      <param name="annotationFactory">Фабрика для создания заметок для каждого из столбцов.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.AttributeToTableAnnotationConvention`2">
      <summary>Класс общего назначения для соглашений Code First, который считывает атрибуты из типов .NET и формирует заметки таблиц на основе их атрибутов.</summary>
      <typeparam name="TAttribute">Тип атрибута для обнаружения.</typeparam>
      <typeparam name="TAnnotation">Тип заметки, которая будет создана.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.AttributeToTableAnnotationConvention`2.#ctor(System.String,System.Func{System.Type,System.Collections.Generic.IList{`0},`1})">
      <summary>Конструирует соглашение, которое будет создавать заметки таблиц с заданным именем и делегатом фабрики.</summary>
      <param name="annotationName">Имя создаваемых заметок.</param>
      <param name="annotationFactory">Фабрика для создания заметок для каждой из таблиц.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnAttributeConvention">
      <summary>Представляет соглашение об обработке экземпляров класса <see cref="T:System.ComponentModel.DataAnnotations.Schema.ColumnAttribute" />, найденных для свойств в модели.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnAttributeConvention.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnAttributeConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.Schema.ColumnAttribute)">
      <summary>Применяет соглашение к указанной конфигурации.</summary>
      <param name="configuration">Конфигурация.</param>
      <param name="attribute">Атрибут столбца.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConvention">
      <summary>Представляет соглашение о применении упорядочения столбцов, указанного через класс <see cref="T:System.ComponentModel.DataAnnotations.ColumnAttribute" /> или API <see cref="T:System.Data.Entity.DbModelBuilder" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConvention.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Применяет конфигурацию к указанному элементу в модели сопоставления.</summary>
      <param name="item">Элемент.</param>
      <param name="model">Модель сопоставления.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConvention.ValidateColumns(System.Data.Entity.Core.Metadata.Edm.EntityType,System.String)">
      <summary>Проверяет конфигурацию сортировки для столбцов.В этой базовой реализации никакие действия не выполняются.</summary>
      <param name="table">Имя таблицы, к которой принадлежат столбцы.</param>
      <param name="tableName">Определение таблицы.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConventionStrict">
      <summary>Соглашение о применении упорядочения столбцов, указанного через класс <see cref="T:System.ComponentModel.DataAnnotations.ColumnAttribute" /> или API <see cref="T:System.Data.Entity.DbModelBuilder" />.Это соглашение вызывает исключение, если обнаружен повторяющийся настроенный порядок столбцов.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConventionStrict.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConventionStrict" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ColumnOrderingConventionStrict.ValidateColumns(System.Data.Entity.Core.Metadata.Edm.EntityType,System.String)">
      <summary>Проверяет конфигурацию упорядочивания для столбцов, чтобы к двум столбцам не применялся одинаковый порядковый номер.</summary>
      <param name="table">Имя таблицы, к которой принадлежат столбцы.</param>
      <param name="tableName">Определение таблицы.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeAttributeConvention">
      <summary>Представляет соглашение об обработке экземпляров <see cref="T:System.ComponentModel.DataAnnotations.Schema.ComplexTypeAttribute" />, найденных для типов в модели.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeAttributeConvention.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeAttributeConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.ComplexTypeAttribute)">
      <summary>Применяет соглашение с заданными конфигурацией и атрибутом.</summary>
      <param name="configuration">Конфигурация.</param>
      <param name="attribute">Атрибут.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeDiscoveryConvention">
      <summary>Представляет соглашение об отнесении типа к сложному типу, если у него нет первичного ключа, нет сопоставленного базового типа и нет свойств навигации.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeDiscoveryConvention.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeDiscoveryConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ComplexTypeDiscoveryConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EdmModel,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Применяет конфигурацию к указанному элементу в модели сопоставления.</summary>
      <param name="item">Элемент.</param>
      <param name="model">Модель сопоставления.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ConcurrencyCheckAttributeConvention">
      <summary>Представляет соглашение об обработке экземпляров класса <see cref="T:System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute" />, найденных для свойств в модели.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ConcurrencyCheckAttributeConvention.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ConcurrencyCheckAttributeConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ConcurrencyCheckAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.ConcurrencyCheckAttribute)">
      <summary>Применяет это соглашение к свойству.</summary>
      <param name="configuration">Конфигурация для свойства, имеющего атрибут.</param>
      <param name="attribute">Атрибут.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.Convention">
      <summary>Соглашение, которое не переопределяет конфигурацию.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.#ctor">
      <summary>Производный класс может использовать конструктор по умолчанию для применения правила набора, изменяющего конфигурации модели.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.Properties">
      <summary>Начинает настройку облегченного соглашения, применяемого ко всем свойствам в модели.</summary>
      <returns>Объект конфигурации для соглашения.</returns>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.Properties``1">
      <summary>Начинает настройку облегченного соглашения, применяемого ко всем примитивным свойствам указанного типа в модели.</summary>
      <returns>Объект конфигурации для соглашения.</returns>
      <typeparam name="T">Тип свойства, к которому применяется соглашение.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.Types``1">
      <summary>Начинает конфигурацию облегченного соглашения, которое применяется ко всем сопоставленным типам в модели, производным от указанного типа или реализующим его.</summary>
      <returns>Объект конфигурации для соглашения.</returns>
      <typeparam name="T">Типы сущностей, к которым применяется настоящее соглашения.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.Convention.Types">
      <summary>Начинает настройку облегченного соглашения, применяемого ко всем сопоставленным типам в модели.</summary>
      <returns>Объект конфигурации для соглашения.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DatabaseGeneratedAttributeConvention">
      <summary>Представляет соглашение об обработке экземпляров класса <see cref="T:System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute" />, найденных для свойств в модели.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DatabaseGeneratedAttributeConvention.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.DatabaseGeneratedAttributeConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DatabaseGeneratedAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedAttribute)">
      <summary>Применяет соглашение к атрибуту с данной конфигурацией.</summary>
      <param name="configuration">Конфигурация.</param>
      <param name="attribute">Атрибут.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention">
      <summary>Соглашение об установке точности, равной 18, и масштаба, равного 2, для десятичных свойств.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention.#ctor">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention" /> со значениями по умолчанию.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention.#ctor(System.Byte,System.Byte)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention" /> с указанной точностью и масштабом.</summary>
      <param name="precision">Точность</param>
      <param name="scale">Масштаб</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DecimalPropertyConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Применяет это соглашение к свойству.</summary>
      <param name="item">Элемент.</param>
      <param name="model">Модель.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.DeclaredPropertyOrderingConvention">
      <summary>Представляет соглашение о перемещении свойств первичного ключа в начало.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DeclaredPropertyOrderingConvention.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.DeclaredPropertyOrderingConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.DeclaredPropertyOrderingConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Применяет данное соглашение к элементу модели.</summary>
      <param name="item">Элемент, к которому применяется соглашение.</param>
      <param name="model">Модель.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyAssociationMultiplicityConvention">
      <summary>Представляет соглашение о различении дополнительных и обязательных связей на основании допустимости значений NULL для свойства внешнего ключа в среде CLR.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyAssociationMultiplicityConvention.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyAssociationMultiplicityConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyAssociationMultiplicityConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Применяет конфигурацию к указанному элементу в модели сопоставления.</summary>
      <param name="item">Элемент.</param>
      <param name="model">Модель сопоставления.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention">
      <summary>Представляет базовый класс для соглашений, определяющих свойства внешнего ключа.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Применяет это соглашение к свойству.</summary>
      <param name="item">Элемент.</param>
      <param name="model">Модель.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention.MatchDependentKeyProperty(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>При переопределении возвращает true, если <paramref name="dependentProperty" /> должно быть частью внешнего ключа.</summary>
      <returns>Значение true, если свойство dependentProperty должно быть частью внешнего ключа; в противном случае — значение false.</returns>
      <param name="associationType">Тип ассоциации для настройки.</param>
      <param name="dependentAssociationEnd">Зависимый элемент.</param>
      <param name="dependentProperty">Свойство-кандидат для зависимого элемента.</param>
      <param name="principalEntityType">Тип сущности основного конечного элемента.</param>
      <param name="principalKeyProperty">Свойство ключа в основном конечном элементе, который является целевым кандидатом для внешнего ключа.</param>
    </member>
    <member name="P:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyDiscoveryConvention.SupportsMultipleAssociations">
      <summary>Получает значение, указывающее, поддерживает ли соглашение сопряжение типов сущностей с несколькими ассоциациями между ними.</summary>
      <returns>Значение true, если соглашение поддерживает сопряжение типов сущностей с несколькими ассоциациями между ними; в противном случае — значение false.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyIndexConvention">
      <summary>Представляет соглашение для представления индексов внешних ключей.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyIndexConvention.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyIndexConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyIndexConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Применяет это соглашение к свойству.</summary>
      <param name="item">Элемент.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyNavigationPropertyAttributeConvention">
      <summary>Представляет соглашение об обработке экземпляров класса <see cref="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute" />, найденных для свойств навигации модели.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyNavigationPropertyAttributeConvention.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyNavigationPropertyAttributeConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyNavigationPropertyAttributeConvention.Apply(System.Data.Entity.Core.Metadata.Edm.NavigationProperty,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Применяет данное соглашение к элементу модели.</summary>
      <param name="item">Элемент, к которому применяется соглашение.</param>
      <param name="model">Модель базы данных.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyPrimitivePropertyAttributeConvention">
      <summary>Представляет соглашение об обработке экземпляров класса <see cref="T:System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute" />, обнаруженного в свойствах внешнего ключа модели.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyPrimitivePropertyAttributeConvention.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyPrimitivePropertyAttributeConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ForeignKeyPrimitivePropertyAttributeConvention.Apply(System.Reflection.PropertyInfo,System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.ForeignKeyAttribute)">
      <summary>Применяет конфигурацию к указанному атрибуту.</summary>
      <param name="memberInfo">Сведения о свойстве.</param>
      <param name="configuration">Настройка, которая будет выполнена для типа сущности в модели.</param>
      <param name="attribute">Свойство или класс, исключенные из сопоставления базы данных.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IConceptualModelConvention`1">
      <summary>Соглашение, которое действует для концептуального раздела модели после ее создания.</summary>
      <typeparam name="T">Тип элемента метаданных, с которым работает данное соглашение.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.IConceptualModelConvention`1.Apply(`0,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Применяет данное соглашение к элементу модели.</summary>
      <param name="item">Элемент, к которому применяется соглашение.</param>
      <param name="model">Модель.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IConvention">
      <summary>Идентифицирует соглашения, которые можно добавить в экземпляр <see cref="T:System.Data.Entity.DbModelBuilder" /> или удалить из него.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IdKeyDiscoveryConvention">
      <summary>Соглашение об обнаружении свойств первичного ключа.Распознаваемые шаблоны именования в порядке очередности: 1. 'Id' 2.[введите имя]Id При обнаружении первичного ключа регистр не учитывается.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.IdKeyDiscoveryConvention.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.IdKeyDiscoveryConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.IdKeyDiscoveryConvention.MatchKeyProperty(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmProperty})">
      <summary>Соглашение о соответствии класса <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" />.</summary>
      <returns>Класс <see cref="T:System.Data.Entity.Core.Metadata.Edm.EdmProperty" /> для согласования.</returns>
      <param name="entityType">Тип сущности.</param>
      <param name="primitiveProperties">Коллекция свойств примитивов.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IndexAttributeConvention">
      <summary>Соглашение для обнаружения атрибутов <see cref="T:System.ComponentModel.DataAnnotations.Schema.IndexAttribute" /> на свойствах и формирования заметок столбцов <see cref="T:System.Data.Entity.Infrastructure.Annotations.IndexAnnotation" /> в модели.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.IndexAttributeConvention.#ctor">
      <summary>Создает новый экземпляр соглашения.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.InversePropertyAttributeConvention">
      <summary>Представляет соглашение об обработке экземпляров класса <see cref="T:System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute" />, найденных для свойств в модели.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.InversePropertyAttributeConvention.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.InversePropertyAttributeConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.InversePropertyAttributeConvention.Apply(System.Reflection.PropertyInfo,System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute)">
      <summary>Применяет соглашение к указанному атрибуту с конфигурацией.</summary>
      <param name="memberInfo">Сведения о члене.</param>
      <param name="configuration">Конфигурация.</param>
      <param name="attribute">Атрибут.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.IStoreModelConvention`1">
      <summary>Соглашение, которое действует для раздела базы данных модели после ее создания.</summary>
      <typeparam name="T">Тип элемента метаданных, с которым работает данное соглашение.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.IStoreModelConvention`1.Apply(`0,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Применяет данное соглашение к элементу модели.</summary>
      <param name="item">Элемент, к которому применяется соглашение.</param>
      <param name="model">Модель.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.KeyAttributeConvention">
      <summary>Соглашение об обработке экземпляров класса <see cref="T:System.ComponentModel.DataAnnotations.KeyAttribute" />, найденных для свойств в модели.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.KeyAttributeConvention.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.KeyAttributeConvention" />.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.KeyDiscoveryConvention">
      <summary>Представляет базовый класс для соглашений, определяющих свойства первичного ключа.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.KeyDiscoveryConvention.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.KeyDiscoveryConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.KeyDiscoveryConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Применяет данное соглашение к элементу модели.</summary>
      <param name="item">Элемент, к которому применяется соглашение.</param>
      <param name="model">Модель.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.KeyDiscoveryConvention.MatchKeyProperty(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Collections.Generic.IEnumerable{System.Data.Entity.Core.Metadata.Edm.EdmProperty})">
      <summary>При переопределении возвращает подмножество свойств, которые будут частью первичного ключа.</summary>
      <returns>Свойства, которые будут частью первичного ключа.</returns>
      <param name="entityType">Тип сущности.</param>
      <param name="primitiveProperties">Типы-примитивы сущностей.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.ManyToManyCascadeDeleteConvention">
      <summary>Соглашение о добавлении каскадного удаления в таблицу соединения из обеих таблиц, участвующих в связи «многие ко многим».</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.ManyToManyCascadeDeleteConvention.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.ManyToManyCascadeDeleteConvention" />.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.MappingInheritedPropertiesSupportConvention">
      <summary>Соглашение гарантировать недопустимое или неподдерживаемое сопоставление не создается при сопоставлении наследуемых свойств</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.MappingInheritedPropertiesSupportConvention.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.MappingInheritedPropertiesSupportConvention" />.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.MaxLengthAttributeConvention">
      <summary>Представляет соглашение об обработке экземпляров класса <see cref="T:System.ComponentModel.DataAnnotations.MaxLengthAttribute" />, найденных для свойств в модели.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.MaxLengthAttributeConvention.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.MaxLengthAttributeConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.MaxLengthAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.MaxLengthAttribute)">
      <summary>Применяет соглашение к атрибуту с указанной конфигурацией.</summary>
      <param name="configuration">Конфигурация.</param>
      <param name="attribute">Атрибут.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention">
      <summary>Соглашение об обнаружении свойств внешнего ключа, чьи имена являются сочетанием имени зависимого свойства навигации и имен свойств первичного ключа основного типа.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention.MatchDependentKeyProperty(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>Согласовывает ключ зависимой модели сущности.</summary>
      <returns>Возвращает значение типа <see cref="T:System.Boolean" />.</returns>
      <param name="associationType">Объект метаданных типа ассоциации.</param>
      <param name="dependentAssociationEnd">Элемент зависимой ассоциации.</param>
      <param name="dependentProperty">Зависимое свойство.</param>
      <param name="principalEntityType">Тип сущности участника</param>
      <param name="principalKeyProperty">Свойство основного ключа.</param>
    </member>
    <member name="P:System.Data.Entity.ModelConfiguration.Conventions.NavigationPropertyNameForeignKeyDiscoveryConvention.SupportsMultipleAssociations">
      <summary>Возвращает или задает значение, которое указывает, поддерживает ли соглашение несколько ассоциаций.</summary>
      <returns>Значение true, если соглашение поддерживает несколько ассоциаций; в противном случае — значение false.</returns>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedPropertyAttributeConvention">
      <summary>Представляет соглашение об обработке экземпляров класса <see cref="T:System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute" />, найденных для свойств в модели.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NotMappedPropertyAttributeConvention.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedPropertyAttributeConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NotMappedPropertyAttributeConvention.Apply(System.Reflection.PropertyInfo,System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute)">
      <summary>Применяет конфигурацию к указанному атрибуту.</summary>
      <param name="memberInfo">Сведения о свойстве.</param>
      <param name="configuration">Настройка, которая будет выполнена для типа сущности в модели.</param>
      <param name="attribute">Свойство или класс, исключенные из сопоставления базы данных.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedTypeAttributeConvention">
      <summary>Представляет соглашение об обработке экземпляров класса <see cref="T:System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute" />, найденных для типов в модели.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NotMappedTypeAttributeConvention.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.NotMappedTypeAttributeConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.NotMappedTypeAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute)">
      <summary>Применяет конфигурацию к указанному атрибуту.</summary>
      <param name="configuration">Настройка, которая будет выполнена для типа сущности в модели.</param>
      <param name="attribute">Свойство или класс, исключенные из сопоставления базы данных.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.OneToManyCascadeDeleteConvention">
      <summary>Предоставляет соглашение о включении каскадного удаления для любых требуемых связей.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.OneToManyCascadeDeleteConvention.#ctor">
      <summary>Инициализирует новые экземпляры класса <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.OneToManyCascadeDeleteConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.OneToManyCascadeDeleteConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Применяет данное соглашение к элементу модели.</summary>
      <param name="item">Элемент, к которому применяется соглашение.</param>
      <param name="model">Модель базы данных.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.OneToOneConstraintIntroductionConvention">
      <summary>Предоставляет соглашение о настройке первичных ключей зависимого типа сущности как внешних ключей в связи «один к одному».</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.OneToOneConstraintIntroductionConvention.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.OneToOneConstraintIntroductionConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.OneToOneConstraintIntroductionConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Применяет данное соглашение к элементу модели.</summary>
      <param name="item">Элемент, к которому применяется соглашение.</param>
      <param name="model">Модель базы данных.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingEntitySetNameConvention">
      <summary>Представляет соглашение об установке имени набора сущностей в виде множественного числа от имени типа сущности.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PluralizingEntitySetNameConvention.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingEntitySetNameConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PluralizingEntitySetNameConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntitySet,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Применяет это соглашение к свойству.</summary>
      <param name="item">Набор сущностей.</param>
      <param name="model">Модель базы данных.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingTableNameConvention">
      <summary>Представляет соглашение об установке имени таблицы в виде множественного числа от имени типа сущности.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PluralizingTableNameConvention.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PluralizingTableNameConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PluralizingTableNameConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Применяет данное соглашение к элементу модели.</summary>
      <param name="item">Элемент, к которому применяется соглашение.</param>
      <param name="model">Модель.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PrimaryKeyNameForeignKeyDiscoveryConvention">
      <summary>Соглашение об обнаружении свойств внешнего ключа, чьи имена совпадают с именами свойств первичного ключа основного типа.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PrimaryKeyNameForeignKeyDiscoveryConvention.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PrimaryKeyNameForeignKeyDiscoveryConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PrimaryKeyNameForeignKeyDiscoveryConvention.MatchDependentKeyProperty(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>Сопоставляет зависимое свойство ключа, связанное с соглашением.</summary>
      <returns>Сопоставленное зависимое свойство ключа.</returns>
      <param name="associationType">Тип ассоциации.</param>
      <param name="dependentAssociationEnd">Зависимый элемент ассоциации.</param>
      <param name="dependentProperty">Зависимое свойство.</param>
      <param name="principalEntityType">Основной тип сущности.</param>
      <param name="principalKeyProperty">Свойство основного ключа.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PrimitivePropertyAttributeConfigurationConvention`1">
      <summary>Базовый класс для соглашений, обрабатывающих атрибуты CLR, найденные на примитивных свойствах модели.</summary>
      <typeparam name="TAttribute">Тип искомого атрибута.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PrimitivePropertyAttributeConfigurationConvention`1.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PrimitivePropertyAttributeConfigurationConvention`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PrimitivePropertyAttributeConfigurationConvention`1.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,`0)">
      <summary>Применяет данное соглашение к свойству, к которому применен атрибут типа TAttribute.</summary>
      <param name="configuration">Конфигурация для свойства, имеющего атрибут.</param>
      <param name="attribute">Атрибут.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyAttributeConfigurationConvention`1">
      <summary>Базовый класс для соглашений, обрабатывающих атрибуты CLR, основанные на свойствах типов модели.</summary>
      <typeparam name="TAttribute">Тип искомого атрибута.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyAttributeConfigurationConvention`1.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyAttributeConfigurationConvention`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyAttributeConfigurationConvention`1.Apply(System.Reflection.PropertyInfo,System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,`0)">
      <summary>Применяет данное соглашение к свойству, к которому применен атрибут типа TAttribute.</summary>
      <param name="memberInfo">Информация об элементе для свойства, имеющего атрибут.</param>
      <param name="configuration">Конфигурация для класса, который содержит свойство.</param>
      <param name="attribute">Атрибут.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention">
      <summary>Представляет соглашение для установки максимальной длины свойств, тип которых поддерживает аспекты длины.Значение по умолчанию — 128.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention" /> с длиной по умолчанию.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention.#ctor(System.Int32)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention" /> с указанной длиной.</summary>
      <param name="length">Максимальная длина свойств.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention.Apply(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Применяет соглашение с данной конфигурацией модели.</summary>
      <param name="item">Элемент.</param>
      <param name="model">Модель сопоставления.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention.Apply(System.Data.Entity.Core.Metadata.Edm.ComplexType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Применяет соглашение с данной конфигурацией модели.</summary>
      <param name="item">Элемент.</param>
      <param name="model">Модель сопоставления.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.PropertyMaxLengthConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Применяет соглашение с данной конфигурацией модели.</summary>
      <param name="item">Элемент.</param>
      <param name="model">Модель сопоставления.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredNavigationPropertyAttributeConvention">
      <summary>Соглашение об обработке экземпляров класса <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute" />, найденных для свойств навигации в модели.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.RequiredNavigationPropertyAttributeConvention.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredNavigationPropertyAttributeConvention" />.</summary>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredPrimitivePropertyAttributeConvention">
      <summary>Представляет соглашение об обработке экземпляров класса <see cref="T:System.ComponentModel.DataAnnotations.RequiredAttribute" />, найденных для свойств примитива в модели.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.RequiredPrimitivePropertyAttributeConvention.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.RequiredPrimitivePropertyAttributeConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.RequiredPrimitivePropertyAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.RequiredAttribute)">
      <summary>Применяет соглашение к атрибуту с данной конфигурацией.</summary>
      <param name="configuration">Конфигурация.</param>
      <param name="attribute">Атрибут.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention">
      <summary>Представляет соглашение задавать максимально допустимую длину по умолчанию, равную 4000, для свойств, тип которых поддерживает аспекты длины, если поставщиком является SqlCe.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention.#ctor">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention" /> с длиной по умолчанию.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention.#ctor(System.Int32)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention" /> с указанной длиной.</summary>
      <param name="length">Максимальная длина свойств по умолчанию.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention.Apply(System.Data.Entity.Core.Metadata.Edm.ComplexType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Применяет соглашение к заданному поставщику.</summary>
      <param name="item">Элемент.</param>
      <param name="model">Модель.</param>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.SqlCePropertyMaxLengthConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Применяет соглашение к заданному поставщику.</summary>
      <param name="item">Элемент.</param>
      <param name="model">Модель.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.StoreGeneratedIdentityKeyConvention">
      <summary>Представляет соглашение о настройке использования целочисленных первичных ключей в качестве идентификаторов.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.StoreGeneratedIdentityKeyConvention.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.StoreGeneratedIdentityKeyConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.StoreGeneratedIdentityKeyConvention.Apply(System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Infrastructure.DbModel)">
      <summary>Применяет конфигурацию к указанному элементу в модели сопоставления.</summary>
      <param name="item">Элемент.</param>
      <param name="model">Модель сопоставления.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.StringLengthAttributeConvention">
      <summary>Представляет соглашение об обработке экземпляров класса <see cref="T:System.ComponentModel.DataAnnotations.StringLengthAttribute" />, найденных для свойств в модели.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.StringLengthAttributeConvention.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.StringLengthAttributeConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.StringLengthAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.StringLengthAttribute)">
      <summary>Применяет соглашение с заданными конфигурацией и атрибутом.</summary>
      <param name="configuration">Конфигурация.</param>
      <param name="attribute">Атрибут.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TableAttributeConvention">
      <summary>Представляет соглашение об обработке экземпляров класса <see cref="T:System.ComponentModel.DataAnnotations.Schema.TableAttribute" />, найденных для типов в модели.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TableAttributeConvention.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.TableAttributeConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TableAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,System.ComponentModel.DataAnnotations.Schema.TableAttribute)">
      <summary>Применяет это соглашение к свойству.</summary>
      <param name="configuration">Конфигурация для свойства, имеющего атрибут.</param>
      <param name="attribute">Атрибут.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TimestampAttributeConvention">
      <summary>Представляет соглашение об обработке экземпляров класса <see cref="T:System.ComponentModel.DataAnnotations.TimestampAttribute" />, найденных для свойств в модели.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TimestampAttributeConvention.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.TimestampAttributeConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TimestampAttributeConvention.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionPrimitivePropertyConfiguration,System.ComponentModel.DataAnnotations.TimestampAttribute)">
      <summary>Применяет это соглашение к свойству.</summary>
      <param name="configuration">Конфигурация для свойства, имеющего атрибут.</param>
      <param name="attribute">Атрибут.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TypeAttributeConfigurationConvention`1">
      <summary>Базовый класс для соглашений, обрабатывающих атрибуты CLR, имеющиеся в модели.</summary>
      <typeparam name="TAttribute">Тип искомого атрибута.</typeparam>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TypeAttributeConfigurationConvention`1.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.TypeAttributeConfigurationConvention`1" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TypeAttributeConfigurationConvention`1.Apply(System.Data.Entity.ModelConfiguration.Configuration.ConventionTypeConfiguration,`0)">
      <summary>Применяет данное соглашение к классу, к которому применен атрибут типа TAttribute.</summary>
      <param name="configuration">Конфигурация для класса, который содержит свойство.</param>
      <param name="attribute">Атрибут.</param>
    </member>
    <member name="T:System.Data.Entity.ModelConfiguration.Conventions.TypeNameForeignKeyDiscoveryConvention">
      <summary>Соглашение об обнаружении свойств внешнего ключа, чьи имена являются сочетанием имени основного типа и имен свойств первичного ключа основного типа.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TypeNameForeignKeyDiscoveryConvention.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.ModelConfiguration.Conventions.TypeNameForeignKeyDiscoveryConvention" />.</summary>
    </member>
    <member name="M:System.Data.Entity.ModelConfiguration.Conventions.TypeNameForeignKeyDiscoveryConvention.MatchDependentKeyProperty(System.Data.Entity.Core.Metadata.Edm.AssociationType,System.Data.Entity.Core.Metadata.Edm.AssociationEndMember,System.Data.Entity.Core.Metadata.Edm.EdmProperty,System.Data.Entity.Core.Metadata.Edm.EntityType,System.Data.Entity.Core.Metadata.Edm.EdmProperty)">
      <summary>Определяет, соответствует ли свойство зависимого ключа текущему ключу.</summary>
      <returns>Значение true, если свойство зависимого ключа соответствует текущему ключу; в противном случае — значение false.</returns>
      <param name="associationType">Тип ассоциации.</param>
      <param name="dependentAssociationEnd">Зависимый конечный элемент ассоциации.</param>
      <param name="dependentProperty">Зависимое свойство.</param>
      <param name="principalEntityType">Основной тип сущности.</param>
      <param name="principalKeyProperty">Свойство основного ключа.</param>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbGeography">
      <summary>Представляет данные в геодезической системе координат (для круглой земли).</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Area">
      <summary>Возвращает значение типа double, допускающее значение NULL, определяющее область этого значения DbGeography, которая может иметь значение NULL, если оно не представляет поверхность.</summary>
      <returns>Значение double, допускающее значение NULL, которое определяет область данного значения DbGeography.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.AsBinary">
      <summary>Создает известное двоичное представление этого значения DbGeography.</summary>
      <returns>Известное двоичное представление этого значения DbGeography.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.AsGml">
      <summary>Создает представление на языке GML этого значения DbGeography.</summary>
      <returns>Строка, содержащая представление на языке GML этого значения DbGeography.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.AsText">
      <summary>Создает известное текстовое представление этого значения DbGeography.Включает только широту и долготу для точек.</summary>
      <returns>Строка, содержащая известное текстовое представление этого значения DbGeography.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Buffer(System.Nullable{System.Double})">
      <summary>Возвращает объект geography, представляющий объединение всех точек, расстояние которых от экземпляра geography меньше указанного значения или равно ему.</summary>
      <returns>Объект geography, представляющий объединение всех точек</returns>
      <param name="distance">Расстояние.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.CoordinateSystemId">
      <summary>Возвращает идентификатор, связанный с системой координат.</summary>
      <returns>Идентификатор, связанный с системой координат.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId">
      <summary>Возвращает идентификатор (SRID) системы координат по умолчанию для значений типа geography (WGS 84)</summary>
      <returns>Идентификатор (SRID) системы координат по умолчанию для значений типа geography (WGS 84)</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Difference(System.Data.Entity.Spatial.DbGeography)">
      <summary>Вычисляет разность этого значения DbGeography и другого значения DbGeography.</summary>
      <returns>Новое значение DbGeography, представляющее разность между этим значением geography и другим.</returns>
      <param name="other">Значение типа geography, для которого необходимо вычислить разность с этим значением.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Dimension">
      <summary>Возвращает измерение заданного значения <see cref="T:System.Data.Entity.Spatial.DbGeography" /> или, если значение является коллекцией, измерение наибольшего элемента.</summary>
      <returns>Измерение данного значения <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Disjoint(System.Data.Entity.Spatial.DbGeography)">
      <summary>Определяет, имеет ли это значение DbGeography пространственное перекрытие с указанным аргументом DbGeography.</summary>
      <returns>Значение true, если другое значение не имеет пространственного перекрытия с этим значением geography. В противном случае — значение false.</returns>
      <param name="other">Значение типа geography, которое следует сравнивать с этим значением geography для определения отсутствия пространственного перекрытия.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Distance(System.Data.Entity.Spatial.DbGeography)">
      <summary>Вычисляет расстояние между ближайшими точками в этом значении DbGeography и другом значении DbGeography.</summary>
      <returns>Значение типа double, задающее расстояние между двумя ближайшими точками в этом значении geography и другом.</returns>
      <param name="other">Значение типа geography, для которого необходимо вычислить расстояние от этого значения.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.ElementAt(System.Int32)">
      <summary>Возвращает элемент из определенной позиции этого значения DbGeography, если оно представляет коллекцию geography.&amp;amp;lt;param name="index"&amp;amp;gt;Позиция в этом значении geography, из которого должен быть извлечен элемент.&amp;amp;lt;/param&amp;amp;gt;&amp;amp;lt;returns&amp;amp;gt;Элемент в указанной позиции этого значения geography, если оно представляет коллекцию других значений типа geography. В противном случае — значение NULL.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>Элемент этого значения DbGeography из определенной позиции</returns>
      <param name="index">Индекс.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.ElementCount">
      <summary>Возвращает количество элементов в этом значении DbGeography, если оно представляет коллекцию geography.&amp;amp;lt;returns&amp;amp;gt;Число элементов в этом значении geography, если оно представляет коллекцию других значений типа geography. В противном случае — значение NULL.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>Число элементов в этом значении DbGeography.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Elevation">
      <summary>Возвращает высоту (координату Z) этого значения DbGeography, если оно представляет точку.&amp;amp;lt;returns&amp;amp;gt;Возвышение (координата Z) этого значения типа geography, если оно представляет точку. В противном случае — значение NULL.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>Возвышение (координата Z) этого значения DbGeography.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.EndPoint">
      <summary>Возвращает значение DbGeography, представляющее начальную точку этого значения. Может иметь значение NULL, если это значение DbGeography не представляет кривую.</summary>
      <returns>Значение DbGeography, представляющее начальную точку этого значения.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromBinary(System.Byte[])">
      <summary>Создает новое значение <see cref="T:System.Data.Entity.Spatial.DbGeography" />, основанное на указанном известном двоичном значении.</summary>
      <returns>Новое значение DbGeography, определенное известным двоичным значением с идентификатором (SRID) системы координат geography по умолчанию ( <see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" /> ).</returns>
      <param name="wellKnownBinary">Байтовый массив, содержащий известное двоичное представление значения geography.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение <see cref="T:System.Data.Entity.Spatial.DbGeography" />, основанное на указанном известном двоичном значении и идентификаторе (SRID) системы координат.</summary>
      <returns>Новое значение DbGeography, определенное известным двоичным значением с указанным идентификатором системы координат.</returns>
      <param name="wellKnownBinary">Байтовый массив, содержащий известное двоичное представление значения geography.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которую должно использовать новое значение DbGeography.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromGml(System.String)">
      <summary>Создает новое значение <see cref="T:System.Data.Entity.Spatial.DbGeography" /> на основе заданного значения на языке GML.</summary>
      <returns>Новое значение DbGeography, определенное значением на языке GML с идентификатором (SRID) системы координат geography по умолчанию ( <see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" /> ).</returns>
      <param name="geographyMarkup">Строка, содержащая представление на языке GML значения geography.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromGml(System.String,System.Int32)">
      <summary>Создает новое значение <see cref="T:System.Data.Entity.Spatial.DbGeography" /> на основе заданного значения на языке GML и идентификатора (SRID) системы координат.</summary>
      <returns>Новое значение DbGeography, определенное значением на языке GML с указанным идентификатором системы координат.</returns>
      <param name="geographyMarkup">Строка, содержащая представление на языке GML значения geography.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которую должно использовать новое значение DbGeography.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromText(System.String)">
      <summary>Создает новое значение <see cref="T:System.Data.Entity.Spatial.DbGeography" />, основанное на указанном известном текстовом значении.</summary>
      <returns>Новое значение DbGeography, определенное известным текстовым значением с идентификатором (SRID) системы координат geography по умолчанию ( <see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" /> ).</returns>
      <param name="wellKnownText">Строка, содержащая известное текстовое представление значения geography.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.FromText(System.String,System.Int32)">
      <summary>Создает новое значение <see cref="T:System.Data.Entity.Spatial.DbGeography" />, основанное на указанном известном текстовом значении и идентификаторе (SRID) системы координат.</summary>
      <returns>Новое значение DbGeography, определенное известным текстовым значением с указанным идентификатором системы координат.</returns>
      <param name="wellKnownText">Строка, содержащая известное текстовое представление значения geography.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которую должно использовать новое значение DbGeography.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.GeographyCollectionFromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение коллекции <see cref="T:System.Data.Entity.Spatial.DbGeography" />, основанное на указанном известном двоичном значении и идентификаторе (SRID) системы координат.</summary>
      <returns>Новое значение DbGeography, определенное известным двоичным значением с указанным идентификатором системы координат.</returns>
      <param name="geographyCollectionWellKnownBinary">Байтовый массив, содержащий известное двоичное представление значения geography.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которую должно использовать новое значение DbGeography.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.GeographyCollectionFromText(System.String,System.Int32)">
      <summary>Создает новое значение коллекции <see cref="T:System.Data.Entity.Spatial.DbGeography" />, основанное на указанном известном текстовом значении и идентификаторе (SRID) системы координат.</summary>
      <returns>Новое значение DbGeography, определенное известным текстовым значением с указанным идентификатором системы координат.</returns>
      <param name="geographyCollectionWellKnownText">Строка, содержащая известное текстовое представление значения geography.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которую должно использовать новое значение DbGeography.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Intersection(System.Data.Entity.Spatial.DbGeography)">
      <summary>Вычисляет пересечение этого значения DbGeography и другого значения DbGeography.</summary>
      <returns>Новое значение DbGeography, представляющее пересечение между этим значением geography и другим.</returns>
      <param name="other">Значение типа geography, для которого необходимо вычислить пересечение с этим значением.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Intersects(System.Data.Entity.Spatial.DbGeography)">
      <summary>Определяет, пересекается ли это значение DbGeography с указанным аргументом DbGeography.</summary>
      <returns>Значение true, если другое значение пересекается с этим значением geography; в противном случае — значение false.</returns>
      <param name="other">Значение типа geography, которое следует сравнивать с этим значением geography для определения пересечения.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.IsClosed">
      <summary>Возвращает логическое значение, допускающее значение NULL, указывающее, замкнуто ли это значение DbGeography. Может иметь значение NULL, если значение не представляет кривую.</summary>
      <returns>Значение true, если это значение DbGeography замкнуто; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.IsEmpty">
      <summary>Возвращает логическое значение, допускающее значение null, указывающее, пусто ли это значение DbGeography.</summary>
      <returns>Значение true, если это значение DbGeography пусто; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Latitude">
      <summary>Возвращает координату широты этого значения DbGeography, если оно представляет точку.&amp;amp;lt;returns&amp;amp;gt;Широта этого значения типа geography, если оно представляет точку. В противном случае — значение NULL.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>Широта этого значения DbGeography.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Length">
      <summary>Возвращает значение типа double, допускающее значение NULL, определяющее длину этого значения DbGeography, которое может иметь значение NULL, если оно не представляет кривую.</summary>
      <returns>Значение double, допускающее значение NULL, определяющее длину этого значения DbGeography.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.LineFromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение line <see cref="T:System.Data.Entity.Spatial.DbGeography" />, основанное на указанном известном двоичном значении и идентификаторе (SRID) системы координат.</summary>
      <returns>Новое значение DbGeography, определенное известным двоичным значением с указанным идентификатором системы координат.</returns>
      <param name="lineWellKnownBinary">Байтовый массив, содержащий известное двоичное представление значения geography.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которую должно использовать новое значение DbGeography.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.LineFromText(System.String,System.Int32)">
      <summary>Создает новое значение line <see cref="T:System.Data.Entity.Spatial.DbGeography" />, основанное на указанном известном текстовом значении и идентификаторе (SRID) системы координат.</summary>
      <returns>Новое значение DbGeography, определенное известным текстовым значением с указанным идентификатором системы координат.</returns>
      <param name="lineWellKnownText">Строка, содержащая известное текстовое представление значения geography.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которую должно использовать новое значение DbGeography.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Longitude">
      <summary>Возвращает координату долготы этого значения DbGeography, если оно представляет точку.&amp;amp;lt;returns&amp;amp;gt;Долгота этого значения типа geography, если оно представляет точку. В противном случае — значение NULL.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>Долгота этого значения DbGeography.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Measure">
      <summary>Возвращает координату М (мера) этого значения DbGeography, если оно представляет точку.&amp;amp;lt;returns&amp;amp;gt;Значение координаты M (меры) этого значения типа geography, если оно представляет точку. В противном случае — значение NULL.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>Координата M (мера) этого значения DbGeography.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiLineFromBinary(System.Byte[],System.Int32)">
      <summary>Возвращает значение multiline из двоичного значения.</summary>
      <returns>Значение multiline из двоичного значения.</returns>
      <param name="multiLineWellKnownBinary">Известное двоичное значение.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiLineFromText(System.String,System.Int32)">
      <summary>Возвращает значение multiline из значения в известном формате.</summary>
      <returns>Значение multiline из значения в известном формате.</returns>
      <param name="multiLineWellKnownText">Значение в известном двоичном формате.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiPointFromBinary(System.Byte[],System.Int32)">
      <summary>Возвращает значение multipoint из значения в известном двоичном формате.</summary>
      <returns>Значение multipoint из значения в известном двоичном формате.</returns>
      <param name="multiPointWellKnownBinary">Известное двоичное значение.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiPointFromText(System.String,System.Int32)">
      <summary>Возвращает значение multipoint из значения в известном формате.</summary>
      <returns>Значение multipoint из значения в известном формате.</returns>
      <param name="multiPointWellKnownText">Известное текстовое значение.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>Возвращает значение multi polygon из значения в известном двоичном формате.</summary>
      <returns>Значение multi polygon из значения в известном двоичном формате.</returns>
      <param name="multiPolygonWellKnownBinary">Значение multi polygon в известном двоичном формате.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.MultiPolygonFromText(System.String,System.Int32)">
      <summary>Возвращает значение multi polygon из значения в известном формате.</summary>
      <returns>Значение multi polygon из значения в известном формате.</returns>
      <param name="multiPolygonWellKnownText">Значение multi polygon в известном формате.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.PointAt(System.Int32)">
      <summary>Возвращает элемент из конкретной позиции этого значения DbGeography, если она представляет тип «linestring» или линейное кольцо.&amp;amp;lt;param name="index"&amp;amp;gt;Позиция в этом значении geography, из которого должен быть извлечен элемент.&amp;amp;lt;/param&amp;amp;gt;&amp;amp;lt;returns&amp;amp;gt;Элемент в указанной позиции этого значения geography, если оно представляет ломаную или линейное кольцо. В противном случае — значение NULL.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>Элемент этого значения DbGeography из определенной позиции</returns>
      <param name="index">Индекс.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.PointCount">
      <summary>Возвращает количество точек в этом значении DbGeography, если оно представляет тип «linestring» или линейное кольцо.&amp;amp;lt;returns&amp;amp;gt;Число элементов этого значения типа geography, если оно представляет ломаную или линейное кольцо. В противном случае — значение NULL.&amp;amp;lt;/returns&amp;amp;gt;</summary>
      <returns>Число точек в этом значении DbGeography.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.PointFromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение point <see cref="T:System.Data.Entity.Spatial.DbGeography" />, основанное на указанном известном двоичном значении и идентификаторе (SRID) системы координат.</summary>
      <returns>Новое значение DbGeography, определенное известным двоичным значением с указанным идентификатором системы координат.</returns>
      <param name="pointWellKnownBinary">Байтовый массив, содержащий известное двоичное представление значения geography.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которую должно использовать новое значение DbGeography.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.PointFromText(System.String,System.Int32)">
      <summary>Создает новое значение point <see cref="T:System.Data.Entity.Spatial.DbGeography" />, основанное на указанном известном текстовом значении и идентификаторе (SRID) системы координат.</summary>
      <returns>Новое значение DbGeography, определенное известным текстовым значением с указанным идентификатором системы координат.</returns>
      <param name="pointWellKnownText">Строка, содержащая известное текстовое представление значения geography.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которую должно использовать новое значение DbGeography.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.PolygonFromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение polygon <see cref="T:System.Data.Entity.Spatial.DbGeography" />, основанное на указанном известном двоичном значении и идентификаторе (SRID) системы координат.</summary>
      <returns>Новое значение DbGeography, определенное известным двоичным значением с указанным идентификатором системы координат.</returns>
      <param name="polygonWellKnownBinary">Байтовый массив, содержащий известное двоичное представление значения geography.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которую должно использовать новое значение DbGeography.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.PolygonFromText(System.String,System.Int32)">
      <summary>Создает новое значение polygon <see cref="T:System.Data.Entity.Spatial.DbGeography" />, основанное на указанном известном текстовом значении и идентификаторе (SRID) системы координат.</summary>
      <returns>Новое значение DbGeography, определенное известным текстовым значением с указанным идентификатором системы координат.</returns>
      <param name="polygonWellKnownText">Строка, содержащая известное текстовое представление значения geography.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которую должно использовать новое значение DbGeography.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.Provider">
      <summary>Возвращает пространственный поставщик, который будет использоваться для операций этого пространственного типа.</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.ProviderValue">
      <summary>Возвращает представление этого значения DbGeography, зависящее от базового поставщика, создавшего его.</summary>
      <returns>GML-представление этого значения DbGeography.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.SpatialEquals(System.Data.Entity.Spatial.DbGeography)">
      <summary>Определяет, является ли это значение DbGeography пространственно равным указанному аргументу DbGeography.</summary>
      <returns>Значение true, если другое значение пространственно равно этому значению geography. В противном случае — значение false.</returns>
      <param name="other">Значение типа geography, которое следует сравнивать с этим значением geography для определения равенства.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.SpatialTypeName">
      <summary>Возвращает имя пространственного типа DBGeography.</summary>
      <returns>Имя пространственного типа DBGeography.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.StartPoint">
      <summary>Возвращает значение DbGeography, представляющее начальную точку этого значения. Может иметь значение NULL, если это значение DbGeography не представляет кривую.</summary>
      <returns>Значение DbGeography, представляющее начальную точку этого значения.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.SymmetricDifference(System.Data.Entity.Spatial.DbGeography)">
      <summary>Вычисляет симметрическую разность этого значения DbGeography и другого значения DbGeography.</summary>
      <returns>Новое значение DbGeography, представляющее симметрическую разность между этим значением geography и другим.</returns>
      <param name="other">Значение типа geography, для которого необходимо вычислить симметрическую разность с этим значением.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.ToString">
      <summary>Возвращает строковое представление значения geography.</summary>
      <returns>Строковое представление значения geography.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeography.Union(System.Data.Entity.Spatial.DbGeography)">
      <summary>Вычисляет объединение этого значения DbGeography и другого значения DbGeography.</summary>
      <returns>Новое значение DbGeography, представляющее объединение этого значения geography и другого.</returns>
      <param name="other">Значение типа geography, для которого необходимо вычислить объединение с этим значением.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeography.WellKnownValue">
      <summary>Возвращает или задает сериализуемое известное представление контракта данных этого значения DbGeography.</summary>
      <returns>Сериализуемое известное представление контракта данных этого значения DbGeography.</returns>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbGeographyWellKnownValue">
      <summary>Сериализуемое представление контракта данных значения <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeographyWellKnownValue.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Spatial.DbGeographyWellKnownValue" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeographyWellKnownValue.CoordinateSystemId">
      <summary>Возвращает или задает идентификатор (SRID) системы координат этого значения.</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeographyWellKnownValue.WellKnownBinary">
      <summary>Возвращает или задает известное двоичное представление этого значения.</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeographyWellKnownValue.WellKnownText">
      <summary>Возвращает или задает известное текстовое представление этого значения.</summary>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbGeometry">
      <summary>Представляет геометрические фигуры.</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Area">
      <summary>Возвращает значение типа double, допускающее значения NULL, определяющее область этого значения DbGeometry, которое может иметь значение NULL, если оно не представляет поверхность.</summary>
      <returns>Значение double, допускающее значение NULL, которое определяет область данного значения DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.AsBinary">
      <summary>Создает известное двоичное представление этого значения DbGeometry.</summary>
      <returns>Представление этого значения DbGeometry в известном двоичном формате.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.AsGml">
      <summary>Создает представление на языке GML этого значения DbGeometry.</summary>
      <returns>Строка, содержащая представление на языке GML этого значения DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.AsText">
      <summary>Создает известное текстовое представление этого значения DbGeometry.Включает только координаты X и Y для точек.</summary>
      <returns>Строка, содержащая известное текстовое представление этого значения DbGeometry.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Boundary">
      <summary>Получает границу объектов DbGeometry.</summary>
      <returns>Граница объектов DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Buffer(System.Nullable{System.Double})">
      <summary>Возвращает объект geometry, представляющий объединение всех точек, расстояние которых от экземпляра geometry меньше указанного значения или равно ему.</summary>
      <returns>Объект geometry, представляющий объединение всех точек.</returns>
      <param name="distance">Расстояние.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Centroid">
      <summary>Возвращает значение DbGeometry, которое представляет центроид этого значения DbGeometry, которое может быть равно NULL, если значение не представляет поверхность.</summary>
      <returns>Значение DbGeometry, представляющее центроид этого значения DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Contains(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Определяет, содержит ли это значение DbGeometry указанный аргумент DbGeometry.</summary>
      <returns>Значение true, если это значение geometry содержит другое значение; в противном случае — значение false.</returns>
      <param name="other">Значение типа geometry, которое следует сравнивать с этим значением geometry для определения содержания.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="other" /> равно null.</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.ConvexHull">
      <summary>Возвращает выпуклую оболочку этого значения DbGeometry как другое значение DbGeometry.</summary>
      <returns>Выпуклая оболочка этого значения DbGeometry как другое значение DbGeometry.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.CoordinateSystemId">
      <summary>Возвращает идентификатор системы координат объекта DbGeometry.</summary>
      <returns>Идентификатор системы координат объекта DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Crosses(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Определяет, пересекает ли это значение DbGeometry указанный аргумент DbGeometry.</summary>
      <returns>Значение true, если это другое значение пересекает значение geometry; в противном случае — значение false.</returns>
      <param name="other">Значение типа geometry, которое следует сравнивать с этим значением geometry.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="other" /> равно null.</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId">
      <summary>Получает идентификатор (SRID) системы координат по умолчанию для значений типа geometry.</summary>
      <returns>Идентификатор (SRID) системы координат по умолчанию для значений типа geometry.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Difference(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Вычисляет разницу между этим значением DbGeometry и другим значением DbGeometry.</summary>
      <returns>Новое значение DbGeometry, представляющее разность между этим значением geometry и другим.</returns>
      <param name="other">Значение типа geometry, для которого необходимо вычислить разность с этим значением.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="other" /> равно null.</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Dimension">
      <summary>Возвращает измерение заданного значения <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> или, если значение является коллекцией, измерение наибольшего элемента.</summary>
      <returns>Измерение данного значения <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Disjoint(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Определяет, имеет ли DbGeometry пространственное перекрытие с указанным аргументом DbGeometry.</summary>
      <returns>Значение true, если другое значение не имеет пространственного перекрытия с этим значением geometry. В противном случае — значение false.</returns>
      <param name="other">Значение типа geometry, которое следует сравнивать с этим значением geometry для определения отсутствия пространственного перекрытия.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="other" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Distance(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Вычисляет расстояние между ближайшими точками в этом значении DbGeometry и другом значении DbGeometry.</summary>
      <returns>Значение типа double, задающее расстояние между двумя ближайшими точками в этом значении geometry и другом.</returns>
      <param name="other">Значение типа geometry, для которого необходимо вычислить расстояние от этого значения.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="other" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.ElementAt(System.Int32)">
      <summary>Возвращает элемент из определенной позиции этого значения DbGeometry, если она представляет коллекцию geometry. </summary>
      <returns>Элемент в указанной позиции этого значения geometry, если оно представляет коллекцию других значений типа geometry; в противном случае — значение null.</returns>
      <param name="index">Позиция в этом значении geometry, из которого должен быть извлечен элемент.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.ElementCount">
      <summary>Возвращает количество элементов в этом значении DbGeometry, если оно представляет коллекцию geometry. </summary>
      <returns>Количество элементов в этом значении geometry, если оно представляет коллекцию других значений типа geometry; в противном случае — значение null. </returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Elevation">
      <summary>Возвращает возвышение (координату Z) этого значения DbGeometry, если оно представляет точку. </summary>
      <returns>Высота (координата Z) этого значения типа DbGeometry, если оно представляет точку; в противном случае — значение null. </returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.EndPoint">
      <summary>Возвращает значение DbGeometry, представляющее начальную точку этого значения. Может иметь значение NULL, если это значение DbGeometry не представляет кривую.</summary>
      <returns>Значение DbGeometry, представляющее начальную точку этого значения.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Envelope">
      <summary>Возвращает конверт (минимальный ограничивающий прямоугольник) этого значения DbGeometry в виде значения типа geometry.</summary>
      <returns>Конверт (минимальный ограничивающий прямоугольник) этого значения DbGeometry.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.ExteriorRing">
      <summary>Возвращает значение DbGeometry, которое представляет внешнее кольцо этого значения DbGeometry, которое может быть равно NULL, если значение не представляет многоугольник.</summary>
      <returns>Значение DbGeometry, представляющее внешнее кольцо этого значения DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromBinary(System.Byte[])">
      <summary>Создает новое значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, основанное на указанном известном двоичном значении.</summary>
      <returns>Новое значение DbGeometry, определенное известным двоичным значением с идентификатором (SRID) системы координат geometry по умолчанию ( <see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" /> ).</returns>
      <param name="wellKnownBinary">Байтовый массив, содержащий известное двоичное представление значения geometry.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="wellKnownBinary" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, основанное на указанном известном двоичном значении и идентификаторе (SRID) системы координат.</summary>
      <returns>Новое значение DbGeometry, определенное известным двоичным значением с указанным идентификатором системы координат.</returns>
      <param name="wellKnownBinary">Байтовый массив, содержащий известное двоичное представление значения geometry.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которую должно использовать новое значение DbGeometry.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="wellKnownBinary" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="coordinateSystemId" /> является недопустимым.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromGml(System.String)">
      <summary>Создает новое значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> на основе заданного значения на языке GML.</summary>
      <returns>Новое значение DbGeometry, определенное значением на языке GML с идентификатором (SRID) системы координат geometry по умолчанию ( <see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" /> ).</returns>
      <param name="geometryMarkup">Строка, содержащая представление на языке GML значения geometry.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geometryMarkup" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromGml(System.String,System.Int32)">
      <summary>Создает новое значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> на основе заданного значения на языке GML и идентификатора (SRID) системы координат.</summary>
      <returns>Новое значение DbGeometry, определенное значением на языке GML с указанным идентификатором системы координат.</returns>
      <param name="geometryMarkup">Строка, содержащая представление на языке GML значения geometry.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которую должно использовать новое значение DbGeometry.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geometryMarkup" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="coordinateSystemId" /> является недопустимым.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromText(System.String)">
      <summary>Создает новое значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, основанное на указанном известном текстовом значении.</summary>
      <returns>Новое значение DbGeometry, определенное известным текстовым значением с идентификатором (SRID) системы координат geometry по умолчанию ( <see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" /> ).</returns>
      <param name="wellKnownText">Строка, содержащая известное текстовое представление значения geometry.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="wellKnownText" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.FromText(System.String,System.Int32)">
      <summary>Создает новое значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, основанное на указанном известном текстовом значении и идентификаторе (SRID) системы координат.</summary>
      <returns>Новое значение DbGeometry, определенное известным текстовым значением с указанным идентификатором системы координат.</returns>
      <param name="wellKnownText">Строка, содержащая известное текстовое представление значения geometry.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которую должно использовать новое значение DbGeometry.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="wellKnownText" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="coordinateSystemId" /> является недопустимым.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.GeometryCollectionFromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение коллекции <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, основанное на указанном известном двоичном значении и идентификаторе (SRID) системы координат.</summary>
      <returns>Новое значение DbGeometry, определенное известным двоичным значением с указанным идентификатором системы координат.</returns>
      <param name="geometryCollectionWellKnownBinary">Байтовый массив, содержащий известное двоичное представление значения geometry.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которую должно использовать новое значение DbGeometry.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geometryCollectionWellKnownBinary" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="coordinateSystemId" /> является недопустимым.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.GeometryCollectionFromText(System.String,System.Int32)">
      <summary>Создает новое значение коллекции <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, основанное на указанном известном текстовом значении и идентификаторе (SRID) системы координат.</summary>
      <returns>Новое значение DbGeometry, определенное известным текстовым значением с указанным идентификатором системы координат.</returns>
      <param name="geometryCollectionWellKnownText">Строка, содержащая известное текстовое представление значения geometry.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которую должно использовать новое значение DbGeometry.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geometryCollectionWellKnownText" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="coordinateSystemId" /> является недопустимым.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.InteriorRingAt(System.Int32)">
      <summary>Возвращает внутреннее кольцо, находящееся в определенной позиции этого значения DbGeometry, если оно представляет собой значение polygon. </summary>
      <returns>Внутреннее кольцо в указанной позиции этого значения geometry, если оно представляет собой многоугольник; в противном случае — значение null.</returns>
      <param name="index">Позиция в этом значении geometry, из которого должно быть извлечено внутреннее кольцо.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.InteriorRingCount">
      <summary>Возвращает количество внутренних колец в этом значении DbGeometry, если оно представляет собой значение polygon. </summary>
      <returns>Количество элементов в этом значении geometry, если оно представляет значение типа polygon; в противном случае — значение null.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Intersection(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Вычисляет пересечение этого значения DbGeometry и другого значения DbGeometry.</summary>
      <returns>Новое значение DbGeometry, представляющее пересечение между этим значением geometry и другим.</returns>
      <param name="other">Значение типа geometry, для которого необходимо вычислить пересечение с этим значением.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="other" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Intersects(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Определяет, пересекает ли это значение DbGeometry указанный аргумент DbGeometry.</summary>
      <returns>Значение true, если это другое значение пересекается со значением geometry; в противном случае — значение false.</returns>
      <param name="other">Значение типа geometry, которое следует сравнивать с этим значением geometry для определения пересечения.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="other" /> равно null.</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.IsClosed">
      <summary>Возвращает логическое значение, допускающее значение NULL, указывающее, замкнуто ли это значение DbGeometry. Может иметь значение NULL, если значение не представляет кривую.</summary>
      <returns>Значение true, если значение DbGeometry закрыто; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.IsEmpty">
      <summary>Возвращает логическое значение, допускающее значение NULL, которое указывает, является ли это значение DbGeometry пустым. Может иметь значение NULL, если значение не представляет кривую.</summary>
      <returns>Значение true, если значение DbGeometry пусто; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.IsRing">
      <summary>Возвращает логическое значение, допускающее значение NULL, указывающее, является ли это значение DbGeometry кольцом. Может иметь значение NULL, если значение не представляет кривую.</summary>
      <returns>Значение true, если значение DbGeometry является кольцом; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.IsSimple">
      <summary>Возвращает логическое значение, допускающее значение NULL, которое указывает, является ли это значение DbGeometry простым.</summary>
      <returns>Значение true, если значение DbGeometry простое; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.IsValid">
      <summary>Возвращает логическое значение, допускающее значение NULL, которое указывает, является ли это значение DbGeometry допустимым.</summary>
      <returns>Значение true, если значение DbGeometry является допустимым; в противном случае — значение false.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Length">
      <summary>Возвращает значение типа double, допускающее значение NULL, определяющее длину этого значения DbGeometry, которое может иметь значение NULL, если оно не представляет кривую.</summary>
      <returns>Длина значения DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.LineFromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение line <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, основанное на указанном известном двоичном значении и идентификаторе (SRID) системы координат.</summary>
      <returns>Новое значение DbGeometry, определенное известным двоичным значением с указанным идентификатором системы координат.</returns>
      <param name="lineWellKnownBinary">Байтовый массив, содержащий известное двоичное представление значения geometry.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которую должно использовать новое значение DbGeometry.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="lineWellKnownBinary" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="coordinateSystemId" /> является недопустимым.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.LineFromText(System.String,System.Int32)">
      <summary>Создает новое значение line <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, основанное на указанном известном текстовом значении и идентификаторе (SRID) системы координат.</summary>
      <returns>Новое значение DbGeometry, определенное известным текстовым значением с указанным идентификатором системы координат.</returns>
      <param name="lineWellKnownText">Строка, содержащая известное текстовое представление значения geometry.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которую должно использовать новое значение DbGeometry.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="lineWellKnownText" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="coordinateSystemId" /> является недопустимым.</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Measure">
      <summary>Возвращает меру (координату М) этого значения DbGeometry, если оно представляет точку. </summary>
      <returns>Значение меры (координата М) этого значения типа geometry, если оно представляет точку; в противном случае — значение null.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiLineFromBinary(System.Byte[],System.Int32)">
      <summary>Возвращает значение multiline из двоичного значения.</summary>
      <returns>Значение multiline из двоичного значения.</returns>
      <param name="multiLineWellKnownBinary">Известное двоичное значение.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiLineFromText(System.String,System.Int32)">
      <summary>Возвращает значение multiline из значения в известном формате.</summary>
      <returns>Значение multiline из значения в известном формате.</returns>
      <param name="multiLineWellKnownText">Значение в известном двоичном формате.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiPointFromBinary(System.Byte[],System.Int32)">
      <summary>Возвращает значение multipoint из значения в известном двоичном формате.</summary>
      <returns>Значение multipoint из значения в известном двоичном формате.</returns>
      <param name="multiPointWellKnownBinary">Известное двоичное значение.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiPointFromText(System.String,System.Int32)">
      <summary>Возвращает значение multipoint из значения в известном формате.</summary>
      <returns>Значение multipoint из значения в известном формате.</returns>
      <param name="multiPointWellKnownText">Известное текстовое значение.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>Возвращает значение multi polygon из значения в известном двоичном формате.</summary>
      <returns>Значение multipoint из значения в известном формате.</returns>
      <param name="multiPolygonWellKnownBinary">Значение multi polygon в известном формате.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.MultiPolygonFromText(System.String,System.Int32)">
      <summary>Возвращает значение multi polygon из значения в известном двоичном формате.</summary>
      <returns>Значение multi polygon из значения в известном двоичном формате.</returns>
      <param name="multiPolygonWellKnownText">Значение multi polygon в известном формате.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Overlaps(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Определяет, перекрывает ли это значение DbGeometry указанный аргумент DbGeometry.</summary>
      <returns>Значение true, если это значение geometry перекрывает другое значение; в противном случае — значение false.</returns>
      <param name="other">Значение типа geometry, которое следует сравнивать с этим значением geometry для определения перекрытия.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="other" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.PointAt(System.Int32)">
      <summary>Возвращает элемент из конкретной позиции этого значения DbGeometry, если она представляет ломаную или линейное кольцо. </summary>
      <returns>Элемент в указанной позиции этого значения geometry, если оно представляет linestring или линейное кольцо; в противном случае — значение null.</returns>
      <param name="index">Позиция в этом значении geometry, из которого должен быть извлечен элемент.</param>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.PointCount">
      <summary>Возвращает количество точек в этом значении DbGeometry, если оно представляет ломаную или линейное кольцо. </summary>
      <returns>Количество элементов в этом значении geometry, если он представляет linestring или линейное кольцо; в противном случае — значение null.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.PointFromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение point <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, основанное на указанном известном двоичном значении и идентификаторе (SRID) системы координат.</summary>
      <returns>Новое значение DbGeometry, определенное известным двоичным значением с указанным идентификатором системы координат.</returns>
      <param name="pointWellKnownBinary">Байтовый массив, содержащий известное двоичное представление значения geometry.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которую должно использовать новое значение DbGeometry.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="pointWellKnownBinary" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="coordinateSystemId" /> является недопустимым.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.PointFromText(System.String,System.Int32)">
      <summary>Создает новое значение point <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, основанное на указанном известном текстовом значении и идентификаторе (SRID) системы координат.</summary>
      <returns>Новое значение DbGeometry, определенное известным текстовым значением с указанным идентификатором системы координат.</returns>
      <param name="pointWellKnownText">Строка, содержащая известное текстовое представление значения geometry.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которую должно использовать новое значение DbGeometry.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="pointWellKnownText" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="coordinateSystemId" /> является недопустимым.</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.PointOnSurface">
      <summary>Возвращает точку на поверхности этого значения DbGeometry, которая может иметь значение NULL, если это значение не представляет поверхность.</summary>
      <returns>Точка на поверхности этого значения DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.PolygonFromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение polygon <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, основанное на указанном известном двоичном значении и идентификаторе (SRID) системы координат.</summary>
      <returns>Новое значение DbGeometry, определенное известным двоичным значением с указанным идентификатором системы координат.</returns>
      <param name="polygonWellKnownBinary">Байтовый массив, содержащий известное двоичное представление значения geometry.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которую должно использовать новое значение DbGeometry.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="polygonWellKnownBinary" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="coordinateSystemId" /> является недопустимым.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.PolygonFromText(System.String,System.Int32)">
      <summary>Создает новое значение polygon <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, основанное на указанном известном текстовом значении и идентификаторе (SRID) системы координат.</summary>
      <returns>Новое значение DbGeometry, определенное известным текстовым значением с указанным идентификатором системы координат.</returns>
      <param name="polygonWellKnownText">Строка, содержащая известное текстовое представление значения geometry.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которую должно использовать новое значение DbGeometry.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="polygonWellKnownText" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="coordinateSystemId" /> является недопустимым.</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.Provider">
      <summary>Возвращает пространственный поставщик, который будет использоваться для операций этого пространственного типа.</summary>
      <returns>Пространственный поставщик, который будет использоваться для операций этого пространственного типа.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.ProviderValue">
      <summary>Возвращает представление этого значения DbGeometry, зависящее от базового поставщика, создавшего его.</summary>
      <returns>Представление этого значения DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Relate(System.Data.Entity.Spatial.DbGeometry,System.String)">
      <summary>Определяет, связано ли это значение DbGeometry с указанным аргументом DbGeometry в соответствии с заданным шаблоном пересечения Dimensionally Extended Nine-Intersection Model (DE-9IM).</summary>
      <returns>Значение true, если это значение geometry имеет связь со другим значением в соответствии с заданной матрицей шаблона пересечения; в противном случае — значение false.</returns>
      <param name="other">Значение типа geometry, которое следует сравнивать с этим значением geometry для определения связи.</param>
      <param name="matrix">Строка, содержащая текстовое представление шаблона пересечения (DE-9IM), определяющего связь.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="other" /> и <paramref name="matrix" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.SpatialEquals(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Определяет, является ли значение DbGeometry пространственно равным заданному аргументу DbGeometry.</summary>
      <returns>Значение true, если другое значение пространственно равно этому значению geometry; в противном случае — значение false.</returns>
      <param name="other">Значение типа geometry, которое следует сравнивать с этим значением geometry для определения равенства.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="other" /> равно null.</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.SpatialTypeName">
      <summary>Возвращает представление имени пространственного типа этого значения DbGeometry.</summary>
      <returns>Представление имени пространственного типа этого значения DbGeometry.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.StartPoint">
      <summary>Возвращает значение DbGeometry, представляющее начальную точку этого значения. Может иметь значение NULL, если это значение DbGeometry не представляет кривую.</summary>
      <returns>Значение DbGeometry, представляющее начальную точку этого значения.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.SymmetricDifference(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Вычисляет симметрическую разность между этим значением DbGeometry и другим значением DbGeometry.</summary>
      <returns>Новое значение DbGeometry, представляющее симметрическую разность между этим значением geometry и другим.</returns>
      <param name="other">Значение типа geometry, для которого необходимо вычислить симметрическую разность с этим значением.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="other" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.ToString">
      <summary>Возвращает строковое представление значения geometry.</summary>
      <returns>Строковое представление значения geometry.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Touches(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Определяет, соприкасается ли это значение DbGeometry с указанным аргументом DbGeometry.</summary>
      <returns>Значение true, если это другое значение соприкасается со значением geometry; в противном случае — значение false.</returns>
      <param name="other">Значение типа geometry, которое следует сравнивать с этим значением geometry.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="other" /> равно null.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Union(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Вычисляет объединение этого значения DbGeometry и другого значения DbGeometry.</summary>
      <returns>Новое значение DbGeometry, представляющее объединение этого значения geometry и другого.</returns>
      <param name="other">Значение типа geometry, для которого необходимо вычислить объединение с этим значением.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="other" /> равно null.</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.WellKnownValue">
      <summary>Возвращает или задает сериализуемое известное представление контракта данных этого значения DbGeometry.</summary>
      <returns>Сериализуемое известное представление контракта данных этого значения DbGeometry.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometry.Within(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Определяет, расположено ли это значение DbGeometry пространственно внутри указанного аргумента DbGeometry.</summary>
      <returns>Значение true, если это значение geometry содержится в другом значении; в противном случае — значение false.</returns>
      <param name="other">Значение типа geometry, которое следует сравнивать с этим значением geometry для определения содержания.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="other" /> равно null.</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.XCoordinate">
      <summary>Возвращает координату X этого значения DbGeometry, если оно представляет точку.</summary>
      <returns>Значение координаты Х этого значения типа geometry, если оно представляет точку; в противном случае — значение null.</returns>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometry.YCoordinate">
      <summary>Возвращает координату Y этого значения DbGeometry, если оно представляет точку.</summary>
      <returns>Значение координаты Y этого значения типа geometry, если оно представляет точку; в противном случае — значение null.</returns>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbGeometryWellKnownValue">
      <summary>Сериализуемое представление контракта данных значения <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbGeometryWellKnownValue.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Spatial.DbGeometryWellKnownValue" />.</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometryWellKnownValue.CoordinateSystemId">
      <summary>Возвращает или задает идентификатор (SRID) системы координат этого значения.</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometryWellKnownValue.WellKnownBinary">
      <summary>Возвращает или задает известное двоичное представление этого значения.</summary>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbGeometryWellKnownValue.WellKnownText">
      <summary>Возвращает или задает известное текстовое представление этого значения.</summary>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbSpatialDataReader">
      <summary>API-интерфейс независимой от поставщика службы для поддержки геопространственных типов (geometry и geography).</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Spatial.DbSpatialDataReader" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.GetGeography(System.Int32)">
      <summary>При реализации в производных типах считывает экземпляр <see cref="T:System.Data.Entity.Spatial.DbGeography" /> из столбца с указанным порядковым номером столбца.</summary>
      <returns>Экземпляр DbGeography по указанному значению столбца</returns>
      <param name="ordinal">Порядковый номер столбца, содержащего значение geography</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.GetGeographyAsync(System.Int32,System.Threading.CancellationToken)">
      <summary>Выполняет асинхронное считывание экземпляра <see cref="T:System.Data.Entity.Spatial.DbGeography" /> из столбца с указанным порядковым номером столбца.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит экземпляр <see cref="T:System.Data.Entity.Spatial.DbGeography" /> по указанному значению столбца.</returns>
      <param name="ordinal">Порядковый номер столбца, содержащего значение geography.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.GetGeometry(System.Int32)">
      <summary>При реализации в производных типах считывает экземпляр <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> из столбца с указанным порядковым номером столбца.</summary>
      <returns>Экземпляр DbGeometry по указанному значению столбца</returns>
      <param name="ordinal">Порядковый номер столбца записи данных, содержащего зависящие от поставщика геометрические данные</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.GetGeometryAsync(System.Int32,System.Threading.CancellationToken)">
      <summary>Выполняет асинхронное считывание экземпляра <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> из столбца с указанным порядковым номером столбца.</summary>
      <returns>Задача, представляющая асинхронную операцию.Результат задачи содержит экземпляр <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> по указанному значению столбца.</returns>
      <param name="ordinal">Порядковый номер столбца записи данных, содержащего зависящие от поставщика геометрические данные.</param>
      <param name="cancellationToken">Токен <see cref="T:System.Threading.CancellationToken" />, который нужно отслеживать во время ожидания выполнения задачи.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.IsGeographyColumn(System.Int32)">
      <summary>Возвращает значение, указывающее, является ли порядковый номер столбца типом geography</summary>
      <returns>Значение true, если столбец с указанным порядковым номером столбца имеет тип geography. В противном случае — значение false.</returns>
      <param name="ordinal">Порядковый номер столбца.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialDataReader.IsGeometryColumn(System.Int32)">
      <summary>Возвращает значение, указывающее, является ли порядковый номер столбца типом geometry</summary>
      <returns>Значение true, если столбец с указанным порядковым номером столбца имеет тип geometry. В противном случае — значение false.</returns>
      <param name="ordinal">Порядковый номер столбца.</param>
    </member>
    <member name="T:System.Data.Entity.Spatial.DbSpatialServices">
      <summary>API-интерфейс независимой от поставщика службы для поддержки геопространственных типов (geometry и geography).</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsBinary(System.Data.Entity.Spatial.DbGeography)">
      <summary>Возвращает известное двоичное представление заданного значения <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</summary>
      <returns>Известное двоичное представление заданного значения <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</returns>
      <param name="geographyValue">Значение geography, для которого необходимо создать известное двоичное значение.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geographyValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geographyValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsBinary(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Возвращает известное двоичное представление заданного значения <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</summary>
      <returns>Известное двоичное представление заданного значения <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</returns>
      <param name="geometryValue">Значение geometry, для которого необходимо создать известное двоичное значение.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geometryValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geometryValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsGml(System.Data.Entity.Spatial.DbGeography)">
      <summary>Создает представление на языке GML этого значения <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</summary>
      <returns>Строка, содержащая представление на языке GML этого значения DbGeography.</returns>
      <param name="geographyValue">Значение geography, для которого должно быть создано GML.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geographyValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geographyValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsGml(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Создает представление на языке GML этого значения <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</summary>
      <returns>Строка, содержащая представление на языке GML этого значения DbGeometry.</returns>
      <param name="geometryValue">Значение geometry, для которого должно быть создано GML.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geometryValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geometryValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsText(System.Data.Entity.Spatial.DbGeography)">
      <summary>Возвращает известное текстовое представление заданного значения <see cref="T:System.Data.Entity.Spatial.DbGeography" />.Это значение должно содержать только значения Longitude и Latitude точки.</summary>
      <returns>Строка, содержащая известное текстовое представление geographyValue.</returns>
      <param name="geographyValue">Значение geography, для которого необходимо создать известное текстовое значение.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geographyValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geographyValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsText(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Возвращает известное текстовое представление данного значения <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, включающее только координаты X и Y для точек.</summary>
      <returns>Строка, содержащая известное текстовое представление geometryValue.</returns>
      <param name="geometryValue">Значение geometry, для которого необходимо создать известное текстовое значение.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geometryValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geometryValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsTextIncludingElevationAndMeasure(System.Data.Entity.Spatial.DbGeography)">
      <summary>Возвращает текстовое представление <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> с высотой и мерой.</summary>
      <returns>Текстовое представление выражения <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" />.</returns>
      <param name="geographyValue">Значение geography.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geographyValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geographyValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.AsTextIncludingElevationAndMeasure(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Возвращает текстовое представление <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> с высотой и мерой.</summary>
      <returns>Текстовое представление <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" /> с высотой и мерой.</returns>
      <param name="geometryValue">Значение типа geometry.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geometryValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geometryValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Buffer(System.Data.Entity.Spatial.DbGeography,System.Double)">
      <summary>Создает значение типа geography, представляющее все точки, меньшие или равные расстоянию от заданного значения <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</summary>
      <returns>Новое значение типа DbGeography, представляющее все точки, которые меньше расстояния от geographyValue или равны ему.</returns>
      <param name="geographyValue">Значение geography.</param>
      <param name="distance">Значение double, указывающее дистанцию от значения geographyValue, в пределах которой необходимо выполнить буферизацию.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geographyValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geographyValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Buffer(System.Data.Entity.Spatial.DbGeometry,System.Double)">
      <summary>Создает значение типа geometry, представляющее все точки, которые меньше расстояния от заданного значения <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> или равны ему.</summary>
      <returns>Новое значение DbGeometry, представляющее все точки, которые меньше расстояния от значения geometryValue или равны ему.</returns>
      <param name="geometryValue">Значение типа geometry.</param>
      <param name="distance">Значение double, указывающее дистанцию от значения geometryValue, в пределах которой необходимо выполнить буферизацию.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geometryValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geometryValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Contains(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Определяет, содержит ли одно значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> другое.</summary>
      <returns>Значение true, если geometryValue содержит элементы otherGeometry; в противном случае — значение false.</returns>
      <param name="geometryValue">Первое значение geometry.</param>
      <param name="otherGeometry">Второе значение geometry.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="geometryValue" /> или <paramref name="otherGeometry" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geometryValue" /> или <paramref name="otherGeometry" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateGeography(System.Data.Entity.Spatial.DbSpatialServices,System.Object)">
      <summary>Этот метод предназначен для использования производными реализациями <see cref="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromProviderValue(System.Object)" /> после выполнения соответствующей проверки указанного значения поставщика, чтобы убедиться, что он подходит для использования с производной реализацией.</summary>
      <returns>Новый экземпляр <see cref="T:System.Data.Entity.Spatial.DbGeography" />, содержащий указанный объект providerValue и использующий заданный объект spatialServices в качестве пространственной реализации.</returns>
      <param name="spatialServices">Экземпляр пространственных служб, от реализации пространственной функциональности которого будет зависеть возвращенное значение <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</param>
      <param name="providerValue">Значение поставщика.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateGeometry(System.Data.Entity.Spatial.DbSpatialServices,System.Object)">
      <summary>Этот метод предназначен для использования производными реализациями <see cref="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromProviderValue(System.Object)" /> после выполнения соответствующей проверки указанного значения поставщика, чтобы убедиться, что он подходит для использования с производной реализацией.</summary>
      <returns>Новый экземпляр <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, содержащий указанный объект providerValue и использующий заданный объект spatialServices в качестве пространственной реализации.</returns>
      <param name="spatialServices">Экземпляр пространственных служб, от реализации пространственной функциональности которого будет зависеть возвращенное значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</param>
      <param name="providerValue">Значение поставщика.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateProviderValue(System.Data.Entity.Spatial.DbGeographyWellKnownValue)">
      <summary>Создает зависящее от поставщика значение, совместимое с реализацией пространственных служб, основанной на заданном известном представлении <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</summary>
      <returns>Зависящее от поставщика значение, которое кодирует сведения, содержащиеся в wellKnownValue в формате, совместимом с этой реализацией пространственных служб.</returns>
      <param name="wellKnownValue">Экземпляр <see cref="T:System.Data.Entity.Spatial.DbGeographyWellKnownValue" />, содержащий известное представление значения geography.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateProviderValue(System.Data.Entity.Spatial.DbGeometryWellKnownValue)">
      <summary>Создает зависящее от поставщика значение, совместимое с реализацией пространственных служб, основанной на заданном известном представлении <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</summary>
      <returns>Зависящее от поставщика значение, которое кодирует сведения, содержащиеся в wellKnownValue в формате, совместимом с этой реализацией пространственных служб.</returns>
      <param name="wellKnownValue">Экземпляр <see cref="T:System.Data.Entity.Spatial.DbGeometryWellKnownValue" />, содержащий известное представление значения geometry.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateWellKnownValue(System.Data.Entity.Spatial.DbGeography)">
      <summary>Создает экземпляр <see cref="T:System.Data.Entity.Spatial.DbGeographyWellKnownValue" />, представляющий указанное значение <see cref="T:System.Data.Entity.Spatial.DbGeography" /> с помощью одного или двух известных стандартных пространственных форматов.</summary>
      <returns>Известное представление значения geographyValue в качестве нового объекта <see cref="T:System.Data.Entity.Spatial.DbGeographyWellKnownValue" />.</returns>
      <param name="geographyValue">Значение geography.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geographyValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geographyValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.CreateWellKnownValue(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Создает экземпляр <see cref="T:System.Data.Entity.Spatial.DbGeometryWellKnownValue" />, представляющий указанное значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> с помощью одного или двух известных стандартных пространственных форматов.</summary>
      <returns>Известное представление значения geometryValue в качестве нового объекта <see cref="T:System.Data.Entity.Spatial.DbGeometryWellKnownValue" />.</returns>
      <param name="geometryValue">Значение типа geometry.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geometryValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geometryValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Crosses(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Определяет, пересекаются ли два заданных значения <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</summary>
      <returns>Значение true, если geometryValue пересекается с otherGeometry; в противном случае — значение false.</returns>
      <param name="geometryValue">Первое значение geometry.</param>
      <param name="otherGeometry">Второе значение geometry.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="geometryValue" /> или <paramref name="otherGeometry" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geometryValue" /> или <paramref name="otherGeometry" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbSpatialServices.Default">
      <summary>Возвращает службы по умолчанию для <see cref="T:System.Data.Entity.Spatial.DbSpatialServices" />.</summary>
      <returns>Службы по умолчанию.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Difference(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>Вычисляет разность между двумя значениями <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</summary>
      <returns>Новое значение DbGeography, представляющее разность между geographyValue и otherGeography.</returns>
      <param name="geographyValue">Первое значение geography.</param>
      <param name="otherGeography">Второе значение geography.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="geographyValue" /> или <paramref name="otherGeography" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geographyValue" /> или <paramref name="otherGeography" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Difference(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Вычисляет разность между двумя значениями <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</summary>
      <returns>Новое значение DbGeometry, представляющее разность между geometryValue и значением otherGeometry.</returns>
      <param name="geometryValue">Первое значение geometry.</param>
      <param name="otherGeometry">Второе значение geometry.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="geometryValue" /> или <paramref name="otherGeometry" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geometryValue" /> или <paramref name="otherGeometry" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Disjoint(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>Определяет, являются ли два заданных значения <see cref="T:System.Data.Entity.Spatial.DbGeography" /> пространственно неперекрывающимися.</summary>
      <returns>Значение true, если geographyValue не имеет пространственного перекрытия с otherGeography; в противном случае — значение false.</returns>
      <param name="geographyValue">Первое значение geography для сравнения на отсутствие перекрытия.</param>
      <param name="otherGeography">Второе значение geography для сравнения на отсутствие перекрытия.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="geographyValue" /> или <paramref name="otherGeography" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geographyValue" /> или <paramref name="otherGeography" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Disjoint(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Определяет, являются ли два заданных значения <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> пространственно неперекрывающимися.</summary>
      <returns>Значение true, если geometryValue не имеет пространственного перекрытия с otherGeometry; в противном случае — значение false.</returns>
      <param name="geometryValue">Первое значение geometry для сравнения на отсутствие перекрытия.</param>
      <param name="otherGeometry">Второе значение geometry для сравнения на отсутствие перекрытия.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="geometryValue" /> или <paramref name="otherGeometry" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geometryValue" /> или <paramref name="otherGeometry" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Distance(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>Вычисляет расстояние между ближайшими точками двух значений <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</summary>
      <returns>Значение типа double, задающее расстояние между двумя ближайшими точками в этом значении geographyValue и otherGeography.</returns>
      <param name="geographyValue">Первое значение geography.</param>
      <param name="otherGeography">Второе значение geography.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="geographyValue" /> или <paramref name="otherGeography" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geographyValue" /> или <paramref name="otherGeography" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Distance(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Вычисляет расстояние между ближайшими точками двух значений <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</summary>
      <returns>Значение типа double, задающее расстояние между двумя ближайшими точками в этом значении geometryValue и otherGeometry.</returns>
      <param name="geometryValue">Первое значение geometry.</param>
      <param name="otherGeometry">Второе значение geometry.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="geometryValue" /> или <paramref name="otherGeometry" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geometryValue" /> или <paramref name="otherGeometry" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.ElementAt(System.Data.Entity.Spatial.DbGeography,System.Int32)">
      <summary>Возвращает элемент заданного значения <see cref="T:System.Data.Entity.Spatial.DbGeography" />, если оно представляет коллекцию географических объектов.</summary>
      <returns>Элемент в значении geographyValue в позиции index, если оно представляет коллекцию других значений geography; в противном случае — значение null</returns>
      <param name="geographyValue">Значение geography, которое не обязательно представляет коллекцию geography.</param>
      <param name="index">Позиция в значении geography, из которой должен быть извлечен элемент.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geographyValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geographyValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.ElementAt(System.Data.Entity.Spatial.DbGeometry,System.Int32)">
      <summary>Возвращает элемент заданного значения <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, если оно представляет коллекцию геометрических объектов.</summary>
      <returns>Элемент в значении geometryValue в позиции index, если оно представляет коллекцию других значений geometry; в противном случае — значение null</returns>
      <param name="geometryValue">Значение geometry, которое не обязательно представляет коллекцию geometry.</param>
      <param name="index">Позиция в значении geometry, из которой должен быть извлечен элемент.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geometryValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geometryValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyCollectionFromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение коллекции <see cref="T:System.Data.Entity.Spatial.DbGeography" />, основанное на указанном известном двоичном значении и идентификаторе (SRID) системы координат.</summary>
      <returns>Новое значение <see cref="T:System.Data.Entity.Spatial.DbGeography" />, определенное известным двоичным значением с указанным идентификатором системы координат (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <param name="geographyCollectionWellKnownBinary">Байтовый массив, содержащий известное двоичное представление значения geography.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которую должно использовать новое значение <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyCollectionFromText(System.String,System.Int32)">
      <summary>Создает новое значение коллекции <see cref="T:System.Data.Entity.Spatial.DbGeography" />, основанное на указанном известном текстовом значении и идентификаторе (SRID) системы координат.</summary>
      <returns>Новое значение <see cref="T:System.Data.Entity.Spatial.DbGeography" />, определенное известным текстовым значением с указанным идентификатором (SRID) системы координат (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <param name="geographyCollectionWellKnownText">Строка, содержащая известное текстовое представление значения geography.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которую должно использовать новое значение <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromBinary(System.Byte[])">
      <summary>Создает новое значение <see cref="T:System.Data.Entity.Spatial.DbGeography" />, основанное на указанном известном двоичном значении.</summary>
      <returns>Новое значение <see cref="T:System.Data.Entity.Spatial.DbGeography" />, определенное известным двоичным значением с идентификатором системы координат <see cref="T:System.Data.Entity.Spatial.DbGeography" /> по умолчанию (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <param name="wellKnownBinary">Байтовый массив, содержащий известное двоичное представление значения geography.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение <see cref="T:System.Data.Entity.Spatial.DbGeography" />, основанное на указанном известном двоичном значении и идентификаторе (SRID) системы координат.</summary>
      <returns>Новое значение <see cref="T:System.Data.Entity.Spatial.DbGeography" />, определенное известным двоичным значением с указанным идентификатором системы координат (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <param name="wellKnownBinary">Байтовый массив, содержащий известное двоичное представление значения geography.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которую должно использовать новое значение <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromGml(System.String)">
      <summary>Создает новое значение <see cref="T:System.Data.Entity.Spatial.DbGeography" /> на основе заданного значения на языке GML.</summary>
      <returns>Новое значение <see cref="T:System.Data.Entity.Spatial.DbGeography" />, определенное значением на языке GML с идентификатором системы координат <see cref="T:System.Data.Entity.Spatial.DbGeography" /> по умолчанию (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <param name="geographyMarkup">Строка, содержащая представление на языке GML значения geometry.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromGml(System.String,System.Int32)">
      <summary>Создает новое значение <see cref="T:System.Data.Entity.Spatial.DbGeography" /> на основе заданного значения на языке GML и идентификатора (SRID) системы координат.</summary>
      <returns>Новое значение <see cref="T:System.Data.Entity.Spatial.DbGeography" />, определенное значением на языке GML с указанным идентификатором системы координат (SRID).</returns>
      <param name="geographyMarkup">Строка, содержащая представление на языке GML значения geometry.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которую должно использовать новое значение <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromProviderValue(System.Object)">
      <summary>Создает новое значение <see cref="T:System.Data.Entity.Spatial.DbGeography" /> на основании зависящего от поставщика значения, которое совместимо с этой реализацией пространственных служб.</summary>
      <returns>Новое значение <see cref="T:System.Data.Entity.Spatial.DbGeography" />, обеспечиваемое реализацией пространственных служб и заданным значением поставщика.</returns>
      <param name="providerValue">Зависящее от поставщика значение, которое данная реализация пространственных служб способна интерпретировать как значение типа geography.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="providerValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="providerValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromText(System.String)">
      <summary>Создает новое значение <see cref="T:System.Data.Entity.Spatial.DbGeography" />, основанное на указанном известном текстовом значении.</summary>
      <returns>Новое значение <see cref="T:System.Data.Entity.Spatial.DbGeography" />, определенное известным текстовым значением с идентификатором системы координат (SRID) <see cref="T:System.Data.Entity.Spatial.DbGeography" /> по умолчанию (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <param name="wellKnownText">Строка, содержащая известное текстовое представление значения geography.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyFromText(System.String,System.Int32)">
      <summary>Создает новое значение <see cref="T:System.Data.Entity.Spatial.DbGeography" />, основанное на указанном известном текстовом значении и идентификаторе (SRID) системы координат.</summary>
      <returns>Новое значение <see cref="T:System.Data.Entity.Spatial.DbGeography" />, определенное известным текстовым значением с указанным идентификатором (SRID) системы координат (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <param name="wellKnownText">Строка, содержащая известное текстовое представление значения geography.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которую должно использовать новое значение <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyLineFromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение line <see cref="T:System.Data.Entity.Spatial.DbGeography" />, основанное на указанном известном двоичном значении и идентификаторе (SRID) системы координат.</summary>
      <returns>Новое значение <see cref="T:System.Data.Entity.Spatial.DbGeography" />, определенное известным двоичным значением с указанным идентификатором системы координат (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <param name="lineWellKnownBinary">Байтовый массив, содержащий известное двоичное представление значения geography.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которую должно использовать новое значение <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyLineFromText(System.String,System.Int32)">
      <summary>Создает новое значение line <see cref="T:System.Data.Entity.Spatial.DbGeography" />, основанное на указанном известном текстовом значении и идентификаторе (SRID) системы координат.</summary>
      <returns>Новое значение <see cref="T:System.Data.Entity.Spatial.DbGeography" />, определенное известным текстовым значением с указанным идентификатором (SRID) системы координат (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <param name="lineWellKnownText">Строка, содержащая известное текстовое представление значения geography.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которую должно использовать новое значение <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiLineFromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение multiline <see cref="T:System.Data.Entity.Spatial.DbGeography" />, основанное на указанном известном двоичном значении и идентификаторе системы координат.</summary>
      <returns>Новое значение multiline для <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</returns>
      <param name="multiLineWellKnownBinary">Известное двоичное значение.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiLineFromText(System.String,System.Int32)">
      <summary>Создает новое значение multiline <see cref="T:System.Data.Entity.Spatial.DbGeography" />, основанное на указанном известном текстовом значении и идентификаторе системы координат.</summary>
      <returns>Новое значение multiline для <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</returns>
      <param name="multiLineWellKnownText">Известное текстовое значение.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiPointFromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение multipoint <see cref="T:System.Data.Entity.Spatial.DbGeography" />, основанное на указанном известном двоичном значении и идентификаторе системы координат.</summary>
      <returns>Новое значение multipoint для <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</returns>
      <param name="multiPointWellKnownBinary">Известное двоичное значение.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiPointFromText(System.String,System.Int32)">
      <summary>Создает новое значение multipoint <see cref="T:System.Data.Entity.Spatial.DbGeography" />, основанное на указанном известном текстовом значении и идентификаторе системы координат.</summary>
      <returns>Новое значение multipoint для <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</returns>
      <param name="multiPointWellKnownText">Известное текстовое значение.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение multi polygon <see cref="T:System.Data.Entity.Spatial.DbGeography" />, основанное на указанном известном двоичном значении и идентификаторе системы координат.</summary>
      <returns>Новое значение multi polygon для <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</returns>
      <param name="multiPolygonWellKnownBinary">Известное двоичное значение.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyMultiPolygonFromText(System.String,System.Int32)">
      <summary>Создает новое значение multi polygon <see cref="T:System.Data.Entity.Spatial.DbGeography" />, основанное на указанном известном текстовом значении и идентификаторе системы координат.</summary>
      <returns>Новое значение multi polygon для <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</returns>
      <param name="multiPolygonKnownText">Известное текстовое значение.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyPointFromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение point <see cref="T:System.Data.Entity.Spatial.DbGeography" />, основанное на указанном известном двоичном значении и идентификаторе (SRID) системы координат.</summary>
      <returns>Новое значение <see cref="T:System.Data.Entity.Spatial.DbGeography" />, определенное известным двоичным значением с указанным идентификатором системы координат (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <param name="pointWellKnownBinary">Байтовый массив, содержащий известное двоичное представление значения geography.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которую должно использовать новое значение <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyPointFromText(System.String,System.Int32)">
      <summary>Создает новое значение point <see cref="T:System.Data.Entity.Spatial.DbGeography" />, основанное на указанном известном текстовом значении и идентификаторе (SRID) системы координат.</summary>
      <returns>Новое значение <see cref="T:System.Data.Entity.Spatial.DbGeography" />, определенное известным текстовым значением с указанным идентификатором (SRID) системы координат (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <param name="pointWellKnownText">Строка, содержащая известное текстовое представление значения geography.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которую должно использовать новое значение <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение polygon <see cref="T:System.Data.Entity.Spatial.DbGeography" />, основанное на указанном известном двоичном значении и идентификаторе (SRID) системы координат.</summary>
      <returns>Новое значение <see cref="T:System.Data.Entity.Spatial.DbGeography" />, определенное известным двоичным значением с указанным идентификатором системы координат (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <param name="polygonWellKnownBinary">Байтовый массив, содержащий известное двоичное представление значения geography.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которую должно использовать новое значение <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeographyPolygonFromText(System.String,System.Int32)">
      <summary>Создает новое значение polygon <see cref="T:System.Data.Entity.Spatial.DbGeography" />, основанное на указанном известном текстовом значении и идентификаторе (SRID) системы координат.</summary>
      <returns>Новое значение <see cref="T:System.Data.Entity.Spatial.DbGeography" />, определенное известным текстовым значением с указанным идентификатором (SRID) системы координат (<see cref="P:System.Data.Entity.Spatial.DbGeography.DefaultCoordinateSystemId" />).</returns>
      <param name="polygonWellKnownText">Строка, содержащая известное текстовое представление значения geography.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которую должно использовать новое значение <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryCollectionFromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение коллекции <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, основанное на указанном известном двоичном значении и идентификаторе (SRID) системы координат.</summary>
      <returns>Новое значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, определенное известным двоичным значением с указанным идентификатором системы координат (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <param name="geometryCollectionWellKnownBinary">Байтовый массив, содержащий известное двоичное представление значения geometry.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которую должно использовать новое значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryCollectionFromText(System.String,System.Int32)">
      <summary>Создает новое значение коллекции <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, основанное на указанном известном текстовом значении и идентификаторе (SRID) системы координат.</summary>
      <returns>Новое значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, определенное известным текстовым значением с указанным идентификатором (SRID) системы координат (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <param name="geometryCollectionWellKnownText">Строка, содержащая известное текстовое представление значения geometry.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которую должно использовать новое значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromBinary(System.Byte[])">
      <summary>Создает новое значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, основанное на указанном известном двоичном значении.</summary>
      <returns>Новое значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, определенное известным двоичным значением с идентификатором системы координат <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> по умолчанию (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <param name="wellKnownBinary">Байтовый массив, содержащий известное двоичное представление значения geometry.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, основанное на указанном известном двоичном значении и идентификаторе (SRID) системы координат.</summary>
      <returns>Новое значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, определенное известным двоичным значением с указанным идентификатором системы координат (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <param name="wellKnownBinary">Байтовый массив, содержащий известное двоичное представление значения geometry.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которую должно использовать новое значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromGml(System.String)">
      <summary>Создает новое значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> на основе заданного значения на языке GML.</summary>
      <returns>Новое значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, определенное значением на языке GML с идентификатором системы координат <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> по умолчанию (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <param name="geometryMarkup">Строка, содержащая представление на языке GML значения geometry.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromGml(System.String,System.Int32)">
      <summary>Создает новое значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> на основе заданного значения на языке GML и идентификатора (SRID) системы координат.</summary>
      <returns>Новое значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, определенное значением на языке GML с указанным идентификатором системы координат (SRID).</returns>
      <param name="geometryMarkup">Строка, содержащая представление на языке GML значения geometry.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которую должно использовать новое значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromProviderValue(System.Object)">
      <summary>Создает новое значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> на основании зависящего от поставщика значения, которое совместимо с этой реализацией пространственных служб.</summary>
      <returns>Новое значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, обеспечиваемое реализацией пространственных служб и заданным значением поставщика.</returns>
      <param name="providerValue">Зависящее от поставщика значение, которое данная реализация пространственных служб способна интерпретировать как значение типа geometry.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="providerValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="providerValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromText(System.String)">
      <summary>Создает новое значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, основанное на указанном известном текстовом значении.</summary>
      <returns>Новое значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, определенное известным текстовым значением с идентификатором системы координат (SRID) <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> по умолчанию (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <param name="wellKnownText">Строка, содержащая известное текстовое представление значения geometry.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryFromText(System.String,System.Int32)">
      <summary>Создает новое значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, основанное на указанном известном текстовом значении и идентификаторе (SRID) системы координат.</summary>
      <returns>Новое значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, определенное известным текстовым значением с указанным идентификатором (SRID) системы координат (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <param name="wellKnownText">Строка, содержащая известное текстовое представление значения geometry.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которую должно использовать новое значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryLineFromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение line <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, основанное на указанном известном двоичном значении и идентификаторе (SRID) системы координат.</summary>
      <returns>Новое значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, определенное известным двоичным значением с указанным идентификатором системы координат (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <param name="lineWellKnownBinary">Байтовый массив, содержащий известное двоичное представление значения geometry.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которую должно использовать новое значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryLineFromText(System.String,System.Int32)">
      <summary>Создает новое значение line <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, основанное на указанном известном текстовом значении и идентификаторе (SRID) системы координат.</summary>
      <returns>Новое значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, определенное известным текстовым значением с указанным идентификатором (SRID) системы координат (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <param name="lineWellKnownText">Строка, содержащая известное текстовое представление значения geometry.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которую должно использовать новое значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiLineFromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение multiline <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, основанное на указанном известном двоичном значении и идентификаторе системы координат.</summary>
      <returns>Новое значение multiline для <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</returns>
      <param name="multiLineWellKnownBinary">Известное двоичное значение.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiLineFromText(System.String,System.Int32)">
      <summary>Создает новое значение multiline <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, основанное на указанном известном текстовом значении и идентификаторе системы координат.</summary>
      <returns>Новое значение multiline для <see cref="T:System.Data.Entity.Spatial.DbGeometry" /></returns>
      <param name="multiLineWellKnownText">Известное текстовое значение.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiPointFromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение multipoint <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, основанное на указанном известном двоичном значении и идентификаторе системы координат.</summary>
      <returns>Новое значение multipoint для <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</returns>
      <param name="multiPointWellKnownBinary">Известное двоичное значение.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiPointFromText(System.String,System.Int32)">
      <summary>Создает новое значение multipoint <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, основанное на указанном известном текстовом значении и идентификаторе системы координат.</summary>
      <returns>Новое значение multipoint для <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</returns>
      <param name="multiPointWellKnownText">Известное текстовое значение.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение multi polygon <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, основанное на указанном известном двоичном значении и идентификаторе системы координат.</summary>
      <returns>Новое значение multi polygon для <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</returns>
      <param name="multiPolygonWellKnownBinary">Известное двоичное значение.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryMultiPolygonFromText(System.String,System.Int32)">
      <summary>Создает новое значение multi polygon <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, основанное на указанном известном текстовом значении и идентификаторе системы координат.</summary>
      <returns>Новое значение multi polygon для <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</returns>
      <param name="multiPolygonKnownText">Известное текстовое значение.</param>
      <param name="coordinateSystemId">Идентификатор системы координат.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryPointFromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение point <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, основанное на указанном известном двоичном значении и идентификаторе (SRID) системы координат.</summary>
      <returns>Новое значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, определенное известным двоичным значением с указанным идентификатором системы координат (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <param name="pointWellKnownBinary">Байтовый массив, содержащий известное двоичное представление значения geometry.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которую должно использовать новое значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryPointFromText(System.String,System.Int32)">
      <summary>Создает новое значение point <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, основанное на указанном известном текстовом значении и идентификаторе (SRID) системы координат.</summary>
      <returns>Новое значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, определенное известным текстовым значением с указанным идентификатором (SRID) системы координат (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <param name="pointWellKnownText">Строка, содержащая известное текстовое представление значения geometry.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которую должно использовать новое значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryPolygonFromBinary(System.Byte[],System.Int32)">
      <summary>Создает новое значение polygon <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, основанное на указанном известном двоичном значении и идентификаторе (SRID) системы координат.</summary>
      <returns>Новое значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, определенное известным двоичным значением с указанным идентификатором системы координат (SRID) (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <param name="polygonWellKnownBinary">Байтовый массив, содержащий известное двоичное представление значения geometry.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которую должно использовать новое значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GeometryPolygonFromText(System.String,System.Int32)">
      <summary>Создает новое значение polygon <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, основанное на указанном известном текстовом значении и идентификаторе (SRID) системы координат.</summary>
      <returns>Новое значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, определенное известным текстовым значением с указанным идентификатором (SRID) системы координат (<see cref="P:System.Data.Entity.Spatial.DbGeometry.DefaultCoordinateSystemId" />).</returns>
      <param name="polygonWellKnownText">Строка, содержащая известное текстовое представление значения geometry.</param>
      <param name="coordinateSystemId">Идентификатор системы координат, которую должно использовать новое значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetArea(System.Data.Entity.Spatial.DbGeography)">
      <summary>Возвращает значение типа double, допускающее значения NULL и определяющее область данного значения <see cref="T:System.Data.Entity.Spatial.DbGeography" />, которое может иметь значение NULL, если не представляет поверхность.</summary>
      <returns>Значение double, допускающее значение NULL, которое определяет область данного значения <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</returns>
      <param name="geographyValue">Значение geography, которое не обязательно представляет поверхность.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geographyValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geographyValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetArea(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Возвращает значение типа double, допускающее значения NULL и определяющее область данного значения <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, которое может иметь значение NULL, если не представляет поверхность.</summary>
      <returns>Значение double, допускающее значение NULL, которое определяет область данного значения <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</returns>
      <param name="geometryValue">Значение geometry, которое не обязательно представляет поверхность.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geometryValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geometryValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetBoundary(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Возвращает значение типа double, допускающее значения NULL и указывающее границу заданного значения <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</summary>
      <returns>Граница данного значения <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</returns>
      <param name="geometryValue">Значение типа geometry.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geometryValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geometryValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetCentroid(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Возвращает значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, представляющее центроид данного значения DbGeometry, которое может иметь значение NULL, если значение не представляет поверхность.</summary>
      <returns>Центроид geometryValue, если оно представляет поверхность; в противном случае — значение null.</returns>
      <param name="geometryValue">Значение geometry, которое не обязательно представляет поверхность.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geometryValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geometryValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetConvexHull(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Возвращает значение типа double, допускающее значения NULL, указывающее выпуклую оболочку заданного значения <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</summary>
      <returns>Выпуклая оболочка заданного значения <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</returns>
      <param name="geometryValue">Значение типа geometry.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geometryValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geometryValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetCoordinateSystemId(System.Data.Entity.Spatial.DbGeography)">
      <summary>Возвращает идентификатор системы координат для данного значения <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</summary>
      <returns>Идентификатор системы координат для данного значения <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</returns>
      <param name="geographyValue">Значение geography.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geographyValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geographyValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetCoordinateSystemId(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Возвращает идентификатор системы координат для данного значения <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</summary>
      <returns>Идентификатор системы координат для данного значения <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</returns>
      <param name="geometryValue">Значение типа geometry.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geometryValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geometryValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetDimension(System.Data.Entity.Spatial.DbGeography)">
      <summary>Возвращает измерение заданного значения <see cref="T:System.Data.Entity.Spatial.DbGeography" /> или, если значение является коллекцией, измерение наибольшего элемента.</summary>
      <returns>Измерение geographyValue или наибольшее измерение элементов, если <see cref="T:System.Data.Entity.Spatial.DbGeography" /> является коллекцией.</returns>
      <param name="geographyValue">Значение geography, для которого необходимо получить значение измерения.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geographyValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geographyValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetDimension(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Возвращает измерение заданного значения <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> или, если значение является коллекцией, измерение наибольшего элемента.</summary>
      <returns>Измерение geometryValue или наибольшее измерение элементов, если <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> является коллекцией.</returns>
      <param name="geometryValue">Значение geometry, для которого необходимо получить значение измерения.</param>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetElementCount(System.Data.Entity.Spatial.DbGeography)">
      <summary>Возвращает количество элементов в заданном значении <see cref="T:System.Data.Entity.Spatial.DbGeography" />, если оно представляет коллекцию географических объектов.</summary>
      <returns>Количество элементов в этом значении geographyValue, если оно представляет коллекцию других значений типа geography; в противном случае — значение null.</returns>
      <param name="geographyValue">Значение geography, которое не обязательно представляет коллекцию geography.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geographyValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geographyValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetElementCount(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Возвращает количество элементов в заданном значении <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, если оно представляет коллекцию геометрических объектов.</summary>
      <returns>Количество элементов в этом значении geometryValue, если оно представляет коллекцию других значений типа geometry; в противном случае — значение null.</returns>
      <param name="geometryValue">Значение geometry, которое не обязательно представляет коллекцию geometry.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geometryValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geometryValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetElevation(System.Data.Entity.Spatial.DbGeography)">
      <summary>Возвращает высоту (координату Z) заданного значения <see cref="T:System.Data.Entity.Spatial.DbGeography" />, если оно представляет точку.</summary>
      <returns>Высота (координата Z) этого значения типа geographyValue, если оно представляет точку; в противном случае — значение null.</returns>
      <param name="geographyValue">Значение geography, которое не обязательно представляет точку.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geographyValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geographyValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetElevation(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Возвращает высоту (координату Z) заданного значения <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, если оно представляет точку.</summary>
      <returns>Высота (Z) значения geometryValue, если оно представляет точку; в противном случае — значение null.</returns>
      <param name="geometryValue">Значение geometry, которое не обязательно представляет точку.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geometryValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geometryValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetEndPoint(System.Data.Entity.Spatial.DbGeography)">
      <summary>Возвращает значение типа <see cref="T:System.Data.Entity.Spatial.DbGeography" />, представляющее конечную точку данного значения DbGeography, которое может иметь значение NULL, если значение не представляет кривую.</summary>
      <returns>Конечная точка значения geographyValue, если оно представляет кривую; в противном случае — значение null.</returns>
      <param name="geographyValue">Значение geography, которое не обязательно представляет кривую.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geographyValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geographyValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetEndPoint(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Возвращает значение типа <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, представляющее конечную точку данного значения DbGeometry, которое может иметь значение NULL, если значение не представляет кривую.</summary>
      <returns>Конечная точка значения geometryValue, если оно представляет кривую; в противном случае — значение null.</returns>
      <param name="geometryValue">Значение geometry, которое не обязательно представляет кривую.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geometryValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geometryValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetEnvelope(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Возвращает конверт (минимальный ограничивающий прямоугольник) заданного значения <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> в виде значения типа geometry.</summary>
      <returns>Конверт значения geometryValue в виде значения <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</returns>
      <param name="geometryValue">Значение geometry, для которого необходимо получить значение конверта.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geometryValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geometryValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetExteriorRing(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Возвращает значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, представляющее внешнее кольцо заданного значения DbGeometry, которое может быть равно NULL, если значение не представляет значение polygon.</summary>
      <returns>Значение DbGeometry, представляющее внешнее кольцо в geometryValue, если оно представляет значение polygon; в противном случае — значение null.</returns>
      <param name="geometryValue">Значение geometry, которое не обязательно представляет многоугольник.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geometryValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geometryValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetInteriorRingCount(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Возвращает количество внутренних колец в заданном значении <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, если оно представляет многоугольник.</summary>
      <returns>Количество элементов в этом значении geometryValue, если оно представляет собой значение polygon; в противном случае — значение null.</returns>
      <param name="geometryValue">Значение geometry, которое не обязательно представляет многоугольник.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geometryValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geometryValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsClosed(System.Data.Entity.Spatial.DbGeography)">
      <summary>Возвращает логическое значение, допускающее значение NULL, указывающее, замкнуто ли заданное значение <see cref="T:System.Data.Entity.Spatial.DbGeography" />. Может иметь значение NULL, если значение не представляет кривую.</summary>
      <returns>Значение true, если заданное значение <see cref="T:System.Data.Entity.Spatial.DbGeography" /> закрыто; в противном случае — значение false.</returns>
      <param name="geographyValue">Значение geography, которое не обязательно представляет кривую.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geographyValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geographyValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsClosed(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Возвращает логическое значение, допускающее значение NULL, указывающее, замкнуто ли заданное значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />. Может иметь значение NULL, если значение не представляет кривую.</summary>
      <returns>Значение true, если заданное значение <see cref="T:System.Data.Entity.Spatial.DbGeography" /> закрыто; в противном случае — значение false.</returns>
      <param name="geometryValue">Значение geometry, которое не обязательно представляет кривую.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geometryValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geometryValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsEmpty(System.Data.Entity.Spatial.DbGeography)">
      <summary>Возвращает логическое значение, допускающее значения NULL, указывающее, является ли пустым заданное значение <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</summary>
      <returns>Значение true, если заданное значение <see cref="T:System.Data.Entity.Spatial.DbGeography" /> пусто; в противном случае — значение false.</returns>
      <param name="geographyValue">Значение geography.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geographyValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geographyValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsEmpty(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Возвращает логическое значение, допускающее значения NULL, указывающее, является ли пустым заданное значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</summary>
      <returns>Значение true, если заданное значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> пусто; в противном случае — значение false.</returns>
      <param name="geometryValue">Значение типа geometry.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geometryValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geometryValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsRing(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Возвращает логическое значение, допускающее значение NULL, указывающее, является ли заданное значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> кольцом. Может иметь значение NULL, если значение не представляет кривую.</summary>
      <returns>Значение true, если заданное значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> является кольцом; в противном случае — значение false.</returns>
      <param name="geometryValue">Значение geometry, которое не обязательно представляет кривую.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geometryValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geometryValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsSimple(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Возвращает логическое значение, допускающее значения NULL, указывающее, является ли заданное значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> простым типом.</summary>
      <returns>Значение true, если заданное значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> является простым типом; в противном случае — значение false.</returns>
      <param name="geometryValue">Значение типа geometry.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geometryValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geometryValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetIsValid(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Возвращает логическое значение, допускающее значения NULL, указывающее, допустимо ли заданное значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</summary>
      <returns>Значение true, если заданное значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> допустимо; в противном случае — значение false.</returns>
      <param name="geometryValue">Значение типа geometry.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geometryValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geometryValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetLatitude(System.Data.Entity.Spatial.DbGeography)">
      <summary>Возвращает координату широты заданного значения <see cref="T:System.Data.Entity.Spatial.DbGeography" />, если оно представляет точку.</summary>
      <returns>Широта для данного значения <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</returns>
      <param name="geographyValue">Значение geography, которое не обязательно представляет точку.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geographyValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geographyValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetLength(System.Data.Entity.Spatial.DbGeography)">
      <summary>Возвращает значение типа double, допускающее значения NULL, определяющее длину данного значения <see cref="T:System.Data.Entity.Spatial.DbGeography" />. Может иметь значение NULL, если значение не представляет кривую.</summary>
      <returns>Длина данного значения <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</returns>
      <param name="geographyValue">Значение geography, которое не обязательно представляет кривую.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geographyValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geographyValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetLength(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Возвращает значение типа double, допускающее значения NULL, определяющее длину данного значения <see cref="T:System.Data.Entity.Spatial.DbGeometry" />. Может иметь значение NULL, если значение не представляет кривую.</summary>
      <returns>Длина данного значения <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</returns>
      <param name="geometryValue">Значение geometry, которое не обязательно представляет кривую.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geometryValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geometryValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetLongitude(System.Data.Entity.Spatial.DbGeography)">
      <summary>Возвращает координату долготы заданного значения <see cref="T:System.Data.Entity.Spatial.DbGeography" />, если оно представляет точку.</summary>
      <returns>Долгота для данного значения <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</returns>
      <param name="geographyValue">Значение geography, которое не обязательно представляет точку.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geographyValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geographyValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetMeasure(System.Data.Entity.Spatial.DbGeography)">
      <summary>Возвращает координату M (Мера) заданного значения <see cref="T:System.Data.Entity.Spatial.DbGeography" />, если оно представляет точку.</summary>
      <returns>Координата M (мера) заданного значения <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</returns>
      <param name="geographyValue">Значение geography, которое не обязательно представляет точку.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geographyValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geographyValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetMeasure(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Возвращает координату M (Мера) заданного значения <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, если оно представляет точку.</summary>
      <returns>Координата M (мера) заданного значения <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</returns>
      <param name="geometryValue">Значение geometry, которое не обязательно представляет точку.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geometryValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geometryValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetPointCount(System.Data.Entity.Spatial.DbGeography)">
      <summary>Возвращает число точек в заданном значении <see cref="T:System.Data.Entity.Spatial.DbGeography" />, если оно представляет тип «linestring» или линейное кольцо.</summary>
      <returns>Число точек в заданном значении <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</returns>
      <param name="geographyValue">Значение geography, которое не обязательно представляет linestring или линейное кольцо.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geographyValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geographyValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetPointCount(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Возвращает число точек в заданном значении <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, если оно представляет тип «linestring» или линейное кольцо.</summary>
      <returns>Число точек в заданном значении <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</returns>
      <param name="geometryValue">Значение geometry, которое не обязательно представляет linestring или линейное кольцо.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geometryValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geometryValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetPointOnSurface(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Возвращает значение типа <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, представляющее точку на поверхности данного значения DbGeometry. Может иметь значение NULL, если значение не представляет поверхность.</summary>
      <returns>Значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, которое представляет точку на поверхности для заданного значения DbGeometry.</returns>
      <param name="geometryValue">Значение geometry, которое не обязательно представляет поверхность.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geometryValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geometryValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetSpatialTypeName(System.Data.Entity.Spatial.DbGeography)">
      <summary>Возвращает значение, указывающее имя пространственного типа заданного значения <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</summary>
      <returns>Имя пространственного типа заданного значения <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</returns>
      <param name="geographyValue">Значение geography.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geographyValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geographyValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetSpatialTypeName(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Возвращает значение, указывающее имя пространственного типа заданного значения <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</summary>
      <returns>Имя пространственного типа заданного значения <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</returns>
      <param name="geometryValue">Значение типа geometry.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geometryValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geometryValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetStartPoint(System.Data.Entity.Spatial.DbGeography)">
      <summary>Возвращает значение типа <see cref="T:System.Data.Entity.Spatial.DbGeography" />, представляющее начальную точку данного значения DbGeography, которое может иметь значение NULL, если значение не представляет кривую.</summary>
      <returns>Начальная точка заданного значения <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</returns>
      <param name="geographyValue">Значение geography, которое не обязательно представляет кривую.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geographyValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geographyValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetStartPoint(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Возвращает значение типа <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, представляющее начальную точку данного значения DbGeometry, которое может иметь значение NULL, если значение не представляет кривую.</summary>
      <returns>Начальная точка заданного значения <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</returns>
      <param name="geometryValue">Значение geometry, которое не обязательно представляет кривую.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geometryValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geometryValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetXCoordinate(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Возвращает координату X заданного значения <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, если оно представляет точку.</summary>
      <returns>Координата X для данного значения <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</returns>
      <param name="geometryValue">Значение geometry, которое не обязательно представляет точку.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geometryValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geometryValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.GetYCoordinate(System.Data.Entity.Spatial.DbGeometry)">
      <summary>Возвращает координату Y заданного значения <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, если оно представляет точку.</summary>
      <returns>Координата Y для данного значения <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</returns>
      <param name="geometryValue">Значение geometry, которое не обязательно представляет точку.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geometryValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geometryValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.InteriorRingAt(System.Data.Entity.Spatial.DbGeometry,System.Int32)">
      <summary>Возвращает внутреннее кольцо из указанного значения <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, если оно представляет собой значение polygon.</summary>
      <returns>Внутреннее кольцо в значении geometryValue в позиции index, если оно представляет собой значение polygon; в противном случае — значение null.</returns>
      <param name="geometryValue">Значение geometry, которое не обязательно представляет многоугольник.</param>
      <param name="index">Позиция в значении geometry, из которой должен быть извлечен элемент.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geometryValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geometryValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Intersection(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>Вычисляет пересечение двух значений <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</summary>
      <returns>Новое значение <see cref="T:System.Data.Entity.Spatial.DbGeography" />, представляющее пересечение geographyValue и otherGeography.</returns>
      <param name="geographyValue">Первое значение geography.</param>
      <param name="otherGeography">Второе значение geography.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="geographyValue" /> или <paramref name="otherGeography" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geographyValue" /> или <paramref name="otherGeography" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Intersection(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Вычисляет пересечение двух значений <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</summary>
      <returns>Новое значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, представляющее пересечение geometryValue и otherGeometry.</returns>
      <param name="geometryValue">Первое значение geometry.</param>
      <param name="otherGeometry">Второе значение geometry.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="geometryValue" /> или <paramref name="otherGeometry" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geometryValue" /> или <paramref name="otherGeometry" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Intersects(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>Определяет, пересекаются ли два заданных значения <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</summary>
      <returns>Значение true, если geographyValue пересекается с otherGeography; в противном случае — значение false.</returns>
      <param name="geographyValue">Первое значение geography для сравнения на пересечение.</param>
      <param name="otherGeography">Второе значение geography для сравнения на пересечение.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="geographyValue" /> или <paramref name="otherGeography" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geographyValue" /> или <paramref name="otherGeography" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Intersects(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Определяет, пересекаются ли два заданных значения <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</summary>
      <returns>Значение true, если geometryValue пересекается с otherGeometry; в противном случае — значение false.</returns>
      <param name="geometryValue">Первое значение geometry для сравнения на пересечение.</param>
      <param name="otherGeometry">Второе значение geometry для сравнения на пересечение.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="geometryValue" /> или <paramref name="otherGeometry" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geometryValue" /> или <paramref name="otherGeometry" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="P:System.Data.Entity.Spatial.DbSpatialServices.NativeTypesAvailable">
      <summary>Получает значение, указывающее, будет ли EF продолжать работу, предполагая, что поставщик имеет необходимые типы и ресурсы, а не выполнит быструю отработку сбоя.Значение по умолчанию — true.</summary>
      <returns>Значение true, если EF продолжит работу, предполагая, что поставщик имеет необходимые типы и ресурсы, а не выполнит быструю отработку сбоя; в противном случае — значение false.</returns>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Overlaps(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Определяет, перекрываются ли два заданных значения <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</summary>
      <returns>Значение true, если geometryValue перекрывает элементы otherGeometry; в противном случае — значение false.</returns>
      <param name="geometryValue">Первое значение geometry.</param>
      <param name="otherGeometry">Второе значение geometry.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="geometryValue" /> или <paramref name="otherGeometry" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geometryValue" /> или <paramref name="otherGeometry" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.PointAt(System.Data.Entity.Spatial.DbGeography,System.Int32)">
      <summary>Возвращает элемент точки заданного значения <see cref="T:System.Data.Entity.Spatial.DbGeography" />, если оно представляет тип «linestring» или линейное кольцо.</summary>
      <returns>Точка в значении geographyValue в позиции index, если оно представляет linestring или линейное кольцо; в противном случае — значение null.</returns>
      <param name="geographyValue">Значение geography, которое не обязательно представляет linestring или линейное кольцо.</param>
      <param name="index">Позиция в значении geography, из которой должен быть извлечен элемент.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geographyValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geographyValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.PointAt(System.Data.Entity.Spatial.DbGeometry,System.Int32)">
      <summary>Возвращает элемент точки заданного значения <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, если оно представляет тип «linestring» или линейное кольцо.</summary>
      <returns>Точка в значении geometryValue в позиции index, если оно представляет linestring или линейное кольцо; в противном случае — значение null.</returns>
      <param name="geometryValue">Значение geometry, которое не обязательно представляет linestring или линейное кольцо.</param>
      <param name="index">Позиция в значении geometry, из которой должен быть извлечен элемент.</param>
      <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="geometryValue" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geometryValue" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Relate(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry,System.String)">
      <summary>Определяет, связаны ли пространственно два заданных значения <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> в соответствии с заданным шаблоном пересечения Dimensionally Extended Nine-Intersection Model (DE-9IM).</summary>
      <returns>Значение true, если это значение geometryValue имеет связь со значением otherGeometry в соответствии с заданной матрицей шаблона пересечения; в противном случае — значение false.</returns>
      <param name="geometryValue">Первое значение geometry.</param>
      <param name="otherGeometry">Значение типа geometry, которое следует сравнить с первым значением geometry для связи.</param>
      <param name="matrix">Строка, содержащая текстовое представление шаблона пересечения (DE-9IM), определяющего связь.</param>
      <exception cref="T:System.ArgumentNullException">
        <paramref name="geometryValue" />, <paramref name="otherGeometry" /> или <paramref name="matrix" /> имеет значение null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geometryValue" /> или <paramref name="otherGeometry" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.SpatialEquals(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>Определяет, являются ли два заданных значения <see cref="T:System.Data.Entity.Spatial.DbGeography" /> пространственно равными.</summary>
      <returns>Значение true, если geographyValue пространственно равно otherGeography; в противном случае — значение false.</returns>
      <param name="geographyValue">Первое значение geography для сравнения на равенство.</param>
      <param name="otherGeography">Второе значение geography для сравнения на равенство.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="geographyValue" /> или <paramref name="otherGeography" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geographyValue" /> или <paramref name="otherGeography" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.SpatialEquals(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Определяет, являются ли два заданных значения <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> пространственно равными.</summary>
      <returns>Значение true, если geometryValue пространственно равно otherGeometry; в противном случае — значение false.</returns>
      <param name="geometryValue">Первое значение geometry для сравнения на равенство.</param>
      <param name="otherGeometry">Второе значение geometry для сравнения на равенство.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="geometryValue" /> или <paramref name="otherGeometry" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geometryValue" /> или <paramref name="otherGeometry" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.SymmetricDifference(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>Вычисляет симметрическую разность двух значений <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</summary>
      <returns>Новое значение <see cref="T:System.Data.Entity.Spatial.DbGeography" />, представляющее симметрическую разность geographyValue и otherGeography.</returns>
      <param name="geographyValue">Первое значение geography.</param>
      <param name="otherGeography">Второе значение geography.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="geographyValue" /> или <paramref name="otherGeography" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geographyValue" /> или <paramref name="otherGeography" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.SymmetricDifference(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Вычисляет симметрическую разность между двумя значениями <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</summary>
      <returns>Новое значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, представляющее симметрическую разность между geometryValue и значением otherGeometry.</returns>
      <param name="geometryValue">Первое значение geometry.</param>
      <param name="otherGeometry">Второе значение geometry.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="geometryValue" /> или <paramref name="otherGeometry" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geometryValue" /> или <paramref name="otherGeometry" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Touches(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Определяет, соприкасаются ли два заданных значения <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</summary>
      <returns>Значение true, если geometryValue соприкасается со значением otherGeometry; в противном случае — значение false.</returns>
      <param name="geometryValue">Первое значение geometry.</param>
      <param name="otherGeometry">Второе значение geometry.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="geometryValue" /> или <paramref name="otherGeometry" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geometryValue" /> или <paramref name="otherGeometry" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Union(System.Data.Entity.Spatial.DbGeography,System.Data.Entity.Spatial.DbGeography)">
      <summary>Вычисляет объединение двух значений <see cref="T:System.Data.Entity.Spatial.DbGeography" />.</summary>
      <returns>Новое значение <see cref="T:System.Data.Entity.Spatial.DbGeography" />, представляющее объединение geographyValue и otherGeography.</returns>
      <param name="geographyValue">Первое значение geography.</param>
      <param name="otherGeography">Второе значение geography.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="geographyValue" /> или <paramref name="otherGeography" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geographyValue" /> или <paramref name="otherGeography" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Union(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Вычисляет объединение двух значений <see cref="T:System.Data.Entity.Spatial.DbGeometry" />.</summary>
      <returns>Новое значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" />, представляющее объединение geometryValue и otherGeometry.</returns>
      <param name="geometryValue">Первое значение geometry.</param>
      <param name="otherGeometry">Второе значение geometry.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="geometryValue" /> или <paramref name="otherGeometry" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geometryValue" /> или <paramref name="otherGeometry" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="M:System.Data.Entity.Spatial.DbSpatialServices.Within(System.Data.Entity.Spatial.DbGeometry,System.Data.Entity.Spatial.DbGeometry)">
      <summary>Определяет, находится ли пространственно одно значение <see cref="T:System.Data.Entity.Spatial.DbGeometry" /> внутри другого.</summary>
      <returns>Значение true, если geometryValue содержится в otherGeometry; в противном случае — значение false.</returns>
      <param name="geometryValue">Первое значение geometry.</param>
      <param name="otherGeometry">Второе значение geometry.</param>
      <exception cref="T:System.ArgumentNullException">Значение <paramref name="geometryValue" /> или <paramref name="otherGeometry" /> равно null.</exception>
      <exception cref="T:System.ArgumentException">Значение <paramref name="geometryValue" /> или <paramref name="otherGeometry" /> несовместимо с этой реализацией пространственных служб.</exception>
    </member>
    <member name="T:System.Data.Entity.Utilities.TaskExtensions">
      <summary>Содержит методы расширения для класса <see cref="T:System.Threading.Tasks.Task" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.WithCurrentCulture(System.Threading.Tasks.Task)">
      <summary>Настраивает объект, используемый для ожидания <see cref="T:System.Threading.Tasks.Task" />, чтобы избежать преобразования данных продолжения обратно в исходный контекст, но сохранить текущий язык и региональные параметры пользовательского интерфейса.</summary>
      <returns>Объект, используемый для ожидания этой задачи.</returns>
      <param name="task">Ожидаемая задача.</param>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.WithCurrentCulture``1(System.Threading.Tasks.Task{``0})">
      <summary>Настраивает объект, используемый для ожидания <see cref="T:System.Threading.Tasks.Task`1" />, чтобы избежать преобразования данных продолжения обратно в исходный контекст, но сохранить текущий язык и региональные параметры пользовательского интерфейса.</summary>
      <returns>Объект, используемый для ожидания этой задачи.</returns>
      <param name="task">Ожидаемая задача.</param>
      <typeparam name="T">Тип результата, сформированного связанной задачей <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
    </member>
    <member name="T:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter">
      <summary>Предоставляет объект, организующий ожидание для задач <see cref="T:System.Threading.Tasks.Task" />, сохраняющих язык и региональные параметры.</summary>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter.#ctor(System.Threading.Tasks.Task)">
      <summary>Создает новый экземпляр класса <see cref="T:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter" />.</summary>
      <param name="task">Ожидаемая задача.</param>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter.GetAwaiter">
      <summary>Возвращает объект, используемый для ожидания <see cref="T:System.Threading.Tasks.Task" />.</summary>
      <returns>Экземпляр объекта-ожидания.</returns>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter.GetResult">
      <summary>Заканчивает ожидание по завершении задачи <see cref="T:System.Threading.Tasks.Task" />.</summary>
      <exception cref="T:System.NullReferenceException">Объект-ожидание неправильно инициализирован.</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">Задача отменена.</exception>
      <exception cref="T:System.Exception">Задача завершена с состоянием "Ошибка".</exception>
    </member>
    <member name="P:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter.IsCompleted">
      <summary>Возвращает значение, указывающее, завершена ли задача <see cref="T:System.Threading.Tasks.Task" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter.OnCompleted(System.Action)">
      <summary>Этот метод не реализован, и его не следует вызывать.</summary>
      <param name="continuation">Вызываемое действие при завершении операции ожидания.</param>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter.UnsafeOnCompleted(System.Action)">
      <summary>Планирует продолжение задачи <see cref="T:System.Threading.Tasks.Task" />, связанной с объектом-ожиданием <see cref="T:System.Runtime.CompilerServices.TaskAwaiter" />.</summary>
      <param name="continuation">Вызываемое действие при завершении операции ожидания.</param>
      <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="continuation" /> имеет значение null (Nothing в Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">Объект-ожидание неправильно инициализирован.</exception>
    </member>
    <member name="T:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1">
      <summary>Предоставляет объект, организующий ожидание для задач <see cref="T:System.Threading.Tasks.Task`1" />, сохраняющих язык и региональные параметры.</summary>
      <typeparam name="T">Тип результата, сформированного связанной задачей <see cref="T:System.Threading.Tasks.Task`1" />.</typeparam>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1.#ctor(System.Threading.Tasks.Task{`0})">
      <summary>Создает новый экземпляр класса <see cref="T:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1" />.</summary>
      <param name="task">Ожидаемая задача.</param>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1.GetAwaiter">
      <summary>Возвращает объект, используемый для ожидания <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
      <returns>Экземпляр объекта-ожидания.</returns>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1.GetResult">
      <summary>Заканчивает ожидание по завершении задачи <see cref="T:System.Threading.Tasks.Task`1" />.</summary>
      <returns>Результат завершенной задачи <see cref="T:System.Threading.Tasks.Task`1" />.</returns>
      <exception cref="T:System.NullReferenceException">Объект-ожидание неправильно инициализирован.</exception>
      <exception cref="T:System.Threading.Tasks.TaskCanceledException">Задача отменена.</exception>
      <exception cref="T:System.Exception">Задача завершена с состоянием "Ошибка".</exception>
    </member>
    <member name="P:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1.IsCompleted">
      <summary>Возвращает значение, указывающее, завершена ли задача <see cref="T:System.Threading.Tasks.Task" />.</summary>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1.OnCompleted(System.Action)">
      <summary>Этот метод не реализован, и его не следует вызывать.</summary>
      <param name="continuation">Вызываемое действие при завершении операции ожидания.</param>
    </member>
    <member name="M:System.Data.Entity.Utilities.TaskExtensions.CultureAwaiter`1.UnsafeOnCompleted(System.Action)">
      <summary>Планирует продолжение задачи <see cref="T:System.Threading.Tasks.Task`1" />, связанной с объектом-ожиданием <see cref="T:System.Runtime.CompilerServices.TaskAwaiter`1" />.</summary>
      <param name="continuation">Вызываемое действие при завершении операции ожидания.</param>
      <exception cref="T:System.ArgumentNullException">Аргумент <paramref name="continuation" /> имеет значение null (Nothing в Visual Basic).</exception>
      <exception cref="T:System.InvalidOperationException">Объект-ожидание неправильно инициализирован.</exception>
    </member>
    <member name="T:System.Data.Entity.Validation.DbEntityValidationException">
      <summary>Представляет исключение, вызываемое из <see cref="M:System.Data.Entity.DbContext.SaveChanges" />, когда сущности не проходят проверку.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" />, используя значения по умолчанию.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" /> с указанным сообщением об ошибке.</summary>
      <param name="message">Сообщение об исключении.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbEntityValidationResult})">
      <summary>Выполняет инициализацию нового экземпляра класса <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" /> с указанным сообщением об ошибке и результатами проверки.</summary>
      <param name="message">Сообщение об исключении.</param>
      <param name="entityValidationResults">Результаты проверки.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbEntityValidationResult},System.Exception)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" /> с указанными сообщением об ошибке, результатами проверки и внутренним исключением.</summary>
      <param name="message">Сообщение об исключении.</param>
      <param name="entityValidationResults">Результаты проверки.</param>
      <param name="innerException">Ошибка, вызвавшая исключение.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр <see cref="T:System.Data.Entity.Validation.DbEntityValidationException" /> с указанными сообщением об ошибке и внутренним исключением.</summary>
      <param name="message">Сообщение об исключении.</param>
      <param name="innerException">Ошибка, вызвавшая исключение.</param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationException.EntityValidationErrors">
      <summary>Получает ошибки проверки, связанные с сущностью.</summary>
      <returns>Ошибки проверки, связанные с сущностью.</returns>
    </member>
    <member name="T:System.Data.Entity.Validation.DbEntityValidationResult">
      <summary>Представляет результаты проверки для одной сущности.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbEntityValidationResult.#ctor(System.Data.Entity.Infrastructure.DbEntityEntry,System.Collections.Generic.IEnumerable{System.Data.Entity.Validation.DbValidationError})">
      <summary>Создает экземпляр класса <see cref="T:System.Data.Entity.Validation.DbEntityValidationResult" />.</summary>
      <param name="entry">Запись сущности, к которой применяются результаты.Не может иметь значение NULL.</param>
      <param name="validationErrors">Список экземпляров класса <see cref="T:System.Data.Entity.Validation.DbValidationError" />.Не может иметь значение NULL.Может быть пустым, что обозначает, что сущность является допустимой.</param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.Entry">
      <summary>Возвращает экземпляр класса <see cref="T:System.Data.Entity.Infrastructure.DbEntityEntry" />, к которому применяются результаты.</summary>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.IsValid">
      <summary>Возвращает значение, указывающее, допустима ли сущность.</summary>
    </member>
    <member name="P:System.Data.Entity.Validation.DbEntityValidationResult.ValidationErrors">
      <summary>Возвращает ошибки проверки.Не может иметь значение NULL.</summary>
    </member>
    <member name="T:System.Data.Entity.Validation.DbUnexpectedValidationException">
      <summary>Исключение, вызываемое в <see cref="M:System.Data.Entity.DbContext.GetValidationErrors" />, когда возникает исключение в коде проверки.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor">
      <summary>Инициализирует новый экземпляр класса DbUnexpectedValidationException.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>Инициализирует новый экземпляр класса DbUnexpectedValidationException с указанными сведениями о сериализации и контекстом.</summary>
      <param name="info">Данные сериализации.</param>
      <param name="context">Контекст потоковой передачи.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.String)">
      <summary>Инициализирует новый экземпляр класса DbUnexpectedValidationException.</summary>
      <param name="message">Сообщение об исключении.</param>
    </member>
    <member name="M:System.Data.Entity.Validation.DbUnexpectedValidationException.#ctor(System.String,System.Exception)">
      <summary>Инициализирует новый экземпляр класса DbUnexpectedValidationException.</summary>
      <param name="message">Сообщение об исключении.</param>
      <param name="innerException">Внутреннее исключение.</param>
    </member>
    <member name="T:System.Data.Entity.Validation.DbValidationError">
      <summary>Ошибка проверки.Ошибка проверки может быть на уровне сущности или на уровне свойства.</summary>
    </member>
    <member name="M:System.Data.Entity.Validation.DbValidationError.#ctor(System.String,System.String)">
      <summary>Создает экземпляр класса <see cref="T:System.Data.Entity.Validation.DbValidationError" />.</summary>
      <param name="propertyName">Имя недопустимого свойства.Может принимать значение NULL.</param>
      <param name="errorMessage">Сообщение об ошибке проверки.Может принимать значение NULL.</param>
    </member>
    <member name="P:System.Data.Entity.Validation.DbValidationError.ErrorMessage">
      <summary>Возвращает сообщение об ошибке проверки.</summary>
    </member>
    <member name="P:System.Data.Entity.Validation.DbValidationError.PropertyName">
      <summary>Возвращает имя недопустимого свойства.</summary>
    </member>
  </members>
</doc>